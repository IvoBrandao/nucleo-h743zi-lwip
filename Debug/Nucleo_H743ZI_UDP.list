
Nucleo_H743ZI_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018464  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022e8  08018704  08018704  00028704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a9ec  0801a9ec  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801a9ec  0801a9ec  0002a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a9f4  0801a9f4  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a9f4  0801a9f4  0002a9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9f8  0801a9f8  0002a9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  0801a9fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d9b4  24000090  0801aa8c  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2400da44  0801aa8c  0003da44  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  0801aa8c  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00050867  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000886d  00000000  00000000  00080925  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002438  00000000  00000000  00089198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000021c0  00000000  00000000  0008b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0004709c  00000000  00000000  0008d790  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000337b0  00000000  00000000  000d482c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00181c1e  00000000  00000000  00107fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00289bfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009960  00000000  00000000  00289c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080186ec 	.word	0x080186ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	080186ec 	.word	0x080186ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetIdleTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetIdleTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	240000ac 	.word	0x240000ac
 80006c0:	24000100 	.word	0x24000100

080006c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80006d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <vApplicationGetTimerTaskMemory+0x30>)
 80006da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24001100 	.word	0x24001100
 80006f4:	24001154 	.word	0x24001154

080006f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b09c      	sub	sp, #112	; 0x70
 80006fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartupTask */
  osThreadDef(StartupTask, Task_Startup, osPriorityNormal, 0, 2048);
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_FREERTOS_Init+0xa4>)
 8000700:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartupTaskHandle = osThreadCreate(osThread(StartupTask), NULL);
 8000712:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00a fc32 	bl	800af82 <osThreadCreate>
 800071e:	4602      	mov	r2, r0
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_FREERTOS_Init+0xa8>)
 8000722:	601a      	str	r2, [r3, #0]

  /* definition and creation of HeartBeat_Task */
  osThreadDef(HeartBeat_Task, Task_HeartBeat, osPriorityNormal, 0, 2048);
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_FREERTOS_Init+0xac>)
 8000726:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800072a:	461d      	mov	r5, r3
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HeartBeat_TaskHandle = osThreadCreate(osThread(HeartBeat_Task), NULL);
 8000738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00a fc1f 	bl	800af82 <osThreadCreate>
 8000744:	4602      	mov	r2, r0
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_FREERTOS_Init+0xb0>)
 8000748:	601a      	str	r2, [r3, #0]

  /* definition and creation of UdpServer_Task */
  osThreadDef(UdpServer_Task, Task_UdpServer, osPriorityBelowNormal, 0, 2048);
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_FREERTOS_Init+0xb4>)
 800074c:	f107 041c 	add.w	r4, r7, #28
 8000750:	461d      	mov	r5, r3
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000756:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800075a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UdpServer_TaskHandle = osThreadCreate(osThread(UdpServer_Task), NULL);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f00a fc0c 	bl	800af82 <osThreadCreate>
 800076a:	4602      	mov	r2, r0
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_FREERTOS_Init+0xb8>)
 800076e:	601a      	str	r2, [r3, #0]

  /* definition and creation of DHCP_Task */
  osThreadDef(DHCP_Task, TASK_DHCP, osPriorityNormal, 0, 1024);
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_FREERTOS_Init+0xbc>)
 8000772:	463c      	mov	r4, r7
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DHCP_TaskHandle = osThreadCreate(osThread(DHCP_Task), NULL);
 8000782:	463b      	mov	r3, r7
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00a fbfb 	bl	800af82 <osThreadCreate>
 800078c:	4602      	mov	r2, r0
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_FREERTOS_Init+0xc0>)
 8000790:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	; 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bdb0      	pop	{r4, r5, r7, pc}
 800079a:	bf00      	nop
 800079c:	08018710 	.word	0x08018710
 80007a0:	2400a54c 	.word	0x2400a54c
 80007a4:	0801873c 	.word	0x0801873c
 80007a8:	2400a554 	.word	0x2400a554
 80007ac:	08018768 	.word	0x08018768
 80007b0:	2400a558 	.word	0x2400a558
 80007b4:	08018790 	.word	0x08018790
 80007b8:	2400a548 	.word	0x2400a548

080007bc <Task_Startup>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Task_Startup */
void Task_Startup(void const * argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007c4:	f009 fdf2 	bl	800a3ac <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {

	  // Terminate the current thread
 	osThreadTerminate(NULL);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f00a fc26 	bl	800b01a <osThreadTerminate>
 80007ce:	e7fb      	b.n	80007c8 <Task_Startup+0xc>

080007d0 <Task_HeartBeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_HeartBeat */
void Task_HeartBeat(void const * argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_HeartBeat */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <Task_HeartBeat+0x1c>)
 80007de:	f003 f99d 	bl	8003b1c <HAL_GPIO_TogglePin>
    osDelay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f00a fc25 	bl	800b032 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007e8:	e7f6      	b.n	80007d8 <Task_HeartBeat+0x8>
 80007ea:	bf00      	nop
 80007ec:	58020400 	.word	0x58020400

080007f0 <Task_UdpServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_UdpServer */
void Task_UdpServer(void const * argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_UdpServer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f00a fc19 	bl	800b032 <osDelay>
 8000800:	e7fa      	b.n	80007f8 <Task_UdpServer+0x8>

08000802 <TASK_DHCP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_DHCP */
void TASK_DHCP(void const * argument)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_DHCP */

	  struct netif *netif = (struct netif *) argument;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	617b      	str	r3, [r7, #20]
	    break;
	    default: break;
	    }
#endif
	    /* wait 500 ms */
	    osDelay(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000812:	f00a fc0e 	bl	800b032 <osDelay>
 8000816:	e7fa      	b.n	800080e <TASK_DHCP+0xc>

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x154>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <MX_GPIO_Init+0x154>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x154>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x154>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <MX_GPIO_Init+0x154>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x154>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x154>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x154>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x154>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x154>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x154>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x154>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ea:	f003 f8e3 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008f4:	f003 f8de 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x160>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x164>)
 800090e:	f002 fe21 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000912:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x158>)
 800092c:	f002 fe12 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000948:	f002 fe04 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000960:	f002 fdf8 	bl	8003554 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58021800 	.word	0x58021800
 8000978:	11110000 	.word	0x11110000
 800097c:	58020800 	.word	0x58020800

08000980 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000984:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000988:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <SCB_EnableICache+0x3c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000994:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000998:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <SCB_EnableICache+0x3c>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <SCB_EnableICache+0x3c>)
 80009a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <SCB_EnableDCache+0x7c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <SCB_EnableDCache+0x7c>)
 80009d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009d8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	0b5b      	lsrs	r3, r3, #13
 80009de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009e2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ec:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	015a      	lsls	r2, r3, #5
 80009f2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009f6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009fc:	490f      	ldr	r1, [pc, #60]	; (8000a3c <SCB_EnableDCache+0x7c>)
 80009fe:	4313      	orrs	r3, r2
 8000a00:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1ef      	bne.n	80009ee <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	60fa      	str	r2, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1e5      	bne.n	80009e4 <SCB_EnableDCache+0x24>
 8000a18:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <SCB_EnableDCache+0x7c>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <SCB_EnableDCache+0x7c>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	6153      	str	r3, [r2, #20]
 8000a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a2c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a44:	f000 f8c2 	bl	8000bcc <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a48:	f7ff ff9a 	bl	8000980 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a4c:	f7ff ffb8 	bl	80009c0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 fce6 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f80a 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f7ff fede 	bl	8000818 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a5c:	f000 fac0 	bl	8000fe0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000a60:	f7ff fe4a 	bl	80006f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a64:	f00a fa76 	bl	800af54 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x28>
	...

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0cc      	sub	sp, #304	; 0x130
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a76:	224c      	movs	r2, #76	; 0x4c
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f016 ff4a 	bl	8017914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a84:	2220      	movs	r2, #32
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f016 ff43 	bl	8017914 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4618      	mov	r0, r3
 8000a94:	23bc      	movs	r3, #188	; 0xbc
 8000a96:	461a      	mov	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	f016 ff3b 	bl	8017914 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f003 f866 	bl	8003b70 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <SystemClock_Config+0x158>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <SystemClock_Config+0x158>)
 8000ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <SystemClock_Config+0x158>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <SystemClock_Config+0x15c>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <SystemClock_Config+0x15c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <SystemClock_Config+0x15c>)
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	f003 0201 	and.w	r2, r3, #1
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ade:	bf00      	nop
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <SystemClock_Config+0x158>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aec:	d1f8      	bne.n	8000ae0 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	2302      	movs	r3, #2
 8000b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b0e:	2378      	movs	r3, #120	; 0x78
 8000b10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b26:	230c      	movs	r3, #12
 8000b28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 f85d 	bl	8003bfc <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000b48:	f000 f89c 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	233f      	movs	r3, #63	; 0x3f
 8000b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2303      	movs	r3, #3
 8000b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b64:	2340      	movs	r3, #64	; 0x40
 8000b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b78:	2340      	movs	r3, #64	; 0x40
 8000b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b82:	2104      	movs	r1, #4
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fd37 	bl	80045f8 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000b90:	f000 f878 	bl	8000c84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2202      	movs	r2, #2
 8000b9a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 faa5 	bl	80050f8 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000bb4:	f000 f866 	bl	8000c84 <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58024800 	.word	0x58024800
 8000bc8:	58000400 	.word	0x58000400

08000bcc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bde:	f000 fdb7 	bl	8001750 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MPU_Config+0x8c>)
 8000bec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fdd1 	bl	80017b8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MPU_Config+0x90>)
 8000c20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c22:	230d      	movs	r3, #13
 8000c24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c42:	463b      	mov	r3, r7
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fdb7 	bl	80017b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c4a:	2004      	movs	r0, #4
 8000c4c:	f000 fd96 	bl	800177c <HAL_MPU_Enable>

}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	30040000 	.word	0x30040000
 8000c5c:	30044000 	.word	0x30044000

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 fc11 	bl	8001498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010000 	.word	0x40010000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x38>)
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x38>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x38>)
 8000cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f06f 0001 	mvn.w	r0, #1
 8000cd4:	f000 fcfa 	bl	80016cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	2019      	movs	r0, #25
 8000cfa:	f000 fce7 	bl	80016cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 fd0e 	bl	8001720 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <HAL_InitTick+0xa8>)
 8000d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d0a:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <HAL_InitTick+0xa8>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <HAL_InitTick+0xa8>)
 8000d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d22:	f107 020c 	add.w	r2, r7, #12
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 f9a1 	bl	8005074 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d32:	f004 f989 	bl	8005048 <HAL_RCC_GetPCLK2Freq>
 8000d36:	4603      	mov	r3, r0
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_InitTick+0xac>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0c9b      	lsrs	r3, r3, #18
 8000d46:	3b01      	subs	r3, #1
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d4c:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <HAL_InitTick+0xb4>)
 8000d4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d6a:	480a      	ldr	r0, [pc, #40]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d6c:	f006 f83a 	bl	8006de4 <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d104      	bne.n	8000d80 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <HAL_InitTick+0xb0>)
 8000d78:	f006 f90a 	bl	8006f90 <HAL_TIM_Base_Start_IT>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	e000      	b.n	8000d82 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	2400a55c 	.word	0x2400a55c
 8000d98:	40010000 	.word	0x40010000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM1_UP_IRQHandler+0x10>)
 8000dd6:	f006 f96b 	bl	80070b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2400a55c 	.word	0x2400a55c

08000de4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e00a      	b.n	8000e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df6:	f3af 8000 	nop.w
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	b2ca      	uxtb	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf0      	blt.n	8000df6 <_read+0x12>
	}

return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e009      	b.n	8000e44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbf1      	blt.n	8000e30 <_write+0x12>
	}
	return len;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_close>:

int _close(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_isatty>:

int _isatty(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	return 1;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x50>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x16>
		heap_end = &end;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <_sbrk+0x50>)
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <_sbrk+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <_sbrk+0x50>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <_sbrk+0x50>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	466a      	mov	r2, sp
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d905      	bls.n	8000ef6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <_sbrk+0x58>)
 8000eec:	220c      	movs	r2, #12
 8000eee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	e006      	b.n	8000f04 <_sbrk+0x44>
	}

	heap_end += incr;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <_sbrk+0x50>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <_sbrk+0x50>)
 8000f00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	24002154 	.word	0x24002154
 8000f14:	2400da48 	.word	0x2400da48
 8000f18:	2400da3c 	.word	0x2400da3c

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <SystemInit+0xac>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <SystemInit+0xac>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <SystemInit+0xb0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <SystemInit+0xb0>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <SystemInit+0xb0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f42:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <SystemInit+0xb0>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4921      	ldr	r1, [pc, #132]	; (8000fcc <SystemInit+0xb0>)
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <SystemInit+0xb4>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <SystemInit+0xb0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <SystemInit+0xb0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <SystemInit+0xb0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <SystemInit+0xb0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <SystemInit+0xb0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <SystemInit+0xb0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <SystemInit+0xb0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <SystemInit+0xb0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <SystemInit+0xb0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <SystemInit+0xb0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <SystemInit+0xb0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <SystemInit+0xb0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <SystemInit+0xb0>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <SystemInit+0xb0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <SystemInit+0xb8>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <SystemInit+0xbc>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fae:	d202      	bcs.n	8000fb6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <SystemInit+0xc0>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SystemInit+0xac>)
 8000fb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fbc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fd4:	5c001000 	.word	0x5c001000
 8000fd8:	ffff0000 	.word	0xffff0000
 8000fdc:	51008108 	.word	0x51008108

08000fe0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000fe6:	4a23      	ldr	r2, [pc, #140]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800102a:	f006 fa41 	bl	80074b0 <HAL_UART_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001034:	f7ff fe26 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800103c:	f009 f81a 	bl	800a074 <HAL_UARTEx_SetTxFifoThreshold>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001046:	f7ff fe1d 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104a:	2100      	movs	r1, #0
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800104e:	f009 f8ab 	bl	800a1a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001058:	f7ff fe14 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800105e:	f008 ff93 	bl	8009f88 <HAL_UARTEx_DisableFifoMode>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001068:	f7ff fe0c 	bl	8000c84 <Error_Handler>
  }

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2400a59c 	.word	0x2400a59c
 8001074:	40004800 	.word	0x40004800

08001078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <HAL_UART_MspInit+0x88>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12e      	bne.n	80010f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_UART_MspInit+0x8c>)
 800109c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <HAL_UART_MspInit+0x8c>)
 80010a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_UART_MspInit+0x8c>)
 80010ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_UART_MspInit+0x8c>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <HAL_UART_MspInit+0x8c>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_UART_MspInit+0x8c>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e8:	2307      	movs	r3, #7
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_UART_MspInit+0x90>)
 80010f4:	f002 fa2e 	bl	8003554 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40004800 	.word	0x40004800
 8001104:	58024400 	.word	0x58024400
 8001108:	58020c00 	.word	0x58020c00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001110:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001112:	e003      	b.n	800111c <LoopCopyDataInit>

08001114 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001116:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001118:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800111a:	3104      	adds	r1, #4

0800111c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001120:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001124:	d3f6      	bcc.n	8001114 <CopyDataInit>
  ldr  r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001128:	e002      	b.n	8001130 <LoopFillZerobss>

0800112a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800112a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800112c:	f842 3b04 	str.w	r3, [r2], #4

08001130 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001132:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001134:	d3f9      	bcc.n	800112a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001136:	f7ff fef1 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f016 fbad 	bl	8017898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fc7f 	bl	8000a40 <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001148:	0801a9fc 	.word	0x0801a9fc
  ldr  r0, =_sdata
 800114c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001150:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 8001154:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 8001158:	2400da44 	.word	0x2400da44

0800115c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC3_IRQHandler>

0800115e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <LAN8742_RegisterBusIO+0x28>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <LAN8742_RegisterBusIO+0x28>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <LAN8742_RegisterBusIO+0x28>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e014      	b.n	80011b6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d17c      	bne.n	80012dc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2220      	movs	r2, #32
 80011f4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e01c      	b.n	8001236 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	2112      	movs	r1, #18
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	4798      	blx	r3
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	da03      	bge.n	8001218 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001210:	f06f 0304 	mvn.w	r3, #4
 8001214:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001216:	e00b      	b.n	8001230 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	d105      	bne.n	8001230 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
         break;
 800122e:	e005      	b.n	800123c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b1f      	cmp	r3, #31
 800123a:	d9df      	bls.n	80011fc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b1f      	cmp	r3, #31
 8001242:	d902      	bls.n	800124a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001244:	f06f 0302 	mvn.w	r3, #2
 8001248:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d145      	bne.n	80012dc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6810      	ldr	r0, [r2, #0]
 8001258:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800125c:	2100      	movs	r1, #0
 800125e:	4798      	blx	r3
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	db37      	blt.n	80012d6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6810      	ldr	r0, [r2, #0]
 800126e:	f107 0208 	add.w	r2, r7, #8
 8001272:	2100      	movs	r1, #0
 8001274:	4798      	blx	r3
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	db28      	blt.n	80012ce <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4798      	blx	r3
 8001282:	4603      	mov	r3, r0
 8001284:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001286:	e01c      	b.n	80012c2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4798      	blx	r3
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800129a:	d80e      	bhi.n	80012ba <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6810      	ldr	r0, [r2, #0]
 80012a4:	f107 0208 	add.w	r2, r7, #8
 80012a8:	2100      	movs	r1, #0
 80012aa:	4798      	blx	r3
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da07      	bge.n	80012c2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80012b2:	f06f 0304 	mvn.w	r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
                 break;
 80012b8:	e010      	b.n	80012dc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80012ba:	f06f 0301 	mvn.w	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
               break;
 80012c0:	e00c      	b.n	80012dc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1dd      	bne.n	8001288 <LAN8742_Init+0xc6>
 80012cc:	e006      	b.n	80012dc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80012ce:	f06f 0304 	mvn.w	r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e002      	b.n	80012dc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80012d6:	f06f 0303 	mvn.w	r3, #3
 80012da:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d112      	bne.n	8001308 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4798      	blx	r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80012ec:	bf00      	nop
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4798      	blx	r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001300:	d9f5      	bls.n	80012ee <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001308:	693b      	ldr	r3, [r7, #16]
 }
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6810      	ldr	r0, [r2, #0]
 8001326:	f107 020c 	add.w	r2, r7, #12
 800132a:	2101      	movs	r1, #1
 800132c:	4798      	blx	r3
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	da02      	bge.n	800133a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001334:	f06f 0304 	mvn.w	r3, #4
 8001338:	e06e      	b.n	8001418 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6810      	ldr	r0, [r2, #0]
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	2101      	movs	r1, #1
 8001348:	4798      	blx	r3
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	da02      	bge.n	8001356 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001350:	f06f 0304 	mvn.w	r3, #4
 8001354:	e060      	b.n	8001418 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001360:	2301      	movs	r3, #1
 8001362:	e059      	b.n	8001418 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6810      	ldr	r0, [r2, #0]
 800136c:	f107 020c 	add.w	r2, r7, #12
 8001370:	2100      	movs	r1, #0
 8001372:	4798      	blx	r3
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	da02      	bge.n	8001380 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800137a:	f06f 0304 	mvn.w	r3, #4
 800137e:	e04b      	b.n	8001418 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d11b      	bne.n	80013c2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <LAN8742_GetLinkState+0x90>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800139e:	2302      	movs	r3, #2
 80013a0:	e03a      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e033      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013ba:	2304      	movs	r3, #4
 80013bc:	e02c      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013be:	2305      	movs	r3, #5
 80013c0:	e02a      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6810      	ldr	r0, [r2, #0]
 80013ca:	f107 020c 	add.w	r2, r7, #12
 80013ce:	211f      	movs	r1, #31
 80013d0:	4798      	blx	r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da02      	bge.n	80013de <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80013d8:	f06f 0304 	mvn.w	r3, #4
 80013dc:	e01c      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80013e8:	2306      	movs	r3, #6
 80013ea:	e015      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 031c 	and.w	r3, r3, #28
 80013f2:	2b18      	cmp	r3, #24
 80013f4:	d101      	bne.n	80013fa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013f6:	2302      	movs	r3, #2
 80013f8:	e00e      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f003 031c 	and.w	r3, r3, #28
 8001400:	2b08      	cmp	r3, #8
 8001402:	d101      	bne.n	8001408 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001404:	2303      	movs	r3, #3
 8001406:	e007      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 031c 	and.w	r3, r3, #28
 800140e:	2b14      	cmp	r3, #20
 8001410:	d101      	bne.n	8001416 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001412:	2304      	movs	r3, #4
 8001414:	e000      	b.n	8001418 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001416:	2305      	movs	r3, #5
    }				
  }
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001426:	2003      	movs	r0, #3
 8001428:	f000 f930 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800142c:	f003 fc54 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8001430:	4601      	mov	r1, r0
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_Init+0x68>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	4a13      	ldr	r2, [pc, #76]	; (800148c <HAL_Init+0x6c>)
 800143e:	5cd3      	ldrb	r3, [r2, r3]
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	fa21 f303 	lsr.w	r3, r1, r3
 8001448:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_Init+0x68>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_Init+0x6c>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_Init+0x70>)
 8001462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_Init+0x74>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fc3a 	bl	8000ce4 <HAL_InitTick>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e002      	b.n	8001480 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff fc15 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400
 800148c:	0801a7fc 	.word	0x0801a7fc
 8001490:	24000004 	.word	0x24000004
 8001494:	24000000 	.word	0x24000000

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2400000c 	.word	0x2400000c
 80014bc:	2400a628 	.word	0x2400a628

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2400a628 	.word	0x2400a628

080014d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetREVID+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0c1b      	lsrs	r3, r3, #16
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	5c001000 	.word	0x5c001000

080014f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001504:	d004      	beq.n	8001510 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8001506:	f240 215b 	movw	r1, #603	; 0x25b
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 800150c:	f7ff fbc1 	bl	8000c92 <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001518:	4904      	ldr	r1, [pc, #16]	; (800152c <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	080187ac 	.word	0x080187ac
 800152c:	58000400 	.word	0x58000400

08001530 <__NVIC_SetPriorityGrouping>:
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <__NVIC_SetPriorityGrouping+0x40>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	4313      	orrs	r3, r2
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x40>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	05fa0000 	.word	0x05fa0000

08001578 <__NVIC_GetPriorityGrouping>:
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b07      	cmp	r3, #7
 8001698:	d00f      	beq.n	80016ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b06      	cmp	r3, #6
 800169e:	d00c      	beq.n	80016ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d009      	beq.n	80016ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d006      	beq.n	80016ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d003      	beq.n	80016ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016b2:	2192      	movs	r1, #146	; 0x92
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80016b6:	f7ff faec 	bl	8000c92 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff38 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	080187e0 	.word	0x080187e0

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d903      	bls.n	80016e8 <HAL_NVIC_SetPriority+0x1c>
 80016e0:	21aa      	movs	r1, #170	; 0xaa
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <HAL_NVIC_SetPriority+0x50>)
 80016e4:	f7ff fad5 	bl	8000c92 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	d903      	bls.n	80016f6 <HAL_NVIC_SetPriority+0x2a>
 80016ee:	21ab      	movs	r1, #171	; 0xab
 80016f0:	480a      	ldr	r0, [pc, #40]	; (800171c <HAL_NVIC_SetPriority+0x50>)
 80016f2:	f7ff face 	bl	8000c92 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f6:	f7ff ff3f 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	6978      	ldr	r0, [r7, #20]
 8001702:	f7ff ff8f 	bl	8001624 <NVIC_EncodePriority>
 8001706:	4602      	mov	r2, r0
 8001708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff5e 	bl	80015d0 <__NVIC_SetPriority>
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	080187e0 	.word	0x080187e0

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	2b00      	cmp	r3, #0
 8001730:	da03      	bge.n	800173a <HAL_NVIC_EnableIRQ+0x1a>
 8001732:	21be      	movs	r1, #190	; 0xbe
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_NVIC_EnableIRQ+0x2c>)
 8001736:	f7ff faac 	bl	8000c92 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff28 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	080187e0 	.word	0x080187e0

08001750 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001754:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MPU_Disable+0x24>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <HAL_MPU_Disable+0x24>)
 800175e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001762:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_MPU_Disable+0x28>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	e000ed90 	.word	0xe000ed90

0800177c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_MPU_Enable+0x34>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MPU_Enable+0x38>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MPU_Enable+0x38>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800179a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800179e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed90 	.word	0xe000ed90
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d040      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	785b      	ldrb	r3, [r3, #1]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d03c      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d038      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d034      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d030      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d02c      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d028      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	2b07      	cmp	r3, #7
 80017fe:	d024      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d020      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	2b09      	cmp	r3, #9
 800180e:	d01c      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	2b0a      	cmp	r3, #10
 8001816:	d018      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	2b0b      	cmp	r3, #11
 800181e:	d014      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	2b0c      	cmp	r3, #12
 8001826:	d010      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2b0d      	cmp	r3, #13
 800182e:	d00c      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	2b0e      	cmp	r3, #14
 8001836:	d008      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d004      	beq.n	800184a <HAL_MPU_ConfigRegion+0x92>
 8001840:	f240 112d 	movw	r1, #301	; 0x12d
 8001844:	4896      	ldr	r0, [pc, #600]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 8001846:	f7ff fa24 	bl	8000c92 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d008      	beq.n	8001864 <HAL_MPU_ConfigRegion+0xac>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_MPU_ConfigRegion+0xac>
 800185a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800185e:	4890      	ldr	r0, [pc, #576]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 8001860:	f7ff fa17 	bl	8000c92 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785a      	ldrb	r2, [r3, #1]
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_MPU_ConfigRegion+0x2ec>)
 800186a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 810a 	beq.w	8001a8a <HAL_MPU_ConfigRegion+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7b1b      	ldrb	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_MPU_ConfigRegion+0xd8>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7b1b      	ldrb	r3, [r3, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d004      	beq.n	8001890 <HAL_MPU_ConfigRegion+0xd8>
 8001886:	f44f 719b 	mov.w	r1, #310	; 0x136
 800188a:	4885      	ldr	r0, [pc, #532]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 800188c:	f7ff fa01 	bl	8000c92 <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7adb      	ldrb	r3, [r3, #11]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d018      	beq.n	80018ca <HAL_MPU_ConfigRegion+0x112>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7adb      	ldrb	r3, [r3, #11]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d014      	beq.n	80018ca <HAL_MPU_ConfigRegion+0x112>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7adb      	ldrb	r3, [r3, #11]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d010      	beq.n	80018ca <HAL_MPU_ConfigRegion+0x112>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7adb      	ldrb	r3, [r3, #11]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d00c      	beq.n	80018ca <HAL_MPU_ConfigRegion+0x112>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7adb      	ldrb	r3, [r3, #11]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d008      	beq.n	80018ca <HAL_MPU_ConfigRegion+0x112>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7adb      	ldrb	r3, [r3, #11]
 80018bc:	2b06      	cmp	r3, #6
 80018be:	d004      	beq.n	80018ca <HAL_MPU_ConfigRegion+0x112>
 80018c0:	f240 1137 	movw	r1, #311	; 0x137
 80018c4:	4876      	ldr	r0, [pc, #472]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 80018c6:	f7ff f9e4 	bl	8000c92 <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7a9b      	ldrb	r3, [r3, #10]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00c      	beq.n	80018ec <HAL_MPU_ConfigRegion+0x134>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7a9b      	ldrb	r3, [r3, #10]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d008      	beq.n	80018ec <HAL_MPU_ConfigRegion+0x134>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7a9b      	ldrb	r3, [r3, #10]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d004      	beq.n	80018ec <HAL_MPU_ConfigRegion+0x134>
 80018e2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80018e6:	486e      	ldr	r0, [pc, #440]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 80018e8:	f7ff f9d3 	bl	8000c92 <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7b5b      	ldrb	r3, [r3, #13]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d008      	beq.n	8001906 <HAL_MPU_ConfigRegion+0x14e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7b5b      	ldrb	r3, [r3, #13]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_MPU_ConfigRegion+0x14e>
 80018fc:	f240 1139 	movw	r1, #313	; 0x139
 8001900:	4867      	ldr	r0, [pc, #412]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 8001902:	f7ff f9c6 	bl	8000c92 <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7b9b      	ldrb	r3, [r3, #14]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d008      	beq.n	8001920 <HAL_MPU_ConfigRegion+0x168>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7b9b      	ldrb	r3, [r3, #14]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_MPU_ConfigRegion+0x168>
 8001916:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800191a:	4861      	ldr	r0, [pc, #388]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 800191c:	f7ff f9b9 	bl	8000c92 <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7bdb      	ldrb	r3, [r3, #15]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d008      	beq.n	800193a <HAL_MPU_ConfigRegion+0x182>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7bdb      	ldrb	r3, [r3, #15]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_MPU_ConfigRegion+0x182>
 8001930:	f240 113b 	movw	r1, #315	; 0x13b
 8001934:	485a      	ldr	r0, [pc, #360]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 8001936:	f7ff f9ac 	bl	8000c92 <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7a5b      	ldrb	r3, [r3, #9]
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d104      	bne.n	800194c <HAL_MPU_ConfigRegion+0x194>
 8001942:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8001946:	4856      	ldr	r0, [pc, #344]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 8001948:	f7ff f9a3 	bl	8000c92 <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7a1b      	ldrb	r3, [r3, #8]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d070      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7a1b      	ldrb	r3, [r3, #8]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d06c      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7a1b      	ldrb	r3, [r3, #8]
 8001960:	2b06      	cmp	r3, #6
 8001962:	d068      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7a1b      	ldrb	r3, [r3, #8]
 8001968:	2b07      	cmp	r3, #7
 800196a:	d064      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7a1b      	ldrb	r3, [r3, #8]
 8001970:	2b08      	cmp	r3, #8
 8001972:	d060      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7a1b      	ldrb	r3, [r3, #8]
 8001978:	2b09      	cmp	r3, #9
 800197a:	d05c      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7a1b      	ldrb	r3, [r3, #8]
 8001980:	2b0a      	cmp	r3, #10
 8001982:	d058      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7a1b      	ldrb	r3, [r3, #8]
 8001988:	2b0b      	cmp	r3, #11
 800198a:	d054      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7a1b      	ldrb	r3, [r3, #8]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	d050      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7a1b      	ldrb	r3, [r3, #8]
 8001998:	2b0d      	cmp	r3, #13
 800199a:	d04c      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7a1b      	ldrb	r3, [r3, #8]
 80019a0:	2b0e      	cmp	r3, #14
 80019a2:	d048      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7a1b      	ldrb	r3, [r3, #8]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d044      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7a1b      	ldrb	r3, [r3, #8]
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d040      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7a1b      	ldrb	r3, [r3, #8]
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d03c      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7a1b      	ldrb	r3, [r3, #8]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d038      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7a1b      	ldrb	r3, [r3, #8]
 80019c8:	2b13      	cmp	r3, #19
 80019ca:	d034      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7a1b      	ldrb	r3, [r3, #8]
 80019d0:	2b14      	cmp	r3, #20
 80019d2:	d030      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7a1b      	ldrb	r3, [r3, #8]
 80019d8:	2b15      	cmp	r3, #21
 80019da:	d02c      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7a1b      	ldrb	r3, [r3, #8]
 80019e0:	2b16      	cmp	r3, #22
 80019e2:	d028      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7a1b      	ldrb	r3, [r3, #8]
 80019e8:	2b17      	cmp	r3, #23
 80019ea:	d024      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7a1b      	ldrb	r3, [r3, #8]
 80019f0:	2b18      	cmp	r3, #24
 80019f2:	d020      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7a1b      	ldrb	r3, [r3, #8]
 80019f8:	2b19      	cmp	r3, #25
 80019fa:	d01c      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a1b      	ldrb	r3, [r3, #8]
 8001a00:	2b1a      	cmp	r3, #26
 8001a02:	d018      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7a1b      	ldrb	r3, [r3, #8]
 8001a08:	2b1b      	cmp	r3, #27
 8001a0a:	d014      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7a1b      	ldrb	r3, [r3, #8]
 8001a10:	2b1c      	cmp	r3, #28
 8001a12:	d010      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a1b      	ldrb	r3, [r3, #8]
 8001a18:	2b1d      	cmp	r3, #29
 8001a1a:	d00c      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7a1b      	ldrb	r3, [r3, #8]
 8001a20:	2b1e      	cmp	r3, #30
 8001a22:	d008      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a1b      	ldrb	r3, [r3, #8]
 8001a28:	2b1f      	cmp	r3, #31
 8001a2a:	d004      	beq.n	8001a36 <HAL_MPU_ConfigRegion+0x27e>
 8001a2c:	f240 113d 	movw	r1, #317	; 0x13d
 8001a30:	481b      	ldr	r0, [pc, #108]	; (8001aa0 <HAL_MPU_ConfigRegion+0x2e8>)
 8001a32:	f7ff f92e 	bl	8000c92 <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 8001a36:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <HAL_MPU_ConfigRegion+0x2ec>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7b1b      	ldrb	r3, [r3, #12]
 8001a42:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7adb      	ldrb	r3, [r3, #11]
 8001a48:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a4a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7a9b      	ldrb	r3, [r3, #10]
 8001a50:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a52:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7b5b      	ldrb	r3, [r3, #13]
 8001a58:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a5a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7b9b      	ldrb	r3, [r3, #14]
 8001a60:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a62:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7bdb      	ldrb	r3, [r3, #15]
 8001a68:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a6a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7a5b      	ldrb	r3, [r3, #9]
 8001a70:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a72:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7a1b      	ldrb	r3, [r3, #8]
 8001a78:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a7a:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_MPU_ConfigRegion+0x2ec>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a84:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a86:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a88:	e005      	b.n	8001a96 <HAL_MPU_ConfigRegion+0x2de>
    MPU->RBAR = 0x00;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_MPU_ConfigRegion+0x2ec>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_MPU_ConfigRegion+0x2ec>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	080187e0 	.word	0x080187e0
 8001aa4:	e000ed90 	.word	0xe000ed90

08001aa8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0c6      	b.n	8001c48 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f008 fdfa 	bl	800a6bc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2223      	movs	r2, #35	; 0x23
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_ETH_Init+0x1a8>)
 8001ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HAL_ETH_Init+0x1a8>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_ETH_Init+0x1a8>)
 8001ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7a1b      	ldrb	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fcfb 	bl	80014f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001afa:	e003      	b.n	8001b04 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001afc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b00:	f7ff fcf6 	bl	80014f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1c:	f7ff fcd0 	bl	80014c0 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b22:	e00f      	b.n	8001b44 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001b24:	f7ff fccc 	bl	80014c0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b32:	d907      	bls.n	8001b44 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2204      	movs	r2, #4
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	22e0      	movs	r2, #224	; 0xe0
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e081      	b.n	8001c48 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1e6      	bne.n	8001b24 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f001 f9ac 	bl	8002eb4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b5c:	f003 fa2e 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <HAL_ETH_Init+0x1ac>)
 8001b64:	fba3 2302 	umull	r2, r3, r3, r2
 8001b68:	0c9a      	lsrs	r2, r3, #18
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f001 f8ff 	bl	8002d78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b90:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b94:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	22e0      	movs	r2, #224	; 0xe0
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e04a      	b.n	8001c48 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bba:	4413      	add	r3, r2
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_ETH_Init+0x1b0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6952      	ldr	r2, [r2, #20]
 8001bc6:	0052      	lsls	r2, r2, #1
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	6809      	ldr	r1, [r1, #0]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bd2:	440b      	add	r3, r1
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f001 f9c4 	bl	8002f64 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 fa08 	bl	8002ff2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	3305      	adds	r3, #5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	021a      	lsls	r2, r3, #8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	3303      	adds	r3, #3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	061a      	lsls	r2, r3, #24
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2210      	movs	r2, #16
 8001c44:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	58024400 	.word	0x58024400
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	ffff8001 	.word	0xffff8001

08001c5c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	330a      	adds	r3, #10
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_ETH_DescAssignMemory+0x28>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d904      	bls.n	8001c8e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e021      	b.n	8001cd2 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	330a      	adds	r3, #10
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d17d      	bne.n	8001dfc <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2223      	movs	r2, #35	; 0x23
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e018      	b.n	8001d3e <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d902      	bls.n	8001d2a <HAL_ETH_Start_IT+0x4c>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3b04      	subs	r3, #4
 8001d28:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	330a      	adds	r3, #10
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d9e3      	bls.n	8001d0c <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0202 	orr.w	r2, r2, #2
 8001d58:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6811      	ldr	r1, [r2, #0]
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d96:	440b      	add	r3, r1
 8001d98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001da2:	4413      	add	r3, r2
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6811      	ldr	r1, [r2, #0]
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	f241 1308 	movw	r3, #4360	; 0x1108
 8001db2:	440b      	add	r3, r1
 8001db4:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001dc8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001dcc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2222      	movs	r2, #34	; 0x22
 8001dd8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f241 1334 	movw	r3, #4404	; 0x1134
 8001de2:	4413      	add	r3, r2
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6811      	ldr	r1, [r2, #0]
 8001dea:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001dee:	431a      	orrs	r2, r3
 8001df0:	f241 1334 	movw	r3, #4404	; 0x1134
 8001df4:	440b      	add	r3, r1
 8001df6:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[0];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	60bb      	str	r3, [r7, #8]
  uint32_t index;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d060      	beq.n	8001ee4 <HAL_ETH_Stop_IT+0xd8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2223      	movs	r2, #35	; 0x23
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt     */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMA_NORMAL_IT | ETH_DMA_RX_IT | ETH_DMA_TX_IT));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e30:	4413      	add	r3, r2
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6811      	ldr	r1, [r2, #0]
 8001e38:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <HAL_ETH_Stop_IT+0xe8>)
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e40:	440b      	add	r3, r1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e4c:	4413      	add	r3, r2
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6811      	ldr	r1, [r2, #0]
 8001e54:	f023 0201 	bic.w	r2, r3, #1
 8001e58:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e5c:	440b      	add	r3, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6811      	ldr	r1, [r2, #0]
 8001e70:	f023 0201 	bic.w	r2, r3, #1
 8001e74:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e78:	440b      	add	r3, r1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0202 	bic.w	r2, r2, #2
 8001eae:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e008      	b.n	8001ec8 <HAL_ETH_Stop_IT+0xbc>
    {
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d9f3      	bls.n	8001eb6 <HAL_ETH_Stop_IT+0xaa>
    }

    heth->RxDescList.ItMode = 0U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2210      	movs	r2, #16
 8001ede:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_ETH_Stop_IT+0xda>
  }
  else
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	ffff7fbe 	.word	0xffff7fbe

08001ef8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d107      	bne.n	8001f1a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e076      	b.n	8002008 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d171      	bne.n	8002006 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f22:	2200      	movs	r2, #0
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f001 f8c0 	bl	80030ac <ETH_Prepare_Tx_Descriptors>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e062      	b.n	8002008 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3206      	adds	r2, #6
 8001f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d904      	bls.n	8001f6c <HAL_ETH_Transmit+0x74>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	1f1a      	subs	r2, r3, #4
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	3106      	adds	r1, #6
 8001f78:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001f7c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001f80:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001f82:	f7ff fa9d 	bl	80014c0 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001f88:	e034      	b.n	8001ff4 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d011      	beq.n	8001fc0 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	f043 0208 	orr.w	r2, r3, #8
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	22e0      	movs	r2, #224	; 0xe0
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e023      	b.n	8002008 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d015      	beq.n	8001ff4 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001fc8:	f7ff fa7a 	bl	80014c0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <HAL_ETH_Transmit+0xe6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	f043 0204 	orr.w	r2, r3, #4
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2210      	movs	r2, #16
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e009      	b.n	8002008 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	dbc6      	blt.n	8001f8a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2210      	movs	r2, #16
 8002000:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	332c      	adds	r3, #44	; 0x2c
 800201c:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d06b      	beq.n	800211a <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002042:	2300      	movs	r3, #0
 8002044:	e0bc      	b.n	80021c0 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d036      	beq.n	80020c6 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	3301      	adds	r3, #1
 800205c:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d902      	bls.n	800207a <HAL_ETH_IsRxDataAvailable+0x6a>
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3b04      	subs	r3, #4
 8002078:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db11      	blt.n	80020b0 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2201      	movs	r2, #1
 800209c:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d902      	bls.n	80020b0 <HAL_ETH_IsRxDataAvailable+0xa0>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b04      	subs	r3, #4
 80020ae:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e07c      	b.n	80021c0 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80020d6:	2301      	movs	r3, #1
 80020d8:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d902      	bls.n	80020ec <HAL_ETH_IsRxDataAvailable+0xdc>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b04      	subs	r3, #4
 80020ea:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	e010      	b.n	800211a <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	3301      	adds	r3, #1
 80020fc:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d902      	bls.n	8002110 <HAL_ETH_IsRxDataAvailable+0x100>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b04      	subs	r3, #4
 800210e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db02      	blt.n	8002128 <HAL_ETH_IsRxDataAvailable+0x118>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d98e      	bls.n	8002046 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d044      	beq.n	80021b8 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e036      	b.n	80021b0 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002150:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d902      	bls.n	80021a0 <HAL_ETH_IsRxDataAvailable+0x190>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b04      	subs	r3, #4
 800219e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d3c4      	bcc.n	8002142 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]

  return 0;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3724      	adds	r7, #36	; 0x24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	332c      	adds	r3, #44	; 0x2c
 80021da:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e07d      	b.n	8002300 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff feff 	bl	8002010 <HAL_ETH_IsRxDataAvailable>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e071      	b.n	8002300 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	e031      	b.n	8002296 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	461a      	mov	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	461a      	mov	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800226c:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	3301      	adds	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	2b03      	cmp	r3, #3
 8002278:	d902      	bls.n	8002280 <HAL_ETH_GetRxDataBuffer+0xb4>
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	3b04      	subs	r3, #4
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	3301      	adds	r3, #1
 8002294:	623b      	str	r3, [r7, #32]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	3b01      	subs	r3, #1
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3c7      	bcc.n	8002232 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	461a      	mov	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d803      	bhi.n	80022cc <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	e018      	b.n	80022fe <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	461a      	mov	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	1ad2      	subs	r2, r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	e001      	b.n	80022fe <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	332c      	adds	r3, #44	; 0x2c
 8002316:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fe72 	bl	8002010 <HAL_ETH_IsRxDataAvailable>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e017      	b.n	8002366 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	4413      	add	r3, r2
 800233e:	3b01      	subs	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d902      	bls.n	800234e <HAL_ETH_GetRxDataLength+0x46>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3b04      	subs	r3, #4
 800234c:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002356:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800236e:	b480      	push	{r7}
 8002370:	b089      	sub	sp, #36	; 0x24
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	332c      	adds	r3, #44	; 0x2c
 800237a:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e055      	b.n	800244a <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	e03c      	b.n	800242c <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023c0:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	3b01      	subs	r3, #1
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	429a      	cmp	r2, r3
 8002408:	d20d      	bcs.n	8002426 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d902      	bls.n	800241c <HAL_ETH_BuildRxDescriptors+0xae>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b04      	subs	r3, #4
 800241a:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	3301      	adds	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	d3be      	bcc.n	80023b2 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f241 1328 	movw	r3, #4392	; 0x1128
 800243e:	440b      	add	r3, r1
 8002440:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e03e      	b.n	80024f6 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002480:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	055b      	lsls	r3, r3, #21
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	041b      	lsls	r3, r3, #16
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f043 030c 	orr.w	r3, r3, #12
 80024a4:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80024b8:	f7ff f802 	bl	80014c0 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024be:	e009      	b.n	80024d4 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80024c0:	f7fe fffe 	bl	80014c0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ce:	d901      	bls.n	80024d4 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e010      	b.n	80024f6 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ed      	bne.n	80024c0 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03c      	b.n	800259c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800252a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	055b      	lsls	r3, r3, #21
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f023 030c 	bic.w	r3, r3, #12
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002562:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_ETH_WritePHYRegister+0xa4>)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800256e:	f7fe ffa7 	bl	80014c0 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002574:	e009      	b.n	800258a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002576:	f7fe ffa3 	bl	80014c0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002584:	d901      	bls.n	800258a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e008      	b.n	800259c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ed      	bne.n	8002576 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40028000 	.word	0x40028000

080025a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e1c3      	b.n	8002944 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0e5b      	lsrs	r3, r3, #25
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	b29a      	uxth	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80028d0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80028e0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e00a      	b.n	800297a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	2b10      	cmp	r3, #16
 800296a:	d105      	bne.n	8002978 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f860 	bl	8002a34 <ETH_SetMACConfig>

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002994:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800299c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800299e:	f002 fb0d 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 80029a2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d908      	bls.n	80029be <HAL_ETH_SetMDIOClockRange+0x3a>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d804      	bhi.n	80029be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e027      	b.n	8002a0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d908      	bls.n	80029d8 <HAL_ETH_SetMDIOClockRange+0x54>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d804      	bhi.n	80029d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e01a      	b.n	8002a0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d903      	bls.n	80029e8 <HAL_ETH_SetMDIOClockRange+0x64>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d911      	bls.n	8002a0c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d908      	bls.n	8002a02 <HAL_ETH_SetMDIOClockRange+0x7e>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_ETH_SetMDIOClockRange+0xac>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d804      	bhi.n	8002a02 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e005      	b.n	8002a0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e000      	b.n	8002a0e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a0c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	01312cff 	.word	0x01312cff
 8002a24:	02160ebf 	.word	0x02160ebf
 8002a28:	039386ff 	.word	0x039386ff
 8002a2c:	05f5e0ff 	.word	0x05f5e0ff
 8002a30:	08f0d17f 	.word	0x08f0d17f

08002a34 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002a46:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	791b      	ldrb	r3, [r3, #4]
 8002a4c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002a4e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7b1b      	ldrb	r3, [r3, #12]
 8002a54:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a56:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	7b5b      	ldrb	r3, [r3, #13]
 8002a5c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a5e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	7b9b      	ldrb	r3, [r3, #14]
 8002a64:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7bdb      	ldrb	r3, [r3, #15]
 8002a6c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a6e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	7c12      	ldrb	r2, [r2, #16]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d102      	bne.n	8002a7e <ETH_SetMACConfig+0x4a>
 8002a78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a7c:	e000      	b.n	8002a80 <ETH_SetMACConfig+0x4c>
 8002a7e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a80:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	7c52      	ldrb	r2, [r2, #17]
 8002a86:	2a00      	cmp	r2, #0
 8002a88:	d102      	bne.n	8002a90 <ETH_SetMACConfig+0x5c>
 8002a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a8e:	e000      	b.n	8002a92 <ETH_SetMACConfig+0x5e>
 8002a90:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a92:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	7c9b      	ldrb	r3, [r3, #18]
 8002a98:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a9a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002aa0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002aa6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	7f1b      	ldrb	r3, [r3, #28]
 8002aac:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002aae:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	7f5b      	ldrb	r3, [r3, #29]
 8002ab4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002ab6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	7f92      	ldrb	r2, [r2, #30]
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d102      	bne.n	8002ac6 <ETH_SetMACConfig+0x92>
 8002ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac4:	e000      	b.n	8002ac8 <ETH_SetMACConfig+0x94>
 8002ac6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002ac8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	7fdb      	ldrb	r3, [r3, #31]
 8002ace:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002ad0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d102      	bne.n	8002ae2 <ETH_SetMACConfig+0xae>
 8002adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae0:	e000      	b.n	8002ae4 <ETH_SetMACConfig+0xb0>
 8002ae2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002ae4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002aea:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002af2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002af4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b56      	ldr	r3, [pc, #344]	; (8002c60 <ETH_SetMACConfig+0x22c>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b20:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002b2a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b32:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002b34:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d102      	bne.n	8002b46 <ETH_SetMACConfig+0x112>
 8002b40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b44:	e000      	b.n	8002b48 <ETH_SetMACConfig+0x114>
 8002b46:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b48:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <ETH_SetMACConfig+0x230>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <ETH_SetMACConfig+0x234>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b96:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	d101      	bne.n	8002ba6 <ETH_SetMACConfig+0x172>
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	e000      	b.n	8002ba8 <ETH_SetMACConfig+0x174>
 8002ba6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002ba8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002bd0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002bd8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f023 0103 	bic.w	r1, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002bfe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002c1a:	2a00      	cmp	r2, #0
 8002c1c:	d101      	bne.n	8002c22 <ETH_SetMACConfig+0x1ee>
 8002c1e:	2240      	movs	r2, #64	; 0x40
 8002c20:	e000      	b.n	8002c24 <ETH_SetMACConfig+0x1f0>
 8002c22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002c24:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c2e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002c36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	00048083 	.word	0x00048083
 8002c64:	c0f88000 	.word	0xc0f88000
 8002c68:	fffffef0 	.word	0xfffffef0

08002c6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <ETH_SetDMAConfig+0xf8>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002c92:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	791b      	ldrb	r3, [r3, #4]
 8002c98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c9e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	7b1b      	ldrb	r3, [r3, #12]
 8002ca4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f241 0304 	movw	r3, #4100	; 0x1004
 8002cb2:	4413      	add	r3, r2
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <ETH_SetDMAConfig+0xfc>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6811      	ldr	r1, [r2, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	f241 0304 	movw	r3, #4100	; 0x1004
 8002cc6:	440b      	add	r3, r1
 8002cc8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	7b5b      	ldrb	r3, [r3, #13]
 8002cce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <ETH_SetDMAConfig+0x100>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6811      	ldr	r1, [r2, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002cf2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	7d1b      	ldrb	r3, [r3, #20]
 8002cfc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cfe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	7f5b      	ldrb	r3, [r3, #29]
 8002d04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d12:	4413      	add	r3, r2
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <ETH_SetDMAConfig+0x104>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6811      	ldr	r1, [r2, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d26:	440b      	add	r3, r1
 8002d28:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	7f1b      	ldrb	r3, [r3, #28]
 8002d2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d40:	4413      	add	r3, r2
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <ETH_SetDMAConfig+0x108>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d54:	440b      	add	r3, r1
 8002d56:	601a      	str	r2, [r3, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	ffff87fd 	.word	0xffff87fd
 8002d68:	ffff2ffe 	.word	0xffff2ffe
 8002d6c:	fffec000 	.word	0xfffec000
 8002d70:	ffc0efef 	.word	0xffc0efef
 8002d74:	7fc0ffff 	.word	0x7fc0ffff

08002d78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0a4      	sub	sp, #144	; 0x90
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d86:	2300      	movs	r3, #0
 8002d88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002dd0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002dd4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002df2:	2300      	movs	r3, #0
 8002df4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e10:	2320      	movs	r3, #32
 8002e12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e34:	2302      	movs	r3, #2
 8002e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e52:	2300      	movs	r3, #0
 8002e54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fde6 	bl	8002a34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002e98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e9e:	f107 0308 	add.w	r3, r7, #8
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fee1 	bl	8002c6c <ETH_SetDMAConfig>
}
 8002eaa:	bf00      	nop
 8002eac:	3790      	adds	r7, #144	; 0x90
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ece:	f002 f875 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8002ed2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d908      	bls.n	8002eee <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d804      	bhi.n	8002eee <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e027      	b.n	8002f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d908      	bls.n	8002f08 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d804      	bhi.n	8002f08 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e01a      	b.n	8002f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d903      	bls.n	8002f18 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d911      	bls.n	8002f3c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d908      	bls.n	8002f32 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d804      	bhi.n	8002f32 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e005      	b.n	8002f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e000      	b.n	8002f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002f3c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	01312cff 	.word	0x01312cff
 8002f54:	02160ebf 	.word	0x02160ebf
 8002f58:	039386ff 	.word	0x039386ff
 8002f5c:	05f5e0ff 	.word	0x05f5e0ff
 8002f60:	08f0d17f 	.word	0x08f0d17f

08002f64 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e01d      	b.n	8002fae <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68d9      	ldr	r1, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	440b      	add	r3, r1
 8002f82:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	3206      	adds	r2, #6
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d9de      	bls.n	8002f72 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	f241 132c 	movw	r3, #4396	; 0x112c
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68d9      	ldr	r1, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f241 1314 	movw	r3, #4372	; 0x1114
 8002fd4:	4413      	add	r3, r2
 8002fd6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002fe4:	601a      	str	r2, [r3, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e024      	b.n	800304a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6919      	ldr	r1, [r3, #16]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	440b      	add	r3, r1
 8003010:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	330a      	adds	r3, #10
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3301      	adds	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d9d7      	bls.n	8003000 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f241 1330 	movw	r3, #4400	; 0x1130
 8003076:	4413      	add	r3, r2
 8003078:	2203      	movs	r2, #3
 800307a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6919      	ldr	r1, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f241 131c 	movw	r3, #4380	; 0x111c
 8003088:	4413      	add	r3, r2
 800308a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f241 1328 	movw	r3, #4392	; 0x1128
 800309c:	4413      	add	r3, r2
 800309e:	6019      	str	r1, [r3, #0]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b08d      	sub	sp, #52	; 0x34
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3318      	adds	r3, #24
 80030bc:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ea:	d101      	bne.n	80030f0 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80030ec:	2302      	movs	r3, #2
 80030ee:	e223      	b.n	8003538 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d044      	beq.n	8003186 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b72      	ldr	r3, [pc, #456]	; (80032cc <ETH_Prepare_Tx_Descriptors+0x220>)
 8003102:	4013      	ands	r3, r2
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003108:	431a      	orrs	r2, r3
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003128:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d027      	beq.n	8003186 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	b29a      	uxth	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	431a      	orrs	r2, r3
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	431a      	orrs	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003174:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003184:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00e      	beq.n	80031b0 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003198:	4013      	ands	r3, r2
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	6992      	ldr	r2, [r2, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <ETH_Prepare_Tx_Descriptors+0x11c>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d030      	beq.n	800322a <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	3301      	adds	r3, #1
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d902      	bls.n	80031f2 <ETH_Prepare_Tx_Descriptors+0x146>
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	3b04      	subs	r3, #4
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fa:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	3301      	adds	r3, #1
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800320a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800320e:	d10c      	bne.n	800322a <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003218:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	e186      	b.n	8003538 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	3301      	adds	r3, #1
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003240:	4013      	ands	r3, r2
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	6852      	ldr	r2, [r2, #4]
 8003246:	431a      	orrs	r2, r3
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <ETH_Prepare_Tx_Descriptors+0x228>)
 800326a:	4013      	ands	r3, r2
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	6852      	ldr	r2, [r2, #4]
 8003270:	0412      	lsls	r2, r2, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e008      	b.n	800328c <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	2200      	movs	r2, #0
 800327e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003286:	4013      	ands	r3, r2
 8003288:	6a3a      	ldr	r2, [r7, #32]
 800328a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d021      	beq.n	80032dc <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	04db      	lsls	r3, r3, #19
 80032a6:	431a      	orrs	r2, r3
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <ETH_Prepare_Tx_Descriptors+0x22c>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	69d2      	ldr	r2, [r2, #28]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	e02e      	b.n	800332a <ETH_Prepare_Tx_Descriptors+0x27e>
 80032cc:	ffff0000 	.word	0xffff0000
 80032d0:	ffffc000 	.word	0xffffc000
 80032d4:	c000ffff 	.word	0xc000ffff
 80032d8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4b98      	ldr	r3, [pc, #608]	; (8003544 <ETH_Prepare_Tx_Descriptors+0x498>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	6852      	ldr	r2, [r2, #4]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	431a      	orrs	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	431a      	orrs	r2, r3
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80c0 	beq.w	80034fa <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	431a      	orrs	r2, r3
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800338c:	e0b5      	b.n	80034fa <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	3301      	adds	r3, #1
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d902      	bls.n	80033ac <ETH_Prepare_Tx_Descriptors+0x300>
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	3b04      	subs	r3, #4
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ce:	d126      	bne.n	800341e <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	e016      	b.n	8003412 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	3301      	adds	r3, #1
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d902      	bls.n	8003402 <ETH_Prepare_Tx_Descriptors+0x356>
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	3b04      	subs	r3, #4
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	3301      	adds	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	429a      	cmp	r2, r3
 8003418:	d3e4      	bcc.n	80033e4 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800341a:	2302      	movs	r3, #2
 800341c:	e08c      	b.n	8003538 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	3301      	adds	r3, #1
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800343a:	4013      	ands	r3, r2
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	6852      	ldr	r2, [r2, #4]
 8003440:	431a      	orrs	r2, r3
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b3a      	ldr	r3, [pc, #232]	; (800354c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003464:	4013      	ands	r3, r2
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	6852      	ldr	r2, [r2, #4]
 800346a:	0412      	lsls	r2, r2, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	e008      	b.n	8003486 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2200      	movs	r2, #0
 8003478:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003480:	4013      	ands	r3, r2
 8003482:	6a3a      	ldr	r2, [r7, #32]
 8003484:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00f      	beq.n	80034b2 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003498:	4013      	ands	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	69d2      	ldr	r2, [r2, #28]
 800349e:	431a      	orrs	r2, r3
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	e017      	b.n	80034e2 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <ETH_Prepare_Tx_Descriptors+0x498>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	6852      	ldr	r2, [r2, #4]
 80034be:	431a      	orrs	r2, r3
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	431a      	orrs	r2, r3
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f47f af45 	bne.w	800338e <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	e005      	b.n	8003524 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003534:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3734      	adds	r7, #52	; 0x34
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	ffff8000 	.word	0xffff8000
 8003548:	ffffc000 	.word	0xffffc000
 800354c:	c000ffff 	.word	0xc000ffff
 8003550:	fffc0000 	.word	0xfffc0000

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_GPIO_Init+0x12c>)
 8003564:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_GPIO_Init+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a45      	ldr	r2, [pc, #276]	; (8003688 <HAL_GPIO_Init+0x134>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d027      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a44      	ldr	r2, [pc, #272]	; (800368c <HAL_GPIO_Init+0x138>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d023      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a43      	ldr	r2, [pc, #268]	; (8003690 <HAL_GPIO_Init+0x13c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_GPIO_Init+0x140>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01b      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_GPIO_Init+0x144>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d017      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a40      	ldr	r2, [pc, #256]	; (800369c <HAL_GPIO_Init+0x148>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <HAL_GPIO_Init+0x14c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a3e      	ldr	r2, [pc, #248]	; (80036a4 <HAL_GPIO_Init+0x150>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <HAL_GPIO_Init+0x154>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a3c      	ldr	r2, [pc, #240]	; (80036ac <HAL_GPIO_Init+0x158>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x72>
 80035be:	21bb      	movs	r1, #187	; 0xbb
 80035c0:	483b      	ldr	r0, [pc, #236]	; (80036b0 <HAL_GPIO_Init+0x15c>)
 80035c2:	f7fd fb66 	bl	8000c92 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_GPIO_Init+0x88>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_GPIO_Init+0x160>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x90>
 80035dc:	21bc      	movs	r1, #188	; 0xbc
 80035de:	4834      	ldr	r0, [pc, #208]	; (80036b0 <HAL_GPIO_Init+0x15c>)
 80035e0:	f7fd fb57 	bl	8000c92 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d035      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d031      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	d02d      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d029      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b12      	cmp	r3, #18
 800360a:	d025      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <HAL_GPIO_Init+0x164>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d020      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_GPIO_Init+0x168>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d01b      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <HAL_GPIO_Init+0x16c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d016      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <HAL_GPIO_Init+0x170>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d011      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_GPIO_Init+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00c      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_GPIO_Init+0x178>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x104>
 8003650:	21bd      	movs	r1, #189	; 0xbd
 8003652:	4817      	ldr	r0, [pc, #92]	; (80036b0 <HAL_GPIO_Init+0x15c>)
 8003654:	f7fd fb1d 	bl	8000c92 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 821a 	beq.w	8003a96 <HAL_GPIO_Init+0x542>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	f000 8215 	beq.w	8003a96 <HAL_GPIO_Init+0x542>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b02      	cmp	r3, #2
 8003672:	f000 8210 	beq.w	8003a96 <HAL_GPIO_Init+0x542>
 8003676:	21be      	movs	r1, #190	; 0xbe
 8003678:	480d      	ldr	r0, [pc, #52]	; (80036b0 <HAL_GPIO_Init+0x15c>)
 800367a:	f7fd fb0a 	bl	8000c92 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800367e:	e20a      	b.n	8003a96 <HAL_GPIO_Init+0x542>
 8003680:	58000080 	.word	0x58000080
 8003684:	58020000 	.word	0x58020000
 8003688:	58020400 	.word	0x58020400
 800368c:	58020800 	.word	0x58020800
 8003690:	58020c00 	.word	0x58020c00
 8003694:	58021000 	.word	0x58021000
 8003698:	58021400 	.word	0x58021400
 800369c:	58021800 	.word	0x58021800
 80036a0:	58021c00 	.word	0x58021c00
 80036a4:	58022000 	.word	0x58022000
 80036a8:	58022400 	.word	0x58022400
 80036ac:	58022800 	.word	0x58022800
 80036b0:	0801881c 	.word	0x0801881c
 80036b4:	ffff0000 	.word	0xffff0000
 80036b8:	11110000 	.word	0x11110000
 80036bc:	11210000 	.word	0x11210000
 80036c0:	11310000 	.word	0x11310000
 80036c4:	11120000 	.word	0x11120000
 80036c8:	11220000 	.word	0x11220000
 80036cc:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 81d4 	beq.w	8003a90 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d00b      	beq.n	8003708 <HAL_GPIO_Init+0x1b4>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d007      	beq.n	8003708 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036fc:	2b11      	cmp	r3, #17
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b12      	cmp	r3, #18
 8003706:	d144      	bne.n	8003792 <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00f      	beq.n	8003730 <HAL_GPIO_Init+0x1dc>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d00b      	beq.n	8003730 <HAL_GPIO_Init+0x1dc>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d007      	beq.n	8003730 <HAL_GPIO_Init+0x1dc>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x1dc>
 8003728:	21ce      	movs	r1, #206	; 0xce
 800372a:	4897      	ldr	r0, [pc, #604]	; (8003988 <HAL_GPIO_Init+0x434>)
 800372c:	f7fd fab1 	bl	8000c92 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003766:	2201      	movs	r2, #1
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0201 	and.w	r2, r3, #1
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x27e>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b12      	cmp	r3, #18
 80037d0:	d15b      	bne.n	800388a <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a6d      	ldr	r2, [pc, #436]	; (800398c <HAL_GPIO_Init+0x438>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02b      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a6c      	ldr	r2, [pc, #432]	; (8003990 <HAL_GPIO_Init+0x43c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d027      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a6b      	ldr	r2, [pc, #428]	; (8003994 <HAL_GPIO_Init+0x440>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d023      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a6a      	ldr	r2, [pc, #424]	; (8003998 <HAL_GPIO_Init+0x444>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01f      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a69      	ldr	r2, [pc, #420]	; (800399c <HAL_GPIO_Init+0x448>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01b      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a68      	ldr	r2, [pc, #416]	; (80039a0 <HAL_GPIO_Init+0x44c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d017      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a67      	ldr	r2, [pc, #412]	; (80039a4 <HAL_GPIO_Init+0x450>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a66      	ldr	r2, [pc, #408]	; (80039a8 <HAL_GPIO_Init+0x454>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00f      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a65      	ldr	r2, [pc, #404]	; (80039ac <HAL_GPIO_Init+0x458>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00b      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a64      	ldr	r2, [pc, #400]	; (80039b0 <HAL_GPIO_Init+0x45c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_GPIO_Init+0x460>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x2de>
 800382a:	21e6      	movs	r1, #230	; 0xe6
 800382c:	4856      	ldr	r0, [pc, #344]	; (8003988 <HAL_GPIO_Init+0x434>)
 800382e:	f7fd fa30 	bl	8000c92 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	d903      	bls.n	8003842 <HAL_GPIO_Init+0x2ee>
 800383a:	21e7      	movs	r1, #231	; 0xe7
 800383c:	4852      	ldr	r0, [pc, #328]	; (8003988 <HAL_GPIO_Init+0x434>)
 800383e:	f7fd fa28 	bl	8000c92 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	220f      	movs	r2, #15
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	08da      	lsrs	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3208      	adds	r2, #8
 8003884:	69b9      	ldr	r1, [r7, #24]
 8003886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	2203      	movs	r2, #3
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0203 	and.w	r2, r3, #3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80e2 	beq.w	8003a90 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038cc:	4b3a      	ldr	r3, [pc, #232]	; (80039b8 <HAL_GPIO_Init+0x464>)
 80038ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038d2:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <HAL_GPIO_Init+0x464>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_GPIO_Init+0x464>)
 80038de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ea:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_GPIO_Init+0x468>)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	3302      	adds	r3, #2
 80038f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	220f      	movs	r2, #15
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <HAL_GPIO_Init+0x438>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d054      	beq.n	80039c0 <HAL_GPIO_Init+0x46c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_GPIO_Init+0x43c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_GPIO_Init+0x42e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <HAL_GPIO_Init+0x440>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02b      	beq.n	800397e <HAL_GPIO_Init+0x42a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_GPIO_Init+0x444>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d025      	beq.n	800397a <HAL_GPIO_Init+0x426>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_GPIO_Init+0x448>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01f      	beq.n	8003976 <HAL_GPIO_Init+0x422>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <HAL_GPIO_Init+0x44c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d019      	beq.n	8003972 <HAL_GPIO_Init+0x41e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <HAL_GPIO_Init+0x450>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0x41a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <HAL_GPIO_Init+0x454>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00d      	beq.n	800396a <HAL_GPIO_Init+0x416>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_GPIO_Init+0x458>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <HAL_GPIO_Init+0x412>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_GPIO_Init+0x45c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_GPIO_Init+0x40e>
 800395e:	2309      	movs	r3, #9
 8003960:	e02f      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 8003962:	230a      	movs	r3, #10
 8003964:	e02d      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 8003966:	2308      	movs	r3, #8
 8003968:	e02b      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 800396a:	2307      	movs	r3, #7
 800396c:	e029      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 800396e:	2306      	movs	r3, #6
 8003970:	e027      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 8003972:	2305      	movs	r3, #5
 8003974:	e025      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 8003976:	2304      	movs	r3, #4
 8003978:	e023      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 800397a:	2303      	movs	r3, #3
 800397c:	e021      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 800397e:	2302      	movs	r3, #2
 8003980:	e01f      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 8003982:	2301      	movs	r3, #1
 8003984:	e01d      	b.n	80039c2 <HAL_GPIO_Init+0x46e>
 8003986:	bf00      	nop
 8003988:	0801881c 	.word	0x0801881c
 800398c:	58020000 	.word	0x58020000
 8003990:	58020400 	.word	0x58020400
 8003994:	58020800 	.word	0x58020800
 8003998:	58020c00 	.word	0x58020c00
 800399c:	58021000 	.word	0x58021000
 80039a0:	58021400 	.word	0x58021400
 80039a4:	58021800 	.word	0x58021800
 80039a8:	58021c00 	.word	0x58021c00
 80039ac:	58022000 	.word	0x58022000
 80039b0:	58022400 	.word	0x58022400
 80039b4:	58022800 	.word	0x58022800
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58000400 	.word	0x58000400
 80039c0:	2300      	movs	r3, #0
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d2:	4937      	ldr	r1, [pc, #220]	; (8003ab0 <HAL_GPIO_Init+0x55c>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f ae15 	bne.w	80036d0 <HAL_GPIO_Init+0x17c>
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	58000400 	.word	0x58000400

08003ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ac4:	887b      	ldrh	r3, [r7, #2]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_GPIO_WritePin+0x20>
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_GPIO_WritePin+0x60>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_GPIO_WritePin+0x2a>
 8003ad4:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003ad8:	480f      	ldr	r0, [pc, #60]	; (8003b18 <HAL_GPIO_WritePin+0x64>)
 8003ada:	f7fd f8da 	bl	8000c92 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003ade:	787b      	ldrb	r3, [r7, #1]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_GPIO_WritePin+0x40>
 8003ae4:	787b      	ldrb	r3, [r7, #1]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d004      	beq.n	8003af4 <HAL_GPIO_WritePin+0x40>
 8003aea:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003aee:	480a      	ldr	r0, [pc, #40]	; (8003b18 <HAL_GPIO_WritePin+0x64>)
 8003af0:	f7fd f8cf 	bl	8000c92 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003af4:	787b      	ldrb	r3, [r7, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b00:	e003      	b.n	8003b0a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	041a      	lsls	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	619a      	str	r2, [r3, #24]
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	ffff0000 	.word	0xffff0000
 8003b18:	0801881c 	.word	0x0801881c

08003b1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_GPIO_TogglePin+0x1c>
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <HAL_GPIO_TogglePin+0x4c>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_GPIO_TogglePin+0x26>
 8003b38:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003b3c:	480b      	ldr	r0, [pc, #44]	; (8003b6c <HAL_GPIO_TogglePin+0x50>)
 8003b3e:	f7fd f8a8 	bl	8000c92 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	401a      	ands	r2, r3
 8003b4a:	887b      	ldrh	r3, [r7, #2]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d104      	bne.n	8003b5a <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b50:	887b      	ldrh	r3, [r7, #2]
 8003b52:	041a      	lsls	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	ffff0000 	.word	0xffff0000
 8003b6c:	0801881c 	.word	0x0801881c

08003b70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d007      	beq.n	8003b8e <HAL_PWREx_ConfigSupply+0x1e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d004      	beq.n	8003b8e <HAL_PWREx_ConfigSupply+0x1e>
 8003b84:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8003b88:	481a      	ldr	r0, [pc, #104]	; (8003bf4 <HAL_PWREx_ConfigSupply+0x84>)
 8003b8a:	f7fd f882 	bl	8000c92 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_PWREx_ConfigSupply+0x88>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d00a      	beq.n	8003bb0 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_PWREx_ConfigSupply+0x88>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e01f      	b.n	8003bec <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e01d      	b.n	8003bec <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_PWREx_ConfigSupply+0x88>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f023 0207 	bic.w	r2, r3, #7
 8003bb8:	490f      	ldr	r1, [pc, #60]	; (8003bf8 <HAL_PWREx_ConfigSupply+0x88>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bc0:	f7fd fc7e 	bl	80014c0 <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bc6:	e009      	b.n	8003bdc <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bc8:	f7fd fc7a 	bl	80014c0 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bd6:	d901      	bls.n	8003bdc <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e007      	b.n	8003bec <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_PWREx_ConfigSupply+0x88>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be8:	d1ee      	bne.n	8003bc8 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08018858 	.word	0x08018858
 8003bf8:	58024800 	.word	0x58024800

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f000 bce9 	b.w	80045e2 <HAL_RCC_OscConfig+0x9e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d028      	beq.n	8003c6a <HAL_RCC_OscConfig+0x6e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d122      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d11c      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d116      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d110      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_RCC_OscConfig+0x6e>
 8003c60:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003c64:	48a0      	ldr	r0, [pc, #640]	; (8003ee8 <HAL_RCC_OscConfig+0x2ec>)
 8003c66:	f7fd f814 	bl	8000c92 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 809d 	beq.w	8003db2 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <HAL_RCC_OscConfig+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_OscConfig+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c92:	d004      	beq.n	8003c9e <HAL_RCC_OscConfig+0xa2>
 8003c94:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003c98:	4893      	ldr	r0, [pc, #588]	; (8003ee8 <HAL_RCC_OscConfig+0x2ec>)
 8003c9a:	f7fc fffa 	bl	8000c92 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9e:	4b93      	ldr	r3, [pc, #588]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ca8:	4b90      	ldr	r3, [pc, #576]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d007      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xc8>
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	2b18      	cmp	r3, #24
 8003cb8:	d111      	bne.n	8003cde <HAL_RCC_OscConfig+0xe2>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	4b89      	ldr	r3, [pc, #548]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d06f      	beq.n	8003db0 <HAL_RCC_OscConfig+0x1b4>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d16b      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f000 bc82 	b.w	80045e2 <HAL_RCC_OscConfig+0x9e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
 8003ce8:	4b80      	ldr	r3, [pc, #512]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7f      	ldr	r2, [pc, #508]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e02e      	b.n	8003d54 <HAL_RCC_OscConfig+0x158>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x11c>
 8003cfe:	4b7b      	ldr	r3, [pc, #492]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7a      	ldr	r2, [pc, #488]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b78      	ldr	r3, [pc, #480]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a77      	ldr	r2, [pc, #476]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0x158>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x140>
 8003d22:	4b72      	ldr	r3, [pc, #456]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a71      	ldr	r2, [pc, #452]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b6f      	ldr	r3, [pc, #444]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6e      	ldr	r2, [pc, #440]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0x158>
 8003d3c:	4b6b      	ldr	r3, [pc, #428]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a67      	ldr	r2, [pc, #412]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d014      	beq.n	8003d86 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fbb0 	bl	80014c0 <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d62:	e009      	b.n	8003d78 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd fbac 	bl	80014c0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d902      	bls.n	8003d78 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	f000 bc35 	b.w	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d78:	4b5c      	ldr	r3, [pc, #368]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <HAL_RCC_OscConfig+0x168>
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fd fb9b 	bl	80014c0 <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d8c:	e009      	b.n	8003da2 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8e:	f7fd fb97 	bl	80014c0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d902      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	f000 bc20 	b.w	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003da2:	4b52      	ldr	r3, [pc, #328]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ef      	bne.n	8003d8e <HAL_RCC_OscConfig+0x192>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80bc 	beq.w	8003f38 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d018      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1fe>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d014      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1fe>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d010      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1fe>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b09      	cmp	r3, #9
 8003dde:	d00c      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1fe>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b11      	cmp	r3, #17
 8003de6:	d008      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1fe>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b19      	cmp	r3, #25
 8003dee:	d004      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1fe>
 8003df0:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003df4:	483c      	ldr	r0, [pc, #240]	; (8003ee8 <HAL_RCC_OscConfig+0x2ec>)
 8003df6:	f7fc ff4c 	bl	8000c92 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8003e00:	d904      	bls.n	8003e0c <HAL_RCC_OscConfig+0x210>
 8003e02:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003e06:	4838      	ldr	r0, [pc, #224]	; (8003ee8 <HAL_RCC_OscConfig+0x2ec>)
 8003e08:	f7fc ff43 	bl	8000c92 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0c:	4b37      	ldr	r3, [pc, #220]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e16:	4b35      	ldr	r3, [pc, #212]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_RCC_OscConfig+0x236>
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	2b18      	cmp	r3, #24
 8003e26:	d12d      	bne.n	8003e84 <HAL_RCC_OscConfig+0x288>
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d128      	bne.n	8003e84 <HAL_RCC_OscConfig+0x288>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e32:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_RCC_OscConfig+0x24e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e3cb      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4a:	f7fd fb45 	bl	80014d8 <HAL_GetREVID>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d80a      	bhi.n	8003e6e <HAL_RCC_OscConfig+0x272>
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	4921      	ldr	r1, [pc, #132]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6c:	e064      	b.n	8003f38 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	491b      	ldr	r1, [pc, #108]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e82:	e059      	b.n	8003f38 <HAL_RCC_OscConfig+0x33c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d03c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x30a>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 0219 	bic.w	r2, r3, #25
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4914      	ldr	r1, [pc, #80]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fb0f 	bl	80014c0 <HAL_GetTick>
 8003ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x2bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fd fb0b 	bl	80014c0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x2bc>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e394      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x2aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	f7fd fb08 	bl	80014d8 <HAL_GetREVID>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d80e      	bhi.n	8003ef0 <HAL_RCC_OscConfig+0x2f4>
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	031b      	lsls	r3, r3, #12
 8003ee0:	4902      	ldr	r1, [pc, #8]	; (8003eec <HAL_RCC_OscConfig+0x2f0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
 8003ee6:	e027      	b.n	8003f38 <HAL_RCC_OscConfig+0x33c>
 8003ee8:	08018894 	.word	0x08018894
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	4ba5      	ldr	r3, [pc, #660]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	49a2      	ldr	r1, [pc, #648]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e018      	b.n	8003f38 <HAL_RCC_OscConfig+0x33c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4ba0      	ldr	r3, [pc, #640]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a9f      	ldr	r2, [pc, #636]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fd fad5 	bl	80014c0 <HAL_GetTick>
 8003f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x330>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fd fad1 	bl	80014c0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e35a      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f2c:	4b96      	ldr	r3, [pc, #600]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x31e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80a5 	beq.w	8004090 <HAL_RCC_OscConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCC_OscConfig+0x364>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	2b80      	cmp	r3, #128	; 0x80
 8003f54:	d004      	beq.n	8003f60 <HAL_RCC_OscConfig+0x364>
 8003f56:	f240 211a 	movw	r1, #538	; 0x21a
 8003f5a:	488c      	ldr	r0, [pc, #560]	; (800418c <HAL_RCC_OscConfig+0x590>)
 8003f5c:	f7fc fe99 	bl	8000c92 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	2b3f      	cmp	r3, #63	; 0x3f
 8003f66:	d904      	bls.n	8003f72 <HAL_RCC_OscConfig+0x376>
 8003f68:	f240 211b 	movw	r1, #539	; 0x21b
 8003f6c:	4887      	ldr	r0, [pc, #540]	; (800418c <HAL_RCC_OscConfig+0x590>)
 8003f6e:	f7fc fe90 	bl	8000c92 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b85      	ldr	r3, [pc, #532]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f7c:	4b82      	ldr	r3, [pc, #520]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d007      	beq.n	8003f98 <HAL_RCC_OscConfig+0x39c>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b18      	cmp	r3, #24
 8003f8c:	d12d      	bne.n	8003fea <HAL_RCC_OscConfig+0x3ee>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d128      	bne.n	8003fea <HAL_RCC_OscConfig+0x3ee>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f98:	4b7b      	ldr	r3, [pc, #492]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x3b4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x3b4>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e318      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fb0:	f7fd fa92 	bl	80014d8 <HAL_GetREVID>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d80a      	bhi.n	8003fd4 <HAL_RCC_OscConfig+0x3d8>
 8003fbe:	4b72      	ldr	r3, [pc, #456]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	069b      	lsls	r3, r3, #26
 8003fcc:	496e      	ldr	r1, [pc, #440]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fd2:	e05d      	b.n	8004090 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fd4:	4b6c      	ldr	r3, [pc, #432]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	4969      	ldr	r1, [pc, #420]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fe8:	e052      	b.n	8004090 <HAL_RCC_OscConfig+0x494>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d035      	beq.n	800405e <HAL_RCC_OscConfig+0x462>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a64      	ldr	r2, [pc, #400]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8003ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fa5f 	bl	80014c0 <HAL_GetTick>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x41c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004006:	f7fd fa5b 	bl	80014c0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e2e4      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004018:	4b5b      	ldr	r3, [pc, #364]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004024:	f7fd fa58 	bl	80014d8 <HAL_GetREVID>
 8004028:	4602      	mov	r2, r0
 800402a:	f241 0303 	movw	r3, #4099	; 0x1003
 800402e:	429a      	cmp	r2, r3
 8004030:	d80a      	bhi.n	8004048 <HAL_RCC_OscConfig+0x44c>
 8004032:	4b55      	ldr	r3, [pc, #340]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	069b      	lsls	r3, r3, #26
 8004040:	4951      	ldr	r1, [pc, #324]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
 8004046:	e023      	b.n	8004090 <HAL_RCC_OscConfig+0x494>
 8004048:	4b4f      	ldr	r3, [pc, #316]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	494c      	ldr	r1, [pc, #304]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	60cb      	str	r3, [r1, #12]
 800405c:	e018      	b.n	8004090 <HAL_RCC_OscConfig+0x494>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800405e:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a49      	ldr	r2, [pc, #292]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd fa29 	bl	80014c0 <HAL_GetTick>
 800406e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004072:	f7fd fa25 	bl	80014c0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e2ae      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004084:	4b40      	ldr	r3, [pc, #256]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d043      	beq.n	8004124 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4ba>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d004      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4ba>
 80040ac:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80040b0:	4836      	ldr	r0, [pc, #216]	; (800418c <HAL_RCC_OscConfig+0x590>)
 80040b2:	f7fc fdee 	bl	8000c92 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d019      	beq.n	80040f2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040be:	4b32      	ldr	r3, [pc, #200]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 80040c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c2:	4a31      	ldr	r2, [pc, #196]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fd f9f9 	bl	80014c0 <HAL_GetTick>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d2:	f7fd f9f5 	bl	80014c0 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e27e      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040e4:	4b28      	ldr	r3, [pc, #160]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x4d6>
 80040f0:	e018      	b.n	8004124 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f2:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f6:	4a24      	ldr	r2, [pc, #144]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd f9df 	bl	80014c0 <HAL_GetTick>
 8004102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x51c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004106:	f7fd f9db 	bl	80014c0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x51c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e264      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_OscConfig+0x50a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d048      	beq.n	80041c2 <HAL_RCC_OscConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_OscConfig+0x54e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d004      	beq.n	800414a <HAL_RCC_OscConfig+0x54e>
 8004140:	f240 2187 	movw	r1, #647	; 0x287
 8004144:	4811      	ldr	r0, [pc, #68]	; (800418c <HAL_RCC_OscConfig+0x590>)
 8004146:	f7fc fda4 	bl	8000c92 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01e      	beq.n	8004190 <HAL_RCC_OscConfig+0x594>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 8004158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800415c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800415e:	f7fd f9af 	bl	80014c0 <HAL_GetTick>
 8004162:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004166:	f7fd f9ab 	bl	80014c0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e234      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <HAL_RCC_OscConfig+0x58c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x56a>
 8004184:	e01d      	b.n	80041c2 <HAL_RCC_OscConfig+0x5c6>
 8004186:	bf00      	nop
 8004188:	58024400 	.word	0x58024400
 800418c:	08018894 	.word	0x08018894
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004190:	4ba3      	ldr	r3, [pc, #652]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4aa2      	ldr	r2, [pc, #648]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800419a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800419c:	f7fd f990 	bl	80014c0 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x5ba>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041a4:	f7fd f98c 	bl	80014c0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x5ba>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e215      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041b6:	4b9a      	ldr	r3, [pc, #616]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8092 	beq.w	80042f4 <HAL_RCC_OscConfig+0x6f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_RCC_OscConfig+0x5f6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_OscConfig+0x5f6>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d004      	beq.n	80041f2 <HAL_RCC_OscConfig+0x5f6>
 80041e8:	f240 21b1 	movw	r1, #689	; 0x2b1
 80041ec:	488d      	ldr	r0, [pc, #564]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 80041ee:	f7fc fd50 	bl	8000c92 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041f2:	4b8d      	ldr	r3, [pc, #564]	; (8004428 <HAL_RCC_OscConfig+0x82c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a8c      	ldr	r2, [pc, #560]	; (8004428 <HAL_RCC_OscConfig+0x82c>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041fe:	f7fd f95f 	bl	80014c0 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x61c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd f95b 	bl	80014c0 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x61c>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1e4      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004218:	4b83      	ldr	r3, [pc, #524]	; (8004428 <HAL_RCC_OscConfig+0x82c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x60a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x63e>
 800422c:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a7b      	ldr	r2, [pc, #492]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e02d      	b.n	8004296 <HAL_RCC_OscConfig+0x69a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x660>
 8004242:	4b77      	ldr	r3, [pc, #476]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a76      	ldr	r2, [pc, #472]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b74      	ldr	r3, [pc, #464]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a73      	ldr	r2, [pc, #460]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e01c      	b.n	8004296 <HAL_RCC_OscConfig+0x69a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d10c      	bne.n	800427e <HAL_RCC_OscConfig+0x682>
 8004264:	4b6e      	ldr	r3, [pc, #440]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a6d      	ldr	r2, [pc, #436]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a6a      	ldr	r2, [pc, #424]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0x69a>
 800427e:	4b68      	ldr	r3, [pc, #416]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a67      	ldr	r2, [pc, #412]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a64      	ldr	r2, [pc, #400]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d015      	beq.n	80042ca <HAL_RCC_OscConfig+0x6ce>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fd f90f 	bl	80014c0 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a4:	e00a      	b.n	80042bc <HAL_RCC_OscConfig+0x6c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fd f90b 	bl	80014c0 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x6c0>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e192      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042bc:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ee      	beq.n	80042a6 <HAL_RCC_OscConfig+0x6aa>
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x6f8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fd f8f9 	bl	80014c0 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x6ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd f8f5 	bl	80014c0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x6ec>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e17c      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042e8:	4b4d      	ldr	r3, [pc, #308]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ee      	bne.n	80042d2 <HAL_RCC_OscConfig+0x6d6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00c      	beq.n	8004316 <HAL_RCC_OscConfig+0x71a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b01      	cmp	r3, #1
 8004302:	d008      	beq.n	8004316 <HAL_RCC_OscConfig+0x71a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b02      	cmp	r3, #2
 800430a:	d004      	beq.n	8004316 <HAL_RCC_OscConfig+0x71a>
 800430c:	f240 21e3 	movw	r1, #739	; 0x2e3
 8004310:	4844      	ldr	r0, [pc, #272]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 8004312:	f7fc fcbe 	bl	8000c92 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8160 	beq.w	80045e0 <HAL_RCC_OscConfig+0x9e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004320:	4b3f      	ldr	r3, [pc, #252]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004328:	2b18      	cmp	r3, #24
 800432a:	f000 811b 	beq.w	8004564 <HAL_RCC_OscConfig+0x968>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	2b02      	cmp	r3, #2
 8004334:	f040 80fc 	bne.w	8004530 <HAL_RCC_OscConfig+0x934>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	2b01      	cmp	r3, #1
 800433e:	d010      	beq.n	8004362 <HAL_RCC_OscConfig+0x766>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_RCC_OscConfig+0x766>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	2b03      	cmp	r3, #3
 800434e:	d008      	beq.n	8004362 <HAL_RCC_OscConfig+0x766>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	2b02      	cmp	r3, #2
 8004356:	d004      	beq.n	8004362 <HAL_RCC_OscConfig+0x766>
 8004358:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800435c:	4831      	ldr	r0, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 800435e:	f7fc fc98 	bl	8000c92 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_RCC_OscConfig+0x776>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	2b3f      	cmp	r3, #63	; 0x3f
 8004370:	d904      	bls.n	800437c <HAL_RCC_OscConfig+0x780>
 8004372:	f240 21ed 	movw	r1, #749	; 0x2ed
 8004376:	482b      	ldr	r0, [pc, #172]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 8004378:	f7fc fc8b 	bl	8000c92 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2b03      	cmp	r3, #3
 8004382:	d904      	bls.n	800438e <HAL_RCC_OscConfig+0x792>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d904      	bls.n	8004398 <HAL_RCC_OscConfig+0x79c>
 800438e:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004392:	4824      	ldr	r0, [pc, #144]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 8004394:	f7fc fc7d 	bl	8000c92 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_RCC_OscConfig+0x7ac>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d904      	bls.n	80043b2 <HAL_RCC_OscConfig+0x7b6>
 80043a8:	f240 21ef 	movw	r1, #751	; 0x2ef
 80043ac:	481d      	ldr	r0, [pc, #116]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 80043ae:	f7fc fc70 	bl	8000c92 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_RCC_OscConfig+0x7c6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d904      	bls.n	80043cc <HAL_RCC_OscConfig+0x7d0>
 80043c2:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80043c6:	4817      	ldr	r0, [pc, #92]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 80043c8:	f7fc fc63 	bl	8000c92 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCC_OscConfig+0x7e0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d904      	bls.n	80043e6 <HAL_RCC_OscConfig+0x7ea>
 80043dc:	f240 21f1 	movw	r1, #753	; 0x2f1
 80043e0:	4810      	ldr	r0, [pc, #64]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 80043e2:	f7fc fc56 	bl	8000c92 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ee:	d304      	bcc.n	80043fa <HAL_RCC_OscConfig+0x7fe>
 80043f0:	f240 21f2 	movw	r1, #754	; 0x2f2
 80043f4:	480b      	ldr	r0, [pc, #44]	; (8004424 <HAL_RCC_OscConfig+0x828>)
 80043f6:	f7fc fc4c 	bl	8000c92 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <HAL_RCC_OscConfig+0x824>)
 8004400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fd f85b 	bl	80014c0 <HAL_GetTick>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800440c:	e00e      	b.n	800442c <HAL_RCC_OscConfig+0x830>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fd f857 	bl	80014c0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d907      	bls.n	800442c <HAL_RCC_OscConfig+0x830>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0e0      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
 8004420:	58024400 	.word	0x58024400
 8004424:	08018894 	.word	0x08018894
 8004428:	58024800 	.word	0x58024800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800442c:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ea      	bne.n	800440e <HAL_RCC_OscConfig+0x812>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004438:	4b6c      	ldr	r3, [pc, #432]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 800443a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCC_OscConfig+0x9f4>)
 800443e:	4013      	ands	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	430a      	orrs	r2, r1
 800444c:	4967      	ldr	r1, [pc, #412]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 800444e:	4313      	orrs	r3, r2
 8004450:	628b      	str	r3, [r1, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	3b01      	subs	r3, #1
 8004458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	3b01      	subs	r3, #1
 8004462:	025b      	lsls	r3, r3, #9
 8004464:	b29b      	uxth	r3, r3
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	3b01      	subs	r3, #1
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	3b01      	subs	r3, #1
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004482:	495a      	ldr	r1, [pc, #360]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004484:	4313      	orrs	r3, r2
 8004486:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004488:	4b58      	ldr	r3, [pc, #352]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a57      	ldr	r2, [pc, #348]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004494:	4b55      	ldr	r3, [pc, #340]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004498:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <HAL_RCC_OscConfig+0x9f8>)
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044a0:	00d2      	lsls	r2, r2, #3
 80044a2:	4952      	ldr	r1, [pc, #328]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f023 020c 	bic.w	r2, r3, #12
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	494d      	ldr	r1, [pc, #308]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044ba:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f023 0202 	bic.w	r2, r3, #2
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	4949      	ldr	r1, [pc, #292]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044cc:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a46      	ldr	r2, [pc, #280]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d8:	4b44      	ldr	r3, [pc, #272]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a43      	ldr	r2, [pc, #268]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044e4:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	4a40      	ldr	r2, [pc, #256]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80044f0:	4b3e      	ldr	r3, [pc, #248]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4a3d      	ldr	r2, [pc, #244]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fc:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fc ffda 	bl	80014c0 <HAL_GetTick>
 800450c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x926>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004510:	f7fc ffd6 	bl	80014c0 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x926>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e05f      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004522:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x914>
 800452e:	e057      	b.n	80045e0 <HAL_RCC_OscConfig+0x9e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004530:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2d      	ldr	r2, [pc, #180]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fc ffc0 	bl	80014c0 <HAL_GetTick>
 8004540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x95a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fc ffbc 	bl	80014c0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x95a>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e045      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004556:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x948>
 8004562:	e03d      	b.n	80045e0 <HAL_RCC_OscConfig+0x9e4>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004564:	4b21      	ldr	r3, [pc, #132]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_OscConfig+0x9f0>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b01      	cmp	r3, #1
 8004576:	d031      	beq.n	80045dc <HAL_RCC_OscConfig+0x9e0>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f003 0203 	and.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d12a      	bne.n	80045dc <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d122      	bne.n	80045dc <HAL_RCC_OscConfig+0x9e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d11a      	bne.n	80045dc <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	0a5b      	lsrs	r3, r3, #9
 80045aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d111      	bne.n	80045dc <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d108      	bne.n	80045dc <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	0e1b      	lsrs	r3, r3, #24
 80045ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x9e4>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x9e6>
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3730      	adds	r7, #48	; 0x30
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
 80045f0:	fffffc0c 	.word	0xfffffc0c
 80045f4:	ffff0007 	.word	0xffff0007

080045f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e354      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCC_ClockConfig+0x24>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b3f      	cmp	r3, #63	; 0x3f
 800461a:	d904      	bls.n	8004626 <HAL_RCC_ClockConfig+0x2e>
 800461c:	f240 317f 	movw	r1, #895	; 0x37f
 8004620:	4827      	ldr	r0, [pc, #156]	; (80046c0 <HAL_RCC_ClockConfig+0xc8>)
 8004622:	f7fc fb36 	bl	8000c92 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d031      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d02e      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d02b      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d028      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d025      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d022      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b06      	cmp	r3, #6
 800464e:	d01f      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b07      	cmp	r3, #7
 8004654:	d01c      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d019      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b09      	cmp	r3, #9
 8004660:	d016      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b0a      	cmp	r3, #10
 8004666:	d013      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b0b      	cmp	r3, #11
 800466c:	d010      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d00d      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b0d      	cmp	r3, #13
 8004678:	d00a      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b0e      	cmp	r3, #14
 800467e:	d007      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b0f      	cmp	r3, #15
 8004684:	d004      	beq.n	8004690 <HAL_RCC_ClockConfig+0x98>
 8004686:	f44f 7160 	mov.w	r1, #896	; 0x380
 800468a:	480d      	ldr	r0, [pc, #52]	; (80046c0 <HAL_RCC_ClockConfig+0xc8>)
 800468c:	f7fc fb01 	bl	8000c92 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCC_ClockConfig+0xcc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d914      	bls.n	80046c8 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0xcc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 020f 	bic.w	r2, r3, #15
 80046a6:	4907      	ldr	r1, [pc, #28]	; (80046c4 <HAL_RCC_ClockConfig+0xcc>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_ClockConfig+0xcc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e2fa      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
 80046c0:	08018894 	.word	0x08018894
 80046c4:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d029      	beq.n	8004728 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	4b9a      	ldr	r3, [pc, #616]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d921      	bls.n	8004728 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d014      	beq.n	8004716 <HAL_RCC_ClockConfig+0x11e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d010      	beq.n	8004716 <HAL_RCC_ClockConfig+0x11e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b50      	cmp	r3, #80	; 0x50
 80046fa:	d00c      	beq.n	8004716 <HAL_RCC_ClockConfig+0x11e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b60      	cmp	r3, #96	; 0x60
 8004702:	d008      	beq.n	8004716 <HAL_RCC_ClockConfig+0x11e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b70      	cmp	r3, #112	; 0x70
 800470a:	d004      	beq.n	8004716 <HAL_RCC_ClockConfig+0x11e>
 800470c:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004710:	488d      	ldr	r0, [pc, #564]	; (8004948 <HAL_RCC_ClockConfig+0x350>)
 8004712:	f7fc fabe 	bl	8000c92 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004716:	4b8b      	ldr	r3, [pc, #556]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	4988      	ldr	r1, [pc, #544]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 8004724:	4313      	orrs	r3, r2
 8004726:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d029      	beq.n	8004788 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	4b82      	ldr	r3, [pc, #520]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004740:	429a      	cmp	r2, r3
 8004742:	d921      	bls.n	8004788 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d014      	beq.n	8004776 <HAL_RCC_ClockConfig+0x17e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d010      	beq.n	8004776 <HAL_RCC_ClockConfig+0x17e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	2b50      	cmp	r3, #80	; 0x50
 800475a:	d00c      	beq.n	8004776 <HAL_RCC_ClockConfig+0x17e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	2b60      	cmp	r3, #96	; 0x60
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x17e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d004      	beq.n	8004776 <HAL_RCC_ClockConfig+0x17e>
 800476c:	f240 31ae 	movw	r1, #942	; 0x3ae
 8004770:	4875      	ldr	r0, [pc, #468]	; (8004948 <HAL_RCC_ClockConfig+0x350>)
 8004772:	f7fc fa8e 	bl	8000c92 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004776:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	4970      	ldr	r1, [pc, #448]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02d      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	4b6a      	ldr	r3, [pc, #424]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d925      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_RCC_ClockConfig+0x1e6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b4:	d013      	beq.n	80047de <HAL_RCC_ClockConfig+0x1e6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047be:	d00e      	beq.n	80047de <HAL_RCC_ClockConfig+0x1e6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x1e6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d2:	d004      	beq.n	80047de <HAL_RCC_ClockConfig+0x1e6>
 80047d4:	f240 31bf 	movw	r1, #959	; 0x3bf
 80047d8:	485b      	ldr	r0, [pc, #364]	; (8004948 <HAL_RCC_ClockConfig+0x350>)
 80047da:	f7fc fa5a 	bl	8000c92 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047de:	4b59      	ldr	r3, [pc, #356]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	4956      	ldr	r1, [pc, #344]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d029      	beq.n	8004850 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004808:	429a      	cmp	r2, r3
 800480a:	d921      	bls.n	8004850 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d014      	beq.n	800483e <HAL_RCC_ClockConfig+0x246>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d010      	beq.n	800483e <HAL_RCC_ClockConfig+0x246>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	2b50      	cmp	r3, #80	; 0x50
 8004822:	d00c      	beq.n	800483e <HAL_RCC_ClockConfig+0x246>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d008      	beq.n	800483e <HAL_RCC_ClockConfig+0x246>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	2b70      	cmp	r3, #112	; 0x70
 8004832:	d004      	beq.n	800483e <HAL_RCC_ClockConfig+0x246>
 8004834:	f240 31d1 	movw	r1, #977	; 0x3d1
 8004838:	4843      	ldr	r0, [pc, #268]	; (8004948 <HAL_RCC_ClockConfig+0x350>)
 800483a:	f7fc fa2a 	bl	8000c92 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800483e:	4b41      	ldr	r3, [pc, #260]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	493e      	ldr	r1, [pc, #248]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d039      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	4b38      	ldr	r3, [pc, #224]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	429a      	cmp	r2, r3
 800486a:	d931      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d024      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d020      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b09      	cmp	r3, #9
 8004882:	d01c      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b0a      	cmp	r3, #10
 800488a:	d018      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b0b      	cmp	r3, #11
 8004892:	d014      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d010      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b0d      	cmp	r3, #13
 80048a2:	d00c      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b0e      	cmp	r3, #14
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2b0f      	cmp	r3, #15
 80048b2:	d004      	beq.n	80048be <HAL_RCC_ClockConfig+0x2c6>
 80048b4:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 80048b8:	4823      	ldr	r0, [pc, #140]	; (8004948 <HAL_RCC_ClockConfig+0x350>)
 80048ba:	f7fc f9ea 	bl	8000c92 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f023 020f 	bic.w	r2, r3, #15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	491e      	ldr	r1, [pc, #120]	; (8004944 <HAL_RCC_ClockConfig+0x34c>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80a2 	beq.w	8004a22 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d032      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	d02d      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80048f8:	d028      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004902:	d023      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800490c:	d01e      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004916:	d019      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004920:	d014      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800492a:	d00f      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004934:	d00a      	beq.n	800494c <HAL_RCC_ClockConfig+0x354>
 8004936:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 800493a:	4803      	ldr	r0, [pc, #12]	; (8004948 <HAL_RCC_ClockConfig+0x350>)
 800493c:	f7fc f9a9 	bl	8000c92 <assert_failed>
 8004940:	e004      	b.n	800494c <HAL_RCC_ClockConfig+0x354>
 8004942:	bf00      	nop
 8004944:	58024400 	.word	0x58024400
 8004948:	08018894 	.word	0x08018894
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d010      	beq.n	8004976 <HAL_RCC_ClockConfig+0x37e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_RCC_ClockConfig+0x37e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x37e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d004      	beq.n	8004976 <HAL_RCC_ClockConfig+0x37e>
 800496c:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8004970:	4858      	ldr	r0, [pc, #352]	; (8004ad4 <HAL_RCC_ClockConfig+0x4dc>)
 8004972:	f7fc f98e 	bl	8000c92 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004976:	4b58      	ldr	r3, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	4955      	ldr	r1, [pc, #340]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 8004984:	4313      	orrs	r3, r2
 8004986:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d107      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004990:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d121      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e18a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049a8:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d115      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e17e      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049c0:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e172      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049d0:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e16a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049e0:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f023 0207 	bic.w	r2, r3, #7
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	493a      	ldr	r1, [pc, #232]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f2:	f7fc fd65 	bl	80014c0 <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fa:	f7fc fd61 	bl	80014c0 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e152      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a10:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d1eb      	bne.n	80049fa <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d039      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d231      	bcs.n	8004aa2 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d024      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d020      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b09      	cmp	r3, #9
 8004a54:	d01c      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b0a      	cmp	r3, #10
 8004a5c:	d018      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b0b      	cmp	r3, #11
 8004a64:	d014      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d010      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b0d      	cmp	r3, #13
 8004a74:	d00c      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b0e      	cmp	r3, #14
 8004a7c:	d008      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	d004      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x498>
 8004a86:	f240 4136 	movw	r1, #1078	; 0x436
 8004a8a:	4812      	ldr	r0, [pc, #72]	; (8004ad4 <HAL_RCC_ClockConfig+0x4dc>)
 8004a8c:	f7fc f901 	bl	8000c92 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f023 020f 	bic.w	r2, r3, #15
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x4e0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <HAL_RCC_ClockConfig+0x4e4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d217      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x4e4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 020f 	bic.w	r2, r3, #15
 8004ab8:	4908      	ldr	r1, [pc, #32]	; (8004adc <HAL_RCC_ClockConfig+0x4e4>)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac0:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_ClockConfig+0x4e4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0f1      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x6be>
 8004ad2:	bf00      	nop
 8004ad4:	08018894 	.word	0x08018894
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d029      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	4b73      	ldr	r3, [pc, #460]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d221      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d014      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x536>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d010      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x536>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b50      	cmp	r3, #80	; 0x50
 8004b12:	d00c      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x536>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x536>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b70      	cmp	r3, #112	; 0x70
 8004b22:	d004      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x536>
 8004b24:	f240 4157 	movw	r1, #1111	; 0x457
 8004b28:	4866      	ldr	r0, [pc, #408]	; (8004cc4 <HAL_RCC_ClockConfig+0x6cc>)
 8004b2a:	f7fc f8b2 	bl	8000c92 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b2e:	4b64      	ldr	r3, [pc, #400]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	4961      	ldr	r1, [pc, #388]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d029      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d221      	bcs.n	8004ba0 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d014      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x596>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d010      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x596>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	2b50      	cmp	r3, #80	; 0x50
 8004b72:	d00c      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x596>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b60      	cmp	r3, #96	; 0x60
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x596>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d004      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x596>
 8004b84:	f240 4169 	movw	r1, #1129	; 0x469
 8004b88:	484e      	ldr	r0, [pc, #312]	; (8004cc4 <HAL_RCC_ClockConfig+0x6cc>)
 8004b8a:	f7fc f882 	bl	8000c92 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4949      	ldr	r1, [pc, #292]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02d      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d225      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d018      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x5fe>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bcc:	d013      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x5fe>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x5fe>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004be0:	d009      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x5fe>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bea:	d004      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x5fe>
 8004bec:	f240 417b 	movw	r1, #1147	; 0x47b
 8004bf0:	4834      	ldr	r0, [pc, #208]	; (8004cc4 <HAL_RCC_ClockConfig+0x6cc>)
 8004bf2:	f7fc f84e 	bl	8000c92 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bf6:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	492f      	ldr	r1, [pc, #188]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d029      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d221      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d014      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x65e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d010      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x65e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	2b50      	cmp	r3, #80	; 0x50
 8004c3a:	d00c      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x65e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b60      	cmp	r3, #96	; 0x60
 8004c42:	d008      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x65e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2b70      	cmp	r3, #112	; 0x70
 8004c4a:	d004      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x65e>
 8004c4c:	f240 418d 	movw	r1, #1165	; 0x48d
 8004c50:	481c      	ldr	r0, [pc, #112]	; (8004cc4 <HAL_RCC_ClockConfig+0x6cc>)
 8004c52:	f7fc f81e 	bl	8000c92 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4917      	ldr	r1, [pc, #92]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c68:	f000 f836 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c6c:	4601      	mov	r1, r0
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <HAL_RCC_ClockConfig+0x6d0>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	fa21 f303 	lsr.w	r3, r1, r3
 8004c84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <HAL_RCC_ClockConfig+0x6c8>)
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	4a0e      	ldr	r2, [pc, #56]	; (8004cc8 <HAL_RCC_ClockConfig+0x6d0>)
 8004c90:	5cd3      	ldrb	r3, [r2, r3]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ccc <HAL_RCC_ClockConfig+0x6d4>)
 8004c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ca0:	4a0b      	ldr	r2, [pc, #44]	; (8004cd0 <HAL_RCC_ClockConfig+0x6d8>)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCC_ClockConfig+0x6dc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc f81a 	bl	8000ce4 <HAL_InitTick>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	08018894 	.word	0x08018894
 8004cc8:	0801a7fc 	.word	0x0801a7fc
 8004ccc:	24000004 	.word	0x24000004
 8004cd0:	24000000 	.word	0x24000000
 8004cd4:	24000008 	.word	0x24000008

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	; 0x24
 8004cdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cde:	4baf      	ldr	r3, [pc, #700]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce6:	2b18      	cmp	r3, #24
 8004ce8:	f200 814e 	bhi.w	8004f88 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d59 	.word	0x08004d59
 8004cf8:	08004f89 	.word	0x08004f89
 8004cfc:	08004f89 	.word	0x08004f89
 8004d00:	08004f89 	.word	0x08004f89
 8004d04:	08004f89 	.word	0x08004f89
 8004d08:	08004f89 	.word	0x08004f89
 8004d0c:	08004f89 	.word	0x08004f89
 8004d10:	08004f89 	.word	0x08004f89
 8004d14:	08004d7f 	.word	0x08004d7f
 8004d18:	08004f89 	.word	0x08004f89
 8004d1c:	08004f89 	.word	0x08004f89
 8004d20:	08004f89 	.word	0x08004f89
 8004d24:	08004f89 	.word	0x08004f89
 8004d28:	08004f89 	.word	0x08004f89
 8004d2c:	08004f89 	.word	0x08004f89
 8004d30:	08004f89 	.word	0x08004f89
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004f89 	.word	0x08004f89
 8004d3c:	08004f89 	.word	0x08004f89
 8004d40:	08004f89 	.word	0x08004f89
 8004d44:	08004f89 	.word	0x08004f89
 8004d48:	08004f89 	.word	0x08004f89
 8004d4c:	08004f89 	.word	0x08004f89
 8004d50:	08004f89 	.word	0x08004f89
 8004d54:	08004d8b 	.word	0x08004d8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d58:	4b90      	ldr	r3, [pc, #576]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d64:	4b8d      	ldr	r3, [pc, #564]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	4a8c      	ldr	r2, [pc, #560]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d76:	e10a      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d78:	4b89      	ldr	r3, [pc, #548]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004d7a:	61bb      	str	r3, [r7, #24]
    break;
 8004d7c:	e107      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d7e:	4b89      	ldr	r3, [pc, #548]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004d80:	61bb      	str	r3, [r7, #24]
    break;
 8004d82:	e104      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004d84:	4b88      	ldr	r3, [pc, #544]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004d86:	61bb      	str	r3, [r7, #24]
    break;
 8004d88:	e101      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d8a:	4b84      	ldr	r3, [pc, #528]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004d94:	4b81      	ldr	r3, [pc, #516]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004da0:	4b7e      	ldr	r3, [pc, #504]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004daa:	4b7c      	ldr	r3, [pc, #496]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80da 	beq.w	8004f82 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d05a      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x1b2>
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d302      	bcc.n	8004dde <HAL_RCC_GetSysClockFreq+0x106>
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d078      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x1f6>
 8004ddc:	e099      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dde:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02d      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dea:	4b6c      	ldr	r3, [pc, #432]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	08db      	lsrs	r3, r3, #3
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	4a6a      	ldr	r2, [pc, #424]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004df6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e14:	4b61      	ldr	r3, [pc, #388]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e28:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e44:	e087      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e50:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004fb0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e58:	4b50      	ldr	r3, [pc, #320]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e88:	e065      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e94:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004fb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9c:	4b3f      	ldr	r3, [pc, #252]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea4:	ee07 3a90 	vmov	s15, r3
 8004ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ecc:	e043      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004fb8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee0:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f10:	e021      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004fb4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f38:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f54:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	0a5b      	lsrs	r3, r3, #9
 8004f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f60:	3301      	adds	r3, #1
 8004f62:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7a:	ee17 3a90 	vmov	r3, s15
 8004f7e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004f80:	e005      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
    break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004f8a:	61bb      	str	r3, [r7, #24]
    break;
 8004f8c:	bf00      	nop
  }

  return sysclockfreq;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3724      	adds	r7, #36	; 0x24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	58024400 	.word	0x58024400
 8004fa0:	03d09000 	.word	0x03d09000
 8004fa4:	003d0900 	.word	0x003d0900
 8004fa8:	007a1200 	.word	0x007a1200
 8004fac:	46000000 	.word	0x46000000
 8004fb0:	4c742400 	.word	0x4c742400
 8004fb4:	4a742400 	.word	0x4a742400
 8004fb8:	4af42400 	.word	0x4af42400

08004fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fc2:	f7ff fe89 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4601      	mov	r1, r0
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCC_GetHCLKFreq+0x50>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fd4:	5cd3      	ldrb	r3, [r2, r3]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	fa21 f303 	lsr.w	r3, r1, r3
 8004fde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_RCC_GetHCLKFreq+0x50>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	4a09      	ldr	r2, [pc, #36]	; (8005010 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fea:	5cd3      	ldrb	r3, [r2, r3]
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ff8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCC_GetHCLKFreq+0x58>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	58024400 	.word	0x58024400
 8005010:	0801a7fc 	.word	0x0801a7fc
 8005014:	24000004 	.word	0x24000004
 8005018:	24000000 	.word	0x24000000

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005020:	f7ff ffcc 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005024:	4601      	mov	r1, r0
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	58024400 	.word	0x58024400
 8005044:	0801a7fc 	.word	0x0801a7fc

08005048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800504c:	f7ff ffb6 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005050:	4601      	mov	r1, r0
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	4a04      	ldr	r2, [pc, #16]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	58024400 	.word	0x58024400
 8005070:	0801a7fc 	.word	0x0801a7fc

08005074 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	223f      	movs	r2, #63	; 0x3f
 8005082:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <HAL_RCC_GetClockConfig+0x7c>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0207 	and.w	r2, r3, #7
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005090:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <HAL_RCC_GetClockConfig+0x7c>)
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <HAL_RCC_GetClockConfig+0x7c>)
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <HAL_RCC_GetClockConfig+0x7c>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <HAL_RCC_GetClockConfig+0x7c>)
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_GetClockConfig+0x7c>)
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_RCC_GetClockConfig+0x7c>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_GetClockConfig+0x80>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	601a      	str	r2, [r3, #0]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	58024400 	.word	0x58024400
 80050f4:	52002000 	.word	0x52002000

080050f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005100:	2300      	movs	r3, #0
 8005102:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005104:	2300      	movs	r3, #0
 8005106:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d03d      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511c:	d013      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005122:	d802      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005128:	e01f      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800512a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800512e:	d013      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005130:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005134:	d01c      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005136:	e018      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005138:	4baf      	ldr	r3, [pc, #700]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	4aae      	ldr	r2, [pc, #696]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800513e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005144:	e015      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3304      	adds	r3, #4
 800514a:	2102      	movs	r1, #2
 800514c:	4618      	mov	r0, r3
 800514e:	f001 fc01 	bl	8006954 <RCCEx_PLL2_Config>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005156:	e00c      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3324      	adds	r3, #36	; 0x24
 800515c:	2102      	movs	r1, #2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 fd1a 	bl	8006b98 <RCCEx_PLL3_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005168:	e003      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
      break;
 800516e:	e000      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005178:	4b9f      	ldr	r3, [pc, #636]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005184:	499c      	ldr	r1, [pc, #624]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005186:	4313      	orrs	r3, r2
 8005188:	650b      	str	r3, [r1, #80]	; 0x50
 800518a:	e001      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03d      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d826      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051c1 	.word	0x080051c1
 80051b0:	080051cf 	.word	0x080051cf
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	080051f9 	.word	0x080051f9
 80051bc:	080051f9 	.word	0x080051f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c0:	4b8d      	ldr	r3, [pc, #564]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	4a8c      	ldr	r2, [pc, #560]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051cc:	e015      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 fbbd 	bl	8006954 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051de:	e00c      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 fcd6 	bl	8006b98 <RCCEx_PLL3_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
      break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80051f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005200:	4b7d      	ldr	r3, [pc, #500]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	f023 0207 	bic.w	r2, r3, #7
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	497a      	ldr	r1, [pc, #488]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800520e:	4313      	orrs	r3, r2
 8005210:	650b      	str	r3, [r1, #80]	; 0x50
 8005212:	e001      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03e      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d01c      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d804      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d00d      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005238:	e01e      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800523a:	2bc0      	cmp	r3, #192	; 0xc0
 800523c:	d01f      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800523e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005242:	d01e      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005244:	e018      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005246:	4b6c      	ldr	r3, [pc, #432]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	4a6b      	ldr	r2, [pc, #428]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800524c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005250:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005252:	e017      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fb7a 	bl	8006954 <RCCEx_PLL2_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005264:	e00e      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3324      	adds	r3, #36	; 0x24
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fc93 	bl	8006b98 <RCCEx_PLL3_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005276:	e005      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
      break;
 800527c:	e002      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800527e:	bf00      	nop
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800528a:	4b5b      	ldr	r3, [pc, #364]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	4958      	ldr	r1, [pc, #352]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005298:	4313      	orrs	r3, r2
 800529a:	650b      	str	r3, [r1, #80]	; 0x50
 800529c:	e001      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d044      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b8:	d01f      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 80052ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052be:	d805      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052c8:	d00e      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80052ca:	e01f      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80052cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052d0:	d01f      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80052d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052d6:	d01e      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052d8:	e018      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052da:	4b47      	ldr	r3, [pc, #284]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a46      	ldr	r2, [pc, #280]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052e6:	e017      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fb30 	bl	8006954 <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80052f8:	e00e      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fc49 	bl	8006b98 <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800530a:	e005      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e002      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800531e:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800532c:	4932      	ldr	r1, [pc, #200]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800532e:	4313      	orrs	r3, r2
 8005330:	658b      	str	r3, [r1, #88]	; 0x58
 8005332:	e001      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005340:	2b00      	cmp	r3, #0
 8005342:	d044      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800534a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800534e:	d01f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005354:	d805      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800535a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800535e:	d00e      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005360:	e01f      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005366:	d01f      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800536c:	d01e      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800536e:	e018      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005370:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	4a20      	ldr	r2, [pc, #128]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800537c:	e017      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f001 fae5 	bl	8006954 <RCCEx_PLL2_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800538e:	e00e      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3324      	adds	r3, #36	; 0x24
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f001 fbfe 	bl	8006b98 <RCCEx_PLL3_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053a0:	e005      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
      break;
 80053a6:	e002      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80053ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053c2:	490d      	ldr	r1, [pc, #52]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	658b      	str	r3, [r1, #88]	; 0x58
 80053c8:	e001      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d035      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d00c      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d802      	bhi.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01b      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80053ea:	e017      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d00c      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x312>
 80053f0:	2b30      	cmp	r3, #48	; 0x30
 80053f2:	d018      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80053f4:	e012      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80053f6:	bf00      	nop
 80053f8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053fc:	4baf      	ldr	r3, [pc, #700]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	4aae      	ldr	r2, [pc, #696]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005408:	e00e      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	2102      	movs	r1, #2
 8005410:	4618      	mov	r0, r3
 8005412:	f001 fa9f 	bl	8006954 <RCCEx_PLL2_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800541a:	e005      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	75fb      	strb	r3, [r7, #23]
      break;
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800542e:	4ba3      	ldr	r3, [pc, #652]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543a:	49a0      	ldr	r1, [pc, #640]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005440:	e001      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d042      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545a:	d01f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800545c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005460:	d805      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d00e      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800546c:	e01f      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800546e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005472:	d01f      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005478:	d01e      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800547a:	e018      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547c:	4b8f      	ldr	r3, [pc, #572]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4a8e      	ldr	r2, [pc, #568]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005488:	e017      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f001 fa5f 	bl	8006954 <RCCEx_PLL2_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800549a:	e00e      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 fb78 	bl	8006b98 <RCCEx_PLL3_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80054ac:	e005      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80054b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054c0:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054cc:	497b      	ldr	r1, [pc, #492]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	650b      	str	r3, [r1, #80]	; 0x50
 80054d2:	e001      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d042      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ec:	d01b      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80054ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f2:	d805      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d022      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80054fe:	e01b      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005504:	d01d      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800550a:	d01c      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800550c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005510:	d01b      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005512:	e011      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	2101      	movs	r1, #1
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fa1a 	bl	8006954 <RCCEx_PLL2_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005524:	e012      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3324      	adds	r3, #36	; 0x24
 800552a:	2101      	movs	r1, #1
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fb33 	bl	8006b98 <RCCEx_PLL3_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005536:	e009      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
      break;
 800553c:	e006      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800553e:	bf00      	nop
 8005540:	e004      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800554a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005552:	4b5a      	ldr	r3, [pc, #360]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005556:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	4957      	ldr	r1, [pc, #348]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005560:	4313      	orrs	r3, r2
 8005562:	650b      	str	r3, [r1, #80]	; 0x50
 8005564:	e001      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d044      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800557c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005580:	d01b      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005586:	d805      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d022      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800558c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005592:	e01b      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d01d      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800559a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800559e:	d01c      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80055a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055a4:	d01b      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80055a6:	e011      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 f9d0 	bl	8006954 <RCCEx_PLL2_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055b8:	e012      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3324      	adds	r3, #36	; 0x24
 80055be:	2101      	movs	r1, #1
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 fae9 	bl	8006b98 <RCCEx_PLL3_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055ca:	e009      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
      break;
 80055d0:	e006      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80055d2:	bf00      	nop
 80055d4:	e004      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80055d6:	bf00      	nop
 80055d8:	e002      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80055de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80055e6:	4b35      	ldr	r3, [pc, #212]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055f4:	4931      	ldr	r1, [pc, #196]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	658b      	str	r3, [r1, #88]	; 0x58
 80055fa:	e001      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02d      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005614:	d005      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561a:	d009      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d013      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005620:	e00f      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	4a25      	ldr	r2, [pc, #148]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800562e:	e00c      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f001 f98c 	bl	8006954 <RCCEx_PLL2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
      break;
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005654:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565c:	4917      	ldr	r1, [pc, #92]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	650b      	str	r3, [r1, #80]	; 0x50
 8005662:	e001      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d037      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005678:	2b03      	cmp	r3, #3
 800567a:	d81b      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	080056c1 	.word	0x080056c1
 8005688:	08005695 	.word	0x08005695
 800568c:	080056a3 	.word	0x080056a3
 8005690:	080056c1 	.word	0x080056c1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4a08      	ldr	r2, [pc, #32]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800569a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056a0:	e00f      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3304      	adds	r3, #4
 80056a6:	2102      	movs	r1, #2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 f953 	bl	8006954 <RCCEx_PLL2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056b2:	e006      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
      break;
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
      break;
 80056c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056cc:	f023 0203 	bic.w	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d4:	4901      	ldr	r1, [pc, #4]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056da:	e003      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 80056dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 829b 	beq.w	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fc:	f000 81a9 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800570a:	f000 81a2 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005714:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8005718:	f000 819b 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005722:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8005726:	f000 8194 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005730:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8005734:	f000 818d 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800573e:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8005742:	f000 8186 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800574c:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8005750:	f000 817f 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800575a:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 800575e:	f000 8178 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005768:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800576c:	f000 8171 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005776:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800577a:	f000 816a 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005784:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8005788:	f000 8163 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005792:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8005796:	f000 815c 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057a0:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 80057a4:	f000 8155 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057ae:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 80057b2:	f000 814e 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057bc:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 80057c0:	f000 8147 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057ca:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 80057ce:	f000 8140 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d8:	4aa8      	ldr	r2, [pc, #672]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	f000 8139 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057e6:	4aa6      	ldr	r2, [pc, #664]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	f000 8132 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f4:	4aa3      	ldr	r2, [pc, #652]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	f000 812b 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005802:	4aa1      	ldr	r2, [pc, #644]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8005804:	4293      	cmp	r3, r2
 8005806:	f000 8124 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005810:	4a9e      	ldr	r2, [pc, #632]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005812:	4293      	cmp	r3, r2
 8005814:	f000 811d 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800581e:	4a9c      	ldr	r2, [pc, #624]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8005820:	4293      	cmp	r3, r2
 8005822:	f000 8116 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800582c:	4a99      	ldr	r2, [pc, #612]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	f000 810f 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800583a:	4a97      	ldr	r2, [pc, #604]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	f000 8108 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005848:	4a94      	ldr	r2, [pc, #592]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	f000 8101 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005856:	4a92      	ldr	r2, [pc, #584]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	f000 80fa 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005864:	4a8f      	ldr	r2, [pc, #572]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005866:	4293      	cmp	r3, r2
 8005868:	f000 80f3 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005872:	4a8d      	ldr	r2, [pc, #564]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	f000 80ec 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005880:	4a8a      	ldr	r2, [pc, #552]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	f000 80e5 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800588e:	4a88      	ldr	r2, [pc, #544]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	f000 80de 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800589c:	4a85      	ldr	r2, [pc, #532]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	f000 80d7 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058aa:	4a83      	ldr	r2, [pc, #524]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f000 80d0 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058b8:	4a80      	ldr	r2, [pc, #512]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	f000 80c9 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058c6:	4a7e      	ldr	r2, [pc, #504]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	f000 80c2 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058d4:	4a7b      	ldr	r2, [pc, #492]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f000 80bb 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058e2:	4a79      	ldr	r2, [pc, #484]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	f000 80b4 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058f0:	4a76      	ldr	r2, [pc, #472]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	f000 80ad 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058fe:	4a74      	ldr	r2, [pc, #464]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	f000 80a6 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800590c:	4a71      	ldr	r2, [pc, #452]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	f000 809f 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800591a:	4a6f      	ldr	r2, [pc, #444]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	f000 8098 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005928:	4a6c      	ldr	r2, [pc, #432]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	f000 8091 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005936:	4a6a      	ldr	r2, [pc, #424]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	f000 808a 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005944:	4a67      	ldr	r2, [pc, #412]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005946:	4293      	cmp	r3, r2
 8005948:	f000 8083 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005952:	4a65      	ldr	r2, [pc, #404]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d07c      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800595e:	4a63      	ldr	r2, [pc, #396]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d076      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800596a:	4a61      	ldr	r2, [pc, #388]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d070      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005976:	4a5f      	ldr	r2, [pc, #380]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d06a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005982:	4a5d      	ldr	r2, [pc, #372]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d064      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800598e:	4a5b      	ldr	r2, [pc, #364]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d05e      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800599a:	4a59      	ldr	r2, [pc, #356]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d058      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059a6:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d052      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059b2:	4a55      	ldr	r2, [pc, #340]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d04c      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059be:	4a53      	ldr	r2, [pc, #332]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d046      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059ca:	4a51      	ldr	r2, [pc, #324]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d040      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059d6:	4a4f      	ldr	r2, [pc, #316]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d03a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059e2:	4a4d      	ldr	r2, [pc, #308]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d034      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059ee:	4a4b      	ldr	r2, [pc, #300]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d02e      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059fa:	4a49      	ldr	r2, [pc, #292]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d028      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a06:	4a47      	ldr	r2, [pc, #284]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a12:	4a45      	ldr	r2, [pc, #276]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01c      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a1e:	4a43      	ldr	r2, [pc, #268]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d016      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a2a:	4a41      	ldr	r2, [pc, #260]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a36:	4a3f      	ldr	r2, [pc, #252]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a42:	4a3d      	ldr	r2, [pc, #244]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a48:	f44f 715a 	mov.w	r1, #872	; 0x368
 8005a4c:	483b      	ldr	r0, [pc, #236]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8005a4e:	f7fb f920 	bl	8000c92 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a52:	4b3b      	ldr	r3, [pc, #236]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a3a      	ldr	r2, [pc, #232]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a5e:	f7fb fd2f 	bl	80014c0 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a64:	e06e      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a66:	f7fb fd2b 	bl	80014c0 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b64      	cmp	r3, #100	; 0x64
 8005a72:	d967      	bls.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	75fb      	strb	r3, [r7, #23]
        break;
 8005a78:	e06a      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8005a7a:	bf00      	nop
 8005a7c:	00010300 	.word	0x00010300
 8005a80:	00011300 	.word	0x00011300
 8005a84:	00012300 	.word	0x00012300
 8005a88:	00013300 	.word	0x00013300
 8005a8c:	00014300 	.word	0x00014300
 8005a90:	00015300 	.word	0x00015300
 8005a94:	00016300 	.word	0x00016300
 8005a98:	00017300 	.word	0x00017300
 8005a9c:	00018300 	.word	0x00018300
 8005aa0:	00019300 	.word	0x00019300
 8005aa4:	0001a300 	.word	0x0001a300
 8005aa8:	0001b300 	.word	0x0001b300
 8005aac:	0001c300 	.word	0x0001c300
 8005ab0:	0001d300 	.word	0x0001d300
 8005ab4:	0001e300 	.word	0x0001e300
 8005ab8:	0001f300 	.word	0x0001f300
 8005abc:	00020300 	.word	0x00020300
 8005ac0:	00021300 	.word	0x00021300
 8005ac4:	00022300 	.word	0x00022300
 8005ac8:	00023300 	.word	0x00023300
 8005acc:	00024300 	.word	0x00024300
 8005ad0:	00025300 	.word	0x00025300
 8005ad4:	00026300 	.word	0x00026300
 8005ad8:	00027300 	.word	0x00027300
 8005adc:	00028300 	.word	0x00028300
 8005ae0:	00029300 	.word	0x00029300
 8005ae4:	0002a300 	.word	0x0002a300
 8005ae8:	0002b300 	.word	0x0002b300
 8005aec:	0002c300 	.word	0x0002c300
 8005af0:	0002d300 	.word	0x0002d300
 8005af4:	0002e300 	.word	0x0002e300
 8005af8:	0002f300 	.word	0x0002f300
 8005afc:	00030300 	.word	0x00030300
 8005b00:	00031300 	.word	0x00031300
 8005b04:	00032300 	.word	0x00032300
 8005b08:	00033300 	.word	0x00033300
 8005b0c:	00034300 	.word	0x00034300
 8005b10:	00035300 	.word	0x00035300
 8005b14:	00036300 	.word	0x00036300
 8005b18:	00037300 	.word	0x00037300
 8005b1c:	00038300 	.word	0x00038300
 8005b20:	00039300 	.word	0x00039300
 8005b24:	0003a300 	.word	0x0003a300
 8005b28:	0003b300 	.word	0x0003b300
 8005b2c:	0003c300 	.word	0x0003c300
 8005b30:	0003d300 	.word	0x0003d300
 8005b34:	0003e300 	.word	0x0003e300
 8005b38:	0003f300 	.word	0x0003f300
 8005b3c:	080188cc 	.word	0x080188cc
 8005b40:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b44:	4bb9      	ldr	r3, [pc, #740]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d08a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d166      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b56:	4bb6      	ldr	r3, [pc, #728]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b60:	4053      	eors	r3, r2
 8005b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d013      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b6a:	4bb1      	ldr	r3, [pc, #708]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b74:	4bae      	ldr	r3, [pc, #696]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	4aad      	ldr	r2, [pc, #692]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b80:	4bab      	ldr	r3, [pc, #684]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	4aaa      	ldr	r2, [pc, #680]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b8c:	4aa8      	ldr	r2, [pc, #672]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9c:	d115      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fb fc8f 	bl	80014c0 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba4:	e00b      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba6:	f7fb fc8b 	bl	80014c0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d902      	bls.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	75fb      	strb	r3, [r7, #23]
            break;
 8005bbc:	e005      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bbe:	4b9c      	ldr	r3, [pc, #624]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ed      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d126      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bde:	d10d      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8005be0:	4b93      	ldr	r3, [pc, #588]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bee:	0919      	lsrs	r1, r3, #4
 8005bf0:	4b90      	ldr	r3, [pc, #576]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005bf2:	400b      	ands	r3, r1
 8005bf4:	498e      	ldr	r1, [pc, #568]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
 8005bfa:	e005      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005bfc:	4b8c      	ldr	r3, [pc, #560]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	4a8b      	ldr	r2, [pc, #556]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c06:	6113      	str	r3, [r2, #16]
 8005c08:	4b89      	ldr	r3, [pc, #548]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c16:	4986      	ldr	r1, [pc, #536]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	670b      	str	r3, [r1, #112]	; 0x70
 8005c1c:	e004      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	75bb      	strb	r3, [r7, #22]
 8005c22:	e001      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d07e      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c38:	2b28      	cmp	r3, #40	; 0x28
 8005c3a:	d867      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005d13 	.word	0x08005d13
 8005c48:	08005d0d 	.word	0x08005d0d
 8005c4c:	08005d0d 	.word	0x08005d0d
 8005c50:	08005d0d 	.word	0x08005d0d
 8005c54:	08005d0d 	.word	0x08005d0d
 8005c58:	08005d0d 	.word	0x08005d0d
 8005c5c:	08005d0d 	.word	0x08005d0d
 8005c60:	08005d0d 	.word	0x08005d0d
 8005c64:	08005ce9 	.word	0x08005ce9
 8005c68:	08005d0d 	.word	0x08005d0d
 8005c6c:	08005d0d 	.word	0x08005d0d
 8005c70:	08005d0d 	.word	0x08005d0d
 8005c74:	08005d0d 	.word	0x08005d0d
 8005c78:	08005d0d 	.word	0x08005d0d
 8005c7c:	08005d0d 	.word	0x08005d0d
 8005c80:	08005d0d 	.word	0x08005d0d
 8005c84:	08005cfb 	.word	0x08005cfb
 8005c88:	08005d0d 	.word	0x08005d0d
 8005c8c:	08005d0d 	.word	0x08005d0d
 8005c90:	08005d0d 	.word	0x08005d0d
 8005c94:	08005d0d 	.word	0x08005d0d
 8005c98:	08005d0d 	.word	0x08005d0d
 8005c9c:	08005d0d 	.word	0x08005d0d
 8005ca0:	08005d0d 	.word	0x08005d0d
 8005ca4:	08005d13 	.word	0x08005d13
 8005ca8:	08005d0d 	.word	0x08005d0d
 8005cac:	08005d0d 	.word	0x08005d0d
 8005cb0:	08005d0d 	.word	0x08005d0d
 8005cb4:	08005d0d 	.word	0x08005d0d
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	08005d0d 	.word	0x08005d0d
 8005cc4:	08005d13 	.word	0x08005d13
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d0d 	.word	0x08005d0d
 8005cd4:	08005d0d 	.word	0x08005d0d
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d0d 	.word	0x08005d0d
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	08005d13 	.word	0x08005d13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	2101      	movs	r1, #1
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fe30 	bl	8006954 <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005cf8:	e00c      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3324      	adds	r3, #36	; 0x24
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 ff49 	bl	8006b98 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	e000      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8005d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d1a:	4b45      	ldr	r3, [pc, #276]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d26:	4942      	ldr	r1, [pc, #264]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8005d2c:	e001      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d037      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d820      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d8f 	.word	0x08005d8f
 8005d50:	08005d65 	.word	0x08005d65
 8005d54:	08005d77 	.word	0x08005d77
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d8f 	.word	0x08005d8f
 8005d60:	08005d8f 	.word	0x08005d8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	2101      	movs	r1, #1
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fdf2 	bl	8006954 <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d74:	e00c      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3324      	adds	r3, #36	; 0x24
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 ff0b 	bl	8006b98 <RCCEx_PLL3_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8c:	e000      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8005d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	f023 0207 	bic.w	r2, r3, #7
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da2:	4923      	ldr	r1, [pc, #140]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	654b      	str	r3, [r1, #84]	; 0x54
 8005da8:	e001      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d040      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	d821      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005e0f 	.word	0x08005e0f
 8005dd0:	08005de5 	.word	0x08005de5
 8005dd4:	08005df7 	.word	0x08005df7
 8005dd8:	08005e0f 	.word	0x08005e0f
 8005ddc:	08005e0f 	.word	0x08005e0f
 8005de0:	08005e0f 	.word	0x08005e0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	2101      	movs	r1, #1
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fdb2 	bl	8006954 <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005df4:	e00c      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3324      	adds	r3, #36	; 0x24
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fecb 	bl	8006b98 <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e06:	e003      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d110      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1a:	f023 0207 	bic.w	r2, r3, #7
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	4902      	ldr	r1, [pc, #8]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	658b      	str	r3, [r1, #88]	; 0x58
 8005e2a:	e007      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e2c:	58024800 	.word	0x58024800
 8005e30:	58024400 	.word	0x58024400
 8005e34:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d044      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e52:	d01b      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e58:	d805      	bhi.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d022      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005e64:	e01b      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xda6>
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6a:	d01d      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8005e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e70:	d01c      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005e72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e76:	d01b      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8005e78:	e011      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	2100      	movs	r1, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fd67 	bl	8006954 <RCCEx_PLL2_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e8a:	e012      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3324      	adds	r3, #36	; 0x24
 8005e90:	2102      	movs	r1, #2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fe80 	bl	8006b98 <RCCEx_PLL3_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e9c:	e009      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea2:	e006      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005ea4:	bf00      	nop
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005ea8:	bf00      	nop
 8005eaa:	e002      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005eac:	bf00      	nop
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eb8:	4bb6      	ldr	r3, [pc, #728]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec6:	49b3      	ldr	r1, [pc, #716]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	654b      	str	r3, [r1, #84]	; 0x54
 8005ecc:	e001      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d044      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee8:	d01b      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8005eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eee:	d805      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d022      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8005ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8005efa:	e01b      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d01d      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8005f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f06:	d01c      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8005f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f0c:	d01b      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8005f0e:	e011      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fd1c 	bl	8006954 <RCCEx_PLL2_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f20:	e012      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3324      	adds	r3, #36	; 0x24
 8005f26:	2102      	movs	r1, #2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fe35 	bl	8006b98 <RCCEx_PLL3_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f32:	e009      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
      break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10a      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f4e:	4b91      	ldr	r3, [pc, #580]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f5c:	498d      	ldr	r1, [pc, #564]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	658b      	str	r3, [r1, #88]	; 0x58
 8005f62:	e001      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d044      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8005f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f84:	d805      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d022      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8005f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8e:	d00a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8005f90:	e01b      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xed2>
 8005f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f96:	d01d      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005f98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f9c:	d01c      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 8005f9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fa2:	d01b      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8005fa4:	e011      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2100      	movs	r1, #0
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fcd1 	bl	8006954 <RCCEx_PLL2_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005fb6:	e012      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3324      	adds	r3, #36	; 0x24
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fdea 	bl	8006b98 <RCCEx_PLL3_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005fc8:	e009      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005fce:	e006      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005fd0:	bf00      	nop
 8005fd2:	e004      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005fd4:	bf00      	nop
 8005fd6:	e002      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005fe4:	4b6b      	ldr	r3, [pc, #428]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ff2:	4968      	ldr	r1, [pc, #416]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ff8:	e001      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d036      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xf80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006014:	d015      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800601c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006020:	d00f      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006036:	d004      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8006038:	f240 41e6 	movw	r1, #1254	; 0x4e6
 800603c:	4856      	ldr	r0, [pc, #344]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800603e:	f7fa fe28 	bl	8000c92 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604c:	d10a      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3324      	adds	r3, #36	; 0x24
 8006052:	2102      	movs	r1, #2
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fd9f 	bl	8006b98 <RCCEx_PLL3_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
        {
          status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006064:	4b4b      	ldr	r3, [pc, #300]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006072:	4948      	ldr	r1, [pc, #288]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006074:	4313      	orrs	r3, r2
 8006076:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	2b00      	cmp	r3, #0
 8006082:	d036      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608e:	d015      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609a:	d00f      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060b0:	d004      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80060b2:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80060b6:	4838      	ldr	r0, [pc, #224]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80060b8:	f7fa fdeb 	bl	8000c92 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c6:	d10a      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3324      	adds	r3, #36	; 0x24
 80060cc:	2102      	movs	r1, #2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fd62 	bl	8006b98 <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xfe6>
      {
        status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060de:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80060e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ec:	4929      	ldr	r1, [pc, #164]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d030      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1068>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006108:	d00d      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x102e>
 800610a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800610e:	d016      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d111      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x1040>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fc1a 	bl	8006954 <RCCEx_PLL2_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006124:	e00c      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1048>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3324      	adds	r3, #36	; 0x24
 800612a:	2102      	movs	r1, #2
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fd33 	bl	8006b98 <RCCEx_PLL3_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
      break;
 800613c:	e000      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      break;
 800613e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1064>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006146:	4b13      	ldr	r3, [pc, #76]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006154:	490f      	ldr	r1, [pc, #60]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006156:	4313      	orrs	r3, r2
 8006158:	658b      	str	r3, [r1, #88]	; 0x58
 800615a:	e001      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d034      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10de>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006176:	d011      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8006178:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800617c:	d01a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800617e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006182:	d114      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	4a02      	ldr	r2, [pc, #8]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006190:	e011      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x10be>
 8006192:	bf00      	nop
 8006194:	58024400 	.word	0x58024400
 8006198:	080188cc 	.word	0x080188cc

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	2101      	movs	r1, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fcf8 	bl	8006b98 <RCCEx_PLL3_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80061ac:	e003      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]
      break;
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      break;
 80061b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x10da>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061bc:	4b8c      	ldr	r3, [pc, #560]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ca:	4989      	ldr	r1, [pc, #548]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	654b      	str	r3, [r1, #84]	; 0x54
 80061d0:	e001      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d037      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1106>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d004      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1106>
 80061f4:	f240 515e 	movw	r1, #1374	; 0x55e
 80061f8:	487e      	ldr	r0, [pc, #504]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80061fa:	f7fa fd4a 	bl	8000c92 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620a:	d007      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x1124>
 800620c:	e00f      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800620e:	4b78      	ldr	r3, [pc, #480]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	4a77      	ldr	r2, [pc, #476]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800621a:	e00b      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	2102      	movs	r1, #2
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fb96 	bl	8006954 <RCCEx_PLL2_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800622c:	e002      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    default:
      ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
      break;
 8006232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1156>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800623a:	4b6d      	ldr	r3, [pc, #436]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800623c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	496a      	ldr	r1, [pc, #424]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006248:	4313      	orrs	r3, r2
 800624a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800624c:	e001      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x117c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3324      	adds	r3, #36	; 0x24
 8006262:	2102      	movs	r1, #2
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fc97 	bl	8006b98 <RCCEx_PLL3_Config>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x117c>
    {
      status=HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02f      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006288:	d00c      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x11ac>
 800628a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628e:	d802      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x119e>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d011      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
 8006294:	e00d      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
 8006296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800629a:	d00f      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 800629c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a0:	d00e      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80062a2:	e006      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	4b52      	ldr	r3, [pc, #328]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	4a51      	ldr	r2, [pc, #324]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80062b0:	e007      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
      break;
 80062b6:	e004      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 80062b8:	bf00      	nop
 80062ba:	e002      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 80062bc:	bf00      	nop
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 80062c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x11e4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062c8:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d4:	4946      	ldr	r1, [pc, #280]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	654b      	str	r3, [r1, #84]	; 0x54
 80062da:	e001      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062fc:	d004      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 80062fe:	f240 51bd 	movw	r1, #1469	; 0x5bd
 8006302:	483c      	ldr	r0, [pc, #240]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006304:	f7fa fcc5 	bl	8000c92 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006308:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006314:	4936      	ldr	r1, [pc, #216]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006316:	4313      	orrs	r3, r2
 8006318:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006336:	d004      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 8006338:	f240 51d1 	movw	r1, #1489	; 0x5d1
 800633c:	482d      	ldr	r0, [pc, #180]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 800633e:	f7fa fca8 	bl	8000c92 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006346:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634e:	4928      	ldr	r1, [pc, #160]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006350:	4313      	orrs	r3, r2
 8006352:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01d      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x12a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006374:	d004      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 8006376:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800637a:	481e      	ldr	r0, [pc, #120]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 800637c:	f7fa fc89 	bl	8000c92 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006380:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006386:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800638a:	6113      	str	r3, [r2, #16]
 800638c:	4b18      	ldr	r3, [pc, #96]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006396:	4916      	ldr	r1, [pc, #88]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006398:	4313      	orrs	r3, r2
 800639a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	da1b      	bge.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x12e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00e      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063b4:	d009      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063be:	d004      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 80063c0:	f240 51f1 	movw	r1, #1521	; 0x5f1
 80063c4:	480b      	ldr	r0, [pc, #44]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80063c6:	f7fa fc64 	bl	8000c92 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	4906      	ldr	r1, [pc, #24]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80063dc:	7dbb      	ldrb	r3, [r7, #22]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    return HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
  }
  return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	58024400 	.word	0x58024400
 80063f4:	080188cc 	.word	0x080188cc

080063f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063fc:	f7fe fdde 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8006400:	4601      	mov	r1, r0
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800640e:	5cd3      	ldrb	r3, [r2, r3]
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58024400 	.word	0x58024400
 8006420:	0801a7fc 	.word	0x0801a7fc

08006424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800642c:	4b9d      	ldr	r3, [pc, #628]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006436:	4b9b      	ldr	r3, [pc, #620]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	0b1b      	lsrs	r3, r3, #12
 800643c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006442:	4b98      	ldr	r3, [pc, #608]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800644e:	4b95      	ldr	r3, [pc, #596]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 810a 	beq.w	8006686 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d05a      	beq.n	800652e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006478:	2b01      	cmp	r3, #1
 800647a:	d302      	bcc.n	8006482 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800647c:	2b02      	cmp	r3, #2
 800647e:	d078      	beq.n	8006572 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006480:	e099      	b.n	80065b6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006482:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b00      	cmp	r3, #0
 800648c:	d02d      	beq.n	80064ea <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800648e:	4b85      	ldr	r3, [pc, #532]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	08db      	lsrs	r3, r3, #3
 8006494:	f003 0303 	and.w	r3, r3, #3
 8006498:	4a83      	ldr	r2, [pc, #524]	; (80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800649a:	fa22 f303 	lsr.w	r3, r2, r3
 800649e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b8:	4b7a      	ldr	r3, [pc, #488]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80064cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80064d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80064e8:	e087      	b.n	80065fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80066b0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80064f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fc:	4b69      	ldr	r3, [pc, #420]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006510:	eddf 5a66 	vldr	s11, [pc, #408]	; 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006528:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652c:	e065      	b.n	80065fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	ee07 3a90 	vmov	s15, r3
 8006534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006538:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800653c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006540:	4b58      	ldr	r3, [pc, #352]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006550:	ed97 6a03 	vldr	s12, [r7, #12]
 8006554:	eddf 5a55 	vldr	s11, [pc, #340]	; 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800655c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006570:	e043      	b.n	80065fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	ee07 3a90 	vmov	s15, r3
 8006578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80066b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006584:	4b47      	ldr	r3, [pc, #284]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006594:	ed97 6a03 	vldr	s12, [r7, #12]
 8006598:	eddf 5a44 	vldr	s11, [pc, #272]	; 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800659c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065b4:	e021      	b.n	80065fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80066b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80065c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c8:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80065dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80065e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065f8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80065fa:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	0a5b      	lsrs	r3, r3, #9
 8006600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006610:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006614:	edd7 6a07 	vldr	s13, [r7, #28]
 8006618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800661c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006620:	ee17 2a90 	vmov	r2, s15
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800663e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006642:	edd7 6a07 	vldr	s13, [r7, #28]
 8006646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800664a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664e:	ee17 2a90 	vmov	r2, s15
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006656:	4b13      	ldr	r3, [pc, #76]	; (80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	0e1b      	lsrs	r3, r3, #24
 800665c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800666c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006670:	edd7 6a07 	vldr	s13, [r7, #28]
 8006674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800667c:	ee17 2a90 	vmov	r2, s15
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006684:	e008      	b.n	8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	3724      	adds	r7, #36	; 0x24
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	58024400 	.word	0x58024400
 80066a8:	03d09000 	.word	0x03d09000
 80066ac:	46000000 	.word	0x46000000
 80066b0:	4c742400 	.word	0x4c742400
 80066b4:	4a742400 	.word	0x4a742400
 80066b8:	4af42400 	.word	0x4af42400

080066bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80066bc:	b480      	push	{r7}
 80066be:	b089      	sub	sp, #36	; 0x24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066c4:	4b9d      	ldr	r3, [pc, #628]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80066ce:	4b9b      	ldr	r3, [pc, #620]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	0d1b      	lsrs	r3, r3, #20
 80066d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066da:	4b98      	ldr	r3, [pc, #608]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80066e6:	4b95      	ldr	r3, [pc, #596]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 810a 	beq.w	800691e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d05a      	beq.n	80067c6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006710:	2b01      	cmp	r3, #1
 8006712:	d302      	bcc.n	800671a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006714:	2b02      	cmp	r3, #2
 8006716:	d078      	beq.n	800680a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006718:	e099      	b.n	800684e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800671a:	4b88      	ldr	r3, [pc, #544]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d02d      	beq.n	8006782 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006726:	4b85      	ldr	r3, [pc, #532]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	08db      	lsrs	r3, r3, #3
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	4a83      	ldr	r2, [pc, #524]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006750:	4b7a      	ldr	r3, [pc, #488]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006760:	ed97 6a03 	vldr	s12, [r7, #12]
 8006764:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006780:	e087      	b.n	8006892 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006794:	4b69      	ldr	r3, [pc, #420]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80067ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067c4:	e065      	b.n	8006892 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80067d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d8:	4b58      	ldr	r3, [pc, #352]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80067f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006804:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006808:	e043      	b.n	8006892 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681c:	4b47      	ldr	r3, [pc, #284]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006830:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800684c:	e021      	b.n	8006892 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006858:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800685c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006860:	4b36      	ldr	r3, [pc, #216]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006870:	ed97 6a03 	vldr	s12, [r7, #12]
 8006874:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006890:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006892:	4b2a      	ldr	r3, [pc, #168]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	0a5b      	lsrs	r3, r3, #9
 8006898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b8:	ee17 2a90 	vmov	r2, s15
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80068c0:	4b1e      	ldr	r3, [pc, #120]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068da:	edd7 6a07 	vldr	s13, [r7, #28]
 80068de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e6:	ee17 2a90 	vmov	r2, s15
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	0e1b      	lsrs	r3, r3, #24
 80068f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f8:	ee07 3a90 	vmov	s15, r3
 80068fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006908:	edd7 6a07 	vldr	s13, [r7, #28]
 800690c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006914:	ee17 2a90 	vmov	r2, s15
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800691c:	e008      	b.n	8006930 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
}
 8006930:	bf00      	nop
 8006932:	3724      	adds	r7, #36	; 0x24
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	58024400 	.word	0x58024400
 8006940:	03d09000 	.word	0x03d09000
 8006944:	46000000 	.word	0x46000000
 8006948:	4c742400 	.word	0x4c742400
 800694c:	4a742400 	.word	0x4a742400
 8006950:	4af42400 	.word	0x4af42400

08006954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <RCCEx_PLL2_Config+0x1e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b3f      	cmp	r3, #63	; 0x3f
 8006970:	d904      	bls.n	800697c <RCCEx_PLL2_Config+0x28>
 8006972:	f640 417f 	movw	r1, #3199	; 0xc7f
 8006976:	4885      	ldr	r0, [pc, #532]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 8006978:	f7fa f98b 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d904      	bls.n	800698e <RCCEx_PLL2_Config+0x3a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698c:	d904      	bls.n	8006998 <RCCEx_PLL2_Config+0x44>
 800698e:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8006992:	487e      	ldr	r0, [pc, #504]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 8006994:	f7fa f97d 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <RCCEx_PLL2_Config+0x54>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b80      	cmp	r3, #128	; 0x80
 80069a6:	d904      	bls.n	80069b2 <RCCEx_PLL2_Config+0x5e>
 80069a8:	f640 4181 	movw	r1, #3201	; 0xc81
 80069ac:	4877      	ldr	r0, [pc, #476]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 80069ae:	f7fa f970 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <RCCEx_PLL2_Config+0x6e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b80      	cmp	r3, #128	; 0x80
 80069c0:	d904      	bls.n	80069cc <RCCEx_PLL2_Config+0x78>
 80069c2:	f640 4182 	movw	r1, #3202	; 0xc82
 80069c6:	4871      	ldr	r0, [pc, #452]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 80069c8:	f7fa f963 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <RCCEx_PLL2_Config+0x88>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b80      	cmp	r3, #128	; 0x80
 80069da:	d904      	bls.n	80069e6 <RCCEx_PLL2_Config+0x92>
 80069dc:	f640 4183 	movw	r1, #3203	; 0xc83
 80069e0:	486a      	ldr	r0, [pc, #424]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 80069e2:	f7fa f956 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d010      	beq.n	8006a10 <RCCEx_PLL2_Config+0xbc>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d00c      	beq.n	8006a10 <RCCEx_PLL2_Config+0xbc>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d008      	beq.n	8006a10 <RCCEx_PLL2_Config+0xbc>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	2bc0      	cmp	r3, #192	; 0xc0
 8006a04:	d004      	beq.n	8006a10 <RCCEx_PLL2_Config+0xbc>
 8006a06:	f640 4184 	movw	r1, #3204	; 0xc84
 8006a0a:	4860      	ldr	r0, [pc, #384]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 8006a0c:	f7fa f941 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <RCCEx_PLL2_Config+0xd6>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d004      	beq.n	8006a2a <RCCEx_PLL2_Config+0xd6>
 8006a20:	f640 4185 	movw	r1, #3205	; 0xc85
 8006a24:	4859      	ldr	r0, [pc, #356]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 8006a26:	f7fa f934 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a32:	d304      	bcc.n	8006a3e <RCCEx_PLL2_Config+0xea>
 8006a34:	f640 4186 	movw	r1, #3206	; 0xc86
 8006a38:	4854      	ldr	r0, [pc, #336]	; (8006b8c <RCCEx_PLL2_Config+0x238>)
 8006a3a:	f7fa f92a 	bl	8000c92 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a3e:	4b54      	ldr	r3, [pc, #336]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d101      	bne.n	8006a4e <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e099      	b.n	8006b82 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a4e:	4b50      	ldr	r3, [pc, #320]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a4f      	ldr	r2, [pc, #316]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006a54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a5a:	f7fa fd31 	bl	80014c0 <HAL_GetTick>
 8006a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a60:	e008      	b.n	8006a74 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a62:	f7fa fd2d 	bl	80014c0 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e086      	b.n	8006b82 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a74:	4b46      	ldr	r3, [pc, #280]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f0      	bne.n	8006a62 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a80:	4b43      	ldr	r3, [pc, #268]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	031b      	lsls	r3, r3, #12
 8006a8e:	4940      	ldr	r1, [pc, #256]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	628b      	str	r3, [r1, #40]	; 0x28
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	025b      	lsls	r3, r3, #9
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	061b      	lsls	r3, r3, #24
 8006ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ac4:	4932      	ldr	r1, [pc, #200]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006aca:	4b31      	ldr	r3, [pc, #196]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	492e      	ldr	r1, [pc, #184]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	f023 0220 	bic.w	r2, r3, #32
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	4929      	ldr	r1, [pc, #164]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006aee:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	4a27      	ldr	r2, [pc, #156]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006af4:	f023 0310 	bic.w	r3, r3, #16
 8006af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006afa:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006afe:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <RCCEx_PLL2_Config+0x240>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	69d2      	ldr	r2, [r2, #28]
 8006b06:	00d2      	lsls	r2, r2, #3
 8006b08:	4921      	ldr	r1, [pc, #132]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b0e:	4b20      	ldr	r3, [pc, #128]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	4a1f      	ldr	r2, [pc, #124]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b14:	f043 0310 	orr.w	r3, r3, #16
 8006b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	4a1a      	ldr	r2, [pc, #104]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b2c:	e00f      	b.n	8006b4e <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d106      	bne.n	8006b42 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b34:	4b16      	ldr	r3, [pc, #88]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b40:	e005      	b.n	8006b4e <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b4e:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a0f      	ldr	r2, [pc, #60]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b5a:	f7fa fcb1 	bl	80014c0 <HAL_GetTick>
 8006b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b60:	e008      	b.n	8006b74 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b62:	f7fa fcad 	bl	80014c0 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e006      	b.n	8006b82 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <RCCEx_PLL2_Config+0x23c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	080188cc 	.word	0x080188cc
 8006b90:	58024400 	.word	0x58024400
 8006b94:	ffff0007 	.word	0xffff0007

08006b98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <RCCEx_PLL3_Config+0x1e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b3f      	cmp	r3, #63	; 0x3f
 8006bb4:	d904      	bls.n	8006bc0 <RCCEx_PLL3_Config+0x28>
 8006bb6:	f640 41e7 	movw	r1, #3303	; 0xce7
 8006bba:	4887      	ldr	r0, [pc, #540]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006bbc:	f7fa f869 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d904      	bls.n	8006bd2 <RCCEx_PLL3_Config+0x3a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd0:	d904      	bls.n	8006bdc <RCCEx_PLL3_Config+0x44>
 8006bd2:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006bd6:	4880      	ldr	r0, [pc, #512]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006bd8:	f7fa f85b 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <RCCEx_PLL3_Config+0x54>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b80      	cmp	r3, #128	; 0x80
 8006bea:	d904      	bls.n	8006bf6 <RCCEx_PLL3_Config+0x5e>
 8006bec:	f640 41e9 	movw	r1, #3305	; 0xce9
 8006bf0:	4879      	ldr	r0, [pc, #484]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006bf2:	f7fa f84e 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <RCCEx_PLL3_Config+0x6e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d904      	bls.n	8006c10 <RCCEx_PLL3_Config+0x78>
 8006c06:	f640 41ea 	movw	r1, #3306	; 0xcea
 8006c0a:	4873      	ldr	r0, [pc, #460]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006c0c:	f7fa f841 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <RCCEx_PLL3_Config+0x88>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b80      	cmp	r3, #128	; 0x80
 8006c1e:	d904      	bls.n	8006c2a <RCCEx_PLL3_Config+0x92>
 8006c20:	f640 41eb 	movw	r1, #3307	; 0xceb
 8006c24:	486c      	ldr	r0, [pc, #432]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006c26:	f7fa f834 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d013      	beq.n	8006c5a <RCCEx_PLL3_Config+0xc2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	d00e      	beq.n	8006c5a <RCCEx_PLL3_Config+0xc2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d009      	beq.n	8006c5a <RCCEx_PLL3_Config+0xc2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c4e:	d004      	beq.n	8006c5a <RCCEx_PLL3_Config+0xc2>
 8006c50:	f640 41ec 	movw	r1, #3308	; 0xcec
 8006c54:	4860      	ldr	r0, [pc, #384]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006c56:	f7fa f81c 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <RCCEx_PLL3_Config+0xde>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6a:	d004      	beq.n	8006c76 <RCCEx_PLL3_Config+0xde>
 8006c6c:	f640 41ed 	movw	r1, #3309	; 0xced
 8006c70:	4859      	ldr	r0, [pc, #356]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006c72:	f7fa f80e 	bl	8000c92 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7e:	d304      	bcc.n	8006c8a <RCCEx_PLL3_Config+0xf2>
 8006c80:	f640 41ee 	movw	r1, #3310	; 0xcee
 8006c84:	4854      	ldr	r0, [pc, #336]	; (8006dd8 <RCCEx_PLL3_Config+0x240>)
 8006c86:	f7fa f804 	bl	8000c92 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c8a:	4b54      	ldr	r3, [pc, #336]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d101      	bne.n	8006c9a <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e099      	b.n	8006dce <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c9a:	4b50      	ldr	r3, [pc, #320]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a4f      	ldr	r2, [pc, #316]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca6:	f7fa fc0b 	bl	80014c0 <HAL_GetTick>
 8006caa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006cae:	f7fa fc07 	bl	80014c0 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e086      	b.n	8006dce <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cc0:	4b46      	ldr	r3, [pc, #280]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f0      	bne.n	8006cae <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ccc:	4b43      	ldr	r3, [pc, #268]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	051b      	lsls	r3, r3, #20
 8006cda:	4940      	ldr	r1, [pc, #256]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	628b      	str	r3, [r1, #40]	; 0x28
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	025b      	lsls	r3, r3, #9
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	041b      	lsls	r3, r3, #16
 8006cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	061b      	lsls	r3, r3, #24
 8006d0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d10:	4932      	ldr	r1, [pc, #200]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d16:	4b31      	ldr	r3, [pc, #196]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	492e      	ldr	r1, [pc, #184]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d28:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	4929      	ldr	r1, [pc, #164]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d3a:	4b28      	ldr	r3, [pc, #160]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d46:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d4a:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <RCCEx_PLL3_Config+0x248>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	69d2      	ldr	r2, [r2, #28]
 8006d52:	00d2      	lsls	r2, r2, #3
 8006d54:	4921      	ldr	r1, [pc, #132]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	4a1a      	ldr	r2, [pc, #104]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d78:	e00f      	b.n	8006d9a <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d106      	bne.n	8006d8e <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d8c:	e005      	b.n	8006d9a <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d8e:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	4a12      	ldr	r2, [pc, #72]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d9a:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a0f      	ldr	r2, [pc, #60]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da6:	f7fa fb8b 	bl	80014c0 <HAL_GetTick>
 8006daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dac:	e008      	b.n	8006dc0 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006dae:	f7fa fb87 	bl	80014c0 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e006      	b.n	8006dce <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <RCCEx_PLL3_Config+0x244>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0f0      	beq.n	8006dae <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	080188cc 	.word	0x080188cc
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	ffff0007 	.word	0xffff0007

08006de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e0a1      	b.n	8006f3a <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a52      	ldr	r2, [pc, #328]	; (8006f44 <HAL_TIM_Base_Init+0x160>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d045      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e08:	d040      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a4e      	ldr	r2, [pc, #312]	; (8006f48 <HAL_TIM_Base_Init+0x164>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d03b      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a4c      	ldr	r2, [pc, #304]	; (8006f4c <HAL_TIM_Base_Init+0x168>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d036      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a4b      	ldr	r2, [pc, #300]	; (8006f50 <HAL_TIM_Base_Init+0x16c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d031      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a49      	ldr	r2, [pc, #292]	; (8006f54 <HAL_TIM_Base_Init+0x170>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d02c      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a48      	ldr	r2, [pc, #288]	; (8006f58 <HAL_TIM_Base_Init+0x174>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d027      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a46      	ldr	r2, [pc, #280]	; (8006f5c <HAL_TIM_Base_Init+0x178>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d022      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a45      	ldr	r2, [pc, #276]	; (8006f60 <HAL_TIM_Base_Init+0x17c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d01d      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a43      	ldr	r2, [pc, #268]	; (8006f64 <HAL_TIM_Base_Init+0x180>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d018      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a42      	ldr	r2, [pc, #264]	; (8006f68 <HAL_TIM_Base_Init+0x184>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d013      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a40      	ldr	r2, [pc, #256]	; (8006f6c <HAL_TIM_Base_Init+0x188>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00e      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a3f      	ldr	r2, [pc, #252]	; (8006f70 <HAL_TIM_Base_Init+0x18c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d009      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a3d      	ldr	r2, [pc, #244]	; (8006f74 <HAL_TIM_Base_Init+0x190>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_TIM_Base_Init+0xa8>
 8006e82:	f240 1115 	movw	r1, #277	; 0x115
 8006e86:	483c      	ldr	r0, [pc, #240]	; (8006f78 <HAL_TIM_Base_Init+0x194>)
 8006e88:	f7f9 ff03 	bl	8000c92 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d014      	beq.n	8006ebe <HAL_TIM_Base_Init+0xda>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d010      	beq.n	8006ebe <HAL_TIM_Base_Init+0xda>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d00c      	beq.n	8006ebe <HAL_TIM_Base_Init+0xda>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d008      	beq.n	8006ebe <HAL_TIM_Base_Init+0xda>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b60      	cmp	r3, #96	; 0x60
 8006eb2:	d004      	beq.n	8006ebe <HAL_TIM_Base_Init+0xda>
 8006eb4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006eb8:	482f      	ldr	r0, [pc, #188]	; (8006f78 <HAL_TIM_Base_Init+0x194>)
 8006eba:	f7f9 feea 	bl	8000c92 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_TIM_Base_Init+0x100>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ece:	d009      	beq.n	8006ee4 <HAL_TIM_Base_Init+0x100>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed8:	d004      	beq.n	8006ee4 <HAL_TIM_Base_Init+0x100>
 8006eda:	f240 1117 	movw	r1, #279	; 0x117
 8006ede:	4826      	ldr	r0, [pc, #152]	; (8006f78 <HAL_TIM_Base_Init+0x194>)
 8006ee0:	f7f9 fed7 	bl	8000c92 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_TIM_Base_Init+0x11a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d004      	beq.n	8006efe <HAL_TIM_Base_Init+0x11a>
 8006ef4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006ef8:	481f      	ldr	r0, [pc, #124]	; (8006f78 <HAL_TIM_Base_Init+0x194>)
 8006efa:	f7f9 feca 	bl	8000c92 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f832 	bl	8006f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f000 fa08 	bl	8007340 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40001000 	.word	0x40001000
 8006f58:	40001400 	.word	0x40001400
 8006f5c:	40010400 	.word	0x40010400
 8006f60:	40001800 	.word	0x40001800
 8006f64:	40001c00 	.word	0x40001c00
 8006f68:	40002000 	.word	0x40002000
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800
 8006f78:	08018908 	.word	0x08018908

08006f7c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a35      	ldr	r2, [pc, #212]	; (8007074 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d045      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006faa:	d040      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a31      	ldr	r2, [pc, #196]	; (8007078 <HAL_TIM_Base_Start_IT+0xe8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d03b      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a30      	ldr	r2, [pc, #192]	; (800707c <HAL_TIM_Base_Start_IT+0xec>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d036      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2e      	ldr	r2, [pc, #184]	; (8007080 <HAL_TIM_Base_Start_IT+0xf0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d031      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a2d      	ldr	r2, [pc, #180]	; (8007084 <HAL_TIM_Base_Start_IT+0xf4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d02c      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2b      	ldr	r2, [pc, #172]	; (8007088 <HAL_TIM_Base_Start_IT+0xf8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d027      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2a      	ldr	r2, [pc, #168]	; (800708c <HAL_TIM_Base_Start_IT+0xfc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d022      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a28      	ldr	r2, [pc, #160]	; (8007090 <HAL_TIM_Base_Start_IT+0x100>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01d      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a27      	ldr	r2, [pc, #156]	; (8007094 <HAL_TIM_Base_Start_IT+0x104>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d018      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a25      	ldr	r2, [pc, #148]	; (8007098 <HAL_TIM_Base_Start_IT+0x108>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a24      	ldr	r2, [pc, #144]	; (800709c <HAL_TIM_Base_Start_IT+0x10c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a22      	ldr	r2, [pc, #136]	; (80070a0 <HAL_TIM_Base_Start_IT+0x110>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a21      	ldr	r2, [pc, #132]	; (80070a4 <HAL_TIM_Base_Start_IT+0x114>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x9e>
 8007024:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8007028:	481f      	ldr	r0, [pc, #124]	; (80070a8 <HAL_TIM_Base_Start_IT+0x118>)
 800702a:	f7f9 fe32 	bl	8000c92 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0201 	orr.w	r2, r2, #1
 800703c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	4b19      	ldr	r3, [pc, #100]	; (80070ac <HAL_TIM_Base_Start_IT+0x11c>)
 8007046:	4013      	ands	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b06      	cmp	r3, #6
 800704e:	d00b      	beq.n	8007068 <HAL_TIM_Base_Start_IT+0xd8>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007056:	d007      	beq.n	8007068 <HAL_TIM_Base_Start_IT+0xd8>
  {
    __HAL_TIM_ENABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40010000 	.word	0x40010000
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40000c00 	.word	0x40000c00
 8007084:	40001000 	.word	0x40001000
 8007088:	40001400 	.word	0x40001400
 800708c:	40010400 	.word	0x40010400
 8007090:	40001800 	.word	0x40001800
 8007094:	40001c00 	.word	0x40001c00
 8007098:	40002000 	.word	0x40002000
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800
 80070a8:	08018908 	.word	0x08018908
 80070ac:	00010007 	.word	0x00010007

080070b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d122      	bne.n	800710c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0202 	mvn.w	r2, #2
 80070dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f905 	bl	8007302 <HAL_TIM_IC_CaptureCallback>
 80070f8:	e005      	b.n	8007106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f8f7 	bl	80072ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f908 	bl	8007316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b04      	cmp	r3, #4
 8007118:	d122      	bne.n	8007160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b04      	cmp	r3, #4
 8007126:	d11b      	bne.n	8007160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0204 	mvn.w	r2, #4
 8007130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8db 	bl	8007302 <HAL_TIM_IC_CaptureCallback>
 800714c:	e005      	b.n	800715a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8cd 	bl	80072ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f8de 	bl	8007316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b08      	cmp	r3, #8
 800716c:	d122      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b08      	cmp	r3, #8
 800717a:	d11b      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0208 	mvn.w	r2, #8
 8007184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2204      	movs	r2, #4
 800718a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f8b1 	bl	8007302 <HAL_TIM_IC_CaptureCallback>
 80071a0:	e005      	b.n	80071ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8a3 	bl	80072ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f8b4 	bl	8007316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d122      	bne.n	8007208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d11b      	bne.n	8007208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0210 	mvn.w	r2, #16
 80071d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2208      	movs	r2, #8
 80071de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f887 	bl	8007302 <HAL_TIM_IC_CaptureCallback>
 80071f4:	e005      	b.n	8007202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f879 	bl	80072ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f88a 	bl	8007316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10e      	bne.n	8007234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d107      	bne.n	8007234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f06f 0201 	mvn.w	r2, #1
 800722c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7f9 fd16 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b80      	cmp	r3, #128	; 0x80
 8007240:	d10e      	bne.n	8007260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d107      	bne.n	8007260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f914 	bl	8007488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726e:	d10e      	bne.n	800728e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727a:	2b80      	cmp	r3, #128	; 0x80
 800727c:	d107      	bne.n	800728e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f907 	bl	800749c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b40      	cmp	r3, #64	; 0x40
 800729a:	d10e      	bne.n	80072ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d107      	bne.n	80072ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f838 	bl	800732a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d10e      	bne.n	80072e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d107      	bne.n	80072e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f06f 0220 	mvn.w	r2, #32
 80072de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f8c7 	bl	8007474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a40      	ldr	r2, [pc, #256]	; (8007454 <TIM_Base_SetConfig+0x114>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735e:	d00f      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a3d      	ldr	r2, [pc, #244]	; (8007458 <TIM_Base_SetConfig+0x118>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00b      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a3c      	ldr	r2, [pc, #240]	; (800745c <TIM_Base_SetConfig+0x11c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a3b      	ldr	r2, [pc, #236]	; (8007460 <TIM_Base_SetConfig+0x120>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_Base_SetConfig+0x40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a3a      	ldr	r2, [pc, #232]	; (8007464 <TIM_Base_SetConfig+0x124>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d108      	bne.n	8007392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a2f      	ldr	r2, [pc, #188]	; (8007454 <TIM_Base_SetConfig+0x114>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01f      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d01b      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a2c      	ldr	r2, [pc, #176]	; (8007458 <TIM_Base_SetConfig+0x118>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d017      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a2b      	ldr	r2, [pc, #172]	; (800745c <TIM_Base_SetConfig+0x11c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d013      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a2a      	ldr	r2, [pc, #168]	; (8007460 <TIM_Base_SetConfig+0x120>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00f      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a29      	ldr	r2, [pc, #164]	; (8007464 <TIM_Base_SetConfig+0x124>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00b      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a28      	ldr	r2, [pc, #160]	; (8007468 <TIM_Base_SetConfig+0x128>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d007      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a27      	ldr	r2, [pc, #156]	; (800746c <TIM_Base_SetConfig+0x12c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d003      	beq.n	80073da <TIM_Base_SetConfig+0x9a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a26      	ldr	r2, [pc, #152]	; (8007470 <TIM_Base_SetConfig+0x130>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d108      	bne.n	80073ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a10      	ldr	r2, [pc, #64]	; (8007454 <TIM_Base_SetConfig+0x114>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00f      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a12      	ldr	r2, [pc, #72]	; (8007464 <TIM_Base_SetConfig+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00b      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a11      	ldr	r2, [pc, #68]	; (8007468 <TIM_Base_SetConfig+0x128>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d007      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a10      	ldr	r2, [pc, #64]	; (800746c <TIM_Base_SetConfig+0x12c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d003      	beq.n	8007438 <TIM_Base_SetConfig+0xf8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <TIM_Base_SetConfig+0x130>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d103      	bne.n	8007440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	615a      	str	r2, [r3, #20]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40010000 	.word	0x40010000
 8007458:	40000400 	.word	0x40000400
 800745c:	40000800 	.word	0x40000800
 8007460:	40000c00 	.word	0x40000c00
 8007464:	40010400 	.word	0x40010400
 8007468:	40014000 	.word	0x40014000
 800746c:	40014400 	.word	0x40014400
 8007470:	40014800 	.word	0x40014800

08007474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e0ab      	b.n	800761a <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d032      	beq.n	8007530 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a55      	ldr	r2, [pc, #340]	; (8007624 <HAL_UART_Init+0x174>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d05f      	beq.n	8007594 <HAL_UART_Init+0xe4>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a53      	ldr	r2, [pc, #332]	; (8007628 <HAL_UART_Init+0x178>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d05a      	beq.n	8007594 <HAL_UART_Init+0xe4>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a52      	ldr	r2, [pc, #328]	; (800762c <HAL_UART_Init+0x17c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d055      	beq.n	8007594 <HAL_UART_Init+0xe4>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a50      	ldr	r2, [pc, #320]	; (8007630 <HAL_UART_Init+0x180>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d050      	beq.n	8007594 <HAL_UART_Init+0xe4>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a4f      	ldr	r2, [pc, #316]	; (8007634 <HAL_UART_Init+0x184>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d04b      	beq.n	8007594 <HAL_UART_Init+0xe4>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a4d      	ldr	r2, [pc, #308]	; (8007638 <HAL_UART_Init+0x188>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d046      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a4c      	ldr	r2, [pc, #304]	; (800763c <HAL_UART_Init+0x18c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d041      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a4a      	ldr	r2, [pc, #296]	; (8007640 <HAL_UART_Init+0x190>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d03c      	beq.n	8007594 <HAL_UART_Init+0xe4>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a49      	ldr	r2, [pc, #292]	; (8007644 <HAL_UART_Init+0x194>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d037      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007524:	f44f 7199 	mov.w	r1, #306	; 0x132
 8007528:	4847      	ldr	r0, [pc, #284]	; (8007648 <HAL_UART_Init+0x198>)
 800752a:	f7f9 fbb2 	bl	8000c92 <assert_failed>
 800752e:	e031      	b.n	8007594 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a3b      	ldr	r2, [pc, #236]	; (8007624 <HAL_UART_Init+0x174>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d02c      	beq.n	8007594 <HAL_UART_Init+0xe4>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a3a      	ldr	r2, [pc, #232]	; (8007628 <HAL_UART_Init+0x178>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d027      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a38      	ldr	r2, [pc, #224]	; (800762c <HAL_UART_Init+0x17c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d022      	beq.n	8007594 <HAL_UART_Init+0xe4>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a37      	ldr	r2, [pc, #220]	; (8007630 <HAL_UART_Init+0x180>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d01d      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a35      	ldr	r2, [pc, #212]	; (8007634 <HAL_UART_Init+0x184>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d018      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a34      	ldr	r2, [pc, #208]	; (8007638 <HAL_UART_Init+0x188>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <HAL_UART_Init+0xe4>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a32      	ldr	r2, [pc, #200]	; (800763c <HAL_UART_Init+0x18c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00e      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a31      	ldr	r2, [pc, #196]	; (8007640 <HAL_UART_Init+0x190>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d009      	beq.n	8007594 <HAL_UART_Init+0xe4>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <HAL_UART_Init+0x194>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <HAL_UART_Init+0xe4>
 800758a:	f240 1137 	movw	r1, #311	; 0x137
 800758e:	482e      	ldr	r0, [pc, #184]	; (8007648 <HAL_UART_Init+0x198>)
 8007590:	f7f9 fb7f 	bl	8000c92 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7f9 fd66 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2224      	movs	r2, #36	; 0x24
 80075b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f843 	bl	8007650 <UART_SetConfig>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e022      	b.n	800761a <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f002 fa95 	bl	8009b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007600:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0201 	orr.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f002 fbf0 	bl	8009df8 <UART_CheckIdleState>
 8007618:	4603      	mov	r3, r0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40011000 	.word	0x40011000
 8007628:	40004400 	.word	0x40004400
 800762c:	40004800 	.word	0x40004800
 8007630:	40004c00 	.word	0x40004c00
 8007634:	40005000 	.word	0x40005000
 8007638:	40011400 	.word	0x40011400
 800763c:	40007800 	.word	0x40007800
 8007640:	40007c00 	.word	0x40007c00
 8007644:	58000c00 	.word	0x58000c00
 8007648:	08018940 	.word	0x08018940
 800764c:	00000000 	.word	0x00000000

08007650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007650:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007654:	b090      	sub	sp, #64	; 0x40
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800765a:	2300      	movs	r3, #0
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007664:	2300      	movs	r3, #0
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	4a17      	ldr	r2, [pc, #92]	; (80076cc <UART_SetConfig+0x7c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d904      	bls.n	800767c <UART_SetConfig+0x2c>
 8007672:	f640 3134 	movw	r1, #2868	; 0xb34
 8007676:	4816      	ldr	r0, [pc, #88]	; (80076d0 <UART_SetConfig+0x80>)
 8007678:	f7f9 fb0b 	bl	8000c92 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007684:	d00d      	beq.n	80076a2 <UART_SetConfig+0x52>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <UART_SetConfig+0x52>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007696:	d004      	beq.n	80076a2 <UART_SetConfig+0x52>
 8007698:	f640 3135 	movw	r1, #2869	; 0xb35
 800769c:	480c      	ldr	r0, [pc, #48]	; (80076d0 <UART_SetConfig+0x80>)
 800769e:	f7f9 faf8 	bl	8000c92 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a0b      	ldr	r2, [pc, #44]	; (80076d4 <UART_SetConfig+0x84>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d115      	bne.n	80076d8 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d037      	beq.n	8007724 <UART_SetConfig+0xd4>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076bc:	d032      	beq.n	8007724 <UART_SetConfig+0xd4>
 80076be:	f640 3138 	movw	r1, #2872	; 0xb38
 80076c2:	4803      	ldr	r0, [pc, #12]	; (80076d0 <UART_SetConfig+0x80>)
 80076c4:	f7f9 fae5 	bl	8000c92 <assert_failed>
 80076c8:	e02c      	b.n	8007724 <UART_SetConfig+0xd4>
 80076ca:	bf00      	nop
 80076cc:	00bebc20 	.word	0x00bebc20
 80076d0:	08018940 	.word	0x08018940
 80076d4:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e0:	d012      	beq.n	8007708 <UART_SetConfig+0xb8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00e      	beq.n	8007708 <UART_SetConfig+0xb8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076f2:	d009      	beq.n	8007708 <UART_SetConfig+0xb8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fc:	d004      	beq.n	8007708 <UART_SetConfig+0xb8>
 80076fe:	f640 313c 	movw	r1, #2876	; 0xb3c
 8007702:	48aa      	ldr	r0, [pc, #680]	; (80079ac <UART_SetConfig+0x35c>)
 8007704:	f7f9 fac5 	bl	8000c92 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <UART_SetConfig+0xd4>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007718:	d004      	beq.n	8007724 <UART_SetConfig+0xd4>
 800771a:	f640 313d 	movw	r1, #2877	; 0xb3d
 800771e:	48a3      	ldr	r0, [pc, #652]	; (80079ac <UART_SetConfig+0x35c>)
 8007720:	f7f9 fab7 	bl	8000c92 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00e      	beq.n	800774a <UART_SetConfig+0xfa>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007734:	d009      	beq.n	800774a <UART_SetConfig+0xfa>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800773e:	d004      	beq.n	800774a <UART_SetConfig+0xfa>
 8007740:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8007744:	4899      	ldr	r0, [pc, #612]	; (80079ac <UART_SetConfig+0x35c>)
 8007746:	f7f9 faa4 	bl	8000c92 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f023 030c 	bic.w	r3, r3, #12
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <UART_SetConfig+0x10e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d104      	bne.n	8007768 <UART_SetConfig+0x118>
 800775e:	f640 3141 	movw	r1, #2881	; 0xb41
 8007762:	4892      	ldr	r0, [pc, #584]	; (80079ac <UART_SetConfig+0x35c>)
 8007764:	f7f9 fa95 	bl	8000c92 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d013      	beq.n	8007798 <UART_SetConfig+0x148>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007778:	d00e      	beq.n	8007798 <UART_SetConfig+0x148>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007782:	d009      	beq.n	8007798 <UART_SetConfig+0x148>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778c:	d004      	beq.n	8007798 <UART_SetConfig+0x148>
 800778e:	f640 3142 	movw	r1, #2882	; 0xb42
 8007792:	4886      	ldr	r0, [pc, #536]	; (80079ac <UART_SetConfig+0x35c>)
 8007794:	f7f9 fa7d 	bl	8000c92 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d009      	beq.n	80077b4 <UART_SetConfig+0x164>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a8:	d004      	beq.n	80077b4 <UART_SetConfig+0x164>
 80077aa:	f640 3143 	movw	r1, #2883	; 0xb43
 80077ae:	487f      	ldr	r0, [pc, #508]	; (80079ac <UART_SetConfig+0x35c>)
 80077b0:	f7f9 fa6f 	bl	8000c92 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d030      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d02c      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d028      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d024      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d020      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d01c      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	2b06      	cmp	r3, #6
 80077ea:	d018      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	2b07      	cmp	r3, #7
 80077f2:	d014      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d010      	beq.n	800781e <UART_SetConfig+0x1ce>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	2b09      	cmp	r3, #9
 8007802:	d00c      	beq.n	800781e <UART_SetConfig+0x1ce>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b0a      	cmp	r3, #10
 800780a:	d008      	beq.n	800781e <UART_SetConfig+0x1ce>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	2b0b      	cmp	r3, #11
 8007812:	d004      	beq.n	800781e <UART_SetConfig+0x1ce>
 8007814:	f640 3144 	movw	r1, #2884	; 0xb44
 8007818:	4864      	ldr	r0, [pc, #400]	; (80079ac <UART_SetConfig+0x35c>)
 800781a:	f7f9 fa3a 	bl	8000c92 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	431a      	orrs	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	4313      	orrs	r3, r2
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800783a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800783c:	4313      	orrs	r3, r2
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b5a      	ldr	r3, [pc, #360]	; (80079b0 <UART_SetConfig+0x360>)
 8007848:	4013      	ands	r3, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007850:	430b      	orrs	r3, r1
 8007852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a4f      	ldr	r2, [pc, #316]	; (80079b4 <UART_SetConfig+0x364>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d004      	beq.n	8007884 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007880:	4313      	orrs	r3, r2
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	4b4b      	ldr	r3, [pc, #300]	; (80079b8 <UART_SetConfig+0x368>)
 800788c:	4013      	ands	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007894:	430b      	orrs	r3, r1
 8007896:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	f023 010f 	bic.w	r1, r3, #15
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a42      	ldr	r2, [pc, #264]	; (80079bc <UART_SetConfig+0x36c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	f040 8085 	bne.w	80079c4 <UART_SetConfig+0x374>
 80078ba:	4b41      	ldr	r3, [pc, #260]	; (80079c0 <UART_SetConfig+0x370>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078c2:	2b28      	cmp	r3, #40	; 0x28
 80078c4:	d86c      	bhi.n	80079a0 <UART_SetConfig+0x350>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x27c>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	08007971 	.word	0x08007971
 80078d0:	080079a1 	.word	0x080079a1
 80078d4:	080079a1 	.word	0x080079a1
 80078d8:	080079a1 	.word	0x080079a1
 80078dc:	080079a1 	.word	0x080079a1
 80078e0:	080079a1 	.word	0x080079a1
 80078e4:	080079a1 	.word	0x080079a1
 80078e8:	080079a1 	.word	0x080079a1
 80078ec:	08007979 	.word	0x08007979
 80078f0:	080079a1 	.word	0x080079a1
 80078f4:	080079a1 	.word	0x080079a1
 80078f8:	080079a1 	.word	0x080079a1
 80078fc:	080079a1 	.word	0x080079a1
 8007900:	080079a1 	.word	0x080079a1
 8007904:	080079a1 	.word	0x080079a1
 8007908:	080079a1 	.word	0x080079a1
 800790c:	08007981 	.word	0x08007981
 8007910:	080079a1 	.word	0x080079a1
 8007914:	080079a1 	.word	0x080079a1
 8007918:	080079a1 	.word	0x080079a1
 800791c:	080079a1 	.word	0x080079a1
 8007920:	080079a1 	.word	0x080079a1
 8007924:	080079a1 	.word	0x080079a1
 8007928:	080079a1 	.word	0x080079a1
 800792c:	08007989 	.word	0x08007989
 8007930:	080079a1 	.word	0x080079a1
 8007934:	080079a1 	.word	0x080079a1
 8007938:	080079a1 	.word	0x080079a1
 800793c:	080079a1 	.word	0x080079a1
 8007940:	080079a1 	.word	0x080079a1
 8007944:	080079a1 	.word	0x080079a1
 8007948:	080079a1 	.word	0x080079a1
 800794c:	08007991 	.word	0x08007991
 8007950:	080079a1 	.word	0x080079a1
 8007954:	080079a1 	.word	0x080079a1
 8007958:	080079a1 	.word	0x080079a1
 800795c:	080079a1 	.word	0x080079a1
 8007960:	080079a1 	.word	0x080079a1
 8007964:	080079a1 	.word	0x080079a1
 8007968:	080079a1 	.word	0x080079a1
 800796c:	08007999 	.word	0x08007999
 8007970:	2301      	movs	r3, #1
 8007972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007976:	e23b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007978:	2304      	movs	r3, #4
 800797a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800797e:	e237      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007980:	2308      	movs	r3, #8
 8007982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007986:	e233      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007988:	2310      	movs	r3, #16
 800798a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800798e:	e22f      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007990:	2320      	movs	r3, #32
 8007992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007996:	e22b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800799e:	e227      	b.n	8007df0 <UART_SetConfig+0x7a0>
 80079a0:	2380      	movs	r3, #128	; 0x80
 80079a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079a6:	bf00      	nop
 80079a8:	e222      	b.n	8007df0 <UART_SetConfig+0x7a0>
 80079aa:	bf00      	nop
 80079ac:	08018940 	.word	0x08018940
 80079b0:	cfff69f3 	.word	0xcfff69f3
 80079b4:	58000c00 	.word	0x58000c00
 80079b8:	11fff4ff 	.word	0x11fff4ff
 80079bc:	40011000 	.word	0x40011000
 80079c0:	58024400 	.word	0x58024400
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4ac9      	ldr	r2, [pc, #804]	; (8007cf0 <UART_SetConfig+0x6a0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d131      	bne.n	8007a32 <UART_SetConfig+0x3e2>
 80079ce:	4bc9      	ldr	r3, [pc, #804]	; (8007cf4 <UART_SetConfig+0x6a4>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d826      	bhi.n	8007a28 <UART_SetConfig+0x3d8>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <UART_SetConfig+0x390>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079f9 	.word	0x080079f9
 80079e4:	08007a01 	.word	0x08007a01
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079fe:	e1f7      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a00:	2304      	movs	r3, #4
 8007a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a06:	e1f3      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a0e:	e1ef      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a10:	2310      	movs	r3, #16
 8007a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a16:	e1eb      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a1e:	e1e7      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a26:	e1e3      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a2e:	bf00      	nop
 8007a30:	e1de      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4ab0      	ldr	r2, [pc, #704]	; (8007cf8 <UART_SetConfig+0x6a8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d132      	bne.n	8007aa2 <UART_SetConfig+0x452>
 8007a3c:	4bad      	ldr	r3, [pc, #692]	; (8007cf4 <UART_SetConfig+0x6a4>)
 8007a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	d827      	bhi.n	8007a98 <UART_SetConfig+0x448>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0x400>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a69 	.word	0x08007a69
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a79 	.word	0x08007a79
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a89 	.word	0x08007a89
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a6e:	e1bf      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a70:	2304      	movs	r3, #4
 8007a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a76:	e1bb      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a7e:	e1b7      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a86:	e1b3      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a88:	2320      	movs	r3, #32
 8007a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a8e:	e1af      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a96:	e1ab      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007a98:	2380      	movs	r3, #128	; 0x80
 8007a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a9e:	bf00      	nop
 8007aa0:	e1a6      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a95      	ldr	r2, [pc, #596]	; (8007cfc <UART_SetConfig+0x6ac>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d132      	bne.n	8007b12 <UART_SetConfig+0x4c2>
 8007aac:	4b91      	ldr	r3, [pc, #580]	; (8007cf4 <UART_SetConfig+0x6a4>)
 8007aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	2b05      	cmp	r3, #5
 8007ab6:	d827      	bhi.n	8007b08 <UART_SetConfig+0x4b8>
 8007ab8:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <UART_SetConfig+0x470>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007af1 	.word	0x08007af1
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ade:	e187      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ae6:	e183      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007aee:	e17f      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007af6:	e17b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007afe:	e177      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b06:	e173      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b08:	2380      	movs	r3, #128	; 0x80
 8007b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b0e:	bf00      	nop
 8007b10:	e16e      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a7a      	ldr	r2, [pc, #488]	; (8007d00 <UART_SetConfig+0x6b0>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d132      	bne.n	8007b82 <UART_SetConfig+0x532>
 8007b1c:	4b75      	ldr	r3, [pc, #468]	; (8007cf4 <UART_SetConfig+0x6a4>)
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	2b05      	cmp	r3, #5
 8007b26:	d827      	bhi.n	8007b78 <UART_SetConfig+0x528>
 8007b28:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <UART_SetConfig+0x4e0>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b49 	.word	0x08007b49
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	08007b59 	.word	0x08007b59
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b69 	.word	0x08007b69
 8007b44:	08007b71 	.word	0x08007b71
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b4e:	e14f      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b56:	e14b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b5e:	e147      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b66:	e143      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b68:	2320      	movs	r3, #32
 8007b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b6e:	e13f      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b70:	2340      	movs	r3, #64	; 0x40
 8007b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b76:	e13b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b78:	2380      	movs	r3, #128	; 0x80
 8007b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b7e:	bf00      	nop
 8007b80:	e136      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a5f      	ldr	r2, [pc, #380]	; (8007d04 <UART_SetConfig+0x6b4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d178      	bne.n	8007c7e <UART_SetConfig+0x62e>
 8007b8c:	4b59      	ldr	r3, [pc, #356]	; (8007cf4 <UART_SetConfig+0x6a4>)
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b94:	2b28      	cmp	r3, #40	; 0x28
 8007b96:	d86d      	bhi.n	8007c74 <UART_SetConfig+0x624>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <UART_SetConfig+0x550>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007c45 	.word	0x08007c45
 8007ba4:	08007c75 	.word	0x08007c75
 8007ba8:	08007c75 	.word	0x08007c75
 8007bac:	08007c75 	.word	0x08007c75
 8007bb0:	08007c75 	.word	0x08007c75
 8007bb4:	08007c75 	.word	0x08007c75
 8007bb8:	08007c75 	.word	0x08007c75
 8007bbc:	08007c75 	.word	0x08007c75
 8007bc0:	08007c4d 	.word	0x08007c4d
 8007bc4:	08007c75 	.word	0x08007c75
 8007bc8:	08007c75 	.word	0x08007c75
 8007bcc:	08007c75 	.word	0x08007c75
 8007bd0:	08007c75 	.word	0x08007c75
 8007bd4:	08007c75 	.word	0x08007c75
 8007bd8:	08007c75 	.word	0x08007c75
 8007bdc:	08007c75 	.word	0x08007c75
 8007be0:	08007c55 	.word	0x08007c55
 8007be4:	08007c75 	.word	0x08007c75
 8007be8:	08007c75 	.word	0x08007c75
 8007bec:	08007c75 	.word	0x08007c75
 8007bf0:	08007c75 	.word	0x08007c75
 8007bf4:	08007c75 	.word	0x08007c75
 8007bf8:	08007c75 	.word	0x08007c75
 8007bfc:	08007c75 	.word	0x08007c75
 8007c00:	08007c5d 	.word	0x08007c5d
 8007c04:	08007c75 	.word	0x08007c75
 8007c08:	08007c75 	.word	0x08007c75
 8007c0c:	08007c75 	.word	0x08007c75
 8007c10:	08007c75 	.word	0x08007c75
 8007c14:	08007c75 	.word	0x08007c75
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007c75 	.word	0x08007c75
 8007c20:	08007c65 	.word	0x08007c65
 8007c24:	08007c75 	.word	0x08007c75
 8007c28:	08007c75 	.word	0x08007c75
 8007c2c:	08007c75 	.word	0x08007c75
 8007c30:	08007c75 	.word	0x08007c75
 8007c34:	08007c75 	.word	0x08007c75
 8007c38:	08007c75 	.word	0x08007c75
 8007c3c:	08007c75 	.word	0x08007c75
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c4a:	e0d1      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c52:	e0cd      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c5a:	e0c9      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c62:	e0c5      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007c64:	2320      	movs	r3, #32
 8007c66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c6a:	e0c1      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c72:	e0bd      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c7a:	bf00      	nop
 8007c7c:	e0b8      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a21      	ldr	r2, [pc, #132]	; (8007d08 <UART_SetConfig+0x6b8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d141      	bne.n	8007d0c <UART_SetConfig+0x6bc>
 8007c88:	4b1a      	ldr	r3, [pc, #104]	; (8007cf4 <UART_SetConfig+0x6a4>)
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	2b05      	cmp	r3, #5
 8007c92:	d827      	bhi.n	8007ce4 <UART_SetConfig+0x694>
 8007c94:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x64c>)
 8007c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9a:	bf00      	nop
 8007c9c:	08007cb5 	.word	0x08007cb5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cba:	e099      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cc2:	e095      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cca:	e091      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cd2:	e08d      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cda:	e089      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ce2:	e085      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cea:	bf00      	nop
 8007cec:	e080      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007cee:	bf00      	nop
 8007cf0:	40004400 	.word	0x40004400
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	40004800 	.word	0x40004800
 8007cfc:	40004c00 	.word	0x40004c00
 8007d00:	40005000 	.word	0x40005000
 8007d04:	40011400 	.word	0x40011400
 8007d08:	40007800 	.word	0x40007800
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a98      	ldr	r2, [pc, #608]	; (8007f74 <UART_SetConfig+0x924>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d131      	bne.n	8007d7a <UART_SetConfig+0x72a>
 8007d16:	4b98      	ldr	r3, [pc, #608]	; (8007f78 <UART_SetConfig+0x928>)
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b05      	cmp	r3, #5
 8007d20:	d826      	bhi.n	8007d70 <UART_SetConfig+0x720>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x6d8>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d51 	.word	0x08007d51
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d46:	e053      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d4e:	e04f      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d56:	e04b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d5e:	e047      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007d60:	2320      	movs	r3, #32
 8007d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d66:	e043      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d6e:	e03f      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d76:	bf00      	nop
 8007d78:	e03a      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a7f      	ldr	r2, [pc, #508]	; (8007f7c <UART_SetConfig+0x92c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d132      	bne.n	8007dea <UART_SetConfig+0x79a>
 8007d84:	4b7c      	ldr	r3, [pc, #496]	; (8007f78 <UART_SetConfig+0x928>)
 8007d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	d827      	bhi.n	8007de0 <UART_SetConfig+0x790>
 8007d90:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <UART_SetConfig+0x748>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007db9 	.word	0x08007db9
 8007da0:	08007dc1 	.word	0x08007dc1
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007dd1 	.word	0x08007dd1
 8007dac:	08007dd9 	.word	0x08007dd9
 8007db0:	2302      	movs	r3, #2
 8007db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007db6:	e01b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007db8:	2304      	movs	r3, #4
 8007dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dbe:	e017      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dc6:	e013      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007dc8:	2310      	movs	r3, #16
 8007dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dce:	e00f      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dd6:	e00b      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dde:	e007      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <UART_SetConfig+0x7a0>
 8007dea:	2380      	movs	r3, #128	; 0x80
 8007dec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a61      	ldr	r2, [pc, #388]	; (8007f7c <UART_SetConfig+0x92c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	f040 86f3 	bne.w	8008be2 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dfc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	f000 80bd 	beq.w	8007f80 <UART_SetConfig+0x930>
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	dc04      	bgt.n	8007e14 <UART_SetConfig+0x7c4>
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d00c      	beq.n	8007e28 <UART_SetConfig+0x7d8>
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d05b      	beq.n	8007eca <UART_SetConfig+0x87a>
 8007e12:	e276      	b.n	8008302 <UART_SetConfig+0xcb2>
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	f000 81ad 	beq.w	8008174 <UART_SetConfig+0xb24>
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	f000 821a 	beq.w	8008254 <UART_SetConfig+0xc04>
 8007e20:	2b10      	cmp	r3, #16
 8007e22:	f000 8101 	beq.w	8008028 <UART_SetConfig+0x9d8>
 8007e26:	e26c      	b.n	8008302 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e28:	f7fe fae6 	bl	80063f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d044      	beq.n	8007ec0 <UART_SetConfig+0x870>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d03e      	beq.n	8007ebc <UART_SetConfig+0x86c>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d038      	beq.n	8007eb8 <UART_SetConfig+0x868>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d032      	beq.n	8007eb4 <UART_SetConfig+0x864>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d02c      	beq.n	8007eb0 <UART_SetConfig+0x860>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b05      	cmp	r3, #5
 8007e5c:	d026      	beq.n	8007eac <UART_SetConfig+0x85c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b06      	cmp	r3, #6
 8007e64:	d020      	beq.n	8007ea8 <UART_SetConfig+0x858>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b07      	cmp	r3, #7
 8007e6c:	d01a      	beq.n	8007ea4 <UART_SetConfig+0x854>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b08      	cmp	r3, #8
 8007e74:	d014      	beq.n	8007ea0 <UART_SetConfig+0x850>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d00e      	beq.n	8007e9c <UART_SetConfig+0x84c>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b0a      	cmp	r3, #10
 8007e84:	d008      	beq.n	8007e98 <UART_SetConfig+0x848>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b0b      	cmp	r3, #11
 8007e8c:	d102      	bne.n	8007e94 <UART_SetConfig+0x844>
 8007e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e92:	e016      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e014      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007e98:	2380      	movs	r3, #128	; 0x80
 8007e9a:	e012      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	e010      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	e00e      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	e00c      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	e00a      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007eac:	230a      	movs	r3, #10
 8007eae:	e008      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	e006      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007eb4:	2306      	movs	r3, #6
 8007eb6:	e004      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	e002      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e000      	b.n	8007ec2 <UART_SetConfig+0x872>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ec8:	e21f      	b.n	800830a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eca:	f107 0318 	add.w	r3, r7, #24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe faa8 	bl	8006424 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d044      	beq.n	8007f68 <UART_SetConfig+0x918>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d03e      	beq.n	8007f64 <UART_SetConfig+0x914>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d038      	beq.n	8007f60 <UART_SetConfig+0x910>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d032      	beq.n	8007f5c <UART_SetConfig+0x90c>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d02c      	beq.n	8007f58 <UART_SetConfig+0x908>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d026      	beq.n	8007f54 <UART_SetConfig+0x904>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	2b06      	cmp	r3, #6
 8007f0c:	d020      	beq.n	8007f50 <UART_SetConfig+0x900>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	2b07      	cmp	r3, #7
 8007f14:	d01a      	beq.n	8007f4c <UART_SetConfig+0x8fc>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b08      	cmp	r3, #8
 8007f1c:	d014      	beq.n	8007f48 <UART_SetConfig+0x8f8>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	d00e      	beq.n	8007f44 <UART_SetConfig+0x8f4>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	2b0a      	cmp	r3, #10
 8007f2c:	d008      	beq.n	8007f40 <UART_SetConfig+0x8f0>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b0b      	cmp	r3, #11
 8007f34:	d102      	bne.n	8007f3c <UART_SetConfig+0x8ec>
 8007f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f3a:	e016      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e014      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	e012      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f44:	2340      	movs	r3, #64	; 0x40
 8007f46:	e010      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f48:	2320      	movs	r3, #32
 8007f4a:	e00e      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	e00c      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f50:	230c      	movs	r3, #12
 8007f52:	e00a      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f54:	230a      	movs	r3, #10
 8007f56:	e008      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f58:	2308      	movs	r3, #8
 8007f5a:	e006      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f5c:	2306      	movs	r3, #6
 8007f5e:	e004      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f60:	2304      	movs	r3, #4
 8007f62:	e002      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e000      	b.n	8007f6a <UART_SetConfig+0x91a>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f70:	e1cb      	b.n	800830a <UART_SetConfig+0xcba>
 8007f72:	bf00      	nop
 8007f74:	40007c00 	.word	0x40007c00
 8007f78:	58024400 	.word	0x58024400
 8007f7c:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f80:	f107 030c 	add.w	r3, r7, #12
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fb99 	bl	80066bc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d044      	beq.n	800801e <UART_SetConfig+0x9ce>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d03e      	beq.n	800801a <UART_SetConfig+0x9ca>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d038      	beq.n	8008016 <UART_SetConfig+0x9c6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d032      	beq.n	8008012 <UART_SetConfig+0x9c2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d02c      	beq.n	800800e <UART_SetConfig+0x9be>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	d026      	beq.n	800800a <UART_SetConfig+0x9ba>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	2b06      	cmp	r3, #6
 8007fc2:	d020      	beq.n	8008006 <UART_SetConfig+0x9b6>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	2b07      	cmp	r3, #7
 8007fca:	d01a      	beq.n	8008002 <UART_SetConfig+0x9b2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d014      	beq.n	8007ffe <UART_SetConfig+0x9ae>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b09      	cmp	r3, #9
 8007fda:	d00e      	beq.n	8007ffa <UART_SetConfig+0x9aa>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	2b0a      	cmp	r3, #10
 8007fe2:	d008      	beq.n	8007ff6 <UART_SetConfig+0x9a6>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	2b0b      	cmp	r3, #11
 8007fea:	d102      	bne.n	8007ff2 <UART_SetConfig+0x9a2>
 8007fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ff0:	e016      	b.n	8008020 <UART_SetConfig+0x9d0>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e014      	b.n	8008020 <UART_SetConfig+0x9d0>
 8007ff6:	2380      	movs	r3, #128	; 0x80
 8007ff8:	e012      	b.n	8008020 <UART_SetConfig+0x9d0>
 8007ffa:	2340      	movs	r3, #64	; 0x40
 8007ffc:	e010      	b.n	8008020 <UART_SetConfig+0x9d0>
 8007ffe:	2320      	movs	r3, #32
 8008000:	e00e      	b.n	8008020 <UART_SetConfig+0x9d0>
 8008002:	2310      	movs	r3, #16
 8008004:	e00c      	b.n	8008020 <UART_SetConfig+0x9d0>
 8008006:	230c      	movs	r3, #12
 8008008:	e00a      	b.n	8008020 <UART_SetConfig+0x9d0>
 800800a:	230a      	movs	r3, #10
 800800c:	e008      	b.n	8008020 <UART_SetConfig+0x9d0>
 800800e:	2308      	movs	r3, #8
 8008010:	e006      	b.n	8008020 <UART_SetConfig+0x9d0>
 8008012:	2306      	movs	r3, #6
 8008014:	e004      	b.n	8008020 <UART_SetConfig+0x9d0>
 8008016:	2304      	movs	r3, #4
 8008018:	e002      	b.n	8008020 <UART_SetConfig+0x9d0>
 800801a:	2302      	movs	r3, #2
 800801c:	e000      	b.n	8008020 <UART_SetConfig+0x9d0>
 800801e:	2301      	movs	r3, #1
 8008020:	fbb2 f3f3 	udiv	r3, r2, r3
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008026:	e170      	b.n	800830a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008028:	4b79      	ldr	r3, [pc, #484]	; (8008210 <UART_SetConfig+0xbc0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0320 	and.w	r3, r3, #32
 8008030:	2b00      	cmp	r3, #0
 8008032:	d054      	beq.n	80080de <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008034:	4b76      	ldr	r3, [pc, #472]	; (8008210 <UART_SetConfig+0xbc0>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	08db      	lsrs	r3, r3, #3
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	4a75      	ldr	r2, [pc, #468]	; (8008214 <UART_SetConfig+0xbc4>)
 8008040:	40da      	lsrs	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	d044      	beq.n	80080d4 <UART_SetConfig+0xa84>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b01      	cmp	r3, #1
 8008050:	d03e      	beq.n	80080d0 <UART_SetConfig+0xa80>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b02      	cmp	r3, #2
 8008058:	d038      	beq.n	80080cc <UART_SetConfig+0xa7c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b03      	cmp	r3, #3
 8008060:	d032      	beq.n	80080c8 <UART_SetConfig+0xa78>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b04      	cmp	r3, #4
 8008068:	d02c      	beq.n	80080c4 <UART_SetConfig+0xa74>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b05      	cmp	r3, #5
 8008070:	d026      	beq.n	80080c0 <UART_SetConfig+0xa70>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b06      	cmp	r3, #6
 8008078:	d020      	beq.n	80080bc <UART_SetConfig+0xa6c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b07      	cmp	r3, #7
 8008080:	d01a      	beq.n	80080b8 <UART_SetConfig+0xa68>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b08      	cmp	r3, #8
 8008088:	d014      	beq.n	80080b4 <UART_SetConfig+0xa64>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b09      	cmp	r3, #9
 8008090:	d00e      	beq.n	80080b0 <UART_SetConfig+0xa60>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	2b0a      	cmp	r3, #10
 8008098:	d008      	beq.n	80080ac <UART_SetConfig+0xa5c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	2b0b      	cmp	r3, #11
 80080a0:	d102      	bne.n	80080a8 <UART_SetConfig+0xa58>
 80080a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080a6:	e016      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e014      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	e012      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080b0:	2340      	movs	r3, #64	; 0x40
 80080b2:	e010      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080b4:	2320      	movs	r3, #32
 80080b6:	e00e      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080b8:	2310      	movs	r3, #16
 80080ba:	e00c      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080bc:	230c      	movs	r3, #12
 80080be:	e00a      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080c0:	230a      	movs	r3, #10
 80080c2:	e008      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080c4:	2308      	movs	r3, #8
 80080c6:	e006      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080c8:	2306      	movs	r3, #6
 80080ca:	e004      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080cc:	2304      	movs	r3, #4
 80080ce:	e002      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e000      	b.n	80080d6 <UART_SetConfig+0xa86>
 80080d4:	2301      	movs	r3, #1
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80080dc:	e115      	b.n	800830a <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d043      	beq.n	800816e <UART_SetConfig+0xb1e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d03d      	beq.n	800816a <UART_SetConfig+0xb1a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d037      	beq.n	8008166 <UART_SetConfig+0xb16>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d031      	beq.n	8008162 <UART_SetConfig+0xb12>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b04      	cmp	r3, #4
 8008104:	d02b      	beq.n	800815e <UART_SetConfig+0xb0e>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b05      	cmp	r3, #5
 800810c:	d025      	beq.n	800815a <UART_SetConfig+0xb0a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	2b06      	cmp	r3, #6
 8008114:	d01f      	beq.n	8008156 <UART_SetConfig+0xb06>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2b07      	cmp	r3, #7
 800811c:	d019      	beq.n	8008152 <UART_SetConfig+0xb02>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	2b08      	cmp	r3, #8
 8008124:	d013      	beq.n	800814e <UART_SetConfig+0xafe>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	2b09      	cmp	r3, #9
 800812c:	d00d      	beq.n	800814a <UART_SetConfig+0xafa>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b0a      	cmp	r3, #10
 8008134:	d007      	beq.n	8008146 <UART_SetConfig+0xaf6>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b0b      	cmp	r3, #11
 800813c:	d101      	bne.n	8008142 <UART_SetConfig+0xaf2>
 800813e:	4b36      	ldr	r3, [pc, #216]	; (8008218 <UART_SetConfig+0xbc8>)
 8008140:	e016      	b.n	8008170 <UART_SetConfig+0xb20>
 8008142:	4b34      	ldr	r3, [pc, #208]	; (8008214 <UART_SetConfig+0xbc4>)
 8008144:	e014      	b.n	8008170 <UART_SetConfig+0xb20>
 8008146:	4b35      	ldr	r3, [pc, #212]	; (800821c <UART_SetConfig+0xbcc>)
 8008148:	e012      	b.n	8008170 <UART_SetConfig+0xb20>
 800814a:	4b35      	ldr	r3, [pc, #212]	; (8008220 <UART_SetConfig+0xbd0>)
 800814c:	e010      	b.n	8008170 <UART_SetConfig+0xb20>
 800814e:	4b35      	ldr	r3, [pc, #212]	; (8008224 <UART_SetConfig+0xbd4>)
 8008150:	e00e      	b.n	8008170 <UART_SetConfig+0xb20>
 8008152:	4b35      	ldr	r3, [pc, #212]	; (8008228 <UART_SetConfig+0xbd8>)
 8008154:	e00c      	b.n	8008170 <UART_SetConfig+0xb20>
 8008156:	4b35      	ldr	r3, [pc, #212]	; (800822c <UART_SetConfig+0xbdc>)
 8008158:	e00a      	b.n	8008170 <UART_SetConfig+0xb20>
 800815a:	4b35      	ldr	r3, [pc, #212]	; (8008230 <UART_SetConfig+0xbe0>)
 800815c:	e008      	b.n	8008170 <UART_SetConfig+0xb20>
 800815e:	4b35      	ldr	r3, [pc, #212]	; (8008234 <UART_SetConfig+0xbe4>)
 8008160:	e006      	b.n	8008170 <UART_SetConfig+0xb20>
 8008162:	4b35      	ldr	r3, [pc, #212]	; (8008238 <UART_SetConfig+0xbe8>)
 8008164:	e004      	b.n	8008170 <UART_SetConfig+0xb20>
 8008166:	4b35      	ldr	r3, [pc, #212]	; (800823c <UART_SetConfig+0xbec>)
 8008168:	e002      	b.n	8008170 <UART_SetConfig+0xb20>
 800816a:	4b35      	ldr	r3, [pc, #212]	; (8008240 <UART_SetConfig+0xbf0>)
 800816c:	e000      	b.n	8008170 <UART_SetConfig+0xb20>
 800816e:	4b29      	ldr	r3, [pc, #164]	; (8008214 <UART_SetConfig+0xbc4>)
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008172:	e0ca      	b.n	800830a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	d046      	beq.n	800820a <UART_SetConfig+0xbba>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2b01      	cmp	r3, #1
 8008182:	d040      	beq.n	8008206 <UART_SetConfig+0xbb6>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	2b02      	cmp	r3, #2
 800818a:	d03a      	beq.n	8008202 <UART_SetConfig+0xbb2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	2b03      	cmp	r3, #3
 8008192:	d034      	beq.n	80081fe <UART_SetConfig+0xbae>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	2b04      	cmp	r3, #4
 800819a:	d02e      	beq.n	80081fa <UART_SetConfig+0xbaa>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d028      	beq.n	80081f6 <UART_SetConfig+0xba6>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b06      	cmp	r3, #6
 80081aa:	d022      	beq.n	80081f2 <UART_SetConfig+0xba2>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b07      	cmp	r3, #7
 80081b2:	d01c      	beq.n	80081ee <UART_SetConfig+0xb9e>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d016      	beq.n	80081ea <UART_SetConfig+0xb9a>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2b09      	cmp	r3, #9
 80081c2:	d00f      	beq.n	80081e4 <UART_SetConfig+0xb94>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b0a      	cmp	r3, #10
 80081ca:	d008      	beq.n	80081de <UART_SetConfig+0xb8e>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b0b      	cmp	r3, #11
 80081d2:	d102      	bne.n	80081da <UART_SetConfig+0xb8a>
 80081d4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80081d8:	e018      	b.n	800820c <UART_SetConfig+0xbbc>
 80081da:	4b13      	ldr	r3, [pc, #76]	; (8008228 <UART_SetConfig+0xbd8>)
 80081dc:	e016      	b.n	800820c <UART_SetConfig+0xbbc>
 80081de:	f647 2312 	movw	r3, #31250	; 0x7a12
 80081e2:	e013      	b.n	800820c <UART_SetConfig+0xbbc>
 80081e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80081e8:	e010      	b.n	800820c <UART_SetConfig+0xbbc>
 80081ea:	4b16      	ldr	r3, [pc, #88]	; (8008244 <UART_SetConfig+0xbf4>)
 80081ec:	e00e      	b.n	800820c <UART_SetConfig+0xbbc>
 80081ee:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <UART_SetConfig+0xbc8>)
 80081f0:	e00c      	b.n	800820c <UART_SetConfig+0xbbc>
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <UART_SetConfig+0xbf8>)
 80081f4:	e00a      	b.n	800820c <UART_SetConfig+0xbbc>
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <UART_SetConfig+0xbfc>)
 80081f8:	e008      	b.n	800820c <UART_SetConfig+0xbbc>
 80081fa:	4b08      	ldr	r3, [pc, #32]	; (800821c <UART_SetConfig+0xbcc>)
 80081fc:	e006      	b.n	800820c <UART_SetConfig+0xbbc>
 80081fe:	4b14      	ldr	r3, [pc, #80]	; (8008250 <UART_SetConfig+0xc00>)
 8008200:	e004      	b.n	800820c <UART_SetConfig+0xbbc>
 8008202:	4b07      	ldr	r3, [pc, #28]	; (8008220 <UART_SetConfig+0xbd0>)
 8008204:	e002      	b.n	800820c <UART_SetConfig+0xbbc>
 8008206:	4b07      	ldr	r3, [pc, #28]	; (8008224 <UART_SetConfig+0xbd4>)
 8008208:	e000      	b.n	800820c <UART_SetConfig+0xbbc>
 800820a:	4b07      	ldr	r3, [pc, #28]	; (8008228 <UART_SetConfig+0xbd8>)
 800820c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800820e:	e07c      	b.n	800830a <UART_SetConfig+0xcba>
 8008210:	58024400 	.word	0x58024400
 8008214:	03d09000 	.word	0x03d09000
 8008218:	0003d090 	.word	0x0003d090
 800821c:	0007a120 	.word	0x0007a120
 8008220:	000f4240 	.word	0x000f4240
 8008224:	001e8480 	.word	0x001e8480
 8008228:	003d0900 	.word	0x003d0900
 800822c:	00516155 	.word	0x00516155
 8008230:	0061a800 	.word	0x0061a800
 8008234:	007a1200 	.word	0x007a1200
 8008238:	00a2c2aa 	.word	0x00a2c2aa
 800823c:	00f42400 	.word	0x00f42400
 8008240:	01e84800 	.word	0x01e84800
 8008244:	0001e848 	.word	0x0001e848
 8008248:	00051615 	.word	0x00051615
 800824c:	00061a80 	.word	0x00061a80
 8008250:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b00      	cmp	r3, #0
 800825a:	d04e      	beq.n	80082fa <UART_SetConfig+0xcaa>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b01      	cmp	r3, #1
 8008262:	d047      	beq.n	80082f4 <UART_SetConfig+0xca4>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b02      	cmp	r3, #2
 800826a:	d040      	beq.n	80082ee <UART_SetConfig+0xc9e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b03      	cmp	r3, #3
 8008272:	d039      	beq.n	80082e8 <UART_SetConfig+0xc98>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2b04      	cmp	r3, #4
 800827a:	d032      	beq.n	80082e2 <UART_SetConfig+0xc92>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b05      	cmp	r3, #5
 8008282:	d02b      	beq.n	80082dc <UART_SetConfig+0xc8c>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b06      	cmp	r3, #6
 800828a:	d024      	beq.n	80082d6 <UART_SetConfig+0xc86>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b07      	cmp	r3, #7
 8008292:	d01d      	beq.n	80082d0 <UART_SetConfig+0xc80>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b08      	cmp	r3, #8
 800829a:	d016      	beq.n	80082ca <UART_SetConfig+0xc7a>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b09      	cmp	r3, #9
 80082a2:	d00f      	beq.n	80082c4 <UART_SetConfig+0xc74>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b0a      	cmp	r3, #10
 80082aa:	d008      	beq.n	80082be <UART_SetConfig+0xc6e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b0b      	cmp	r3, #11
 80082b2:	d101      	bne.n	80082b8 <UART_SetConfig+0xc68>
 80082b4:	2380      	movs	r3, #128	; 0x80
 80082b6:	e022      	b.n	80082fe <UART_SetConfig+0xcae>
 80082b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082bc:	e01f      	b.n	80082fe <UART_SetConfig+0xcae>
 80082be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c2:	e01c      	b.n	80082fe <UART_SetConfig+0xcae>
 80082c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082c8:	e019      	b.n	80082fe <UART_SetConfig+0xcae>
 80082ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ce:	e016      	b.n	80082fe <UART_SetConfig+0xcae>
 80082d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082d4:	e013      	b.n	80082fe <UART_SetConfig+0xcae>
 80082d6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80082da:	e010      	b.n	80082fe <UART_SetConfig+0xcae>
 80082dc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80082e0:	e00d      	b.n	80082fe <UART_SetConfig+0xcae>
 80082e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082e6:	e00a      	b.n	80082fe <UART_SetConfig+0xcae>
 80082e8:	f241 5355 	movw	r3, #5461	; 0x1555
 80082ec:	e007      	b.n	80082fe <UART_SetConfig+0xcae>
 80082ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082f2:	e004      	b.n	80082fe <UART_SetConfig+0xcae>
 80082f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082f8:	e001      	b.n	80082fe <UART_SetConfig+0xcae>
 80082fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008300:	e003      	b.n	800830a <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008308:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	2b00      	cmp	r3, #0
 800830e:	f001 83e8 	beq.w	8009ae2 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	4613      	mov	r3, r2
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4413      	add	r3, r2
 800831c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800831e:	429a      	cmp	r2, r3
 8008320:	d305      	bcc.n	800832e <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832a:	429a      	cmp	r2, r3
 800832c:	d904      	bls.n	8008338 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008334:	f001 bbd5 	b.w	8009ae2 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8008338:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800833c:	2b08      	cmp	r3, #8
 800833e:	f000 8154 	beq.w	80085ea <UART_SetConfig+0xf9a>
 8008342:	2b08      	cmp	r3, #8
 8008344:	dc06      	bgt.n	8008354 <UART_SetConfig+0xd04>
 8008346:	2b02      	cmp	r3, #2
 8008348:	d00f      	beq.n	800836a <UART_SetConfig+0xd1a>
 800834a:	2b04      	cmp	r3, #4
 800834c:	f000 80ac 	beq.w	80084a8 <UART_SetConfig+0xe58>
 8008350:	f000 bc30 	b.w	8008bb4 <UART_SetConfig+0x1564>
 8008354:	2b20      	cmp	r3, #32
 8008356:	f000 832d 	beq.w	80089b4 <UART_SetConfig+0x1364>
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	f000 83a5 	beq.w	8008aaa <UART_SetConfig+0x145a>
 8008360:	2b10      	cmp	r3, #16
 8008362:	f000 81e3 	beq.w	800872c <UART_SetConfig+0x10dc>
 8008366:	f000 bc25 	b.w	8008bb4 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800836a:	f7fe f845 	bl	80063f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800836e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	4618      	mov	r0, r3
 8008374:	f04f 0100 	mov.w	r1, #0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d067      	beq.n	8008450 <UART_SetConfig+0xe00>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	2b01      	cmp	r3, #1
 8008386:	d05e      	beq.n	8008446 <UART_SetConfig+0xdf6>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b02      	cmp	r3, #2
 800838e:	d055      	beq.n	800843c <UART_SetConfig+0xdec>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b03      	cmp	r3, #3
 8008396:	d04c      	beq.n	8008432 <UART_SetConfig+0xde2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b04      	cmp	r3, #4
 800839e:	d043      	beq.n	8008428 <UART_SetConfig+0xdd8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	d03a      	beq.n	800841e <UART_SetConfig+0xdce>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b06      	cmp	r3, #6
 80083ae:	d031      	beq.n	8008414 <UART_SetConfig+0xdc4>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b07      	cmp	r3, #7
 80083b6:	d028      	beq.n	800840a <UART_SetConfig+0xdba>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d01f      	beq.n	8008400 <UART_SetConfig+0xdb0>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d016      	beq.n	80083f6 <UART_SetConfig+0xda6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b0a      	cmp	r3, #10
 80083ce:	d00d      	beq.n	80083ec <UART_SetConfig+0xd9c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b0b      	cmp	r3, #11
 80083d6:	d104      	bne.n	80083e2 <UART_SetConfig+0xd92>
 80083d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083dc:	f04f 0400 	mov.w	r4, #0
 80083e0:	e03a      	b.n	8008458 <UART_SetConfig+0xe08>
 80083e2:	f04f 0301 	mov.w	r3, #1
 80083e6:	f04f 0400 	mov.w	r4, #0
 80083ea:	e035      	b.n	8008458 <UART_SetConfig+0xe08>
 80083ec:	f04f 0380 	mov.w	r3, #128	; 0x80
 80083f0:	f04f 0400 	mov.w	r4, #0
 80083f4:	e030      	b.n	8008458 <UART_SetConfig+0xe08>
 80083f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083fa:	f04f 0400 	mov.w	r4, #0
 80083fe:	e02b      	b.n	8008458 <UART_SetConfig+0xe08>
 8008400:	f04f 0320 	mov.w	r3, #32
 8008404:	f04f 0400 	mov.w	r4, #0
 8008408:	e026      	b.n	8008458 <UART_SetConfig+0xe08>
 800840a:	f04f 0310 	mov.w	r3, #16
 800840e:	f04f 0400 	mov.w	r4, #0
 8008412:	e021      	b.n	8008458 <UART_SetConfig+0xe08>
 8008414:	f04f 030c 	mov.w	r3, #12
 8008418:	f04f 0400 	mov.w	r4, #0
 800841c:	e01c      	b.n	8008458 <UART_SetConfig+0xe08>
 800841e:	f04f 030a 	mov.w	r3, #10
 8008422:	f04f 0400 	mov.w	r4, #0
 8008426:	e017      	b.n	8008458 <UART_SetConfig+0xe08>
 8008428:	f04f 0308 	mov.w	r3, #8
 800842c:	f04f 0400 	mov.w	r4, #0
 8008430:	e012      	b.n	8008458 <UART_SetConfig+0xe08>
 8008432:	f04f 0306 	mov.w	r3, #6
 8008436:	f04f 0400 	mov.w	r4, #0
 800843a:	e00d      	b.n	8008458 <UART_SetConfig+0xe08>
 800843c:	f04f 0304 	mov.w	r3, #4
 8008440:	f04f 0400 	mov.w	r4, #0
 8008444:	e008      	b.n	8008458 <UART_SetConfig+0xe08>
 8008446:	f04f 0302 	mov.w	r3, #2
 800844a:	f04f 0400 	mov.w	r4, #0
 800844e:	e003      	b.n	8008458 <UART_SetConfig+0xe08>
 8008450:	f04f 0301 	mov.w	r3, #1
 8008454:	f04f 0400 	mov.w	r4, #0
 8008458:	461a      	mov	r2, r3
 800845a:	4623      	mov	r3, r4
 800845c:	f7f7 ff90 	bl	8000380 <__aeabi_uldivmod>
 8008460:	4603      	mov	r3, r0
 8008462:	460c      	mov	r4, r1
 8008464:	4619      	mov	r1, r3
 8008466:	4622      	mov	r2, r4
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	f04f 0400 	mov.w	r4, #0
 8008470:	0214      	lsls	r4, r2, #8
 8008472:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008476:	020b      	lsls	r3, r1, #8
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	6852      	ldr	r2, [r2, #4]
 800847c:	0852      	lsrs	r2, r2, #1
 800847e:	4611      	mov	r1, r2
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	eb13 0b01 	adds.w	fp, r3, r1
 8008488:	eb44 0c02 	adc.w	ip, r4, r2
 800848c:	4658      	mov	r0, fp
 800848e:	4661      	mov	r1, ip
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f04f 0400 	mov.w	r4, #0
 8008498:	461a      	mov	r2, r3
 800849a:	4623      	mov	r3, r4
 800849c:	f7f7 ff70 	bl	8000380 <__aeabi_uldivmod>
 80084a0:	4603      	mov	r3, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084a6:	e389      	b.n	8008bbc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a8:	f107 0318 	add.w	r3, r7, #24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fd ffb9 	bl	8006424 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f04f 0100 	mov.w	r1, #0
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d067      	beq.n	8008592 <UART_SetConfig+0xf42>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d05e      	beq.n	8008588 <UART_SetConfig+0xf38>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d055      	beq.n	800857e <UART_SetConfig+0xf2e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d04c      	beq.n	8008574 <UART_SetConfig+0xf24>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d043      	beq.n	800856a <UART_SetConfig+0xf1a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d03a      	beq.n	8008560 <UART_SetConfig+0xf10>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d031      	beq.n	8008556 <UART_SetConfig+0xf06>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b07      	cmp	r3, #7
 80084f8:	d028      	beq.n	800854c <UART_SetConfig+0xefc>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d01f      	beq.n	8008542 <UART_SetConfig+0xef2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b09      	cmp	r3, #9
 8008508:	d016      	beq.n	8008538 <UART_SetConfig+0xee8>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b0a      	cmp	r3, #10
 8008510:	d00d      	beq.n	800852e <UART_SetConfig+0xede>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b0b      	cmp	r3, #11
 8008518:	d104      	bne.n	8008524 <UART_SetConfig+0xed4>
 800851a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800851e:	f04f 0400 	mov.w	r4, #0
 8008522:	e03a      	b.n	800859a <UART_SetConfig+0xf4a>
 8008524:	f04f 0301 	mov.w	r3, #1
 8008528:	f04f 0400 	mov.w	r4, #0
 800852c:	e035      	b.n	800859a <UART_SetConfig+0xf4a>
 800852e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008532:	f04f 0400 	mov.w	r4, #0
 8008536:	e030      	b.n	800859a <UART_SetConfig+0xf4a>
 8008538:	f04f 0340 	mov.w	r3, #64	; 0x40
 800853c:	f04f 0400 	mov.w	r4, #0
 8008540:	e02b      	b.n	800859a <UART_SetConfig+0xf4a>
 8008542:	f04f 0320 	mov.w	r3, #32
 8008546:	f04f 0400 	mov.w	r4, #0
 800854a:	e026      	b.n	800859a <UART_SetConfig+0xf4a>
 800854c:	f04f 0310 	mov.w	r3, #16
 8008550:	f04f 0400 	mov.w	r4, #0
 8008554:	e021      	b.n	800859a <UART_SetConfig+0xf4a>
 8008556:	f04f 030c 	mov.w	r3, #12
 800855a:	f04f 0400 	mov.w	r4, #0
 800855e:	e01c      	b.n	800859a <UART_SetConfig+0xf4a>
 8008560:	f04f 030a 	mov.w	r3, #10
 8008564:	f04f 0400 	mov.w	r4, #0
 8008568:	e017      	b.n	800859a <UART_SetConfig+0xf4a>
 800856a:	f04f 0308 	mov.w	r3, #8
 800856e:	f04f 0400 	mov.w	r4, #0
 8008572:	e012      	b.n	800859a <UART_SetConfig+0xf4a>
 8008574:	f04f 0306 	mov.w	r3, #6
 8008578:	f04f 0400 	mov.w	r4, #0
 800857c:	e00d      	b.n	800859a <UART_SetConfig+0xf4a>
 800857e:	f04f 0304 	mov.w	r3, #4
 8008582:	f04f 0400 	mov.w	r4, #0
 8008586:	e008      	b.n	800859a <UART_SetConfig+0xf4a>
 8008588:	f04f 0302 	mov.w	r3, #2
 800858c:	f04f 0400 	mov.w	r4, #0
 8008590:	e003      	b.n	800859a <UART_SetConfig+0xf4a>
 8008592:	f04f 0301 	mov.w	r3, #1
 8008596:	f04f 0400 	mov.w	r4, #0
 800859a:	461a      	mov	r2, r3
 800859c:	4623      	mov	r3, r4
 800859e:	f7f7 feef 	bl	8000380 <__aeabi_uldivmod>
 80085a2:	4603      	mov	r3, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	4619      	mov	r1, r3
 80085a8:	4622      	mov	r2, r4
 80085aa:	f04f 0300 	mov.w	r3, #0
 80085ae:	f04f 0400 	mov.w	r4, #0
 80085b2:	0214      	lsls	r4, r2, #8
 80085b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80085b8:	020b      	lsls	r3, r1, #8
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	6852      	ldr	r2, [r2, #4]
 80085be:	0852      	lsrs	r2, r2, #1
 80085c0:	4611      	mov	r1, r2
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	eb13 0b01 	adds.w	fp, r3, r1
 80085ca:	eb44 0c02 	adc.w	ip, r4, r2
 80085ce:	4658      	mov	r0, fp
 80085d0:	4661      	mov	r1, ip
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f04f 0400 	mov.w	r4, #0
 80085da:	461a      	mov	r2, r3
 80085dc:	4623      	mov	r3, r4
 80085de:	f7f7 fecf 	bl	8000380 <__aeabi_uldivmod>
 80085e2:	4603      	mov	r3, r0
 80085e4:	460c      	mov	r4, r1
 80085e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085e8:	e2e8      	b.n	8008bbc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ea:	f107 030c 	add.w	r3, r7, #12
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe f864 	bl	80066bc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f04f 0100 	mov.w	r1, #0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	d067      	beq.n	80086d4 <UART_SetConfig+0x1084>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	2b01      	cmp	r3, #1
 800860a:	d05e      	beq.n	80086ca <UART_SetConfig+0x107a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	2b02      	cmp	r3, #2
 8008612:	d055      	beq.n	80086c0 <UART_SetConfig+0x1070>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	2b03      	cmp	r3, #3
 800861a:	d04c      	beq.n	80086b6 <UART_SetConfig+0x1066>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2b04      	cmp	r3, #4
 8008622:	d043      	beq.n	80086ac <UART_SetConfig+0x105c>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	2b05      	cmp	r3, #5
 800862a:	d03a      	beq.n	80086a2 <UART_SetConfig+0x1052>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b06      	cmp	r3, #6
 8008632:	d031      	beq.n	8008698 <UART_SetConfig+0x1048>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	2b07      	cmp	r3, #7
 800863a:	d028      	beq.n	800868e <UART_SetConfig+0x103e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b08      	cmp	r3, #8
 8008642:	d01f      	beq.n	8008684 <UART_SetConfig+0x1034>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	2b09      	cmp	r3, #9
 800864a:	d016      	beq.n	800867a <UART_SetConfig+0x102a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2b0a      	cmp	r3, #10
 8008652:	d00d      	beq.n	8008670 <UART_SetConfig+0x1020>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b0b      	cmp	r3, #11
 800865a:	d104      	bne.n	8008666 <UART_SetConfig+0x1016>
 800865c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008660:	f04f 0400 	mov.w	r4, #0
 8008664:	e03a      	b.n	80086dc <UART_SetConfig+0x108c>
 8008666:	f04f 0301 	mov.w	r3, #1
 800866a:	f04f 0400 	mov.w	r4, #0
 800866e:	e035      	b.n	80086dc <UART_SetConfig+0x108c>
 8008670:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008674:	f04f 0400 	mov.w	r4, #0
 8008678:	e030      	b.n	80086dc <UART_SetConfig+0x108c>
 800867a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800867e:	f04f 0400 	mov.w	r4, #0
 8008682:	e02b      	b.n	80086dc <UART_SetConfig+0x108c>
 8008684:	f04f 0320 	mov.w	r3, #32
 8008688:	f04f 0400 	mov.w	r4, #0
 800868c:	e026      	b.n	80086dc <UART_SetConfig+0x108c>
 800868e:	f04f 0310 	mov.w	r3, #16
 8008692:	f04f 0400 	mov.w	r4, #0
 8008696:	e021      	b.n	80086dc <UART_SetConfig+0x108c>
 8008698:	f04f 030c 	mov.w	r3, #12
 800869c:	f04f 0400 	mov.w	r4, #0
 80086a0:	e01c      	b.n	80086dc <UART_SetConfig+0x108c>
 80086a2:	f04f 030a 	mov.w	r3, #10
 80086a6:	f04f 0400 	mov.w	r4, #0
 80086aa:	e017      	b.n	80086dc <UART_SetConfig+0x108c>
 80086ac:	f04f 0308 	mov.w	r3, #8
 80086b0:	f04f 0400 	mov.w	r4, #0
 80086b4:	e012      	b.n	80086dc <UART_SetConfig+0x108c>
 80086b6:	f04f 0306 	mov.w	r3, #6
 80086ba:	f04f 0400 	mov.w	r4, #0
 80086be:	e00d      	b.n	80086dc <UART_SetConfig+0x108c>
 80086c0:	f04f 0304 	mov.w	r3, #4
 80086c4:	f04f 0400 	mov.w	r4, #0
 80086c8:	e008      	b.n	80086dc <UART_SetConfig+0x108c>
 80086ca:	f04f 0302 	mov.w	r3, #2
 80086ce:	f04f 0400 	mov.w	r4, #0
 80086d2:	e003      	b.n	80086dc <UART_SetConfig+0x108c>
 80086d4:	f04f 0301 	mov.w	r3, #1
 80086d8:	f04f 0400 	mov.w	r4, #0
 80086dc:	461a      	mov	r2, r3
 80086de:	4623      	mov	r3, r4
 80086e0:	f7f7 fe4e 	bl	8000380 <__aeabi_uldivmod>
 80086e4:	4603      	mov	r3, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	4619      	mov	r1, r3
 80086ea:	4622      	mov	r2, r4
 80086ec:	f04f 0300 	mov.w	r3, #0
 80086f0:	f04f 0400 	mov.w	r4, #0
 80086f4:	0214      	lsls	r4, r2, #8
 80086f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80086fa:	020b      	lsls	r3, r1, #8
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6852      	ldr	r2, [r2, #4]
 8008700:	0852      	lsrs	r2, r2, #1
 8008702:	4611      	mov	r1, r2
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	eb13 0b01 	adds.w	fp, r3, r1
 800870c:	eb44 0c02 	adc.w	ip, r4, r2
 8008710:	4658      	mov	r0, fp
 8008712:	4661      	mov	r1, ip
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f04f 0400 	mov.w	r4, #0
 800871c:	461a      	mov	r2, r3
 800871e:	4623      	mov	r3, r4
 8008720:	f7f7 fe2e 	bl	8000380 <__aeabi_uldivmod>
 8008724:	4603      	mov	r3, r0
 8008726:	460c      	mov	r4, r1
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800872a:	e247      	b.n	8008bbc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800872c:	4b96      	ldr	r3, [pc, #600]	; (8008988 <UART_SetConfig+0x1338>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a3 	beq.w	8008880 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800873a:	4b93      	ldr	r3, [pc, #588]	; (8008988 <UART_SetConfig+0x1338>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	4a91      	ldr	r2, [pc, #580]	; (800898c <UART_SetConfig+0x133c>)
 8008746:	fa22 f303 	lsr.w	r3, r2, r3
 800874a:	4618      	mov	r0, r3
 800874c:	f04f 0100 	mov.w	r1, #0
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d067      	beq.n	8008828 <UART_SetConfig+0x11d8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b01      	cmp	r3, #1
 800875e:	d05e      	beq.n	800881e <UART_SetConfig+0x11ce>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b02      	cmp	r3, #2
 8008766:	d055      	beq.n	8008814 <UART_SetConfig+0x11c4>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b03      	cmp	r3, #3
 800876e:	d04c      	beq.n	800880a <UART_SetConfig+0x11ba>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b04      	cmp	r3, #4
 8008776:	d043      	beq.n	8008800 <UART_SetConfig+0x11b0>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b05      	cmp	r3, #5
 800877e:	d03a      	beq.n	80087f6 <UART_SetConfig+0x11a6>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b06      	cmp	r3, #6
 8008786:	d031      	beq.n	80087ec <UART_SetConfig+0x119c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	2b07      	cmp	r3, #7
 800878e:	d028      	beq.n	80087e2 <UART_SetConfig+0x1192>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b08      	cmp	r3, #8
 8008796:	d01f      	beq.n	80087d8 <UART_SetConfig+0x1188>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b09      	cmp	r3, #9
 800879e:	d016      	beq.n	80087ce <UART_SetConfig+0x117e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b0a      	cmp	r3, #10
 80087a6:	d00d      	beq.n	80087c4 <UART_SetConfig+0x1174>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b0b      	cmp	r3, #11
 80087ae:	d104      	bne.n	80087ba <UART_SetConfig+0x116a>
 80087b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b4:	f04f 0400 	mov.w	r4, #0
 80087b8:	e03a      	b.n	8008830 <UART_SetConfig+0x11e0>
 80087ba:	f04f 0301 	mov.w	r3, #1
 80087be:	f04f 0400 	mov.w	r4, #0
 80087c2:	e035      	b.n	8008830 <UART_SetConfig+0x11e0>
 80087c4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80087c8:	f04f 0400 	mov.w	r4, #0
 80087cc:	e030      	b.n	8008830 <UART_SetConfig+0x11e0>
 80087ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80087d2:	f04f 0400 	mov.w	r4, #0
 80087d6:	e02b      	b.n	8008830 <UART_SetConfig+0x11e0>
 80087d8:	f04f 0320 	mov.w	r3, #32
 80087dc:	f04f 0400 	mov.w	r4, #0
 80087e0:	e026      	b.n	8008830 <UART_SetConfig+0x11e0>
 80087e2:	f04f 0310 	mov.w	r3, #16
 80087e6:	f04f 0400 	mov.w	r4, #0
 80087ea:	e021      	b.n	8008830 <UART_SetConfig+0x11e0>
 80087ec:	f04f 030c 	mov.w	r3, #12
 80087f0:	f04f 0400 	mov.w	r4, #0
 80087f4:	e01c      	b.n	8008830 <UART_SetConfig+0x11e0>
 80087f6:	f04f 030a 	mov.w	r3, #10
 80087fa:	f04f 0400 	mov.w	r4, #0
 80087fe:	e017      	b.n	8008830 <UART_SetConfig+0x11e0>
 8008800:	f04f 0308 	mov.w	r3, #8
 8008804:	f04f 0400 	mov.w	r4, #0
 8008808:	e012      	b.n	8008830 <UART_SetConfig+0x11e0>
 800880a:	f04f 0306 	mov.w	r3, #6
 800880e:	f04f 0400 	mov.w	r4, #0
 8008812:	e00d      	b.n	8008830 <UART_SetConfig+0x11e0>
 8008814:	f04f 0304 	mov.w	r3, #4
 8008818:	f04f 0400 	mov.w	r4, #0
 800881c:	e008      	b.n	8008830 <UART_SetConfig+0x11e0>
 800881e:	f04f 0302 	mov.w	r3, #2
 8008822:	f04f 0400 	mov.w	r4, #0
 8008826:	e003      	b.n	8008830 <UART_SetConfig+0x11e0>
 8008828:	f04f 0301 	mov.w	r3, #1
 800882c:	f04f 0400 	mov.w	r4, #0
 8008830:	461a      	mov	r2, r3
 8008832:	4623      	mov	r3, r4
 8008834:	f7f7 fda4 	bl	8000380 <__aeabi_uldivmod>
 8008838:	4603      	mov	r3, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4619      	mov	r1, r3
 800883e:	4622      	mov	r2, r4
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	f04f 0400 	mov.w	r4, #0
 8008848:	0214      	lsls	r4, r2, #8
 800884a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800884e:	020b      	lsls	r3, r1, #8
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6852      	ldr	r2, [r2, #4]
 8008854:	0852      	lsrs	r2, r2, #1
 8008856:	4611      	mov	r1, r2
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	eb13 0b01 	adds.w	fp, r3, r1
 8008860:	eb44 0c02 	adc.w	ip, r4, r2
 8008864:	4658      	mov	r0, fp
 8008866:	4661      	mov	r1, ip
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f04f 0400 	mov.w	r4, #0
 8008870:	461a      	mov	r2, r3
 8008872:	4623      	mov	r3, r4
 8008874:	f7f7 fd84 	bl	8000380 <__aeabi_uldivmod>
 8008878:	4603      	mov	r3, r0
 800887a:	460c      	mov	r4, r1
 800887c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800887e:	e19d      	b.n	8008bbc <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d05b      	beq.n	8008940 <UART_SetConfig+0x12f0>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b01      	cmp	r3, #1
 800888e:	d053      	beq.n	8008938 <UART_SetConfig+0x12e8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b02      	cmp	r3, #2
 8008896:	d04b      	beq.n	8008930 <UART_SetConfig+0x12e0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b03      	cmp	r3, #3
 800889e:	d043      	beq.n	8008928 <UART_SetConfig+0x12d8>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d03b      	beq.n	8008920 <UART_SetConfig+0x12d0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2b05      	cmp	r3, #5
 80088ae:	d033      	beq.n	8008918 <UART_SetConfig+0x12c8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b06      	cmp	r3, #6
 80088b6:	d02b      	beq.n	8008910 <UART_SetConfig+0x12c0>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	2b07      	cmp	r3, #7
 80088be:	d023      	beq.n	8008908 <UART_SetConfig+0x12b8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d01b      	beq.n	8008900 <UART_SetConfig+0x12b0>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d013      	beq.n	80088f8 <UART_SetConfig+0x12a8>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	2b0a      	cmp	r3, #10
 80088d6:	d00b      	beq.n	80088f0 <UART_SetConfig+0x12a0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b0b      	cmp	r3, #11
 80088de:	d103      	bne.n	80088e8 <UART_SetConfig+0x1298>
 80088e0:	4b2a      	ldr	r3, [pc, #168]	; (800898c <UART_SetConfig+0x133c>)
 80088e2:	f04f 0400 	mov.w	r4, #0
 80088e6:	e02e      	b.n	8008946 <UART_SetConfig+0x12f6>
 80088e8:	4b29      	ldr	r3, [pc, #164]	; (8008990 <UART_SetConfig+0x1340>)
 80088ea:	f04f 0403 	mov.w	r4, #3
 80088ee:	e02a      	b.n	8008946 <UART_SetConfig+0x12f6>
 80088f0:	4b28      	ldr	r3, [pc, #160]	; (8008994 <UART_SetConfig+0x1344>)
 80088f2:	f04f 0400 	mov.w	r4, #0
 80088f6:	e026      	b.n	8008946 <UART_SetConfig+0x12f6>
 80088f8:	4b27      	ldr	r3, [pc, #156]	; (8008998 <UART_SetConfig+0x1348>)
 80088fa:	f04f 0400 	mov.w	r4, #0
 80088fe:	e022      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008900:	4b26      	ldr	r3, [pc, #152]	; (800899c <UART_SetConfig+0x134c>)
 8008902:	f04f 0400 	mov.w	r4, #0
 8008906:	e01e      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008908:	4b25      	ldr	r3, [pc, #148]	; (80089a0 <UART_SetConfig+0x1350>)
 800890a:	f04f 0400 	mov.w	r4, #0
 800890e:	e01a      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008910:	a419      	add	r4, pc, #100	; (adr r4, 8008978 <UART_SetConfig+0x1328>)
 8008912:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008916:	e016      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008918:	4b22      	ldr	r3, [pc, #136]	; (80089a4 <UART_SetConfig+0x1354>)
 800891a:	f04f 0400 	mov.w	r4, #0
 800891e:	e012      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008920:	4b21      	ldr	r3, [pc, #132]	; (80089a8 <UART_SetConfig+0x1358>)
 8008922:	f04f 0400 	mov.w	r4, #0
 8008926:	e00e      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008928:	a415      	add	r4, pc, #84	; (adr r4, 8008980 <UART_SetConfig+0x1330>)
 800892a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800892e:	e00a      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008930:	4b1e      	ldr	r3, [pc, #120]	; (80089ac <UART_SetConfig+0x135c>)
 8008932:	f04f 0400 	mov.w	r4, #0
 8008936:	e006      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008938:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <UART_SetConfig+0x1360>)
 800893a:	f04f 0401 	mov.w	r4, #1
 800893e:	e002      	b.n	8008946 <UART_SetConfig+0x12f6>
 8008940:	4b13      	ldr	r3, [pc, #76]	; (8008990 <UART_SetConfig+0x1340>)
 8008942:	f04f 0403 	mov.w	r4, #3
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6852      	ldr	r2, [r2, #4]
 800894a:	0852      	lsrs	r2, r2, #1
 800894c:	4611      	mov	r1, r2
 800894e:	f04f 0200 	mov.w	r2, #0
 8008952:	eb13 0b01 	adds.w	fp, r3, r1
 8008956:	eb44 0c02 	adc.w	ip, r4, r2
 800895a:	4658      	mov	r0, fp
 800895c:	4661      	mov	r1, ip
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f04f 0400 	mov.w	r4, #0
 8008966:	461a      	mov	r2, r3
 8008968:	4623      	mov	r3, r4
 800896a:	f7f7 fd09 	bl	8000380 <__aeabi_uldivmod>
 800896e:	4603      	mov	r3, r0
 8008970:	460c      	mov	r4, r1
 8008972:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008974:	e122      	b.n	8008bbc <UART_SetConfig+0x156c>
 8008976:	bf00      	nop
 8008978:	51615500 	.word	0x51615500
 800897c:	00000000 	.word	0x00000000
 8008980:	a2c2aa00 	.word	0xa2c2aa00
 8008984:	00000000 	.word	0x00000000
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	d0900000 	.word	0xd0900000
 8008994:	07a12000 	.word	0x07a12000
 8008998:	0f424000 	.word	0x0f424000
 800899c:	1e848000 	.word	0x1e848000
 80089a0:	3d090000 	.word	0x3d090000
 80089a4:	61a80000 	.word	0x61a80000
 80089a8:	7a120000 	.word	0x7a120000
 80089ac:	f4240000 	.word	0xf4240000
 80089b0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d05b      	beq.n	8008a74 <UART_SetConfig+0x1424>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d053      	beq.n	8008a6c <UART_SetConfig+0x141c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d04b      	beq.n	8008a64 <UART_SetConfig+0x1414>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d043      	beq.n	8008a5c <UART_SetConfig+0x140c>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d03b      	beq.n	8008a54 <UART_SetConfig+0x1404>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	d033      	beq.n	8008a4c <UART_SetConfig+0x13fc>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	2b06      	cmp	r3, #6
 80089ea:	d02b      	beq.n	8008a44 <UART_SetConfig+0x13f4>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	2b07      	cmp	r3, #7
 80089f2:	d023      	beq.n	8008a3c <UART_SetConfig+0x13ec>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d01b      	beq.n	8008a34 <UART_SetConfig+0x13e4>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	2b09      	cmp	r3, #9
 8008a02:	d013      	beq.n	8008a2c <UART_SetConfig+0x13dc>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	2b0a      	cmp	r3, #10
 8008a0a:	d00b      	beq.n	8008a24 <UART_SetConfig+0x13d4>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b0b      	cmp	r3, #11
 8008a12:	d103      	bne.n	8008a1c <UART_SetConfig+0x13cc>
 8008a14:	4bc0      	ldr	r3, [pc, #768]	; (8008d18 <UART_SetConfig+0x16c8>)
 8008a16:	f04f 0400 	mov.w	r4, #0
 8008a1a:	e02e      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a1c:	4bbf      	ldr	r3, [pc, #764]	; (8008d1c <UART_SetConfig+0x16cc>)
 8008a1e:	f04f 0400 	mov.w	r4, #0
 8008a22:	e02a      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a24:	4bbe      	ldr	r3, [pc, #760]	; (8008d20 <UART_SetConfig+0x16d0>)
 8008a26:	f04f 0400 	mov.w	r4, #0
 8008a2a:	e026      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a2c:	4bbd      	ldr	r3, [pc, #756]	; (8008d24 <UART_SetConfig+0x16d4>)
 8008a2e:	f04f 0400 	mov.w	r4, #0
 8008a32:	e022      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a34:	4bbc      	ldr	r3, [pc, #752]	; (8008d28 <UART_SetConfig+0x16d8>)
 8008a36:	f04f 0400 	mov.w	r4, #0
 8008a3a:	e01e      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a3c:	4bbb      	ldr	r3, [pc, #748]	; (8008d2c <UART_SetConfig+0x16dc>)
 8008a3e:	f04f 0400 	mov.w	r4, #0
 8008a42:	e01a      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a44:	a4b0      	add	r4, pc, #704	; (adr r4, 8008d08 <UART_SetConfig+0x16b8>)
 8008a46:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a4a:	e016      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a4c:	4bb8      	ldr	r3, [pc, #736]	; (8008d30 <UART_SetConfig+0x16e0>)
 8008a4e:	f04f 0400 	mov.w	r4, #0
 8008a52:	e012      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a54:	4bb7      	ldr	r3, [pc, #732]	; (8008d34 <UART_SetConfig+0x16e4>)
 8008a56:	f04f 0400 	mov.w	r4, #0
 8008a5a:	e00e      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a5c:	a4ac      	add	r4, pc, #688	; (adr r4, 8008d10 <UART_SetConfig+0x16c0>)
 8008a5e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a62:	e00a      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a64:	4bb4      	ldr	r3, [pc, #720]	; (8008d38 <UART_SetConfig+0x16e8>)
 8008a66:	f04f 0400 	mov.w	r4, #0
 8008a6a:	e006      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a6c:	4bb3      	ldr	r3, [pc, #716]	; (8008d3c <UART_SetConfig+0x16ec>)
 8008a6e:	f04f 0400 	mov.w	r4, #0
 8008a72:	e002      	b.n	8008a7a <UART_SetConfig+0x142a>
 8008a74:	4ba9      	ldr	r3, [pc, #676]	; (8008d1c <UART_SetConfig+0x16cc>)
 8008a76:	f04f 0400 	mov.w	r4, #0
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6852      	ldr	r2, [r2, #4]
 8008a7e:	0852      	lsrs	r2, r2, #1
 8008a80:	4611      	mov	r1, r2
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	eb13 0b01 	adds.w	fp, r3, r1
 8008a8a:	eb44 0c02 	adc.w	ip, r4, r2
 8008a8e:	4658      	mov	r0, fp
 8008a90:	4661      	mov	r1, ip
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f04f 0400 	mov.w	r4, #0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	f7f7 fc6f 	bl	8000380 <__aeabi_uldivmod>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008aa8:	e088      	b.n	8008bbc <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d064      	beq.n	8008b7c <UART_SetConfig+0x152c>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d05b      	beq.n	8008b72 <UART_SetConfig+0x1522>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d052      	beq.n	8008b68 <UART_SetConfig+0x1518>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d04a      	beq.n	8008b60 <UART_SetConfig+0x1510>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d041      	beq.n	8008b56 <UART_SetConfig+0x1506>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b05      	cmp	r3, #5
 8008ad8:	d039      	beq.n	8008b4e <UART_SetConfig+0x14fe>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	2b06      	cmp	r3, #6
 8008ae0:	d031      	beq.n	8008b46 <UART_SetConfig+0x14f6>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b07      	cmp	r3, #7
 8008ae8:	d028      	beq.n	8008b3c <UART_SetConfig+0x14ec>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d01f      	beq.n	8008b32 <UART_SetConfig+0x14e2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b09      	cmp	r3, #9
 8008af8:	d016      	beq.n	8008b28 <UART_SetConfig+0x14d8>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2b0a      	cmp	r3, #10
 8008b00:	d00d      	beq.n	8008b1e <UART_SetConfig+0x14ce>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	2b0b      	cmp	r3, #11
 8008b08:	d104      	bne.n	8008b14 <UART_SetConfig+0x14c4>
 8008b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0e:	f04f 0400 	mov.w	r4, #0
 8008b12:	e037      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b18:	f04f 0400 	mov.w	r4, #0
 8008b1c:	e032      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b22:	f04f 0400 	mov.w	r4, #0
 8008b26:	e02d      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b2c:	f04f 0400 	mov.w	r4, #0
 8008b30:	e028      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b36:	f04f 0400 	mov.w	r4, #0
 8008b3a:	e023      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b40:	f04f 0400 	mov.w	r4, #0
 8008b44:	e01e      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b46:	4b7e      	ldr	r3, [pc, #504]	; (8008d40 <UART_SetConfig+0x16f0>)
 8008b48:	f04f 0400 	mov.w	r4, #0
 8008b4c:	e01a      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b4e:	4b7d      	ldr	r3, [pc, #500]	; (8008d44 <UART_SetConfig+0x16f4>)
 8008b50:	f04f 0400 	mov.w	r4, #0
 8008b54:	e016      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b5a:	f04f 0400 	mov.w	r4, #0
 8008b5e:	e011      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b60:	4b79      	ldr	r3, [pc, #484]	; (8008d48 <UART_SetConfig+0x16f8>)
 8008b62:	f04f 0400 	mov.w	r4, #0
 8008b66:	e00d      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b6c:	f04f 0400 	mov.w	r4, #0
 8008b70:	e008      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b76:	f04f 0400 	mov.w	r4, #0
 8008b7a:	e003      	b.n	8008b84 <UART_SetConfig+0x1534>
 8008b7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b80:	f04f 0400 	mov.w	r4, #0
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6852      	ldr	r2, [r2, #4]
 8008b88:	0852      	lsrs	r2, r2, #1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	eb13 0b01 	adds.w	fp, r3, r1
 8008b94:	eb44 0c02 	adc.w	ip, r4, r2
 8008b98:	4658      	mov	r0, fp
 8008b9a:	4661      	mov	r1, ip
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f04f 0400 	mov.w	r4, #0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4623      	mov	r3, r4
 8008ba8:	f7f7 fbea 	bl	8000380 <__aeabi_uldivmod>
 8008bac:	4603      	mov	r3, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bb2:	e003      	b.n	8008bbc <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008bba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bc2:	d309      	bcc.n	8008bd8 <UART_SetConfig+0x1588>
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bca:	d205      	bcs.n	8008bd8 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd2:	60da      	str	r2, [r3, #12]
 8008bd4:	f000 bf85 	b.w	8009ae2 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	f000 bf80 	b.w	8009ae2 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bea:	f040 83da 	bne.w	80093a2 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 8008bee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008bf2:	2b40      	cmp	r3, #64	; 0x40
 8008bf4:	f200 83b3 	bhi.w	800935e <UART_SetConfig+0x1d0e>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <UART_SetConfig+0x15b0>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008d4d 	.word	0x08008d4d
 8008c04:	08008e05 	.word	0x08008e05
 8008c08:	0800935f 	.word	0x0800935f
 8008c0c:	0800935f 	.word	0x0800935f
 8008c10:	08008ebd 	.word	0x08008ebd
 8008c14:	0800935f 	.word	0x0800935f
 8008c18:	0800935f 	.word	0x0800935f
 8008c1c:	0800935f 	.word	0x0800935f
 8008c20:	08008f79 	.word	0x08008f79
 8008c24:	0800935f 	.word	0x0800935f
 8008c28:	0800935f 	.word	0x0800935f
 8008c2c:	0800935f 	.word	0x0800935f
 8008c30:	0800935f 	.word	0x0800935f
 8008c34:	0800935f 	.word	0x0800935f
 8008c38:	0800935f 	.word	0x0800935f
 8008c3c:	0800935f 	.word	0x0800935f
 8008c40:	08009035 	.word	0x08009035
 8008c44:	0800935f 	.word	0x0800935f
 8008c48:	0800935f 	.word	0x0800935f
 8008c4c:	0800935f 	.word	0x0800935f
 8008c50:	0800935f 	.word	0x0800935f
 8008c54:	0800935f 	.word	0x0800935f
 8008c58:	0800935f 	.word	0x0800935f
 8008c5c:	0800935f 	.word	0x0800935f
 8008c60:	0800935f 	.word	0x0800935f
 8008c64:	0800935f 	.word	0x0800935f
 8008c68:	0800935f 	.word	0x0800935f
 8008c6c:	0800935f 	.word	0x0800935f
 8008c70:	0800935f 	.word	0x0800935f
 8008c74:	0800935f 	.word	0x0800935f
 8008c78:	0800935f 	.word	0x0800935f
 8008c7c:	0800935f 	.word	0x0800935f
 8008c80:	080091a7 	.word	0x080091a7
 8008c84:	0800935f 	.word	0x0800935f
 8008c88:	0800935f 	.word	0x0800935f
 8008c8c:	0800935f 	.word	0x0800935f
 8008c90:	0800935f 	.word	0x0800935f
 8008c94:	0800935f 	.word	0x0800935f
 8008c98:	0800935f 	.word	0x0800935f
 8008c9c:	0800935f 	.word	0x0800935f
 8008ca0:	0800935f 	.word	0x0800935f
 8008ca4:	0800935f 	.word	0x0800935f
 8008ca8:	0800935f 	.word	0x0800935f
 8008cac:	0800935f 	.word	0x0800935f
 8008cb0:	0800935f 	.word	0x0800935f
 8008cb4:	0800935f 	.word	0x0800935f
 8008cb8:	0800935f 	.word	0x0800935f
 8008cbc:	0800935f 	.word	0x0800935f
 8008cc0:	0800935f 	.word	0x0800935f
 8008cc4:	0800935f 	.word	0x0800935f
 8008cc8:	0800935f 	.word	0x0800935f
 8008ccc:	0800935f 	.word	0x0800935f
 8008cd0:	0800935f 	.word	0x0800935f
 8008cd4:	0800935f 	.word	0x0800935f
 8008cd8:	0800935f 	.word	0x0800935f
 8008cdc:	0800935f 	.word	0x0800935f
 8008ce0:	0800935f 	.word	0x0800935f
 8008ce4:	0800935f 	.word	0x0800935f
 8008ce8:	0800935f 	.word	0x0800935f
 8008cec:	0800935f 	.word	0x0800935f
 8008cf0:	0800935f 	.word	0x0800935f
 8008cf4:	0800935f 	.word	0x0800935f
 8008cf8:	0800935f 	.word	0x0800935f
 8008cfc:	0800935f 	.word	0x0800935f
 8008d00:	0800929d 	.word	0x0800929d
 8008d04:	f3af 8000 	nop.w
 8008d08:	05161500 	.word	0x05161500
 8008d0c:	00000000 	.word	0x00000000
 8008d10:	0a2c2a00 	.word	0x0a2c2a00
 8008d14:	00000000 	.word	0x00000000
 8008d18:	003d0900 	.word	0x003d0900
 8008d1c:	3d090000 	.word	0x3d090000
 8008d20:	007a1200 	.word	0x007a1200
 8008d24:	00f42400 	.word	0x00f42400
 8008d28:	01e84800 	.word	0x01e84800
 8008d2c:	03d09000 	.word	0x03d09000
 8008d30:	061a8000 	.word	0x061a8000
 8008d34:	07a12000 	.word	0x07a12000
 8008d38:	0f424000 	.word	0x0f424000
 8008d3c:	1e848000 	.word	0x1e848000
 8008d40:	000aaa00 	.word	0x000aaa00
 8008d44:	000ccc00 	.word	0x000ccc00
 8008d48:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d4c:	f7fc f966 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8008d50:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d044      	beq.n	8008de4 <UART_SetConfig+0x1794>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d03e      	beq.n	8008de0 <UART_SetConfig+0x1790>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d038      	beq.n	8008ddc <UART_SetConfig+0x178c>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d032      	beq.n	8008dd8 <UART_SetConfig+0x1788>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d02c      	beq.n	8008dd4 <UART_SetConfig+0x1784>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b05      	cmp	r3, #5
 8008d80:	d026      	beq.n	8008dd0 <UART_SetConfig+0x1780>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b06      	cmp	r3, #6
 8008d88:	d020      	beq.n	8008dcc <UART_SetConfig+0x177c>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b07      	cmp	r3, #7
 8008d90:	d01a      	beq.n	8008dc8 <UART_SetConfig+0x1778>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d014      	beq.n	8008dc4 <UART_SetConfig+0x1774>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b09      	cmp	r3, #9
 8008da0:	d00e      	beq.n	8008dc0 <UART_SetConfig+0x1770>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2b0a      	cmp	r3, #10
 8008da8:	d008      	beq.n	8008dbc <UART_SetConfig+0x176c>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b0b      	cmp	r3, #11
 8008db0:	d102      	bne.n	8008db8 <UART_SetConfig+0x1768>
 8008db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db6:	e016      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e014      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dbc:	2380      	movs	r3, #128	; 0x80
 8008dbe:	e012      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	e010      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dc4:	2320      	movs	r3, #32
 8008dc6:	e00e      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dc8:	2310      	movs	r3, #16
 8008dca:	e00c      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	e00a      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dd0:	230a      	movs	r3, #10
 8008dd2:	e008      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	e006      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008dd8:	2306      	movs	r3, #6
 8008dda:	e004      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	e002      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e000      	b.n	8008de6 <UART_SetConfig+0x1796>
 8008de4:	2301      	movs	r3, #1
 8008de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dec:	005a      	lsls	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e02:	e2b0      	b.n	8009366 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e04:	f7fc f920 	bl	8005048 <HAL_RCC_GetPCLK2Freq>
 8008e08:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d044      	beq.n	8008e9c <UART_SetConfig+0x184c>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d03e      	beq.n	8008e98 <UART_SetConfig+0x1848>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d038      	beq.n	8008e94 <UART_SetConfig+0x1844>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d032      	beq.n	8008e90 <UART_SetConfig+0x1840>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d02c      	beq.n	8008e8c <UART_SetConfig+0x183c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	2b05      	cmp	r3, #5
 8008e38:	d026      	beq.n	8008e88 <UART_SetConfig+0x1838>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b06      	cmp	r3, #6
 8008e40:	d020      	beq.n	8008e84 <UART_SetConfig+0x1834>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b07      	cmp	r3, #7
 8008e48:	d01a      	beq.n	8008e80 <UART_SetConfig+0x1830>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	2b08      	cmp	r3, #8
 8008e50:	d014      	beq.n	8008e7c <UART_SetConfig+0x182c>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	2b09      	cmp	r3, #9
 8008e58:	d00e      	beq.n	8008e78 <UART_SetConfig+0x1828>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b0a      	cmp	r3, #10
 8008e60:	d008      	beq.n	8008e74 <UART_SetConfig+0x1824>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	2b0b      	cmp	r3, #11
 8008e68:	d102      	bne.n	8008e70 <UART_SetConfig+0x1820>
 8008e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e6e:	e016      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e014      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e74:	2380      	movs	r3, #128	; 0x80
 8008e76:	e012      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	e010      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e7c:	2320      	movs	r3, #32
 8008e7e:	e00e      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e80:	2310      	movs	r3, #16
 8008e82:	e00c      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e84:	230c      	movs	r3, #12
 8008e86:	e00a      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e88:	230a      	movs	r3, #10
 8008e8a:	e008      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	e006      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e90:	2306      	movs	r3, #6
 8008e92:	e004      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e94:	2304      	movs	r3, #4
 8008e96:	e002      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e000      	b.n	8008e9e <UART_SetConfig+0x184e>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea4:	005a      	lsls	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	085b      	lsrs	r3, r3, #1
 8008eac:	441a      	add	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008eba:	e254      	b.n	8009366 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ebc:	f107 0318 	add.w	r3, r7, #24
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fd faaf 	bl	8006424 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d044      	beq.n	8008f5a <UART_SetConfig+0x190a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d03e      	beq.n	8008f56 <UART_SetConfig+0x1906>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d038      	beq.n	8008f52 <UART_SetConfig+0x1902>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d032      	beq.n	8008f4e <UART_SetConfig+0x18fe>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d02c      	beq.n	8008f4a <UART_SetConfig+0x18fa>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b05      	cmp	r3, #5
 8008ef6:	d026      	beq.n	8008f46 <UART_SetConfig+0x18f6>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b06      	cmp	r3, #6
 8008efe:	d020      	beq.n	8008f42 <UART_SetConfig+0x18f2>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b07      	cmp	r3, #7
 8008f06:	d01a      	beq.n	8008f3e <UART_SetConfig+0x18ee>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d014      	beq.n	8008f3a <UART_SetConfig+0x18ea>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b09      	cmp	r3, #9
 8008f16:	d00e      	beq.n	8008f36 <UART_SetConfig+0x18e6>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b0a      	cmp	r3, #10
 8008f1e:	d008      	beq.n	8008f32 <UART_SetConfig+0x18e2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2b0b      	cmp	r3, #11
 8008f26:	d102      	bne.n	8008f2e <UART_SetConfig+0x18de>
 8008f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f2c:	e016      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e014      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	e012      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	e010      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	e00e      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f3e:	2310      	movs	r3, #16
 8008f40:	e00c      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f42:	230c      	movs	r3, #12
 8008f44:	e00a      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f46:	230a      	movs	r3, #10
 8008f48:	e008      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f4a:	2308      	movs	r3, #8
 8008f4c:	e006      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f4e:	2306      	movs	r3, #6
 8008f50:	e004      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f52:	2304      	movs	r3, #4
 8008f54:	e002      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f56:	2302      	movs	r3, #2
 8008f58:	e000      	b.n	8008f5c <UART_SetConfig+0x190c>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f60:	005a      	lsls	r2, r3, #1
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	085b      	lsrs	r3, r3, #1
 8008f68:	441a      	add	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f76:	e1f6      	b.n	8009366 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fd fb9d 	bl	80066bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d044      	beq.n	8009016 <UART_SetConfig+0x19c6>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d03e      	beq.n	8009012 <UART_SetConfig+0x19c2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d038      	beq.n	800900e <UART_SetConfig+0x19be>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d032      	beq.n	800900a <UART_SetConfig+0x19ba>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d02c      	beq.n	8009006 <UART_SetConfig+0x19b6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	2b05      	cmp	r3, #5
 8008fb2:	d026      	beq.n	8009002 <UART_SetConfig+0x19b2>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2b06      	cmp	r3, #6
 8008fba:	d020      	beq.n	8008ffe <UART_SetConfig+0x19ae>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b07      	cmp	r3, #7
 8008fc2:	d01a      	beq.n	8008ffa <UART_SetConfig+0x19aa>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d014      	beq.n	8008ff6 <UART_SetConfig+0x19a6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	2b09      	cmp	r3, #9
 8008fd2:	d00e      	beq.n	8008ff2 <UART_SetConfig+0x19a2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2b0a      	cmp	r3, #10
 8008fda:	d008      	beq.n	8008fee <UART_SetConfig+0x199e>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2b0b      	cmp	r3, #11
 8008fe2:	d102      	bne.n	8008fea <UART_SetConfig+0x199a>
 8008fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fe8:	e016      	b.n	8009018 <UART_SetConfig+0x19c8>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e014      	b.n	8009018 <UART_SetConfig+0x19c8>
 8008fee:	2380      	movs	r3, #128	; 0x80
 8008ff0:	e012      	b.n	8009018 <UART_SetConfig+0x19c8>
 8008ff2:	2340      	movs	r3, #64	; 0x40
 8008ff4:	e010      	b.n	8009018 <UART_SetConfig+0x19c8>
 8008ff6:	2320      	movs	r3, #32
 8008ff8:	e00e      	b.n	8009018 <UART_SetConfig+0x19c8>
 8008ffa:	2310      	movs	r3, #16
 8008ffc:	e00c      	b.n	8009018 <UART_SetConfig+0x19c8>
 8008ffe:	230c      	movs	r3, #12
 8009000:	e00a      	b.n	8009018 <UART_SetConfig+0x19c8>
 8009002:	230a      	movs	r3, #10
 8009004:	e008      	b.n	8009018 <UART_SetConfig+0x19c8>
 8009006:	2308      	movs	r3, #8
 8009008:	e006      	b.n	8009018 <UART_SetConfig+0x19c8>
 800900a:	2306      	movs	r3, #6
 800900c:	e004      	b.n	8009018 <UART_SetConfig+0x19c8>
 800900e:	2304      	movs	r3, #4
 8009010:	e002      	b.n	8009018 <UART_SetConfig+0x19c8>
 8009012:	2302      	movs	r3, #2
 8009014:	e000      	b.n	8009018 <UART_SetConfig+0x19c8>
 8009016:	2301      	movs	r3, #1
 8009018:	fbb2 f3f3 	udiv	r3, r2, r3
 800901c:	005a      	lsls	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	085b      	lsrs	r3, r3, #1
 8009024:	441a      	add	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	fbb2 f3f3 	udiv	r3, r2, r3
 800902e:	b29b      	uxth	r3, r3
 8009030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009032:	e198      	b.n	8009366 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009034:	4b87      	ldr	r3, [pc, #540]	; (8009254 <UART_SetConfig+0x1c04>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d05e      	beq.n	80090fe <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009040:	4b84      	ldr	r3, [pc, #528]	; (8009254 <UART_SetConfig+0x1c04>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	08db      	lsrs	r3, r3, #3
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	4a83      	ldr	r2, [pc, #524]	; (8009258 <UART_SetConfig+0x1c08>)
 800904c:	40da      	lsrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d044      	beq.n	80090e0 <UART_SetConfig+0x1a90>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	2b01      	cmp	r3, #1
 800905c:	d03e      	beq.n	80090dc <UART_SetConfig+0x1a8c>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b02      	cmp	r3, #2
 8009064:	d038      	beq.n	80090d8 <UART_SetConfig+0x1a88>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b03      	cmp	r3, #3
 800906c:	d032      	beq.n	80090d4 <UART_SetConfig+0x1a84>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b04      	cmp	r3, #4
 8009074:	d02c      	beq.n	80090d0 <UART_SetConfig+0x1a80>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b05      	cmp	r3, #5
 800907c:	d026      	beq.n	80090cc <UART_SetConfig+0x1a7c>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b06      	cmp	r3, #6
 8009084:	d020      	beq.n	80090c8 <UART_SetConfig+0x1a78>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b07      	cmp	r3, #7
 800908c:	d01a      	beq.n	80090c4 <UART_SetConfig+0x1a74>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	2b08      	cmp	r3, #8
 8009094:	d014      	beq.n	80090c0 <UART_SetConfig+0x1a70>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	2b09      	cmp	r3, #9
 800909c:	d00e      	beq.n	80090bc <UART_SetConfig+0x1a6c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2b0a      	cmp	r3, #10
 80090a4:	d008      	beq.n	80090b8 <UART_SetConfig+0x1a68>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b0b      	cmp	r3, #11
 80090ac:	d102      	bne.n	80090b4 <UART_SetConfig+0x1a64>
 80090ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090b2:	e016      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090b4:	2301      	movs	r3, #1
 80090b6:	e014      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	e012      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	e010      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090c0:	2320      	movs	r3, #32
 80090c2:	e00e      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090c4:	2310      	movs	r3, #16
 80090c6:	e00c      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090c8:	230c      	movs	r3, #12
 80090ca:	e00a      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090cc:	230a      	movs	r3, #10
 80090ce:	e008      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090d0:	2308      	movs	r3, #8
 80090d2:	e006      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090d4:	2306      	movs	r3, #6
 80090d6:	e004      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090d8:	2304      	movs	r3, #4
 80090da:	e002      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090dc:	2302      	movs	r3, #2
 80090de:	e000      	b.n	80090e2 <UART_SetConfig+0x1a92>
 80090e0:	2301      	movs	r3, #1
 80090e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e6:	005a      	lsls	r2, r3, #1
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	441a      	add	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80090fc:	e133      	b.n	8009366 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d043      	beq.n	800918e <UART_SetConfig+0x1b3e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	2b01      	cmp	r3, #1
 800910c:	d03d      	beq.n	800918a <UART_SetConfig+0x1b3a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b02      	cmp	r3, #2
 8009114:	d037      	beq.n	8009186 <UART_SetConfig+0x1b36>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	2b03      	cmp	r3, #3
 800911c:	d031      	beq.n	8009182 <UART_SetConfig+0x1b32>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	2b04      	cmp	r3, #4
 8009124:	d02b      	beq.n	800917e <UART_SetConfig+0x1b2e>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	2b05      	cmp	r3, #5
 800912c:	d025      	beq.n	800917a <UART_SetConfig+0x1b2a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b06      	cmp	r3, #6
 8009134:	d01f      	beq.n	8009176 <UART_SetConfig+0x1b26>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2b07      	cmp	r3, #7
 800913c:	d019      	beq.n	8009172 <UART_SetConfig+0x1b22>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	2b08      	cmp	r3, #8
 8009144:	d013      	beq.n	800916e <UART_SetConfig+0x1b1e>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	2b09      	cmp	r3, #9
 800914c:	d00d      	beq.n	800916a <UART_SetConfig+0x1b1a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	2b0a      	cmp	r3, #10
 8009154:	d007      	beq.n	8009166 <UART_SetConfig+0x1b16>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	2b0b      	cmp	r3, #11
 800915c:	d101      	bne.n	8009162 <UART_SetConfig+0x1b12>
 800915e:	4b3f      	ldr	r3, [pc, #252]	; (800925c <UART_SetConfig+0x1c0c>)
 8009160:	e016      	b.n	8009190 <UART_SetConfig+0x1b40>
 8009162:	4b3f      	ldr	r3, [pc, #252]	; (8009260 <UART_SetConfig+0x1c10>)
 8009164:	e014      	b.n	8009190 <UART_SetConfig+0x1b40>
 8009166:	4b3f      	ldr	r3, [pc, #252]	; (8009264 <UART_SetConfig+0x1c14>)
 8009168:	e012      	b.n	8009190 <UART_SetConfig+0x1b40>
 800916a:	4b3f      	ldr	r3, [pc, #252]	; (8009268 <UART_SetConfig+0x1c18>)
 800916c:	e010      	b.n	8009190 <UART_SetConfig+0x1b40>
 800916e:	4b3f      	ldr	r3, [pc, #252]	; (800926c <UART_SetConfig+0x1c1c>)
 8009170:	e00e      	b.n	8009190 <UART_SetConfig+0x1b40>
 8009172:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <UART_SetConfig+0x1c20>)
 8009174:	e00c      	b.n	8009190 <UART_SetConfig+0x1b40>
 8009176:	4b3f      	ldr	r3, [pc, #252]	; (8009274 <UART_SetConfig+0x1c24>)
 8009178:	e00a      	b.n	8009190 <UART_SetConfig+0x1b40>
 800917a:	4b3f      	ldr	r3, [pc, #252]	; (8009278 <UART_SetConfig+0x1c28>)
 800917c:	e008      	b.n	8009190 <UART_SetConfig+0x1b40>
 800917e:	4b3f      	ldr	r3, [pc, #252]	; (800927c <UART_SetConfig+0x1c2c>)
 8009180:	e006      	b.n	8009190 <UART_SetConfig+0x1b40>
 8009182:	4b3f      	ldr	r3, [pc, #252]	; (8009280 <UART_SetConfig+0x1c30>)
 8009184:	e004      	b.n	8009190 <UART_SetConfig+0x1b40>
 8009186:	4b3f      	ldr	r3, [pc, #252]	; (8009284 <UART_SetConfig+0x1c34>)
 8009188:	e002      	b.n	8009190 <UART_SetConfig+0x1b40>
 800918a:	4b33      	ldr	r3, [pc, #204]	; (8009258 <UART_SetConfig+0x1c08>)
 800918c:	e000      	b.n	8009190 <UART_SetConfig+0x1b40>
 800918e:	4b34      	ldr	r3, [pc, #208]	; (8009260 <UART_SetConfig+0x1c10>)
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6852      	ldr	r2, [r2, #4]
 8009194:	0852      	lsrs	r2, r2, #1
 8009196:	441a      	add	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091a4:	e0df      	b.n	8009366 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d045      	beq.n	800923a <UART_SetConfig+0x1bea>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d03f      	beq.n	8009236 <UART_SetConfig+0x1be6>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d039      	beq.n	8009232 <UART_SetConfig+0x1be2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d033      	beq.n	800922e <UART_SetConfig+0x1bde>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d02d      	beq.n	800922a <UART_SetConfig+0x1bda>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	d027      	beq.n	8009226 <UART_SetConfig+0x1bd6>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	2b06      	cmp	r3, #6
 80091dc:	d021      	beq.n	8009222 <UART_SetConfig+0x1bd2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	2b07      	cmp	r3, #7
 80091e4:	d01b      	beq.n	800921e <UART_SetConfig+0x1bce>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	2b08      	cmp	r3, #8
 80091ec:	d015      	beq.n	800921a <UART_SetConfig+0x1bca>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	2b09      	cmp	r3, #9
 80091f4:	d00f      	beq.n	8009216 <UART_SetConfig+0x1bc6>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	2b0a      	cmp	r3, #10
 80091fc:	d008      	beq.n	8009210 <UART_SetConfig+0x1bc0>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	2b0b      	cmp	r3, #11
 8009204:	d102      	bne.n	800920c <UART_SetConfig+0x1bbc>
 8009206:	f647 2312 	movw	r3, #31250	; 0x7a12
 800920a:	e017      	b.n	800923c <UART_SetConfig+0x1bec>
 800920c:	4b18      	ldr	r3, [pc, #96]	; (8009270 <UART_SetConfig+0x1c20>)
 800920e:	e015      	b.n	800923c <UART_SetConfig+0x1bec>
 8009210:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009214:	e012      	b.n	800923c <UART_SetConfig+0x1bec>
 8009216:	4b1c      	ldr	r3, [pc, #112]	; (8009288 <UART_SetConfig+0x1c38>)
 8009218:	e010      	b.n	800923c <UART_SetConfig+0x1bec>
 800921a:	4b1c      	ldr	r3, [pc, #112]	; (800928c <UART_SetConfig+0x1c3c>)
 800921c:	e00e      	b.n	800923c <UART_SetConfig+0x1bec>
 800921e:	4b0f      	ldr	r3, [pc, #60]	; (800925c <UART_SetConfig+0x1c0c>)
 8009220:	e00c      	b.n	800923c <UART_SetConfig+0x1bec>
 8009222:	4b1b      	ldr	r3, [pc, #108]	; (8009290 <UART_SetConfig+0x1c40>)
 8009224:	e00a      	b.n	800923c <UART_SetConfig+0x1bec>
 8009226:	4b1b      	ldr	r3, [pc, #108]	; (8009294 <UART_SetConfig+0x1c44>)
 8009228:	e008      	b.n	800923c <UART_SetConfig+0x1bec>
 800922a:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <UART_SetConfig+0x1c14>)
 800922c:	e006      	b.n	800923c <UART_SetConfig+0x1bec>
 800922e:	4b1a      	ldr	r3, [pc, #104]	; (8009298 <UART_SetConfig+0x1c48>)
 8009230:	e004      	b.n	800923c <UART_SetConfig+0x1bec>
 8009232:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <UART_SetConfig+0x1c18>)
 8009234:	e002      	b.n	800923c <UART_SetConfig+0x1bec>
 8009236:	4b0d      	ldr	r3, [pc, #52]	; (800926c <UART_SetConfig+0x1c1c>)
 8009238:	e000      	b.n	800923c <UART_SetConfig+0x1bec>
 800923a:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <UART_SetConfig+0x1c20>)
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6852      	ldr	r2, [r2, #4]
 8009240:	0852      	lsrs	r2, r2, #1
 8009242:	441a      	add	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	fbb2 f3f3 	udiv	r3, r2, r3
 800924c:	b29b      	uxth	r3, r3
 800924e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009250:	e089      	b.n	8009366 <UART_SetConfig+0x1d16>
 8009252:	bf00      	nop
 8009254:	58024400 	.word	0x58024400
 8009258:	03d09000 	.word	0x03d09000
 800925c:	0007a120 	.word	0x0007a120
 8009260:	07a12000 	.word	0x07a12000
 8009264:	000f4240 	.word	0x000f4240
 8009268:	001e8480 	.word	0x001e8480
 800926c:	003d0900 	.word	0x003d0900
 8009270:	007a1200 	.word	0x007a1200
 8009274:	00a2c2aa 	.word	0x00a2c2aa
 8009278:	00c35000 	.word	0x00c35000
 800927c:	00f42400 	.word	0x00f42400
 8009280:	01458554 	.word	0x01458554
 8009284:	01e84800 	.word	0x01e84800
 8009288:	0001e848 	.word	0x0001e848
 800928c:	0003d090 	.word	0x0003d090
 8009290:	000a2c2a 	.word	0x000a2c2a
 8009294:	000c3500 	.word	0x000c3500
 8009298:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d04f      	beq.n	8009344 <UART_SetConfig+0x1cf4>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d048      	beq.n	800933e <UART_SetConfig+0x1cee>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d041      	beq.n	8009338 <UART_SetConfig+0x1ce8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d03a      	beq.n	8009332 <UART_SetConfig+0x1ce2>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d033      	beq.n	800932c <UART_SetConfig+0x1cdc>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b05      	cmp	r3, #5
 80092ca:	d02c      	beq.n	8009326 <UART_SetConfig+0x1cd6>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	2b06      	cmp	r3, #6
 80092d2:	d025      	beq.n	8009320 <UART_SetConfig+0x1cd0>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b07      	cmp	r3, #7
 80092da:	d01e      	beq.n	800931a <UART_SetConfig+0x1cca>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d017      	beq.n	8009314 <UART_SetConfig+0x1cc4>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d010      	beq.n	800930e <UART_SetConfig+0x1cbe>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b0a      	cmp	r3, #10
 80092f2:	d009      	beq.n	8009308 <UART_SetConfig+0x1cb8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b0b      	cmp	r3, #11
 80092fa:	d102      	bne.n	8009302 <UART_SetConfig+0x1cb2>
 80092fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009300:	e022      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009306:	e01f      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800930c:	e01c      	b.n	8009348 <UART_SetConfig+0x1cf8>
 800930e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009312:	e019      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009318:	e016      	b.n	8009348 <UART_SetConfig+0x1cf8>
 800931a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800931e:	e013      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009320:	f241 5354 	movw	r3, #5460	; 0x1554
 8009324:	e010      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009326:	f641 1398 	movw	r3, #6552	; 0x1998
 800932a:	e00d      	b.n	8009348 <UART_SetConfig+0x1cf8>
 800932c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009330:	e00a      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009332:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009336:	e007      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009338:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800933c:	e004      	b.n	8009348 <UART_SetConfig+0x1cf8>
 800933e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009342:	e001      	b.n	8009348 <UART_SetConfig+0x1cf8>
 8009344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6852      	ldr	r2, [r2, #4]
 800934c:	0852      	lsrs	r2, r2, #1
 800934e:	441a      	add	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	fbb2 f3f3 	udiv	r3, r2, r3
 8009358:	b29b      	uxth	r3, r3
 800935a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800935c:	e003      	b.n	8009366 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009368:	2b0f      	cmp	r3, #15
 800936a:	d916      	bls.n	800939a <UART_SetConfig+0x1d4a>
 800936c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009372:	d212      	bcs.n	800939a <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	b29b      	uxth	r3, r3
 8009378:	f023 030f 	bic.w	r3, r3, #15
 800937c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	b29b      	uxth	r3, r3
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	b29a      	uxth	r2, r3
 800938a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800938c:	4313      	orrs	r3, r2
 800938e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009396:	60da      	str	r2, [r3, #12]
 8009398:	e3a3      	b.n	8009ae2 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a0:	e39f      	b.n	8009ae2 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 80093a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80093a6:	2b40      	cmp	r3, #64	; 0x40
 80093a8:	f200 8388 	bhi.w	8009abc <UART_SetConfig+0x246c>
 80093ac:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <UART_SetConfig+0x1d64>)
 80093ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b2:	bf00      	nop
 80093b4:	080094b9 	.word	0x080094b9
 80093b8:	0800956f 	.word	0x0800956f
 80093bc:	08009abd 	.word	0x08009abd
 80093c0:	08009abd 	.word	0x08009abd
 80093c4:	08009625 	.word	0x08009625
 80093c8:	08009abd 	.word	0x08009abd
 80093cc:	08009abd 	.word	0x08009abd
 80093d0:	08009abd 	.word	0x08009abd
 80093d4:	080096df 	.word	0x080096df
 80093d8:	08009abd 	.word	0x08009abd
 80093dc:	08009abd 	.word	0x08009abd
 80093e0:	08009abd 	.word	0x08009abd
 80093e4:	08009abd 	.word	0x08009abd
 80093e8:	08009abd 	.word	0x08009abd
 80093ec:	08009abd 	.word	0x08009abd
 80093f0:	08009abd 	.word	0x08009abd
 80093f4:	08009799 	.word	0x08009799
 80093f8:	08009abd 	.word	0x08009abd
 80093fc:	08009abd 	.word	0x08009abd
 8009400:	08009abd 	.word	0x08009abd
 8009404:	08009abd 	.word	0x08009abd
 8009408:	08009abd 	.word	0x08009abd
 800940c:	08009abd 	.word	0x08009abd
 8009410:	08009abd 	.word	0x08009abd
 8009414:	08009abd 	.word	0x08009abd
 8009418:	08009abd 	.word	0x08009abd
 800941c:	08009abd 	.word	0x08009abd
 8009420:	08009abd 	.word	0x08009abd
 8009424:	08009abd 	.word	0x08009abd
 8009428:	08009abd 	.word	0x08009abd
 800942c:	08009abd 	.word	0x08009abd
 8009430:	08009abd 	.word	0x08009abd
 8009434:	08009909 	.word	0x08009909
 8009438:	08009abd 	.word	0x08009abd
 800943c:	08009abd 	.word	0x08009abd
 8009440:	08009abd 	.word	0x08009abd
 8009444:	08009abd 	.word	0x08009abd
 8009448:	08009abd 	.word	0x08009abd
 800944c:	08009abd 	.word	0x08009abd
 8009450:	08009abd 	.word	0x08009abd
 8009454:	08009abd 	.word	0x08009abd
 8009458:	08009abd 	.word	0x08009abd
 800945c:	08009abd 	.word	0x08009abd
 8009460:	08009abd 	.word	0x08009abd
 8009464:	08009abd 	.word	0x08009abd
 8009468:	08009abd 	.word	0x08009abd
 800946c:	08009abd 	.word	0x08009abd
 8009470:	08009abd 	.word	0x08009abd
 8009474:	08009abd 	.word	0x08009abd
 8009478:	08009abd 	.word	0x08009abd
 800947c:	08009abd 	.word	0x08009abd
 8009480:	08009abd 	.word	0x08009abd
 8009484:	08009abd 	.word	0x08009abd
 8009488:	08009abd 	.word	0x08009abd
 800948c:	08009abd 	.word	0x08009abd
 8009490:	08009abd 	.word	0x08009abd
 8009494:	08009abd 	.word	0x08009abd
 8009498:	08009abd 	.word	0x08009abd
 800949c:	08009abd 	.word	0x08009abd
 80094a0:	08009abd 	.word	0x08009abd
 80094a4:	08009abd 	.word	0x08009abd
 80094a8:	08009abd 	.word	0x08009abd
 80094ac:	08009abd 	.word	0x08009abd
 80094b0:	08009abd 	.word	0x08009abd
 80094b4:	080099fd 	.word	0x080099fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b8:	f7fb fdb0 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 80094bc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d044      	beq.n	8009550 <UART_SetConfig+0x1f00>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d03e      	beq.n	800954c <UART_SetConfig+0x1efc>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d038      	beq.n	8009548 <UART_SetConfig+0x1ef8>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d032      	beq.n	8009544 <UART_SetConfig+0x1ef4>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d02c      	beq.n	8009540 <UART_SetConfig+0x1ef0>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d026      	beq.n	800953c <UART_SetConfig+0x1eec>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	2b06      	cmp	r3, #6
 80094f4:	d020      	beq.n	8009538 <UART_SetConfig+0x1ee8>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	2b07      	cmp	r3, #7
 80094fc:	d01a      	beq.n	8009534 <UART_SetConfig+0x1ee4>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	2b08      	cmp	r3, #8
 8009504:	d014      	beq.n	8009530 <UART_SetConfig+0x1ee0>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	2b09      	cmp	r3, #9
 800950c:	d00e      	beq.n	800952c <UART_SetConfig+0x1edc>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	2b0a      	cmp	r3, #10
 8009514:	d008      	beq.n	8009528 <UART_SetConfig+0x1ed8>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	2b0b      	cmp	r3, #11
 800951c:	d102      	bne.n	8009524 <UART_SetConfig+0x1ed4>
 800951e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009522:	e016      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009524:	2301      	movs	r3, #1
 8009526:	e014      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009528:	2380      	movs	r3, #128	; 0x80
 800952a:	e012      	b.n	8009552 <UART_SetConfig+0x1f02>
 800952c:	2340      	movs	r3, #64	; 0x40
 800952e:	e010      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009530:	2320      	movs	r3, #32
 8009532:	e00e      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009534:	2310      	movs	r3, #16
 8009536:	e00c      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009538:	230c      	movs	r3, #12
 800953a:	e00a      	b.n	8009552 <UART_SetConfig+0x1f02>
 800953c:	230a      	movs	r3, #10
 800953e:	e008      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009540:	2308      	movs	r3, #8
 8009542:	e006      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009544:	2306      	movs	r3, #6
 8009546:	e004      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009548:	2304      	movs	r3, #4
 800954a:	e002      	b.n	8009552 <UART_SetConfig+0x1f02>
 800954c:	2302      	movs	r3, #2
 800954e:	e000      	b.n	8009552 <UART_SetConfig+0x1f02>
 8009550:	2301      	movs	r3, #1
 8009552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009554:	fbb2 f2f3 	udiv	r2, r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	441a      	add	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	b29b      	uxth	r3, r3
 800956a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800956c:	e2aa      	b.n	8009ac4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800956e:	f7fb fd6b 	bl	8005048 <HAL_RCC_GetPCLK2Freq>
 8009572:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	2b00      	cmp	r3, #0
 800957a:	d044      	beq.n	8009606 <UART_SetConfig+0x1fb6>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	2b01      	cmp	r3, #1
 8009582:	d03e      	beq.n	8009602 <UART_SetConfig+0x1fb2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	2b02      	cmp	r3, #2
 800958a:	d038      	beq.n	80095fe <UART_SetConfig+0x1fae>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	2b03      	cmp	r3, #3
 8009592:	d032      	beq.n	80095fa <UART_SetConfig+0x1faa>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	2b04      	cmp	r3, #4
 800959a:	d02c      	beq.n	80095f6 <UART_SetConfig+0x1fa6>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b05      	cmp	r3, #5
 80095a2:	d026      	beq.n	80095f2 <UART_SetConfig+0x1fa2>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b06      	cmp	r3, #6
 80095aa:	d020      	beq.n	80095ee <UART_SetConfig+0x1f9e>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b07      	cmp	r3, #7
 80095b2:	d01a      	beq.n	80095ea <UART_SetConfig+0x1f9a>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d014      	beq.n	80095e6 <UART_SetConfig+0x1f96>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b09      	cmp	r3, #9
 80095c2:	d00e      	beq.n	80095e2 <UART_SetConfig+0x1f92>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b0a      	cmp	r3, #10
 80095ca:	d008      	beq.n	80095de <UART_SetConfig+0x1f8e>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b0b      	cmp	r3, #11
 80095d2:	d102      	bne.n	80095da <UART_SetConfig+0x1f8a>
 80095d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095d8:	e016      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095da:	2301      	movs	r3, #1
 80095dc:	e014      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095de:	2380      	movs	r3, #128	; 0x80
 80095e0:	e012      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	e010      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095e6:	2320      	movs	r3, #32
 80095e8:	e00e      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095ea:	2310      	movs	r3, #16
 80095ec:	e00c      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095ee:	230c      	movs	r3, #12
 80095f0:	e00a      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095f2:	230a      	movs	r3, #10
 80095f4:	e008      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095f6:	2308      	movs	r3, #8
 80095f8:	e006      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095fa:	2306      	movs	r3, #6
 80095fc:	e004      	b.n	8009608 <UART_SetConfig+0x1fb8>
 80095fe:	2304      	movs	r3, #4
 8009600:	e002      	b.n	8009608 <UART_SetConfig+0x1fb8>
 8009602:	2302      	movs	r3, #2
 8009604:	e000      	b.n	8009608 <UART_SetConfig+0x1fb8>
 8009606:	2301      	movs	r3, #1
 8009608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800960a:	fbb2 f2f3 	udiv	r2, r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	085b      	lsrs	r3, r3, #1
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	fbb2 f3f3 	udiv	r3, r2, r3
 800961e:	b29b      	uxth	r3, r3
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009622:	e24f      	b.n	8009ac4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009624:	f107 0318 	add.w	r3, r7, #24
 8009628:	4618      	mov	r0, r3
 800962a:	f7fc fefb 	bl	8006424 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	d044      	beq.n	80096c2 <UART_SetConfig+0x2072>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	2b01      	cmp	r3, #1
 800963e:	d03e      	beq.n	80096be <UART_SetConfig+0x206e>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	2b02      	cmp	r3, #2
 8009646:	d038      	beq.n	80096ba <UART_SetConfig+0x206a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	2b03      	cmp	r3, #3
 800964e:	d032      	beq.n	80096b6 <UART_SetConfig+0x2066>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b04      	cmp	r3, #4
 8009656:	d02c      	beq.n	80096b2 <UART_SetConfig+0x2062>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	2b05      	cmp	r3, #5
 800965e:	d026      	beq.n	80096ae <UART_SetConfig+0x205e>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	2b06      	cmp	r3, #6
 8009666:	d020      	beq.n	80096aa <UART_SetConfig+0x205a>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	2b07      	cmp	r3, #7
 800966e:	d01a      	beq.n	80096a6 <UART_SetConfig+0x2056>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009674:	2b08      	cmp	r3, #8
 8009676:	d014      	beq.n	80096a2 <UART_SetConfig+0x2052>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	2b09      	cmp	r3, #9
 800967e:	d00e      	beq.n	800969e <UART_SetConfig+0x204e>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009684:	2b0a      	cmp	r3, #10
 8009686:	d008      	beq.n	800969a <UART_SetConfig+0x204a>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	2b0b      	cmp	r3, #11
 800968e:	d102      	bne.n	8009696 <UART_SetConfig+0x2046>
 8009690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009694:	e016      	b.n	80096c4 <UART_SetConfig+0x2074>
 8009696:	2301      	movs	r3, #1
 8009698:	e014      	b.n	80096c4 <UART_SetConfig+0x2074>
 800969a:	2380      	movs	r3, #128	; 0x80
 800969c:	e012      	b.n	80096c4 <UART_SetConfig+0x2074>
 800969e:	2340      	movs	r3, #64	; 0x40
 80096a0:	e010      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096a2:	2320      	movs	r3, #32
 80096a4:	e00e      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096a6:	2310      	movs	r3, #16
 80096a8:	e00c      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096aa:	230c      	movs	r3, #12
 80096ac:	e00a      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096ae:	230a      	movs	r3, #10
 80096b0:	e008      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096b2:	2308      	movs	r3, #8
 80096b4:	e006      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096b6:	2306      	movs	r3, #6
 80096b8:	e004      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096ba:	2304      	movs	r3, #4
 80096bc:	e002      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096be:	2302      	movs	r3, #2
 80096c0:	e000      	b.n	80096c4 <UART_SetConfig+0x2074>
 80096c2:	2301      	movs	r3, #1
 80096c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	085b      	lsrs	r3, r3, #1
 80096ce:	441a      	add	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096dc:	e1f2      	b.n	8009ac4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096de:	f107 030c 	add.w	r3, r7, #12
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fc ffea 	bl	80066bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d044      	beq.n	800977c <UART_SetConfig+0x212c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d03e      	beq.n	8009778 <UART_SetConfig+0x2128>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d038      	beq.n	8009774 <UART_SetConfig+0x2124>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	2b03      	cmp	r3, #3
 8009708:	d032      	beq.n	8009770 <UART_SetConfig+0x2120>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	2b04      	cmp	r3, #4
 8009710:	d02c      	beq.n	800976c <UART_SetConfig+0x211c>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	2b05      	cmp	r3, #5
 8009718:	d026      	beq.n	8009768 <UART_SetConfig+0x2118>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b06      	cmp	r3, #6
 8009720:	d020      	beq.n	8009764 <UART_SetConfig+0x2114>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b07      	cmp	r3, #7
 8009728:	d01a      	beq.n	8009760 <UART_SetConfig+0x2110>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	2b08      	cmp	r3, #8
 8009730:	d014      	beq.n	800975c <UART_SetConfig+0x210c>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	2b09      	cmp	r3, #9
 8009738:	d00e      	beq.n	8009758 <UART_SetConfig+0x2108>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b0a      	cmp	r3, #10
 8009740:	d008      	beq.n	8009754 <UART_SetConfig+0x2104>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	2b0b      	cmp	r3, #11
 8009748:	d102      	bne.n	8009750 <UART_SetConfig+0x2100>
 800974a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800974e:	e016      	b.n	800977e <UART_SetConfig+0x212e>
 8009750:	2301      	movs	r3, #1
 8009752:	e014      	b.n	800977e <UART_SetConfig+0x212e>
 8009754:	2380      	movs	r3, #128	; 0x80
 8009756:	e012      	b.n	800977e <UART_SetConfig+0x212e>
 8009758:	2340      	movs	r3, #64	; 0x40
 800975a:	e010      	b.n	800977e <UART_SetConfig+0x212e>
 800975c:	2320      	movs	r3, #32
 800975e:	e00e      	b.n	800977e <UART_SetConfig+0x212e>
 8009760:	2310      	movs	r3, #16
 8009762:	e00c      	b.n	800977e <UART_SetConfig+0x212e>
 8009764:	230c      	movs	r3, #12
 8009766:	e00a      	b.n	800977e <UART_SetConfig+0x212e>
 8009768:	230a      	movs	r3, #10
 800976a:	e008      	b.n	800977e <UART_SetConfig+0x212e>
 800976c:	2308      	movs	r3, #8
 800976e:	e006      	b.n	800977e <UART_SetConfig+0x212e>
 8009770:	2306      	movs	r3, #6
 8009772:	e004      	b.n	800977e <UART_SetConfig+0x212e>
 8009774:	2304      	movs	r3, #4
 8009776:	e002      	b.n	800977e <UART_SetConfig+0x212e>
 8009778:	2302      	movs	r3, #2
 800977a:	e000      	b.n	800977e <UART_SetConfig+0x212e>
 800977c:	2301      	movs	r3, #1
 800977e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	085b      	lsrs	r3, r3, #1
 8009788:	441a      	add	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009792:	b29b      	uxth	r3, r3
 8009794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009796:	e195      	b.n	8009ac4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009798:	4b87      	ldr	r3, [pc, #540]	; (80099b8 <UART_SetConfig+0x2368>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d05d      	beq.n	8009860 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097a4:	4b84      	ldr	r3, [pc, #528]	; (80099b8 <UART_SetConfig+0x2368>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	08db      	lsrs	r3, r3, #3
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	4a83      	ldr	r2, [pc, #524]	; (80099bc <UART_SetConfig+0x236c>)
 80097b0:	40da      	lsrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d044      	beq.n	8009844 <UART_SetConfig+0x21f4>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d03e      	beq.n	8009840 <UART_SetConfig+0x21f0>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d038      	beq.n	800983c <UART_SetConfig+0x21ec>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d032      	beq.n	8009838 <UART_SetConfig+0x21e8>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d02c      	beq.n	8009834 <UART_SetConfig+0x21e4>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	2b05      	cmp	r3, #5
 80097e0:	d026      	beq.n	8009830 <UART_SetConfig+0x21e0>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	2b06      	cmp	r3, #6
 80097e8:	d020      	beq.n	800982c <UART_SetConfig+0x21dc>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	2b07      	cmp	r3, #7
 80097f0:	d01a      	beq.n	8009828 <UART_SetConfig+0x21d8>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	2b08      	cmp	r3, #8
 80097f8:	d014      	beq.n	8009824 <UART_SetConfig+0x21d4>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	2b09      	cmp	r3, #9
 8009800:	d00e      	beq.n	8009820 <UART_SetConfig+0x21d0>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2b0a      	cmp	r3, #10
 8009808:	d008      	beq.n	800981c <UART_SetConfig+0x21cc>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	2b0b      	cmp	r3, #11
 8009810:	d102      	bne.n	8009818 <UART_SetConfig+0x21c8>
 8009812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009816:	e016      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009818:	2301      	movs	r3, #1
 800981a:	e014      	b.n	8009846 <UART_SetConfig+0x21f6>
 800981c:	2380      	movs	r3, #128	; 0x80
 800981e:	e012      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009820:	2340      	movs	r3, #64	; 0x40
 8009822:	e010      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009824:	2320      	movs	r3, #32
 8009826:	e00e      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009828:	2310      	movs	r3, #16
 800982a:	e00c      	b.n	8009846 <UART_SetConfig+0x21f6>
 800982c:	230c      	movs	r3, #12
 800982e:	e00a      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009830:	230a      	movs	r3, #10
 8009832:	e008      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009834:	2308      	movs	r3, #8
 8009836:	e006      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009838:	2306      	movs	r3, #6
 800983a:	e004      	b.n	8009846 <UART_SetConfig+0x21f6>
 800983c:	2304      	movs	r3, #4
 800983e:	e002      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009840:	2302      	movs	r3, #2
 8009842:	e000      	b.n	8009846 <UART_SetConfig+0x21f6>
 8009844:	2301      	movs	r3, #1
 8009846:	fbb2 f2f3 	udiv	r2, r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	085b      	lsrs	r3, r3, #1
 8009850:	441a      	add	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	fbb2 f3f3 	udiv	r3, r2, r3
 800985a:	b29b      	uxth	r3, r3
 800985c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800985e:	e131      	b.n	8009ac4 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d043      	beq.n	80098f0 <UART_SetConfig+0x22a0>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	2b01      	cmp	r3, #1
 800986e:	d03d      	beq.n	80098ec <UART_SetConfig+0x229c>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	2b02      	cmp	r3, #2
 8009876:	d037      	beq.n	80098e8 <UART_SetConfig+0x2298>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b03      	cmp	r3, #3
 800987e:	d031      	beq.n	80098e4 <UART_SetConfig+0x2294>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	2b04      	cmp	r3, #4
 8009886:	d02b      	beq.n	80098e0 <UART_SetConfig+0x2290>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	2b05      	cmp	r3, #5
 800988e:	d025      	beq.n	80098dc <UART_SetConfig+0x228c>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b06      	cmp	r3, #6
 8009896:	d01f      	beq.n	80098d8 <UART_SetConfig+0x2288>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b07      	cmp	r3, #7
 800989e:	d019      	beq.n	80098d4 <UART_SetConfig+0x2284>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	d013      	beq.n	80098d0 <UART_SetConfig+0x2280>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b09      	cmp	r3, #9
 80098ae:	d00d      	beq.n	80098cc <UART_SetConfig+0x227c>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	2b0a      	cmp	r3, #10
 80098b6:	d007      	beq.n	80098c8 <UART_SetConfig+0x2278>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	2b0b      	cmp	r3, #11
 80098be:	d101      	bne.n	80098c4 <UART_SetConfig+0x2274>
 80098c0:	4b3f      	ldr	r3, [pc, #252]	; (80099c0 <UART_SetConfig+0x2370>)
 80098c2:	e016      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098c4:	4b3d      	ldr	r3, [pc, #244]	; (80099bc <UART_SetConfig+0x236c>)
 80098c6:	e014      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098c8:	4b3e      	ldr	r3, [pc, #248]	; (80099c4 <UART_SetConfig+0x2374>)
 80098ca:	e012      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098cc:	4b3e      	ldr	r3, [pc, #248]	; (80099c8 <UART_SetConfig+0x2378>)
 80098ce:	e010      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098d0:	4b3e      	ldr	r3, [pc, #248]	; (80099cc <UART_SetConfig+0x237c>)
 80098d2:	e00e      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098d4:	4b3e      	ldr	r3, [pc, #248]	; (80099d0 <UART_SetConfig+0x2380>)
 80098d6:	e00c      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098d8:	4b3e      	ldr	r3, [pc, #248]	; (80099d4 <UART_SetConfig+0x2384>)
 80098da:	e00a      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098dc:	4b3e      	ldr	r3, [pc, #248]	; (80099d8 <UART_SetConfig+0x2388>)
 80098de:	e008      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098e0:	4b3e      	ldr	r3, [pc, #248]	; (80099dc <UART_SetConfig+0x238c>)
 80098e2:	e006      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098e4:	4b3e      	ldr	r3, [pc, #248]	; (80099e0 <UART_SetConfig+0x2390>)
 80098e6:	e004      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098e8:	4b3e      	ldr	r3, [pc, #248]	; (80099e4 <UART_SetConfig+0x2394>)
 80098ea:	e002      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098ec:	4b3e      	ldr	r3, [pc, #248]	; (80099e8 <UART_SetConfig+0x2398>)
 80098ee:	e000      	b.n	80098f2 <UART_SetConfig+0x22a2>
 80098f0:	4b32      	ldr	r3, [pc, #200]	; (80099bc <UART_SetConfig+0x236c>)
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6852      	ldr	r2, [r2, #4]
 80098f6:	0852      	lsrs	r2, r2, #1
 80098f8:	441a      	add	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009902:	b29b      	uxth	r3, r3
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009906:	e0dd      	b.n	8009ac4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	2b00      	cmp	r3, #0
 800990e:	d046      	beq.n	800999e <UART_SetConfig+0x234e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	2b01      	cmp	r3, #1
 8009916:	d040      	beq.n	800999a <UART_SetConfig+0x234a>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b02      	cmp	r3, #2
 800991e:	d03a      	beq.n	8009996 <UART_SetConfig+0x2346>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	2b03      	cmp	r3, #3
 8009926:	d034      	beq.n	8009992 <UART_SetConfig+0x2342>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	2b04      	cmp	r3, #4
 800992e:	d02e      	beq.n	800998e <UART_SetConfig+0x233e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	2b05      	cmp	r3, #5
 8009936:	d028      	beq.n	800998a <UART_SetConfig+0x233a>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b06      	cmp	r3, #6
 800993e:	d022      	beq.n	8009986 <UART_SetConfig+0x2336>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	2b07      	cmp	r3, #7
 8009946:	d01c      	beq.n	8009982 <UART_SetConfig+0x2332>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	2b08      	cmp	r3, #8
 800994e:	d016      	beq.n	800997e <UART_SetConfig+0x232e>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	2b09      	cmp	r3, #9
 8009956:	d00f      	beq.n	8009978 <UART_SetConfig+0x2328>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b0a      	cmp	r3, #10
 800995e:	d008      	beq.n	8009972 <UART_SetConfig+0x2322>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b0b      	cmp	r3, #11
 8009966:	d102      	bne.n	800996e <UART_SetConfig+0x231e>
 8009968:	f643 5309 	movw	r3, #15625	; 0x3d09
 800996c:	e018      	b.n	80099a0 <UART_SetConfig+0x2350>
 800996e:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <UART_SetConfig+0x2380>)
 8009970:	e016      	b.n	80099a0 <UART_SetConfig+0x2350>
 8009972:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009976:	e013      	b.n	80099a0 <UART_SetConfig+0x2350>
 8009978:	f24f 4324 	movw	r3, #62500	; 0xf424
 800997c:	e010      	b.n	80099a0 <UART_SetConfig+0x2350>
 800997e:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <UART_SetConfig+0x239c>)
 8009980:	e00e      	b.n	80099a0 <UART_SetConfig+0x2350>
 8009982:	4b0f      	ldr	r3, [pc, #60]	; (80099c0 <UART_SetConfig+0x2370>)
 8009984:	e00c      	b.n	80099a0 <UART_SetConfig+0x2350>
 8009986:	4b1a      	ldr	r3, [pc, #104]	; (80099f0 <UART_SetConfig+0x23a0>)
 8009988:	e00a      	b.n	80099a0 <UART_SetConfig+0x2350>
 800998a:	4b1a      	ldr	r3, [pc, #104]	; (80099f4 <UART_SetConfig+0x23a4>)
 800998c:	e008      	b.n	80099a0 <UART_SetConfig+0x2350>
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <UART_SetConfig+0x2374>)
 8009990:	e006      	b.n	80099a0 <UART_SetConfig+0x2350>
 8009992:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <UART_SetConfig+0x23a8>)
 8009994:	e004      	b.n	80099a0 <UART_SetConfig+0x2350>
 8009996:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <UART_SetConfig+0x2378>)
 8009998:	e002      	b.n	80099a0 <UART_SetConfig+0x2350>
 800999a:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <UART_SetConfig+0x237c>)
 800999c:	e000      	b.n	80099a0 <UART_SetConfig+0x2350>
 800999e:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <UART_SetConfig+0x2380>)
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	6852      	ldr	r2, [r2, #4]
 80099a4:	0852      	lsrs	r2, r2, #1
 80099a6:	441a      	add	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099b4:	e086      	b.n	8009ac4 <UART_SetConfig+0x2474>
 80099b6:	bf00      	nop
 80099b8:	58024400 	.word	0x58024400
 80099bc:	03d09000 	.word	0x03d09000
 80099c0:	0003d090 	.word	0x0003d090
 80099c4:	0007a120 	.word	0x0007a120
 80099c8:	000f4240 	.word	0x000f4240
 80099cc:	001e8480 	.word	0x001e8480
 80099d0:	003d0900 	.word	0x003d0900
 80099d4:	00516155 	.word	0x00516155
 80099d8:	0061a800 	.word	0x0061a800
 80099dc:	007a1200 	.word	0x007a1200
 80099e0:	00a2c2aa 	.word	0x00a2c2aa
 80099e4:	00f42400 	.word	0x00f42400
 80099e8:	01e84800 	.word	0x01e84800
 80099ec:	0001e848 	.word	0x0001e848
 80099f0:	00051615 	.word	0x00051615
 80099f4:	00061a80 	.word	0x00061a80
 80099f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d04e      	beq.n	8009aa2 <UART_SetConfig+0x2452>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d047      	beq.n	8009a9c <UART_SetConfig+0x244c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d040      	beq.n	8009a96 <UART_SetConfig+0x2446>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d039      	beq.n	8009a90 <UART_SetConfig+0x2440>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d032      	beq.n	8009a8a <UART_SetConfig+0x243a>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	d02b      	beq.n	8009a84 <UART_SetConfig+0x2434>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b06      	cmp	r3, #6
 8009a32:	d024      	beq.n	8009a7e <UART_SetConfig+0x242e>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b07      	cmp	r3, #7
 8009a3a:	d01d      	beq.n	8009a78 <UART_SetConfig+0x2428>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d016      	beq.n	8009a72 <UART_SetConfig+0x2422>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	2b09      	cmp	r3, #9
 8009a4a:	d00f      	beq.n	8009a6c <UART_SetConfig+0x241c>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	2b0a      	cmp	r3, #10
 8009a52:	d008      	beq.n	8009a66 <UART_SetConfig+0x2416>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b0b      	cmp	r3, #11
 8009a5a:	d101      	bne.n	8009a60 <UART_SetConfig+0x2410>
 8009a5c:	2380      	movs	r3, #128	; 0x80
 8009a5e:	e022      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a64:	e01f      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a6a:	e01c      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a70:	e019      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a76:	e016      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a7c:	e013      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a7e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009a82:	e010      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a84:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009a88:	e00d      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a8e:	e00a      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a90:	f241 5355 	movw	r3, #5461	; 0x1555
 8009a94:	e007      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a9a:	e004      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009a9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009aa0:	e001      	b.n	8009aa6 <UART_SetConfig+0x2456>
 8009aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6852      	ldr	r2, [r2, #4]
 8009aaa:	0852      	lsrs	r2, r2, #1
 8009aac:	441a      	add	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009aba:	e003      	b.n	8009ac4 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009ac2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac6:	2b0f      	cmp	r3, #15
 8009ac8:	d908      	bls.n	8009adc <UART_SetConfig+0x248c>
 8009aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ad0:	d204      	bcs.n	8009adc <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	e002      	b.n	8009ae2 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3740      	adds	r7, #64	; 0x40
 8009b06:	46bd      	mov	sp, r7
 8009b08:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	2bff      	cmp	r3, #255	; 0xff
 8009b1a:	d904      	bls.n	8009b26 <UART_AdvFeatureConfig+0x1a>
 8009b1c:	f640 4149 	movw	r1, #3145	; 0xc49
 8009b20:	4899      	ldr	r0, [pc, #612]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009b22:	f7f7 f8b6 	bl	8000c92 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d018      	beq.n	8009b64 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d009      	beq.n	8009b4e <UART_AdvFeatureConfig+0x42>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b42:	d004      	beq.n	8009b4e <UART_AdvFeatureConfig+0x42>
 8009b44:	f640 414e 	movw	r1, #3150	; 0xc4e
 8009b48:	488f      	ldr	r0, [pc, #572]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009b4a:	f7f7 f8a2 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d018      	beq.n	8009ba2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d009      	beq.n	8009b8c <UART_AdvFeatureConfig+0x80>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b80:	d004      	beq.n	8009b8c <UART_AdvFeatureConfig+0x80>
 8009b82:	f640 4155 	movw	r1, #3157	; 0xc55
 8009b86:	4880      	ldr	r0, [pc, #512]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009b88:	f7f7 f883 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d018      	beq.n	8009be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <UART_AdvFeatureConfig+0xbe>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bbe:	d004      	beq.n	8009bca <UART_AdvFeatureConfig+0xbe>
 8009bc0:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009bc4:	4870      	ldr	r0, [pc, #448]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009bc6:	f7f7 f864 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be4:	f003 0308 	and.w	r3, r3, #8
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d018      	beq.n	8009c1e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d009      	beq.n	8009c08 <UART_AdvFeatureConfig+0xfc>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bfc:	d004      	beq.n	8009c08 <UART_AdvFeatureConfig+0xfc>
 8009bfe:	f640 4163 	movw	r1, #3171	; 0xc63
 8009c02:	4861      	ldr	r0, [pc, #388]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009c04:	f7f7 f845 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	f003 0310 	and.w	r3, r3, #16
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d018      	beq.n	8009c5c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <UART_AdvFeatureConfig+0x13a>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3a:	d004      	beq.n	8009c46 <UART_AdvFeatureConfig+0x13a>
 8009c3c:	f640 416a 	movw	r1, #3178	; 0xc6a
 8009c40:	4851      	ldr	r0, [pc, #324]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009c42:	f7f7 f826 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d018      	beq.n	8009c9a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <UART_AdvFeatureConfig+0x178>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c78:	d004      	beq.n	8009c84 <UART_AdvFeatureConfig+0x178>
 8009c7a:	f640 4171 	movw	r1, #3185	; 0xc71
 8009c7e:	4842      	ldr	r0, [pc, #264]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009c80:	f7f7 f807 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 8082 	beq.w	8009dac <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a37      	ldr	r2, [pc, #220]	; (8009d8c <UART_AdvFeatureConfig+0x280>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d027      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a36      	ldr	r2, [pc, #216]	; (8009d90 <UART_AdvFeatureConfig+0x284>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d022      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a34      	ldr	r2, [pc, #208]	; (8009d94 <UART_AdvFeatureConfig+0x288>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d01d      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a33      	ldr	r2, [pc, #204]	; (8009d98 <UART_AdvFeatureConfig+0x28c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d018      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a31      	ldr	r2, [pc, #196]	; (8009d9c <UART_AdvFeatureConfig+0x290>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d013      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a30      	ldr	r2, [pc, #192]	; (8009da0 <UART_AdvFeatureConfig+0x294>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00e      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a2e      	ldr	r2, [pc, #184]	; (8009da4 <UART_AdvFeatureConfig+0x298>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d009      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a2d      	ldr	r2, [pc, #180]	; (8009da8 <UART_AdvFeatureConfig+0x29c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <UART_AdvFeatureConfig+0x1f6>
 8009cf8:	f640 4178 	movw	r1, #3192	; 0xc78
 8009cfc:	4822      	ldr	r0, [pc, #136]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009cfe:	f7f6 ffc8 	bl	8000c92 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d009      	beq.n	8009d1e <UART_AdvFeatureConfig+0x212>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d12:	d004      	beq.n	8009d1e <UART_AdvFeatureConfig+0x212>
 8009d14:	f640 4179 	movw	r1, #3193	; 0xc79
 8009d18:	481b      	ldr	r0, [pc, #108]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009d1a:	f7f6 ffba 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d3c:	d136      	bne.n	8009dac <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d013      	beq.n	8009d6e <UART_AdvFeatureConfig+0x262>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d4e:	d00e      	beq.n	8009d6e <UART_AdvFeatureConfig+0x262>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d58:	d009      	beq.n	8009d6e <UART_AdvFeatureConfig+0x262>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d62:	d004      	beq.n	8009d6e <UART_AdvFeatureConfig+0x262>
 8009d64:	f640 417e 	movw	r1, #3198	; 0xc7e
 8009d68:	4807      	ldr	r0, [pc, #28]	; (8009d88 <UART_AdvFeatureConfig+0x27c>)
 8009d6a:	f7f6 ff92 	bl	8000c92 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	605a      	str	r2, [r3, #4]
 8009d84:	e012      	b.n	8009dac <UART_AdvFeatureConfig+0x2a0>
 8009d86:	bf00      	nop
 8009d88:	08018940 	.word	0x08018940
 8009d8c:	40011000 	.word	0x40011000
 8009d90:	40004400 	.word	0x40004400
 8009d94:	40004800 	.word	0x40004800
 8009d98:	40004c00 	.word	0x40004c00
 8009d9c:	40005000 	.word	0x40005000
 8009da0:	40011400 	.word	0x40011400
 8009da4:	40007800 	.word	0x40007800
 8009da8:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d018      	beq.n	8009dea <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <UART_AdvFeatureConfig+0x2c8>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009dc8:	d004      	beq.n	8009dd4 <UART_AdvFeatureConfig+0x2c8>
 8009dca:	f640 4186 	movw	r1, #3206	; 0xc86
 8009dce:	4809      	ldr	r0, [pc, #36]	; (8009df4 <UART_AdvFeatureConfig+0x2e8>)
 8009dd0:	f7f6 ff5f 	bl	8000c92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	605a      	str	r2, [r3, #4]
  }
}
 8009dea:	bf00      	nop
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	08018940 	.word	0x08018940

08009df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e08:	f7f7 fb5a 	bl	80014c0 <HAL_GetTick>
 8009e0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d10e      	bne.n	8009e3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f82c 	bl	8009e88 <UART_WaitOnFlagUntilTimeout>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e022      	b.n	8009e80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d10e      	bne.n	8009e66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f816 	bl	8009e88 <UART_WaitOnFlagUntilTimeout>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e00c      	b.n	8009e80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	603b      	str	r3, [r7, #0]
 8009e94:	4613      	mov	r3, r2
 8009e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e98:	e062      	b.n	8009f60 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea0:	d05e      	beq.n	8009f60 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ea2:	f7f7 fb0d 	bl	80014c0 <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d302      	bcc.n	8009eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d11d      	bne.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ec6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f022 0201 	bic.w	r2, r2, #1
 8009ed6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2220      	movs	r2, #32
 8009edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e045      	b.n	8009f80 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0304 	and.w	r3, r3, #4
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d02e      	beq.n	8009f60 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f10:	d126      	bne.n	8009f60 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f1a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 0201 	bic.w	r2, r2, #1
 8009f3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e00f      	b.n	8009f80 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	69da      	ldr	r2, [r3, #28]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	bf0c      	ite	eq
 8009f70:	2301      	moveq	r3, #1
 8009f72:	2300      	movne	r3, #0
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	461a      	mov	r2, r3
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d08d      	beq.n	8009e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a2e      	ldr	r2, [pc, #184]	; (800a050 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d027      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a2d      	ldr	r2, [pc, #180]	; (800a054 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d022      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a2b      	ldr	r2, [pc, #172]	; (800a058 <HAL_UARTEx_DisableFifoMode+0xd0>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d01d      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a2a      	ldr	r2, [pc, #168]	; (800a05c <HAL_UARTEx_DisableFifoMode+0xd4>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d018      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a28      	ldr	r2, [pc, #160]	; (800a060 <HAL_UARTEx_DisableFifoMode+0xd8>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d013      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a27      	ldr	r2, [pc, #156]	; (800a064 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00e      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a25      	ldr	r2, [pc, #148]	; (800a068 <HAL_UARTEx_DisableFifoMode+0xe0>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d009      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a24      	ldr	r2, [pc, #144]	; (800a06c <HAL_UARTEx_DisableFifoMode+0xe4>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d004      	beq.n	8009fea <HAL_UARTEx_DisableFifoMode+0x62>
 8009fe0:	f240 2111 	movw	r1, #529	; 0x211
 8009fe4:	4822      	ldr	r0, [pc, #136]	; (800a070 <HAL_UARTEx_DisableFifoMode+0xe8>)
 8009fe6:	f7f6 fe54 	bl	8000c92 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_UARTEx_DisableFifoMode+0x70>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e027      	b.n	800a048 <HAL_UARTEx_DisableFifoMode+0xc0>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2224      	movs	r2, #36	; 0x24
 800a004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0201 	bic.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a026:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2220      	movs	r2, #32
 800a03a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	40011000 	.word	0x40011000
 800a054:	40004400 	.word	0x40004400
 800a058:	40004800 	.word	0x40004800
 800a05c:	40004c00 	.word	0x40004c00
 800a060:	40005000 	.word	0x40005000
 800a064:	40011400 	.word	0x40011400
 800a068:	40007800 	.word	0x40007800
 800a06c:	40007c00 	.word	0x40007c00
 800a070:	0801897c 	.word	0x0801897c

0800a074 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a40      	ldr	r2, [pc, #256]	; (800a184 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d027      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a3e      	ldr	r2, [pc, #248]	; (800a188 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d022      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a3d      	ldr	r2, [pc, #244]	; (800a18c <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d01d      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a3b      	ldr	r2, [pc, #236]	; (800a190 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d018      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a3a      	ldr	r2, [pc, #232]	; (800a194 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d013      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a38      	ldr	r2, [pc, #224]	; (800a198 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00e      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a37      	ldr	r2, [pc, #220]	; (800a19c <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d009      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a35      	ldr	r2, [pc, #212]	; (800a1a0 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d004      	beq.n	800a0d8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0ce:	f240 213f 	movw	r1, #575	; 0x23f
 800a0d2:	4834      	ldr	r0, [pc, #208]	; (800a1a4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a0d4:	f7f6 fddd 	bl	8000c92 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d018      	beq.n	800a110 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0e4:	d014      	beq.n	800a110 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ec:	d010      	beq.n	800a110 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800a0f4:	d00c      	beq.n	800a110 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0fc:	d008      	beq.n	800a110 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800a104:	d004      	beq.n	800a110 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a106:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a10a:	4826      	ldr	r0, [pc, #152]	; (800a1a4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a10c:	f7f6 fdc1 	bl	8000c92 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a116:	2b01      	cmp	r3, #1
 800a118:	d101      	bne.n	800a11e <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e02d      	b.n	800a17a <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2224      	movs	r2, #36	; 0x24
 800a12a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0201 	bic.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f8be 	bl	800a2dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2220      	movs	r2, #32
 800a16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	40011000 	.word	0x40011000
 800a188:	40004400 	.word	0x40004400
 800a18c:	40004800 	.word	0x40004800
 800a190:	40004c00 	.word	0x40004c00
 800a194:	40005000 	.word	0x40005000
 800a198:	40011400 	.word	0x40011400
 800a19c:	40007800 	.word	0x40007800
 800a1a0:	40007c00 	.word	0x40007c00
 800a1a4:	0801897c 	.word	0x0801897c

0800a1a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a40      	ldr	r2, [pc, #256]	; (800a2b8 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d027      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a3e      	ldr	r2, [pc, #248]	; (800a2bc <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d022      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a3d      	ldr	r2, [pc, #244]	; (800a2c0 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d01d      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a3b      	ldr	r2, [pc, #236]	; (800a2c4 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d018      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a3a      	ldr	r2, [pc, #232]	; (800a2c8 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d013      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a38      	ldr	r2, [pc, #224]	; (800a2cc <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00e      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a37      	ldr	r2, [pc, #220]	; (800a2d0 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d009      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a35      	ldr	r2, [pc, #212]	; (800a2d4 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d004      	beq.n	800a20c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a202:	f44f 711c 	mov.w	r1, #624	; 0x270
 800a206:	4834      	ldr	r0, [pc, #208]	; (800a2d8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a208:	f7f6 fd43 	bl	8000c92 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d018      	beq.n	800a244 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a218:	d014      	beq.n	800a244 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a220:	d010      	beq.n	800a244 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a228:	d00c      	beq.n	800a244 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a230:	d008      	beq.n	800a244 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800a238:	d004      	beq.n	800a244 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a23a:	f240 2171 	movw	r1, #625	; 0x271
 800a23e:	4826      	ldr	r0, [pc, #152]	; (800a2d8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a240:	f7f6 fd27 	bl	8000c92 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800a24e:	2302      	movs	r3, #2
 800a250:	e02d      	b.n	800a2ae <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2224      	movs	r2, #36	; 0x24
 800a25e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0201 	bic.w	r2, r2, #1
 800a278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	430a      	orrs	r2, r1
 800a28c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f824 	bl	800a2dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2220      	movs	r2, #32
 800a2a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40011000 	.word	0x40011000
 800a2bc:	40004400 	.word	0x40004400
 800a2c0:	40004800 	.word	0x40004800
 800a2c4:	40004c00 	.word	0x40004c00
 800a2c8:	40005000 	.word	0x40005000
 800a2cc:	40011400 	.word	0x40011400
 800a2d0:	40007800 	.word	0x40007800
 800a2d4:	40007c00 	.word	0x40007c00
 800a2d8:	0801897c 	.word	0x0801897c

0800a2dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b089      	sub	sp, #36	; 0x24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a2e4:	4a2f      	ldr	r2, [pc, #188]	; (800a3a4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a2e6:	f107 0314 	add.w	r3, r7, #20
 800a2ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a2f2:	4a2d      	ldr	r2, [pc, #180]	; (800a3a8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a2f4:	f107 030c 	add.w	r3, r7, #12
 800a2f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2fc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a304:	2b00      	cmp	r3, #0
 800a306:	d108      	bne.n	800a31a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a318:	e03d      	b.n	800a396 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a31a:	2308      	movs	r3, #8
 800a31c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a31e:	2308      	movs	r3, #8
 800a320:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	0e5b      	lsrs	r3, r3, #25
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	f003 0307 	and.w	r3, r3, #7
 800a330:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	0f5b      	lsrs	r3, r3, #29
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a342:	7fbb      	ldrb	r3, [r7, #30]
 800a344:	7f3a      	ldrb	r2, [r7, #28]
 800a346:	f107 0120 	add.w	r1, r7, #32
 800a34a:	440a      	add	r2, r1
 800a34c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a350:	fb02 f303 	mul.w	r3, r2, r3
 800a354:	7f3a      	ldrb	r2, [r7, #28]
 800a356:	f107 0120 	add.w	r1, r7, #32
 800a35a:	440a      	add	r2, r1
 800a35c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a360:	fb93 f3f2 	sdiv	r3, r3, r2
 800a364:	b29a      	uxth	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a36c:	7ffb      	ldrb	r3, [r7, #31]
 800a36e:	7f7a      	ldrb	r2, [r7, #29]
 800a370:	f107 0120 	add.w	r1, r7, #32
 800a374:	440a      	add	r2, r1
 800a376:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a37a:	fb02 f303 	mul.w	r3, r2, r3
 800a37e:	7f7a      	ldrb	r2, [r7, #29]
 800a380:	f107 0120 	add.w	r1, r7, #32
 800a384:	440a      	add	r2, r1
 800a386:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a38a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a396:	bf00      	nop
 800a398:	3724      	adds	r7, #36	; 0x24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	080189b8 	.word	0x080189b8
 800a3a8:	080189c0 	.word	0x080189c0

0800a3ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a3ac:	b5b0      	push	{r4, r5, r7, lr}
 800a3ae:	b08c      	sub	sp, #48	; 0x30
 800a3b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800a3b2:	4b96      	ldr	r3, [pc, #600]	; (800a60c <MX_LWIP_Init+0x260>)
 800a3b4:	220a      	movs	r2, #10
 800a3b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 800a3b8:	4b94      	ldr	r3, [pc, #592]	; (800a60c <MX_LWIP_Init+0x260>)
 800a3ba:	220a      	movs	r2, #10
 800a3bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800a3be:	4b93      	ldr	r3, [pc, #588]	; (800a60c <MX_LWIP_Init+0x260>)
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800a3c4:	4b91      	ldr	r3, [pc, #580]	; (800a60c <MX_LWIP_Init+0x260>)
 800a3c6:	220a      	movs	r2, #10
 800a3c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a3ca:	4b91      	ldr	r3, [pc, #580]	; (800a610 <MX_LWIP_Init+0x264>)
 800a3cc:	22ff      	movs	r2, #255	; 0xff
 800a3ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a3d0:	4b8f      	ldr	r3, [pc, #572]	; (800a610 <MX_LWIP_Init+0x264>)
 800a3d2:	22ff      	movs	r2, #255	; 0xff
 800a3d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a3d6:	4b8e      	ldr	r3, [pc, #568]	; (800a610 <MX_LWIP_Init+0x264>)
 800a3d8:	22ff      	movs	r2, #255	; 0xff
 800a3da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a3dc:	4b8c      	ldr	r3, [pc, #560]	; (800a610 <MX_LWIP_Init+0x264>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a3e2:	4b8c      	ldr	r3, [pc, #560]	; (800a614 <MX_LWIP_Init+0x268>)
 800a3e4:	220a      	movs	r2, #10
 800a3e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 800a3e8:	4b8a      	ldr	r3, [pc, #552]	; (800a614 <MX_LWIP_Init+0x268>)
 800a3ea:	220a      	movs	r2, #10
 800a3ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 800a3ee:	4b89      	ldr	r3, [pc, #548]	; (800a614 <MX_LWIP_Init+0x268>)
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 11;
 800a3f4:	4b87      	ldr	r3, [pc, #540]	; (800a614 <MX_LWIP_Init+0x268>)
 800a3f6:	220b      	movs	r2, #11
 800a3f8:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	f004 f9fb 	bl	800e7f8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a402:	4b82      	ldr	r3, [pc, #520]	; (800a60c <MX_LWIP_Init+0x260>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	061a      	lsls	r2, r3, #24
 800a408:	4b80      	ldr	r3, [pc, #512]	; (800a60c <MX_LWIP_Init+0x260>)
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	041b      	lsls	r3, r3, #16
 800a40e:	431a      	orrs	r2, r3
 800a410:	4b7e      	ldr	r3, [pc, #504]	; (800a60c <MX_LWIP_Init+0x260>)
 800a412:	789b      	ldrb	r3, [r3, #2]
 800a414:	021b      	lsls	r3, r3, #8
 800a416:	4313      	orrs	r3, r2
 800a418:	4a7c      	ldr	r2, [pc, #496]	; (800a60c <MX_LWIP_Init+0x260>)
 800a41a:	78d2      	ldrb	r2, [r2, #3]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	061a      	lsls	r2, r3, #24
 800a420:	4b7a      	ldr	r3, [pc, #488]	; (800a60c <MX_LWIP_Init+0x260>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	0619      	lsls	r1, r3, #24
 800a426:	4b79      	ldr	r3, [pc, #484]	; (800a60c <MX_LWIP_Init+0x260>)
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	041b      	lsls	r3, r3, #16
 800a42c:	4319      	orrs	r1, r3
 800a42e:	4b77      	ldr	r3, [pc, #476]	; (800a60c <MX_LWIP_Init+0x260>)
 800a430:	789b      	ldrb	r3, [r3, #2]
 800a432:	021b      	lsls	r3, r3, #8
 800a434:	430b      	orrs	r3, r1
 800a436:	4975      	ldr	r1, [pc, #468]	; (800a60c <MX_LWIP_Init+0x260>)
 800a438:	78c9      	ldrb	r1, [r1, #3]
 800a43a:	430b      	orrs	r3, r1
 800a43c:	021b      	lsls	r3, r3, #8
 800a43e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a442:	431a      	orrs	r2, r3
 800a444:	4b71      	ldr	r3, [pc, #452]	; (800a60c <MX_LWIP_Init+0x260>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	0619      	lsls	r1, r3, #24
 800a44a:	4b70      	ldr	r3, [pc, #448]	; (800a60c <MX_LWIP_Init+0x260>)
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	041b      	lsls	r3, r3, #16
 800a450:	4319      	orrs	r1, r3
 800a452:	4b6e      	ldr	r3, [pc, #440]	; (800a60c <MX_LWIP_Init+0x260>)
 800a454:	789b      	ldrb	r3, [r3, #2]
 800a456:	021b      	lsls	r3, r3, #8
 800a458:	430b      	orrs	r3, r1
 800a45a:	496c      	ldr	r1, [pc, #432]	; (800a60c <MX_LWIP_Init+0x260>)
 800a45c:	78c9      	ldrb	r1, [r1, #3]
 800a45e:	430b      	orrs	r3, r1
 800a460:	0a1b      	lsrs	r3, r3, #8
 800a462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a466:	431a      	orrs	r2, r3
 800a468:	4b68      	ldr	r3, [pc, #416]	; (800a60c <MX_LWIP_Init+0x260>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	0619      	lsls	r1, r3, #24
 800a46e:	4b67      	ldr	r3, [pc, #412]	; (800a60c <MX_LWIP_Init+0x260>)
 800a470:	785b      	ldrb	r3, [r3, #1]
 800a472:	041b      	lsls	r3, r3, #16
 800a474:	4319      	orrs	r1, r3
 800a476:	4b65      	ldr	r3, [pc, #404]	; (800a60c <MX_LWIP_Init+0x260>)
 800a478:	789b      	ldrb	r3, [r3, #2]
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	430b      	orrs	r3, r1
 800a47e:	4963      	ldr	r1, [pc, #396]	; (800a60c <MX_LWIP_Init+0x260>)
 800a480:	78c9      	ldrb	r1, [r1, #3]
 800a482:	430b      	orrs	r3, r1
 800a484:	0e1b      	lsrs	r3, r3, #24
 800a486:	4313      	orrs	r3, r2
 800a488:	4a63      	ldr	r2, [pc, #396]	; (800a618 <MX_LWIP_Init+0x26c>)
 800a48a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a48c:	4b60      	ldr	r3, [pc, #384]	; (800a610 <MX_LWIP_Init+0x264>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	061a      	lsls	r2, r3, #24
 800a492:	4b5f      	ldr	r3, [pc, #380]	; (800a610 <MX_LWIP_Init+0x264>)
 800a494:	785b      	ldrb	r3, [r3, #1]
 800a496:	041b      	lsls	r3, r3, #16
 800a498:	431a      	orrs	r2, r3
 800a49a:	4b5d      	ldr	r3, [pc, #372]	; (800a610 <MX_LWIP_Init+0x264>)
 800a49c:	789b      	ldrb	r3, [r3, #2]
 800a49e:	021b      	lsls	r3, r3, #8
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	4a5b      	ldr	r2, [pc, #364]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4a4:	78d2      	ldrb	r2, [r2, #3]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	061a      	lsls	r2, r3, #24
 800a4aa:	4b59      	ldr	r3, [pc, #356]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	0619      	lsls	r1, r3, #24
 800a4b0:	4b57      	ldr	r3, [pc, #348]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4b2:	785b      	ldrb	r3, [r3, #1]
 800a4b4:	041b      	lsls	r3, r3, #16
 800a4b6:	4319      	orrs	r1, r3
 800a4b8:	4b55      	ldr	r3, [pc, #340]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4ba:	789b      	ldrb	r3, [r3, #2]
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	430b      	orrs	r3, r1
 800a4c0:	4953      	ldr	r1, [pc, #332]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4c2:	78c9      	ldrb	r1, [r1, #3]
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	021b      	lsls	r3, r3, #8
 800a4c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	4b50      	ldr	r3, [pc, #320]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	0619      	lsls	r1, r3, #24
 800a4d4:	4b4e      	ldr	r3, [pc, #312]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4d6:	785b      	ldrb	r3, [r3, #1]
 800a4d8:	041b      	lsls	r3, r3, #16
 800a4da:	4319      	orrs	r1, r3
 800a4dc:	4b4c      	ldr	r3, [pc, #304]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4de:	789b      	ldrb	r3, [r3, #2]
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	430b      	orrs	r3, r1
 800a4e4:	494a      	ldr	r1, [pc, #296]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4e6:	78c9      	ldrb	r1, [r1, #3]
 800a4e8:	430b      	orrs	r3, r1
 800a4ea:	0a1b      	lsrs	r3, r3, #8
 800a4ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	4b47      	ldr	r3, [pc, #284]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	0619      	lsls	r1, r3, #24
 800a4f8:	4b45      	ldr	r3, [pc, #276]	; (800a610 <MX_LWIP_Init+0x264>)
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	041b      	lsls	r3, r3, #16
 800a4fe:	4319      	orrs	r1, r3
 800a500:	4b43      	ldr	r3, [pc, #268]	; (800a610 <MX_LWIP_Init+0x264>)
 800a502:	789b      	ldrb	r3, [r3, #2]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	430b      	orrs	r3, r1
 800a508:	4941      	ldr	r1, [pc, #260]	; (800a610 <MX_LWIP_Init+0x264>)
 800a50a:	78c9      	ldrb	r1, [r1, #3]
 800a50c:	430b      	orrs	r3, r1
 800a50e:	0e1b      	lsrs	r3, r3, #24
 800a510:	4313      	orrs	r3, r2
 800a512:	4a42      	ldr	r2, [pc, #264]	; (800a61c <MX_LWIP_Init+0x270>)
 800a514:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a516:	4b3f      	ldr	r3, [pc, #252]	; (800a614 <MX_LWIP_Init+0x268>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	061a      	lsls	r2, r3, #24
 800a51c:	4b3d      	ldr	r3, [pc, #244]	; (800a614 <MX_LWIP_Init+0x268>)
 800a51e:	785b      	ldrb	r3, [r3, #1]
 800a520:	041b      	lsls	r3, r3, #16
 800a522:	431a      	orrs	r2, r3
 800a524:	4b3b      	ldr	r3, [pc, #236]	; (800a614 <MX_LWIP_Init+0x268>)
 800a526:	789b      	ldrb	r3, [r3, #2]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	4313      	orrs	r3, r2
 800a52c:	4a39      	ldr	r2, [pc, #228]	; (800a614 <MX_LWIP_Init+0x268>)
 800a52e:	78d2      	ldrb	r2, [r2, #3]
 800a530:	4313      	orrs	r3, r2
 800a532:	061a      	lsls	r2, r3, #24
 800a534:	4b37      	ldr	r3, [pc, #220]	; (800a614 <MX_LWIP_Init+0x268>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	0619      	lsls	r1, r3, #24
 800a53a:	4b36      	ldr	r3, [pc, #216]	; (800a614 <MX_LWIP_Init+0x268>)
 800a53c:	785b      	ldrb	r3, [r3, #1]
 800a53e:	041b      	lsls	r3, r3, #16
 800a540:	4319      	orrs	r1, r3
 800a542:	4b34      	ldr	r3, [pc, #208]	; (800a614 <MX_LWIP_Init+0x268>)
 800a544:	789b      	ldrb	r3, [r3, #2]
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	430b      	orrs	r3, r1
 800a54a:	4932      	ldr	r1, [pc, #200]	; (800a614 <MX_LWIP_Init+0x268>)
 800a54c:	78c9      	ldrb	r1, [r1, #3]
 800a54e:	430b      	orrs	r3, r1
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a556:	431a      	orrs	r2, r3
 800a558:	4b2e      	ldr	r3, [pc, #184]	; (800a614 <MX_LWIP_Init+0x268>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	0619      	lsls	r1, r3, #24
 800a55e:	4b2d      	ldr	r3, [pc, #180]	; (800a614 <MX_LWIP_Init+0x268>)
 800a560:	785b      	ldrb	r3, [r3, #1]
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	4319      	orrs	r1, r3
 800a566:	4b2b      	ldr	r3, [pc, #172]	; (800a614 <MX_LWIP_Init+0x268>)
 800a568:	789b      	ldrb	r3, [r3, #2]
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	430b      	orrs	r3, r1
 800a56e:	4929      	ldr	r1, [pc, #164]	; (800a614 <MX_LWIP_Init+0x268>)
 800a570:	78c9      	ldrb	r1, [r1, #3]
 800a572:	430b      	orrs	r3, r1
 800a574:	0a1b      	lsrs	r3, r3, #8
 800a576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a57a:	431a      	orrs	r2, r3
 800a57c:	4b25      	ldr	r3, [pc, #148]	; (800a614 <MX_LWIP_Init+0x268>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	0619      	lsls	r1, r3, #24
 800a582:	4b24      	ldr	r3, [pc, #144]	; (800a614 <MX_LWIP_Init+0x268>)
 800a584:	785b      	ldrb	r3, [r3, #1]
 800a586:	041b      	lsls	r3, r3, #16
 800a588:	4319      	orrs	r1, r3
 800a58a:	4b22      	ldr	r3, [pc, #136]	; (800a614 <MX_LWIP_Init+0x268>)
 800a58c:	789b      	ldrb	r3, [r3, #2]
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	430b      	orrs	r3, r1
 800a592:	4920      	ldr	r1, [pc, #128]	; (800a614 <MX_LWIP_Init+0x268>)
 800a594:	78c9      	ldrb	r1, [r1, #3]
 800a596:	430b      	orrs	r3, r1
 800a598:	0e1b      	lsrs	r3, r3, #24
 800a59a:	4313      	orrs	r3, r2
 800a59c:	4a20      	ldr	r2, [pc, #128]	; (800a620 <MX_LWIP_Init+0x274>)
 800a59e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a5a0:	4b20      	ldr	r3, [pc, #128]	; (800a624 <MX_LWIP_Init+0x278>)
 800a5a2:	9302      	str	r3, [sp, #8]
 800a5a4:	4b20      	ldr	r3, [pc, #128]	; (800a628 <MX_LWIP_Init+0x27c>)
 800a5a6:	9301      	str	r3, [sp, #4]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	4b1c      	ldr	r3, [pc, #112]	; (800a620 <MX_LWIP_Init+0x274>)
 800a5ae:	4a1b      	ldr	r2, [pc, #108]	; (800a61c <MX_LWIP_Init+0x270>)
 800a5b0:	4919      	ldr	r1, [pc, #100]	; (800a618 <MX_LWIP_Init+0x26c>)
 800a5b2:	481e      	ldr	r0, [pc, #120]	; (800a62c <MX_LWIP_Init+0x280>)
 800a5b4:	f004 fed8 	bl	800f368 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a5b8:	481c      	ldr	r0, [pc, #112]	; (800a62c <MX_LWIP_Init+0x280>)
 800a5ba:	f004 ffc3 	bl	800f544 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a5be:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <MX_LWIP_Init+0x280>)
 800a5c0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a5c4:	089b      	lsrs	r3, r3, #2
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a5d0:	4816      	ldr	r0, [pc, #88]	; (800a62c <MX_LWIP_Init+0x280>)
 800a5d2:	f004 ffc7 	bl	800f564 <netif_set_up>
 800a5d6:	e002      	b.n	800a5de <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a5d8:	4814      	ldr	r0, [pc, #80]	; (800a62c <MX_LWIP_Init+0x280>)
 800a5da:	f005 f80f 	bl	800f5fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a5de:	4914      	ldr	r1, [pc, #80]	; (800a630 <MX_LWIP_Init+0x284>)
 800a5e0:	4812      	ldr	r0, [pc, #72]	; (800a62c <MX_LWIP_Init+0x280>)
 800a5e2:	f005 f880 	bl	800f6e6 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a5e6:	4b13      	ldr	r3, [pc, #76]	; (800a634 <MX_LWIP_Init+0x288>)
 800a5e8:	1d3c      	adds	r4, r7, #4
 800a5ea:	461d      	mov	r5, r3
 800a5ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a5f8:	1d3b      	adds	r3, r7, #4
 800a5fa:	490c      	ldr	r1, [pc, #48]	; (800a62c <MX_LWIP_Init+0x280>)
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fcc0 	bl	800af82 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a602:	bf00      	nop
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bdb0      	pop	{r4, r5, r7, pc}
 800a60a:	bf00      	nop
 800a60c:	2400a670 	.word	0x2400a670
 800a610:	2400a66c 	.word	0x2400a66c
 800a614:	2400a62c 	.word	0x2400a62c
 800a618:	2400a668 	.word	0x2400a668
 800a61c:	2400a674 	.word	0x2400a674
 800a620:	2400a678 	.word	0x2400a678
 800a624:	0800e721 	.word	0x0800e721
 800a628:	0800acbd 	.word	0x0800acbd
 800a62c:	2400a630 	.word	0x2400a630
 800a630:	0800a639 	.word	0x0800a639
 800a634:	080189d0 	.word	0x080189d0

0800a638 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status 
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif) 
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <ethernet_link_status_updated+0x1e>
  {
/* USER CODE BEGIN 5 */
	/* Update DHCP state machine */
	DHCP_state = DHCP_START;
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <ethernet_link_status_updated+0x2c>)
 800a652:	2201      	movs	r2, #1
 800a654:	701a      	strb	r2, [r3, #0]
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif
/* USER CODE END 6 */
  } 
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	2400a550 	.word	0x2400a550

0800a668 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a67a:	2320      	movs	r3, #32
 800a67c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a67e:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800a682:	e00b      	b.n	800a69c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800a684:	4a0c      	ldr	r2, [pc, #48]	; (800a6b8 <SCB_InvalidateDCache_by_Addr+0x50>)
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	4413      	add	r3, r2
 800a692:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dcf0      	bgt.n	800a684 <SCB_InvalidateDCache_by_Addr+0x1c>
 800a6a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a6a6:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800a6aa:	bf00      	nop
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	e000ed00 	.word	0xe000ed00

0800a6bc <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08e      	sub	sp, #56	; 0x38
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]
 800a6cc:	605a      	str	r2, [r3, #4]
 800a6ce:	609a      	str	r2, [r3, #8]
 800a6d0:	60da      	str	r2, [r3, #12]
 800a6d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a59      	ldr	r2, [pc, #356]	; (800a840 <HAL_ETH_MspInit+0x184>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	f040 80ab 	bne.w	800a836 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a6e0:	4b58      	ldr	r3, [pc, #352]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a6e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a6e6:	4a57      	ldr	r2, [pc, #348]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a6e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a6f0:	4b54      	ldr	r3, [pc, #336]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a6f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a6f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6fa:	623b      	str	r3, [r7, #32]
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a6fe:	4b51      	ldr	r3, [pc, #324]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a704:	4a4f      	ldr	r2, [pc, #316]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a70a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a70e:	4b4d      	ldr	r3, [pc, #308]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a718:	61fb      	str	r3, [r7, #28]
 800a71a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a71c:	4b49      	ldr	r3, [pc, #292]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a71e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a722:	4a48      	ldr	r2, [pc, #288]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a728:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a72c:	4b45      	ldr	r3, [pc, #276]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a72e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a73a:	4b42      	ldr	r3, [pc, #264]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a73c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a740:	4a40      	ldr	r2, [pc, #256]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a742:	f043 0304 	orr.w	r3, r3, #4
 800a746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a74a:	4b3e      	ldr	r3, [pc, #248]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a758:	4b3a      	ldr	r3, [pc, #232]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a75a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a75e:	4a39      	ldr	r2, [pc, #228]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a760:	f043 0301 	orr.w	r3, r3, #1
 800a764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a768:	4b36      	ldr	r3, [pc, #216]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a76a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	613b      	str	r3, [r7, #16]
 800a774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a776:	4b33      	ldr	r3, [pc, #204]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a77c:	4a31      	ldr	r2, [pc, #196]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a77e:	f043 0302 	orr.w	r3, r3, #2
 800a782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a786:	4b2f      	ldr	r3, [pc, #188]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a794:	4b2b      	ldr	r3, [pc, #172]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a79a:	4a2a      	ldr	r2, [pc, #168]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7a4:	4b27      	ldr	r3, [pc, #156]	; (800a844 <HAL_ETH_MspInit+0x188>)
 800a7a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ae:	60bb      	str	r3, [r7, #8]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a7b2:	2332      	movs	r3, #50	; 0x32
 800a7b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7c2:	230b      	movs	r3, #11
 800a7c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	481e      	ldr	r0, [pc, #120]	; (800a848 <HAL_ETH_MspInit+0x18c>)
 800a7ce:	f7f8 fec1 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a7d2:	2386      	movs	r3, #134	; 0x86
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7e2:	230b      	movs	r3, #11
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	4817      	ldr	r0, [pc, #92]	; (800a84c <HAL_ETH_MspInit+0x190>)
 800a7ee:	f7f8 feb1 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a7f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a800:	2300      	movs	r3, #0
 800a802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a804:	230b      	movs	r3, #11
 800a806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a80c:	4619      	mov	r1, r3
 800a80e:	4810      	ldr	r0, [pc, #64]	; (800a850 <HAL_ETH_MspInit+0x194>)
 800a810:	f7f8 fea0 	bl	8003554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a814:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a81a:	2302      	movs	r3, #2
 800a81c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a822:	2300      	movs	r3, #0
 800a824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a826:	230b      	movs	r3, #11
 800a828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a82a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a82e:	4619      	mov	r1, r3
 800a830:	4808      	ldr	r0, [pc, #32]	; (800a854 <HAL_ETH_MspInit+0x198>)
 800a832:	f7f8 fe8f 	bl	8003554 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a836:	bf00      	nop
 800a838:	3738      	adds	r7, #56	; 0x38
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	40028000 	.word	0x40028000
 800a844:	58024400 	.word	0x58024400
 800a848:	58020800 	.word	0x58020800
 800a84c:	58020000 	.word	0x58020000
 800a850:	58020400 	.word	0x58020400
 800a854:	58021800 	.word	0x58021800

0800a858 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a858:	b5b0      	push	{r4, r5, r7, lr}
 800a85a:	b0ac      	sub	sp, #176	; 0xb0
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a86c:	4b90      	ldr	r3, [pc, #576]	; (800aab0 <low_level_init+0x258>)
 800a86e:	4a91      	ldr	r2, [pc, #580]	; (800aab4 <low_level_init+0x25c>)
 800a870:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a872:	2300      	movs	r3, #0
 800a874:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a878:	2380      	movs	r3, #128	; 0x80
 800a87a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a87e:	23e1      	movs	r3, #225	; 0xe1
 800a880:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a884:	2300      	movs	r3, #0
 800a886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a890:	2300      	movs	r3, #0
 800a892:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a896:	4a86      	ldr	r2, [pc, #536]	; (800aab0 <low_level_init+0x258>)
 800a898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a89c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a89e:	4b84      	ldr	r3, [pc, #528]	; (800aab0 <low_level_init+0x258>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a8a4:	4b82      	ldr	r3, [pc, #520]	; (800aab0 <low_level_init+0x258>)
 800a8a6:	4a84      	ldr	r2, [pc, #528]	; (800aab8 <low_level_init+0x260>)
 800a8a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a8aa:	4b81      	ldr	r3, [pc, #516]	; (800aab0 <low_level_init+0x258>)
 800a8ac:	4a83      	ldr	r2, [pc, #524]	; (800aabc <low_level_init+0x264>)
 800a8ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a8b0:	4b7f      	ldr	r3, [pc, #508]	; (800aab0 <low_level_init+0x258>)
 800a8b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a8b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a8b8:	487d      	ldr	r0, [pc, #500]	; (800aab0 <low_level_init+0x258>)
 800a8ba:	f7f7 f8f5 	bl	8001aa8 <HAL_ETH_Init>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a8c4:	2234      	movs	r2, #52	; 0x34
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	487d      	ldr	r0, [pc, #500]	; (800aac0 <low_level_init+0x268>)
 800a8ca:	f00d f823 	bl	8017914 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a8ce:	4b7c      	ldr	r3, [pc, #496]	; (800aac0 <low_level_init+0x268>)
 800a8d0:	2221      	movs	r2, #33	; 0x21
 800a8d2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a8d4:	4b7a      	ldr	r3, [pc, #488]	; (800aac0 <low_level_init+0x268>)
 800a8d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a8da:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a8dc:	4b78      	ldr	r3, [pc, #480]	; (800aac0 <low_level_init+0x268>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a8e2:	4878      	ldr	r0, [pc, #480]	; (800aac4 <low_level_init+0x26c>)
 800a8e4:	f004 fbfa 	bl	800f0dc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2206      	movs	r2, #6
 800a8ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a8f0:	4b6f      	ldr	r3, [pc, #444]	; (800aab0 <low_level_init+0x258>)
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	781a      	ldrb	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a8fc:	4b6c      	ldr	r3, [pc, #432]	; (800aab0 <low_level_init+0x258>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	785a      	ldrb	r2, [r3, #1]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a908:	4b69      	ldr	r3, [pc, #420]	; (800aab0 <low_level_init+0x258>)
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	789a      	ldrb	r2, [r3, #2]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a914:	4b66      	ldr	r3, [pc, #408]	; (800aab0 <low_level_init+0x258>)
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	78da      	ldrb	r2, [r3, #3]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a920:	4b63      	ldr	r3, [pc, #396]	; (800aab0 <low_level_init+0x258>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	791a      	ldrb	r2, [r3, #4]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a92c:	4b60      	ldr	r3, [pc, #384]	; (800aab0 <low_level_init+0x258>)
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	795a      	ldrb	r2, [r3, #5]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a93e:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a946:	f043 030a 	orr.w	r3, r3, #10
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a952:	2300      	movs	r3, #0
 800a954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a958:	e012      	b.n	800a980 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a95a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a95e:	4613      	mov	r3, r2
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	4413      	add	r3, r2
 800a964:	025b      	lsls	r3, r3, #9
 800a966:	4a58      	ldr	r2, [pc, #352]	; (800aac8 <low_level_init+0x270>)
 800a968:	441a      	add	r2, r3
 800a96a:	2300      	movs	r3, #0
 800a96c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a970:	484f      	ldr	r0, [pc, #316]	; (800aab0 <low_level_init+0x258>)
 800a972:	f7f7 f973 	bl	8001c5c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a97a:	3301      	adds	r3, #1
 800a97c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a984:	2b03      	cmp	r3, #3
 800a986:	d9e8      	bls.n	800a95a <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a988:	2300      	movs	r3, #0
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a98c:	2300      	movs	r3, #0
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a994:	2101      	movs	r1, #1
 800a996:	4618      	mov	r0, r3
 800a998:	f000 fbfc 	bl	800b194 <osSemaphoreCreate>
 800a99c:	4602      	mov	r2, r0
 800a99e:	4b4b      	ldr	r3, [pc, #300]	; (800aacc <low_level_init+0x274>)
 800a9a0:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a9a2:	4b4b      	ldr	r3, [pc, #300]	; (800aad0 <low_level_init+0x278>)
 800a9a4:	f107 040c 	add.w	r4, r7, #12
 800a9a8:	461d      	mov	r5, r3
 800a9aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a9b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fae0 	bl	800af82 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a9c2:	4944      	ldr	r1, [pc, #272]	; (800aad4 <low_level_init+0x27c>)
 800a9c4:	4844      	ldr	r0, [pc, #272]	; (800aad8 <low_level_init+0x280>)
 800a9c6:	f7f6 fbca 	bl	800115e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a9ca:	4843      	ldr	r0, [pc, #268]	; (800aad8 <low_level_init+0x280>)
 800a9cc:	f7f6 fbf9 	bl	80011c2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a9d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d164      	bne.n	800aaa2 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a9d8:	483f      	ldr	r0, [pc, #252]	; (800aad8 <low_level_init+0x280>)
 800a9da:	f7f6 fc9a 	bl	8001312 <LAN8742_GetLinkState>
 800a9de:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a9e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	dc06      	bgt.n	800a9f8 <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f004 fe5b 	bl	800f6a6 <netif_set_link_down>
      netif_set_down(netif);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f004 fe03 	bl	800f5fc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800a9f6:	e056      	b.n	800aaa6 <low_level_init+0x24e>
      switch (PHYLinkState)
 800a9f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9fc:	3b02      	subs	r3, #2
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d82a      	bhi.n	800aa58 <low_level_init+0x200>
 800aa02:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <low_level_init+0x1b0>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa2b 	.word	0x0800aa2b
 800aa10:	0800aa3b 	.word	0x0800aa3b
 800aa14:	0800aa4b 	.word	0x0800aa4b
        duplex = ETH_FULLDUPLEX_MODE;
 800aa18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800aa20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa28:	e01f      	b.n	800aa6a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800aa30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa38:	e017      	b.n	800aa6a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800aa3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800aa42:	2300      	movs	r3, #0
 800aa44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa48:	e00f      	b.n	800aa6a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800aa50:	2300      	movs	r3, #0
 800aa52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa56:	e008      	b.n	800aa6a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800aa58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800aa60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800aa68:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800aa6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aa6e:	4619      	mov	r1, r3
 800aa70:	480f      	ldr	r0, [pc, #60]	; (800aab0 <low_level_init+0x258>)
 800aa72:	f7f7 fd99 	bl	80025a8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800aa76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa7a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800aa7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa80:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aa82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aa86:	4619      	mov	r1, r3
 800aa88:	4809      	ldr	r0, [pc, #36]	; (800aab0 <low_level_init+0x258>)
 800aa8a:	f7f7 ff61 	bl	8002950 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800aa8e:	4808      	ldr	r0, [pc, #32]	; (800aab0 <low_level_init+0x258>)
 800aa90:	f7f7 f925 	bl	8001cde <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f004 fd65 	bl	800f564 <netif_set_up>
    netif_set_link_up(netif);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f004 fdd8 	bl	800f650 <netif_set_link_up>
}
 800aaa0:	e001      	b.n	800aaa6 <low_level_init+0x24e>
    Error_Handler();
 800aaa2:	f7f6 f8ef 	bl	8000c84 <Error_Handler>
}
 800aaa6:	bf00      	nop
 800aaa8:	37b0      	adds	r7, #176	; 0xb0
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bdb0      	pop	{r4, r5, r7, pc}
 800aaae:	bf00      	nop
 800aab0:	2400a768 	.word	0x2400a768
 800aab4:	40028000 	.word	0x40028000
 800aab8:	30040060 	.word	0x30040060
 800aabc:	30040000 	.word	0x30040000
 800aac0:	2400a7d8 	.word	0x2400a7d8
 800aac4:	0801a80c 	.word	0x0801a80c
 800aac8:	30040200 	.word	0x30040200
 800aacc:	24002158 	.word	0x24002158
 800aad0:	080189f4 	.word	0x080189f4
 800aad4:	24000010 	.word	0x24000010
 800aad8:	2400a748 	.word	0x2400a748

0800aadc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b092      	sub	sp, #72	; 0x48
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	647b      	str	r3, [r7, #68]	; 0x44
 800aaea:	2300      	movs	r3, #0
 800aaec:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800aaf4:	f107 0308 	add.w	r3, r7, #8
 800aaf8:	2230      	movs	r2, #48	; 0x30
 800aafa:	2100      	movs	r1, #0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f00c ff09 	bl	8017914 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab06:	e04f      	b.n	800aba8 <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800ab08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d902      	bls.n	800ab14 <low_level_output+0x38>
      return ERR_IF;
 800ab0e:	f06f 030b 	mvn.w	r3, #11
 800ab12:	e05a      	b.n	800abca <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800ab14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab16:	6859      	ldr	r1, [r3, #4]
 800ab18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab26:	4413      	add	r3, r2
 800ab28:	3b40      	subs	r3, #64	; 0x40
 800ab2a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ab2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2e:	895b      	ldrh	r3, [r3, #10]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab40:	4413      	add	r3, r2
 800ab42:	3b3c      	subs	r3, #60	; 0x3c
 800ab44:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800ab46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab48:	895b      	ldrh	r3, [r3, #10]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4e:	4413      	add	r3, r2
 800ab50:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800ab52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d012      	beq.n	800ab7e <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ab58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab5a:	1e5a      	subs	r2, r3, #1
 800ab5c:	f107 0008 	add.w	r0, r7, #8
 800ab60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab62:	460b      	mov	r3, r1
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	440b      	add	r3, r1
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	18c1      	adds	r1, r0, r3
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab78:	4413      	add	r3, r2
 800ab7a:	3b38      	subs	r3, #56	; 0x38
 800ab7c:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800ab7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10a      	bne.n	800ab9c <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800ab86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab88:	4613      	mov	r3, r2
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab94:	4413      	add	r3, r2
 800ab96:	3b38      	subs	r3, #56	; 0x38
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800ab9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9e:	3301      	adds	r3, #1
 800aba0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800aba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1ac      	bne.n	800ab08 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800abae:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <low_level_output+0xf8>)
 800abb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb2:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800abb4:	4a07      	ldr	r2, [pc, #28]	; (800abd4 <low_level_output+0xf8>)
 800abb6:	f107 0308 	add.w	r3, r7, #8
 800abba:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800abbc:	2214      	movs	r2, #20
 800abbe:	4905      	ldr	r1, [pc, #20]	; (800abd4 <low_level_output+0xf8>)
 800abc0:	4805      	ldr	r0, [pc, #20]	; (800abd8 <low_level_output+0xfc>)
 800abc2:	f7f7 f999 	bl	8001ef8 <HAL_ETH_Transmit>
  
  return errval;
 800abc6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3748      	adds	r7, #72	; 0x48
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	2400a7d8 	.word	0x2400a7d8
 800abd8:	2400a768 	.word	0x2400a768

0800abdc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08a      	sub	sp, #40	; 0x28
 800abe0:	af02      	add	r7, sp, #8
 800abe2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 800abec:	f107 030c 	add.w	r3, r7, #12
 800abf0:	4619      	mov	r1, r3
 800abf2:	4817      	ldr	r0, [pc, #92]	; (800ac50 <low_level_input+0x74>)
 800abf4:	f7f7 faea 	bl	80021cc <HAL_ETH_GetRxDataBuffer>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d122      	bne.n	800ac44 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800abfe:	f107 0308 	add.w	r3, r7, #8
 800ac02:	4619      	mov	r1, r3
 800ac04:	4812      	ldr	r0, [pc, #72]	; (800ac50 <low_level_input+0x74>)
 800ac06:	f7f7 fb7f 	bl	8002308 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800ac0a:	4811      	ldr	r0, [pc, #68]	; (800ac50 <low_level_input+0x74>)
 800ac0c:	f7f7 fbaf 	bl	800236e <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	4611      	mov	r1, r2
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff fd26 	bl	800a668 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ac1c:	480d      	ldr	r0, [pc, #52]	; (800ac54 <low_level_input+0x78>)
 800ac1e:	f004 fad9 	bl	800f1d4 <memp_malloc_pool>
 800ac22:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	4a0c      	ldr	r2, [pc, #48]	; (800ac58 <low_level_input+0x7c>)
 800ac28:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	b299      	uxth	r1, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ac34:	9201      	str	r2, [sp, #4]
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	2004      	movs	r0, #4
 800ac3e:	f004 ff57 	bl	800faf0 <pbuf_alloced_custom>
 800ac42:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 800ac44:	69fb      	ldr	r3, [r7, #28]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	2400a768 	.word	0x2400a768
 800ac54:	0801a80c 	.word	0x0801a80c
 800ac58:	0800ad19 	.word	0x0800ad19

0800ac5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ac68:	4b12      	ldr	r3, [pc, #72]	; (800acb4 <ethernetif_input+0x58>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f04f 31ff 	mov.w	r1, #4294967295
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 facf 	bl	800b214 <osSemaphoreWait>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f5      	bne.n	800ac68 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800ac7c:	480e      	ldr	r0, [pc, #56]	; (800acb8 <ethernetif_input+0x5c>)
 800ac7e:	f00c fdab 	bl	80177d8 <sys_mutex_lock>
        p = low_level_input( netif );
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f7ff ffaa 	bl	800abdc <low_level_input>
 800ac88:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00a      	beq.n	800aca6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	68f9      	ldr	r1, [r7, #12]
 800ac96:	68b8      	ldr	r0, [r7, #8]
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800aca0:	68b8      	ldr	r0, [r7, #8]
 800aca2:	f005 f903 	bl	800feac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800aca6:	4804      	ldr	r0, [pc, #16]	; (800acb8 <ethernetif_input+0x5c>)
 800aca8:	f00c fda5 	bl	80177f6 <sys_mutex_unlock>
      } while(p!=NULL);
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1e4      	bne.n	800ac7c <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800acb2:	e7d9      	b.n	800ac68 <ethernetif_input+0xc>
 800acb4:	24002158 	.word	0x24002158
 800acb8:	2400a84c 	.word	0x2400a84c

0800acbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <ethernetif_init+0x1c>
 800acca:	4b0e      	ldr	r3, [pc, #56]	; (800ad04 <ethernetif_init+0x48>)
 800accc:	f240 223b 	movw	r2, #571	; 0x23b
 800acd0:	490d      	ldr	r1, [pc, #52]	; (800ad08 <ethernetif_init+0x4c>)
 800acd2:	480e      	ldr	r0, [pc, #56]	; (800ad0c <ethernetif_init+0x50>)
 800acd4:	f00c fe26 	bl	8017924 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2273      	movs	r2, #115	; 0x73
 800acdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2274      	movs	r2, #116	; 0x74
 800ace4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a09      	ldr	r2, [pc, #36]	; (800ad10 <ethernetif_init+0x54>)
 800acec:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a08      	ldr	r2, [pc, #32]	; (800ad14 <ethernetif_init+0x58>)
 800acf2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fdaf 	bl	800a858 <low_level_init>

  return ERR_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	08018a10 	.word	0x08018a10
 800ad08:	08018a2c 	.word	0x08018a2c
 800ad0c:	08018a3c 	.word	0x08018a3c
 800ad10:	08015965 	.word	0x08015965
 800ad14:	0800aadd 	.word	0x0800aadd

0800ad18 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	891b      	ldrh	r3, [r3, #8]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7ff fc9a 	bl	800a668 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ad34:	68f9      	ldr	r1, [r7, #12]
 800ad36:	4803      	ldr	r0, [pc, #12]	; (800ad44 <pbuf_free_custom+0x2c>)
 800ad38:	f004 fac0 	bl	800f2bc <memp_free_pool>
}
 800ad3c:	bf00      	nop
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	0801a80c 	.word	0x0801a80c

0800ad48 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ad4c:	f7f6 fbb8 	bl	80014c0 <HAL_GetTick>
 800ad50:	4603      	mov	r3, r0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ad5c:	4802      	ldr	r0, [pc, #8]	; (800ad68 <ETH_PHY_IO_Init+0x10>)
 800ad5e:	f7f7 fe11 	bl	8002984 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	2400a768 	.word	0x2400a768

0800ad6c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	af00      	add	r7, sp, #0
  return 0;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	68f9      	ldr	r1, [r7, #12]
 800ad8e:	4807      	ldr	r0, [pc, #28]	; (800adac <ETH_PHY_IO_ReadReg+0x30>)
 800ad90:	f7f7 fb61 	bl	8002456 <HAL_ETH_ReadPHYRegister>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d002      	beq.n	800ada0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ad9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9e:	e000      	b.n	800ada2 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	2400a768 	.word	0x2400a768

0800adb0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	68f9      	ldr	r1, [r7, #12]
 800adc2:	4807      	ldr	r0, [pc, #28]	; (800ade0 <ETH_PHY_IO_WriteReg+0x30>)
 800adc4:	f7f7 fb9c 	bl	8002500 <HAL_ETH_WritePHYRegister>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
 800add2:	e000      	b.n	800add6 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	2400a768 	.word	0x2400a768

0800ade4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ade8:	f7f6 fb6a 	bl	80014c0 <HAL_GetTick>
 800adec:	4603      	mov	r3, r0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */
 
void ethernet_link_thread(void const * argument)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b0a0      	sub	sp, #128	; 0x80
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae00:	2300      	movs	r3, #0
 800ae02:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae04:	2300      	movs	r3, #0
 800ae06:	677b      	str	r3, [r7, #116]	; 0x74
  
  struct netif *netif = (struct netif *) argument;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */
  
  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ae0c:	483a      	ldr	r0, [pc, #232]	; (800aef8 <ethernet_link_thread+0x104>)
 800ae0e:	f7f6 fa80 	bl	8001312 <LAN8742_GetLinkState>
 800ae12:	4603      	mov	r3, r0
 800ae14:	66fb      	str	r3, [r7, #108]	; 0x6c
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ae16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae18:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ae1c:	089b      	lsrs	r3, r3, #2
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00c      	beq.n	800ae42 <ethernet_link_thread+0x4e>
 800ae28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d809      	bhi.n	800ae42 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ae2e:	4833      	ldr	r0, [pc, #204]	; (800aefc <ethernet_link_thread+0x108>)
 800ae30:	f7f6 ffec 	bl	8001e0c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ae34:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ae36:	f004 fbe1 	bl	800f5fc <netif_set_down>
    netif_set_link_down(netif);
 800ae3a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ae3c:	f004 fc33 	bl	800f6a6 <netif_set_link_down>
 800ae40:	e055      	b.n	800aeee <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ae42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae44:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ae48:	f003 0304 	and.w	r3, r3, #4
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d14e      	bne.n	800aeee <ethernet_link_thread+0xfa>
 800ae50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d94b      	bls.n	800aeee <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800ae56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae58:	3b02      	subs	r3, #2
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d82a      	bhi.n	800aeb4 <ethernet_link_thread+0xc0>
 800ae5e:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <ethernet_link_thread+0x70>)
 800ae60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae64:	0800ae75 	.word	0x0800ae75
 800ae68:	0800ae87 	.word	0x0800ae87
 800ae6c:	0800ae97 	.word	0x0800ae97
 800ae70:	0800aea7 	.word	0x0800aea7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ae74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ae7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ae84:	e017      	b.n	800aeb6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ae86:	2300      	movs	r3, #0
 800ae88:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ae8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ae90:	2301      	movs	r3, #1
 800ae92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ae94:	e00f      	b.n	800aeb6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ae96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae9a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aea0:	2301      	movs	r3, #1
 800aea2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aea4:	e007      	b.n	800aeb6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aea6:	2300      	movs	r3, #0
 800aea8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aeb2:	e000      	b.n	800aeb6 <ethernet_link_thread+0xc2>
    default:
      break;      
 800aeb4:	bf00      	nop
    }
    
    if(linkchanged)
 800aeb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d018      	beq.n	800aeee <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4619      	mov	r1, r3
 800aec2:	480e      	ldr	r0, [pc, #56]	; (800aefc <ethernet_link_thread+0x108>)
 800aec4:	f7f7 fb70 	bl	80025a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800aecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aece:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aed0:	f107 0308 	add.w	r3, r7, #8
 800aed4:	4619      	mov	r1, r3
 800aed6:	4809      	ldr	r0, [pc, #36]	; (800aefc <ethernet_link_thread+0x108>)
 800aed8:	f7f7 fd3a 	bl	8002950 <HAL_ETH_SetMACConfig>
      
      HAL_ETH_Start_IT(&heth);
 800aedc:	4807      	ldr	r0, [pc, #28]	; (800aefc <ethernet_link_thread+0x108>)
 800aede:	f7f6 fefe 	bl	8001cde <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800aee2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aee4:	f004 fb3e 	bl	800f564 <netif_set_up>
      netif_set_link_up(netif);
 800aee8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800aeea:	f004 fbb1 	bl	800f650 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800aeee:	2064      	movs	r0, #100	; 0x64
 800aef0:	f000 f89f 	bl	800b032 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aef4:	e78a      	b.n	800ae0c <ethernet_link_thread+0x18>
 800aef6:	bf00      	nop
 800aef8:	2400a748 	.word	0x2400a748
 800aefc:	2400a768 	.word	0x2400a768

0800af00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af12:	2b84      	cmp	r3, #132	; 0x84
 800af14:	d005      	beq.n	800af22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4413      	add	r3, r2
 800af1e:	3303      	adds	r3, #3
 800af20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af22:	68fb      	ldr	r3, [r7, #12]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af36:	f3ef 8305 	mrs	r3, IPSR
 800af3a:	607b      	str	r3, [r7, #4]
  return(result);
 800af3c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800af3e:	2b00      	cmp	r3, #0
 800af40:	bf14      	ite	ne
 800af42:	2301      	movne	r3, #1
 800af44:	2300      	moveq	r3, #0
 800af46:	b2db      	uxtb	r3, r3
}
 800af48:	4618      	mov	r0, r3
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af58:	f001 fd78 	bl	800ca4c <vTaskStartScheduler>
  
  return osOK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	bd80      	pop	{r7, pc}

0800af62 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800af66:	f7ff ffe3 	bl	800af30 <inHandlerMode>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d003      	beq.n	800af78 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800af70:	f001 fe8a 	bl	800cc88 <xTaskGetTickCountFromISR>
 800af74:	4603      	mov	r3, r0
 800af76:	e002      	b.n	800af7e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800af78:	f001 fe76 	bl	800cc68 <xTaskGetTickCount>
 800af7c:	4603      	mov	r3, r0
  }
}
 800af7e:	4618      	mov	r0, r3
 800af80:	bd80      	pop	{r7, pc}

0800af82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800af82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af84:	b089      	sub	sp, #36	; 0x24
 800af86:	af04      	add	r7, sp, #16
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d020      	beq.n	800afd6 <osThreadCreate+0x54>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d01c      	beq.n	800afd6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685c      	ldr	r4, [r3, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681d      	ldr	r5, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	691e      	ldr	r6, [r3, #16]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff ffa6 	bl	800af00 <makeFreeRtosPriority>
 800afb4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afbe:	9202      	str	r2, [sp, #8]
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	9100      	str	r1, [sp, #0]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	4632      	mov	r2, r6
 800afc8:	4629      	mov	r1, r5
 800afca:	4620      	mov	r0, r4
 800afcc:	f001 faec 	bl	800c5a8 <xTaskCreateStatic>
 800afd0:	4603      	mov	r3, r0
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e01c      	b.n	800b010 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685c      	ldr	r4, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afe2:	b29e      	uxth	r6, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff ff88 	bl	800af00 <makeFreeRtosPriority>
 800aff0:	4602      	mov	r2, r0
 800aff2:	f107 030c 	add.w	r3, r7, #12
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	9200      	str	r2, [sp, #0]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	4632      	mov	r2, r6
 800affe:	4629      	mov	r1, r5
 800b000:	4620      	mov	r0, r4
 800b002:	f001 fb2b 	bl	800c65c <xTaskCreate>
 800b006:	4603      	mov	r3, r0
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d001      	beq.n	800b010 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	e000      	b.n	800b012 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b010:	68fb      	ldr	r3, [r7, #12]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b01a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b082      	sub	sp, #8
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fc50 	bl	800c8c8 <vTaskDelete>
  return osOK;
 800b028:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <osDelay+0x16>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	e000      	b.n	800b04a <osDelay+0x18>
 800b048:	2301      	movs	r3, #1
 800b04a:	4618      	mov	r0, r3
 800b04c:	f001 fcca 	bl	800c9e4 <vTaskDelay>
  
  return osOK;
 800b050:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d007      	beq.n	800b07a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4619      	mov	r1, r3
 800b070:	2001      	movs	r0, #1
 800b072:	f000 fc1a 	bl	800b8aa <xQueueCreateMutexStatic>
 800b076:	4603      	mov	r3, r0
 800b078:	e003      	b.n	800b082 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b07a:	2001      	movs	r0, #1
 800b07c:	f000 fbfd 	bl	800b87a <xQueueCreateMutex>
 800b080:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
	...

0800b08c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b096:	2300      	movs	r3, #0
 800b098:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <osMutexWait+0x18>
    return osErrorParameter;
 800b0a0:	2380      	movs	r3, #128	; 0x80
 800b0a2:	e03a      	b.n	800b11a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ae:	d103      	bne.n	800b0b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e009      	b.n	800b0cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d006      	beq.n	800b0cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <osMutexWait+0x40>
      ticks = 1;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b0cc:	f7ff ff30 	bl	800af30 <inHandlerMode>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d017      	beq.n	800b106 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b0d6:	f107 0308 	add.w	r3, r7, #8
 800b0da:	461a      	mov	r2, r3
 800b0dc:	2100      	movs	r1, #0
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f001 f860 	bl	800c1a4 <xQueueReceiveFromISR>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d001      	beq.n	800b0ee <osMutexWait+0x62>
      return osErrorOS;
 800b0ea:	23ff      	movs	r3, #255	; 0xff
 800b0ec:	e015      	b.n	800b11a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d011      	beq.n	800b118 <osMutexWait+0x8c>
 800b0f4:	4b0b      	ldr	r3, [pc, #44]	; (800b124 <osMutexWait+0x98>)
 800b0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	e008      	b.n	800b118 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b106:	68f9      	ldr	r1, [r7, #12]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 ff43 	bl	800bf94 <xQueueSemaphoreTake>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b01      	cmp	r3, #1
 800b112:	d001      	beq.n	800b118 <osMutexWait+0x8c>
    return osErrorOS;
 800b114:	23ff      	movs	r3, #255	; 0xff
 800b116:	e000      	b.n	800b11a <osMutexWait+0x8e>
  }
  
  return osOK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	e000ed04 	.word	0xe000ed04

0800b128 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b130:	2300      	movs	r3, #0
 800b132:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b134:	2300      	movs	r3, #0
 800b136:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b138:	f7ff fefa 	bl	800af30 <inHandlerMode>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d016      	beq.n	800b170 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b142:	f107 0308 	add.w	r3, r7, #8
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fdbd 	bl	800bcc8 <xQueueGiveFromISR>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b01      	cmp	r3, #1
 800b152:	d001      	beq.n	800b158 <osMutexRelease+0x30>
      return osErrorOS;
 800b154:	23ff      	movs	r3, #255	; 0xff
 800b156:	e017      	b.n	800b188 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d013      	beq.n	800b186 <osMutexRelease+0x5e>
 800b15e:	4b0c      	ldr	r3, [pc, #48]	; (800b190 <osMutexRelease+0x68>)
 800b160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	e00a      	b.n	800b186 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b170:	2300      	movs	r3, #0
 800b172:	2200      	movs	r2, #0
 800b174:	2100      	movs	r1, #0
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fc18 	bl	800b9ac <xQueueGenericSend>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d001      	beq.n	800b186 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b182:	23ff      	movs	r3, #255	; 0xff
 800b184:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b186:	68fb      	ldr	r3, [r7, #12]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	e000ed04 	.word	0xe000ed04

0800b194 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af02      	add	r7, sp, #8
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d017      	beq.n	800b1d6 <osSemaphoreCreate+0x42>
    if (count == 1) {
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d10b      	bne.n	800b1c4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	2001      	movs	r0, #1
 800b1bc:	f000 fa72 	bl	800b6a4 <xQueueGenericCreateStatic>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	e023      	b.n	800b20c <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800b1c4:	6838      	ldr	r0, [r7, #0]
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	f000 fb87 	bl	800b8e0 <xQueueCreateCountingSemaphoreStatic>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	e01a      	b.n	800b20c <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d110      	bne.n	800b1fe <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800b1dc:	2203      	movs	r2, #3
 800b1de:	2100      	movs	r1, #0
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	f000 fad2 	bl	800b78a <xQueueGenericCreate>
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d005      	beq.n	800b1fa <osSemaphoreCreate+0x66>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 fbd9 	bl	800b9ac <xQueueGenericSend>
      return sema;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	e006      	b.n	800b20c <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fba0 	bl	800b94a <xQueueCreateCountingSemaphore>
 800b20a:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b21e:	2300      	movs	r3, #0
 800b220:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b228:	2380      	movs	r3, #128	; 0x80
 800b22a:	e03a      	b.n	800b2a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b236:	d103      	bne.n	800b240 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b238:	f04f 33ff 	mov.w	r3, #4294967295
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	e009      	b.n	800b254 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d006      	beq.n	800b254 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <osSemaphoreWait+0x40>
      ticks = 1;
 800b250:	2301      	movs	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b254:	f7ff fe6c 	bl	800af30 <inHandlerMode>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d017      	beq.n	800b28e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b25e:	f107 0308 	add.w	r3, r7, #8
 800b262:	461a      	mov	r2, r3
 800b264:	2100      	movs	r1, #0
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 ff9c 	bl	800c1a4 <xQueueReceiveFromISR>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d001      	beq.n	800b276 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b272:	23ff      	movs	r3, #255	; 0xff
 800b274:	e015      	b.n	800b2a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d011      	beq.n	800b2a0 <osSemaphoreWait+0x8c>
 800b27c:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <osSemaphoreWait+0x98>)
 800b27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	e008      	b.n	800b2a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b28e:	68f9      	ldr	r1, [r7, #12]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fe7f 	bl	800bf94 <xQueueSemaphoreTake>
 800b296:	4603      	mov	r3, r0
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d001      	beq.n	800b2a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b29c:	23ff      	movs	r3, #255	; 0xff
 800b29e:	e000      	b.n	800b2a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	e000ed04 	.word	0xe000ed04

0800b2b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b2b0:	b590      	push	{r4, r7, lr}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d012      	beq.n	800b2e8 <osMessageCreate+0x38>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00e      	beq.n	800b2e8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6859      	ldr	r1, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68dc      	ldr	r4, [r3, #12]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	4623      	mov	r3, r4
 800b2e0:	f000 f9e0 	bl	800b6a4 <xQueueGenericCreateStatic>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	e008      	b.n	800b2fa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6818      	ldr	r0, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	f000 fa49 	bl	800b78a <xQueueGenericCreate>
 800b2f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd90      	pop	{r4, r7, pc}
	...

0800b304 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <osMessagePut+0x1e>
    ticks = 1;
 800b31e:	2301      	movs	r3, #1
 800b320:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b322:	f7ff fe05 	bl	800af30 <inHandlerMode>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d018      	beq.n	800b35e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b32c:	f107 0210 	add.w	r2, r7, #16
 800b330:	f107 0108 	add.w	r1, r7, #8
 800b334:	2300      	movs	r3, #0
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 fc32 	bl	800bba0 <xQueueGenericSendFromISR>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d001      	beq.n	800b346 <osMessagePut+0x42>
      return osErrorOS;
 800b342:	23ff      	movs	r3, #255	; 0xff
 800b344:	e018      	b.n	800b378 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d014      	beq.n	800b376 <osMessagePut+0x72>
 800b34c:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <osMessagePut+0x7c>)
 800b34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	e00b      	b.n	800b376 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b35e:	f107 0108 	add.w	r1, r7, #8
 800b362:	2300      	movs	r3, #0
 800b364:	697a      	ldr	r2, [r7, #20]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 fb20 	bl	800b9ac <xQueueGenericSend>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d001      	beq.n	800b376 <osMessagePut+0x72>
      return osErrorOS;
 800b372:	23ff      	movs	r3, #255	; 0xff
 800b374:	e000      	b.n	800b378 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b384:	b590      	push	{r4, r7, lr}
 800b386:	b08b      	sub	sp, #44	; 0x2c
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10a      	bne.n	800b3b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b39e:	2380      	movs	r3, #128	; 0x80
 800b3a0:	617b      	str	r3, [r7, #20]
    return event;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	461c      	mov	r4, r3
 800b3a6:	f107 0314 	add.w	r3, r7, #20
 800b3aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b3b2:	e054      	b.n	800b45e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c2:	d103      	bne.n	800b3cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ca:	e009      	b.n	800b3e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d006      	beq.n	800b3e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <osMessageGet+0x5c>
      ticks = 1;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b3e0:	f7ff fda6 	bl	800af30 <inHandlerMode>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d01c      	beq.n	800b424 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b3ea:	f107 0220 	add.w	r2, r7, #32
 800b3ee:	f107 0314 	add.w	r3, r7, #20
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	68b8      	ldr	r0, [r7, #8]
 800b3f8:	f000 fed4 	bl	800c1a4 <xQueueReceiveFromISR>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d102      	bne.n	800b408 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b402:	2310      	movs	r3, #16
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	e001      	b.n	800b40c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b408:	2300      	movs	r3, #0
 800b40a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d01d      	beq.n	800b44e <osMessageGet+0xca>
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <osMessageGet+0xe4>)
 800b414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	e014      	b.n	800b44e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b424:	f107 0314 	add.w	r3, r7, #20
 800b428:	3304      	adds	r3, #4
 800b42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b42c:	4619      	mov	r1, r3
 800b42e:	68b8      	ldr	r0, [r7, #8]
 800b430:	f000 fcd4 	bl	800bddc <xQueueReceive>
 800b434:	4603      	mov	r3, r0
 800b436:	2b01      	cmp	r3, #1
 800b438:	d102      	bne.n	800b440 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b43a:	2310      	movs	r3, #16
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	e006      	b.n	800b44e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <osMessageGet+0xc6>
 800b446:	2300      	movs	r3, #0
 800b448:	e000      	b.n	800b44c <osMessageGet+0xc8>
 800b44a:	2340      	movs	r3, #64	; 0x40
 800b44c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	461c      	mov	r4, r3
 800b452:	f107 0314 	add.w	r3, r7, #20
 800b456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b45a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	372c      	adds	r7, #44	; 0x2c
 800b462:	46bd      	mov	sp, r7
 800b464:	bd90      	pop	{r4, r7, pc}
 800b466:	bf00      	nop
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f103 0208 	add.w	r2, r3, #8
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f04f 32ff 	mov.w	r2, #4294967295
 800b484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f103 0208 	add.w	r2, r3, #8
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f103 0208 	add.w	r2, r3, #8
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4ba:	bf00      	nop
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b085      	sub	sp, #20
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	689a      	ldr	r2, [r3, #8]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	601a      	str	r2, [r3, #0]
}
 800b502:	bf00      	nop
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b50e:	b480      	push	{r7}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b524:	d103      	bne.n	800b52e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	e00c      	b.n	800b548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3308      	adds	r3, #8
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	e002      	b.n	800b53c <vListInsert+0x2e>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	429a      	cmp	r2, r3
 800b546:	d2f6      	bcs.n	800b536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	601a      	str	r2, [r3, #0]
}
 800b574:	bf00      	nop
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	6892      	ldr	r2, [r2, #8]
 800b596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	6852      	ldr	r2, [r2, #4]
 800b5a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d103      	bne.n	800b5b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689a      	ldr	r2, [r3, #8]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	1e5a      	subs	r2, r3, #1
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d109      	bne.n	800b5fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	60bb      	str	r3, [r7, #8]
 800b5fa:	e7fe      	b.n	800b5fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b5fc:	f002 fcf6 	bl	800dfec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b608:	68f9      	ldr	r1, [r7, #12]
 800b60a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b60c:	fb01 f303 	mul.w	r3, r1, r3
 800b610:	441a      	add	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62c:	3b01      	subs	r3, #1
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b632:	fb01 f303 	mul.w	r3, r1, r3
 800b636:	441a      	add	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	22ff      	movs	r2, #255	; 0xff
 800b640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	22ff      	movs	r2, #255	; 0xff
 800b648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d114      	bne.n	800b67c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d01a      	beq.n	800b690 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3310      	adds	r3, #16
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 fc84 	bl	800cf6c <xTaskRemoveFromEventList>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d012      	beq.n	800b690 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b66a:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <xQueueGenericReset+0xcc>)
 800b66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	e009      	b.n	800b690 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3310      	adds	r3, #16
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff fef3 	bl	800b46c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3324      	adds	r3, #36	; 0x24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff feee 	bl	800b46c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b690:	f002 fcda 	bl	800e048 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b694:	2301      	movs	r3, #1
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	e000ed04 	.word	0xe000ed04

0800b6a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08e      	sub	sp, #56	; 0x38
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d109      	bne.n	800b6cc <xQueueGenericCreateStatic+0x28>
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6ca:	e7fe      	b.n	800b6ca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <xQueueGenericCreateStatic+0x42>
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6e4:	e7fe      	b.n	800b6e4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <xQueueGenericCreateStatic+0x4e>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <xQueueGenericCreateStatic+0x52>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e000      	b.n	800b6f8 <xQueueGenericCreateStatic+0x54>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d109      	bne.n	800b710 <xQueueGenericCreateStatic+0x6c>
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	623b      	str	r3, [r7, #32]
 800b70e:	e7fe      	b.n	800b70e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d102      	bne.n	800b71c <xQueueGenericCreateStatic+0x78>
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d101      	bne.n	800b720 <xQueueGenericCreateStatic+0x7c>
 800b71c:	2301      	movs	r3, #1
 800b71e:	e000      	b.n	800b722 <xQueueGenericCreateStatic+0x7e>
 800b720:	2300      	movs	r3, #0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d109      	bne.n	800b73a <xQueueGenericCreateStatic+0x96>
 800b726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e7fe      	b.n	800b738 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b73a:	2348      	movs	r3, #72	; 0x48
 800b73c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2b48      	cmp	r3, #72	; 0x48
 800b742:	d009      	beq.n	800b758 <xQueueGenericCreateStatic+0xb4>
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	e7fe      	b.n	800b756 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b758:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00d      	beq.n	800b780 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	2201      	movs	r2, #1
 800b768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b76c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f844 	bl	800b808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b782:	4618      	mov	r0, r3
 800b784:	3730      	adds	r7, #48	; 0x30
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b08a      	sub	sp, #40	; 0x28
 800b78e:	af02      	add	r7, sp, #8
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	60b9      	str	r1, [r7, #8]
 800b794:	4613      	mov	r3, r2
 800b796:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d109      	bne.n	800b7b2 <xQueueGenericCreate+0x28>
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	613b      	str	r3, [r7, #16]
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d102      	bne.n	800b7be <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	61fb      	str	r3, [r7, #28]
 800b7bc:	e004      	b.n	800b7c8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	fb02 f303 	mul.w	r3, r2, r3
 800b7c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	3348      	adds	r3, #72	; 0x48
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f002 fd27 	bl	800e220 <pvPortMalloc>
 800b7d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d011      	beq.n	800b7fe <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	3348      	adds	r3, #72	; 0x48
 800b7e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7ec:	79fa      	ldrb	r2, [r7, #7]
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	68b9      	ldr	r1, [r7, #8]
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 f805 	bl	800b808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
	}
 800b800:	4618      	mov	r0, r3
 800b802:	3720      	adds	r7, #32
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d103      	bne.n	800b824 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	601a      	str	r2, [r3, #0]
 800b822:	e002      	b.n	800b82a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b836:	2101      	movs	r1, #1
 800b838:	69b8      	ldr	r0, [r7, #24]
 800b83a:	f7ff fecb 	bl	800b5d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b846:	b580      	push	{r7, lr}
 800b848:	b082      	sub	sp, #8
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00e      	beq.n	800b872 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b866:	2300      	movs	r3, #0
 800b868:	2200      	movs	r2, #0
 800b86a:	2100      	movs	r1, #0
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f89d 	bl	800b9ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b872:	bf00      	nop
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b086      	sub	sp, #24
 800b87e:	af00      	add	r7, sp, #0
 800b880:	4603      	mov	r3, r0
 800b882:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	2300      	movs	r3, #0
 800b88a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b88c:	79fb      	ldrb	r3, [r7, #7]
 800b88e:	461a      	mov	r2, r3
 800b890:	6939      	ldr	r1, [r7, #16]
 800b892:	6978      	ldr	r0, [r7, #20]
 800b894:	f7ff ff79 	bl	800b78a <xQueueGenericCreate>
 800b898:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f7ff ffd3 	bl	800b846 <prvInitialiseMutex>

		return xNewQueue;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
	}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b088      	sub	sp, #32
 800b8ae:	af02      	add	r7, sp, #8
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	6039      	str	r1, [r7, #0]
 800b8b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	617b      	str	r3, [r7, #20]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8be:	79fb      	ldrb	r3, [r7, #7]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	6939      	ldr	r1, [r7, #16]
 800b8c8:	6978      	ldr	r0, [r7, #20]
 800b8ca:	f7ff feeb 	bl	800b6a4 <xQueueGenericCreateStatic>
 800b8ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7ff ffb8 	bl	800b846 <prvInitialiseMutex>

		return xNewQueue;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
	}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08a      	sub	sp, #40	; 0x28
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d109      	bne.n	800b906 <xQueueCreateCountingSemaphoreStatic+0x26>
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	61bb      	str	r3, [r7, #24]
 800b904:	e7fe      	b.n	800b904 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d909      	bls.n	800b922 <xQueueCreateCountingSemaphoreStatic+0x42>
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	617b      	str	r3, [r7, #20]
 800b920:	e7fe      	b.n	800b920 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b922:	2302      	movs	r3, #2
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f7ff feb9 	bl	800b6a4 <xQueueGenericCreateStatic>
 800b932:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b940:	69fb      	ldr	r3, [r7, #28]
	}
 800b942:	4618      	mov	r0, r3
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b086      	sub	sp, #24
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d109      	bne.n	800b96e <xQueueCreateCountingSemaphore+0x24>
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	613b      	str	r3, [r7, #16]
 800b96c:	e7fe      	b.n	800b96c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d909      	bls.n	800b98a <xQueueCreateCountingSemaphore+0x40>
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	e7fe      	b.n	800b988 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b98a:	2202      	movs	r2, #2
 800b98c:	2100      	movs	r1, #0
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff fefb 	bl	800b78a <xQueueGenericCreate>
 800b994:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b9a2:	697b      	ldr	r3, [r7, #20]
	}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08e      	sub	sp, #56	; 0x38
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d109      	bne.n	800b9dc <xQueueGenericSend+0x30>
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9da:	e7fe      	b.n	800b9da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d103      	bne.n	800b9ea <xQueueGenericSend+0x3e>
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <xQueueGenericSend+0x42>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <xQueueGenericSend+0x44>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d109      	bne.n	800ba08 <xQueueGenericSend+0x5c>
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	627b      	str	r3, [r7, #36]	; 0x24
 800ba06:	e7fe      	b.n	800ba06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d103      	bne.n	800ba16 <xQueueGenericSend+0x6a>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d101      	bne.n	800ba1a <xQueueGenericSend+0x6e>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <xQueueGenericSend+0x70>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d109      	bne.n	800ba34 <xQueueGenericSend+0x88>
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	623b      	str	r3, [r7, #32]
 800ba32:	e7fe      	b.n	800ba32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba34:	f001 fc52 	bl	800d2dc <xTaskGetSchedulerState>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d102      	bne.n	800ba44 <xQueueGenericSend+0x98>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <xQueueGenericSend+0x9c>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e000      	b.n	800ba4a <xQueueGenericSend+0x9e>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d109      	bne.n	800ba62 <xQueueGenericSend+0xb6>
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	61fb      	str	r3, [r7, #28]
 800ba60:	e7fe      	b.n	800ba60 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba62:	f002 fac3 	bl	800dfec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d302      	bcc.n	800ba78 <xQueueGenericSend+0xcc>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d129      	bne.n	800bacc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	68b9      	ldr	r1, [r7, #8]
 800ba7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba7e:	f000 fc26 	bl	800c2ce <prvCopyDataToQueue>
 800ba82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d010      	beq.n	800baae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	3324      	adds	r3, #36	; 0x24
 800ba90:	4618      	mov	r0, r3
 800ba92:	f001 fa6b 	bl	800cf6c <xTaskRemoveFromEventList>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d013      	beq.n	800bac4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba9c:	4b3f      	ldr	r3, [pc, #252]	; (800bb9c <xQueueGenericSend+0x1f0>)
 800ba9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	e00a      	b.n	800bac4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bab4:	4b39      	ldr	r3, [pc, #228]	; (800bb9c <xQueueGenericSend+0x1f0>)
 800bab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bac4:	f002 fac0 	bl	800e048 <vPortExitCritical>
				return pdPASS;
 800bac8:	2301      	movs	r3, #1
 800baca:	e063      	b.n	800bb94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d103      	bne.n	800bada <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bad2:	f002 fab9 	bl	800e048 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e05c      	b.n	800bb94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800badc:	2b00      	cmp	r3, #0
 800bade:	d106      	bne.n	800baee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bae0:	f107 0314 	add.w	r3, r7, #20
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 faa3 	bl	800d030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800baea:	2301      	movs	r3, #1
 800baec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baee:	f002 faab 	bl	800e048 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baf2:	f001 f80f 	bl	800cb14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baf6:	f002 fa79 	bl	800dfec <vPortEnterCritical>
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb00:	b25b      	sxtb	r3, r3
 800bb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb06:	d103      	bne.n	800bb10 <xQueueGenericSend+0x164>
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb16:	b25b      	sxtb	r3, r3
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1c:	d103      	bne.n	800bb26 <xQueueGenericSend+0x17a>
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb26:	f002 fa8f 	bl	800e048 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb2a:	1d3a      	adds	r2, r7, #4
 800bb2c:	f107 0314 	add.w	r3, r7, #20
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 fa92 	bl	800d05c <xTaskCheckForTimeOut>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d124      	bne.n	800bb88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb40:	f000 fcbd 	bl	800c4be <prvIsQueueFull>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d018      	beq.n	800bb7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	3310      	adds	r3, #16
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	4611      	mov	r1, r2
 800bb52:	4618      	mov	r0, r3
 800bb54:	f001 f9bc 	bl	800ced0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb5a:	f000 fc48 	bl	800c3ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb5e:	f000 ffe7 	bl	800cb30 <xTaskResumeAll>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f47f af7c 	bne.w	800ba62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bb6a:	4b0c      	ldr	r3, [pc, #48]	; (800bb9c <xQueueGenericSend+0x1f0>)
 800bb6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	e772      	b.n	800ba62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb7e:	f000 fc36 	bl	800c3ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb82:	f000 ffd5 	bl	800cb30 <xTaskResumeAll>
 800bb86:	e76c      	b.n	800ba62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb8a:	f000 fc30 	bl	800c3ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb8e:	f000 ffcf 	bl	800cb30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3738      	adds	r7, #56	; 0x38
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	e000ed04 	.word	0xe000ed04

0800bba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08e      	sub	sp, #56	; 0x38
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d109      	bne.n	800bbcc <xQueueGenericSendFromISR+0x2c>
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bbca:	e7fe      	b.n	800bbca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d103      	bne.n	800bbda <xQueueGenericSendFromISR+0x3a>
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <xQueueGenericSendFromISR+0x3e>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e000      	b.n	800bbe0 <xQueueGenericSendFromISR+0x40>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d109      	bne.n	800bbf8 <xQueueGenericSendFromISR+0x58>
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	623b      	str	r3, [r7, #32]
 800bbf6:	e7fe      	b.n	800bbf6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d103      	bne.n	800bc06 <xQueueGenericSendFromISR+0x66>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <xQueueGenericSendFromISR+0x6a>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e000      	b.n	800bc0c <xQueueGenericSendFromISR+0x6c>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d109      	bne.n	800bc24 <xQueueGenericSendFromISR+0x84>
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	61fb      	str	r3, [r7, #28]
 800bc22:	e7fe      	b.n	800bc22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc24:	f002 fabe 	bl	800e1a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc28:	f3ef 8211 	mrs	r2, BASEPRI
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	61ba      	str	r2, [r7, #24]
 800bc3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d302      	bcc.n	800bc56 <xQueueGenericSendFromISR+0xb6>
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d12c      	bne.n	800bcb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	68b9      	ldr	r1, [r7, #8]
 800bc64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc66:	f000 fb32 	bl	800c2ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc72:	d112      	bne.n	800bc9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d016      	beq.n	800bcaa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	3324      	adds	r3, #36	; 0x24
 800bc80:	4618      	mov	r0, r3
 800bc82:	f001 f973 	bl	800cf6c <xTaskRemoveFromEventList>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00e      	beq.n	800bcaa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00b      	beq.n	800bcaa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2201      	movs	r2, #1
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	e007      	b.n	800bcaa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc9e:	3301      	adds	r3, #1
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	b25a      	sxtb	r2, r3
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bcae:	e001      	b.n	800bcb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3738      	adds	r7, #56	; 0x38
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	; 0x38
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d109      	bne.n	800bcf0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	623b      	str	r3, [r7, #32]
 800bcee:	e7fe      	b.n	800bcee <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d009      	beq.n	800bd0c <xQueueGiveFromISR+0x44>
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	61fb      	str	r3, [r7, #28]
 800bd0a:	e7fe      	b.n	800bd0a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d103      	bne.n	800bd1c <xQueueGiveFromISR+0x54>
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <xQueueGiveFromISR+0x58>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e000      	b.n	800bd22 <xQueueGiveFromISR+0x5a>
 800bd20:	2300      	movs	r3, #0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <xQueueGiveFromISR+0x72>
 800bd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	61bb      	str	r3, [r7, #24]
 800bd38:	e7fe      	b.n	800bd38 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd3a:	f002 fa33 	bl	800e1a4 <vPortValidateInterruptPriority>
	__asm volatile
 800bd3e:	f3ef 8211 	mrs	r2, BASEPRI
 800bd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	617a      	str	r2, [r7, #20]
 800bd54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bd56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d22b      	bcs.n	800bdc2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd84:	d112      	bne.n	800bdac <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d016      	beq.n	800bdbc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	3324      	adds	r3, #36	; 0x24
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 f8ea 	bl	800cf6c <xTaskRemoveFromEventList>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00e      	beq.n	800bdbc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00b      	beq.n	800bdbc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2201      	movs	r2, #1
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	e007      	b.n	800bdbc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bdac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	b25a      	sxtb	r2, r3
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc0:	e001      	b.n	800bdc6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3738      	adds	r7, #56	; 0x38
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
	...

0800bddc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08c      	sub	sp, #48	; 0x30
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bde8:	2300      	movs	r3, #0
 800bdea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d109      	bne.n	800be0a <xQueueReceive+0x2e>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	623b      	str	r3, [r7, #32]
 800be08:	e7fe      	b.n	800be08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d103      	bne.n	800be18 <xQueueReceive+0x3c>
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <xQueueReceive+0x40>
 800be18:	2301      	movs	r3, #1
 800be1a:	e000      	b.n	800be1e <xQueueReceive+0x42>
 800be1c:	2300      	movs	r3, #0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d109      	bne.n	800be36 <xQueueReceive+0x5a>
 800be22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be26:	f383 8811 	msr	BASEPRI, r3
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	61fb      	str	r3, [r7, #28]
 800be34:	e7fe      	b.n	800be34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be36:	f001 fa51 	bl	800d2dc <xTaskGetSchedulerState>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <xQueueReceive+0x6a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d101      	bne.n	800be4a <xQueueReceive+0x6e>
 800be46:	2301      	movs	r3, #1
 800be48:	e000      	b.n	800be4c <xQueueReceive+0x70>
 800be4a:	2300      	movs	r3, #0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <xQueueReceive+0x88>
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	61bb      	str	r3, [r7, #24]
 800be62:	e7fe      	b.n	800be62 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be64:	f002 f8c2 	bl	800dfec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	d01f      	beq.n	800beb4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be74:	68b9      	ldr	r1, [r7, #8]
 800be76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be78:	f000 fa93 	bl	800c3a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	1e5a      	subs	r2, r3, #1
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00f      	beq.n	800beac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8e:	3310      	adds	r3, #16
 800be90:	4618      	mov	r0, r3
 800be92:	f001 f86b 	bl	800cf6c <xTaskRemoveFromEventList>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d007      	beq.n	800beac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be9c:	4b3c      	ldr	r3, [pc, #240]	; (800bf90 <xQueueReceive+0x1b4>)
 800be9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beac:	f002 f8cc 	bl	800e048 <vPortExitCritical>
				return pdPASS;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e069      	b.n	800bf88 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d103      	bne.n	800bec2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800beba:	f002 f8c5 	bl	800e048 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e062      	b.n	800bf88 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d106      	bne.n	800bed6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bec8:	f107 0310 	add.w	r3, r7, #16
 800becc:	4618      	mov	r0, r3
 800bece:	f001 f8af 	bl	800d030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bed2:	2301      	movs	r3, #1
 800bed4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bed6:	f002 f8b7 	bl	800e048 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800beda:	f000 fe1b 	bl	800cb14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bede:	f002 f885 	bl	800dfec <vPortEnterCritical>
 800bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beee:	d103      	bne.n	800bef8 <xQueueReceive+0x11c>
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800befe:	b25b      	sxtb	r3, r3
 800bf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf04:	d103      	bne.n	800bf0e <xQueueReceive+0x132>
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf0e:	f002 f89b 	bl	800e048 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf12:	1d3a      	adds	r2, r7, #4
 800bf14:	f107 0310 	add.w	r3, r7, #16
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f001 f89e 	bl	800d05c <xTaskCheckForTimeOut>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d123      	bne.n	800bf6e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf28:	f000 fab3 	bl	800c492 <prvIsQueueEmpty>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d017      	beq.n	800bf62 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	3324      	adds	r3, #36	; 0x24
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	4611      	mov	r1, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 ffc8 	bl	800ced0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf42:	f000 fa54 	bl	800c3ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf46:	f000 fdf3 	bl	800cb30 <xTaskResumeAll>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d189      	bne.n	800be64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bf50:	4b0f      	ldr	r3, [pc, #60]	; (800bf90 <xQueueReceive+0x1b4>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	e780      	b.n	800be64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf64:	f000 fa43 	bl	800c3ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf68:	f000 fde2 	bl	800cb30 <xTaskResumeAll>
 800bf6c:	e77a      	b.n	800be64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf70:	f000 fa3d 	bl	800c3ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf74:	f000 fddc 	bl	800cb30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf7a:	f000 fa8a 	bl	800c492 <prvIsQueueEmpty>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f43f af6f 	beq.w	800be64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3730      	adds	r7, #48	; 0x30
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	e000ed04 	.word	0xe000ed04

0800bf94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08e      	sub	sp, #56	; 0x38
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d109      	bne.n	800bfc4 <xQueueSemaphoreTake+0x30>
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	623b      	str	r3, [r7, #32]
 800bfc2:	e7fe      	b.n	800bfc2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d009      	beq.n	800bfe0 <xQueueSemaphoreTake+0x4c>
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	e7fe      	b.n	800bfde <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfe0:	f001 f97c 	bl	800d2dc <xTaskGetSchedulerState>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d102      	bne.n	800bff0 <xQueueSemaphoreTake+0x5c>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <xQueueSemaphoreTake+0x60>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e000      	b.n	800bff6 <xQueueSemaphoreTake+0x62>
 800bff4:	2300      	movs	r3, #0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d109      	bne.n	800c00e <xQueueSemaphoreTake+0x7a>
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	61bb      	str	r3, [r7, #24]
 800c00c:	e7fe      	b.n	800c00c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c00e:	f001 ffed 	bl	800dfec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c016:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d024      	beq.n	800c068 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	1e5a      	subs	r2, r3, #1
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d104      	bne.n	800c038 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c02e:	f001 fb0f 	bl	800d650 <pvTaskIncrementMutexHeldCount>
 800c032:	4602      	mov	r2, r0
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00f      	beq.n	800c060 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c042:	3310      	adds	r3, #16
 800c044:	4618      	mov	r0, r3
 800c046:	f000 ff91 	bl	800cf6c <xTaskRemoveFromEventList>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c050:	4b53      	ldr	r3, [pc, #332]	; (800c1a0 <xQueueSemaphoreTake+0x20c>)
 800c052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c060:	f001 fff2 	bl	800e048 <vPortExitCritical>
				return pdPASS;
 800c064:	2301      	movs	r3, #1
 800c066:	e096      	b.n	800c196 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d110      	bne.n	800c090 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	2b00      	cmp	r3, #0
 800c072:	d009      	beq.n	800c088 <xQueueSemaphoreTake+0xf4>
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	e7fe      	b.n	800c086 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c088:	f001 ffde 	bl	800e048 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c08c:	2300      	movs	r3, #0
 800c08e:	e082      	b.n	800c196 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c096:	f107 030c 	add.w	r3, r7, #12
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 ffc8 	bl	800d030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0a4:	f001 ffd0 	bl	800e048 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0a8:	f000 fd34 	bl	800cb14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0ac:	f001 ff9e 	bl	800dfec <vPortEnterCritical>
 800c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0b6:	b25b      	sxtb	r3, r3
 800c0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0bc:	d103      	bne.n	800c0c6 <xQueueSemaphoreTake+0x132>
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0cc:	b25b      	sxtb	r3, r3
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d103      	bne.n	800c0dc <xQueueSemaphoreTake+0x148>
 800c0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0dc:	f001 ffb4 	bl	800e048 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0e0:	463a      	mov	r2, r7
 800c0e2:	f107 030c 	add.w	r3, r7, #12
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 ffb7 	bl	800d05c <xTaskCheckForTimeOut>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d132      	bne.n	800c15a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0f6:	f000 f9cc 	bl	800c492 <prvIsQueueEmpty>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d026      	beq.n	800c14e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d109      	bne.n	800c11c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c108:	f001 ff70 	bl	800dfec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	4618      	mov	r0, r3
 800c112:	f001 f901 	bl	800d318 <xTaskPriorityInherit>
 800c116:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c118:	f001 ff96 	bl	800e048 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11e:	3324      	adds	r3, #36	; 0x24
 800c120:	683a      	ldr	r2, [r7, #0]
 800c122:	4611      	mov	r1, r2
 800c124:	4618      	mov	r0, r3
 800c126:	f000 fed3 	bl	800ced0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c12a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c12c:	f000 f95f 	bl	800c3ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c130:	f000 fcfe 	bl	800cb30 <xTaskResumeAll>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	f47f af69 	bne.w	800c00e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c13c:	4b18      	ldr	r3, [pc, #96]	; (800c1a0 <xQueueSemaphoreTake+0x20c>)
 800c13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	e75f      	b.n	800c00e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c14e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c150:	f000 f94d 	bl	800c3ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c154:	f000 fcec 	bl	800cb30 <xTaskResumeAll>
 800c158:	e759      	b.n	800c00e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c15a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c15c:	f000 f947 	bl	800c3ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c160:	f000 fce6 	bl	800cb30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c166:	f000 f994 	bl	800c492 <prvIsQueueEmpty>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f43f af4e 	beq.w	800c00e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00d      	beq.n	800c194 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c178:	f001 ff38 	bl	800dfec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c17c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c17e:	f000 f88e 	bl	800c29e <prvGetDisinheritPriorityAfterTimeout>
 800c182:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c18a:	4618      	mov	r0, r3
 800c18c:	f001 f9c8 	bl	800d520 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c190:	f001 ff5a 	bl	800e048 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c196:	4618      	mov	r0, r3
 800c198:	3738      	adds	r7, #56	; 0x38
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	e000ed04 	.word	0xe000ed04

0800c1a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b08e      	sub	sp, #56	; 0x38
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d109      	bne.n	800c1ce <xQueueReceiveFromISR+0x2a>
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	623b      	str	r3, [r7, #32]
 800c1cc:	e7fe      	b.n	800c1cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d103      	bne.n	800c1dc <xQueueReceiveFromISR+0x38>
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d101      	bne.n	800c1e0 <xQueueReceiveFromISR+0x3c>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e000      	b.n	800c1e2 <xQueueReceiveFromISR+0x3e>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d109      	bne.n	800c1fa <xQueueReceiveFromISR+0x56>
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	61fb      	str	r3, [r7, #28]
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1fa:	f001 ffd3 	bl	800e1a4 <vPortValidateInterruptPriority>
	__asm volatile
 800c1fe:	f3ef 8211 	mrs	r2, BASEPRI
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	61ba      	str	r2, [r7, #24]
 800c214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	2b00      	cmp	r3, #0
 800c224:	d02f      	beq.n	800c286 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c230:	68b9      	ldr	r1, [r7, #8]
 800c232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c234:	f000 f8b5 	bl	800c3a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	1e5a      	subs	r2, r3, #1
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c248:	d112      	bne.n	800c270 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d016      	beq.n	800c280 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	3310      	adds	r3, #16
 800c256:	4618      	mov	r0, r3
 800c258:	f000 fe88 	bl	800cf6c <xTaskRemoveFromEventList>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00e      	beq.n	800c280 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e007      	b.n	800c280 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c274:	3301      	adds	r3, #1
 800c276:	b2db      	uxtb	r3, r3
 800c278:	b25a      	sxtb	r2, r3
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c280:	2301      	movs	r3, #1
 800c282:	637b      	str	r3, [r7, #52]	; 0x34
 800c284:	e001      	b.n	800c28a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c286:	2300      	movs	r3, #0
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
 800c28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c296:	4618      	mov	r0, r3
 800c298:	3738      	adds	r7, #56	; 0x38
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c29e:	b480      	push	{r7}
 800c2a0:	b085      	sub	sp, #20
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d006      	beq.n	800c2bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f1c3 0307 	rsb	r3, r3, #7
 800c2b8:	60fb      	str	r3, [r7, #12]
 800c2ba:	e001      	b.n	800c2c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
	}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b086      	sub	sp, #24
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10d      	bne.n	800c308 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d14d      	bne.n	800c390 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f001 f88d 	bl	800d418 <xTaskPriorityDisinherit>
 800c2fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	609a      	str	r2, [r3, #8]
 800c306:	e043      	b.n	800c390 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d119      	bne.n	800c342 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6858      	ldr	r0, [r3, #4]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	461a      	mov	r2, r3
 800c318:	68b9      	ldr	r1, [r7, #8]
 800c31a:	f00b faf0 	bl	80178fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c326:	441a      	add	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	429a      	cmp	r2, r3
 800c336:	d32b      	bcc.n	800c390 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	605a      	str	r2, [r3, #4]
 800c340:	e026      	b.n	800c390 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68d8      	ldr	r0, [r3, #12]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34a:	461a      	mov	r2, r3
 800c34c:	68b9      	ldr	r1, [r7, #8]
 800c34e:	f00b fad6 	bl	80178fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	68da      	ldr	r2, [r3, #12]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35a:	425b      	negs	r3, r3
 800c35c:	441a      	add	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d207      	bcs.n	800c37e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	689a      	ldr	r2, [r3, #8]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c376:	425b      	negs	r3, r3
 800c378:	441a      	add	r2, r3
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d105      	bne.n	800c390 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d002      	beq.n	800c390 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c398:	697b      	ldr	r3, [r7, #20]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b082      	sub	sp, #8
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d018      	beq.n	800c3e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	68da      	ldr	r2, [r3, #12]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	441a      	add	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68da      	ldr	r2, [r3, #12]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d303      	bcc.n	800c3d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68d9      	ldr	r1, [r3, #12]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6838      	ldr	r0, [r7, #0]
 800c3e2:	f00b fa8c 	bl	80178fe <memcpy>
	}
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3f6:	f001 fdf9 	bl	800dfec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c400:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c402:	e011      	b.n	800c428 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d012      	beq.n	800c432 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3324      	adds	r3, #36	; 0x24
 800c410:	4618      	mov	r0, r3
 800c412:	f000 fdab 	bl	800cf6c <xTaskRemoveFromEventList>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c41c:	f000 fe7e 	bl	800d11c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	3b01      	subs	r3, #1
 800c424:	b2db      	uxtb	r3, r3
 800c426:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	dce9      	bgt.n	800c404 <prvUnlockQueue+0x16>
 800c430:	e000      	b.n	800c434 <prvUnlockQueue+0x46>
					break;
 800c432:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	22ff      	movs	r2, #255	; 0xff
 800c438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c43c:	f001 fe04 	bl	800e048 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c440:	f001 fdd4 	bl	800dfec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c44a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c44c:	e011      	b.n	800c472 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d012      	beq.n	800c47c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3310      	adds	r3, #16
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fd86 	bl	800cf6c <xTaskRemoveFromEventList>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c466:	f000 fe59 	bl	800d11c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c46a:	7bbb      	ldrb	r3, [r7, #14]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c476:	2b00      	cmp	r3, #0
 800c478:	dce9      	bgt.n	800c44e <prvUnlockQueue+0x60>
 800c47a:	e000      	b.n	800c47e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c47c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	22ff      	movs	r2, #255	; 0xff
 800c482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c486:	f001 fddf 	bl	800e048 <vPortExitCritical>
}
 800c48a:	bf00      	nop
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b084      	sub	sp, #16
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c49a:	f001 fda7 	bl	800dfec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d102      	bne.n	800c4ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e001      	b.n	800c4b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4b0:	f001 fdca 	bl	800e048 <vPortExitCritical>

	return xReturn;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4c6:	f001 fd91 	bl	800dfec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d102      	bne.n	800c4dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	e001      	b.n	800c4e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4e0:	f001 fdb2 	bl	800e048 <vPortExitCritical>

	return xReturn;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
	...

0800c4f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e014      	b.n	800c52a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c500:	4a0e      	ldr	r2, [pc, #56]	; (800c53c <vQueueAddToRegistry+0x4c>)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10b      	bne.n	800c524 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c50c:	490b      	ldr	r1, [pc, #44]	; (800c53c <vQueueAddToRegistry+0x4c>)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c516:	4a09      	ldr	r2, [pc, #36]	; (800c53c <vQueueAddToRegistry+0x4c>)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	4413      	add	r3, r2
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c522:	e005      	b.n	800c530 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3301      	adds	r3, #1
 800c528:	60fb      	str	r3, [r7, #12]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2b07      	cmp	r3, #7
 800c52e:	d9e7      	bls.n	800c500 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c530:	bf00      	nop
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	2400a80c 	.word	0x2400a80c

0800c540 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c550:	f001 fd4c 	bl	800dfec <vPortEnterCritical>
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c55a:	b25b      	sxtb	r3, r3
 800c55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c560:	d103      	bne.n	800c56a <vQueueWaitForMessageRestricted+0x2a>
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c570:	b25b      	sxtb	r3, r3
 800c572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c576:	d103      	bne.n	800c580 <vQueueWaitForMessageRestricted+0x40>
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c580:	f001 fd62 	bl	800e048 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	3324      	adds	r3, #36	; 0x24
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	4618      	mov	r0, r3
 800c596:	f000 fcbf 	bl	800cf18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c59a:	6978      	ldr	r0, [r7, #20]
 800c59c:	f7ff ff27 	bl	800c3ee <prvUnlockQueue>
	}
 800c5a0:	bf00      	nop
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08e      	sub	sp, #56	; 0x38
 800c5ac:	af04      	add	r7, sp, #16
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	607a      	str	r2, [r7, #4]
 800c5b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d109      	bne.n	800c5d0 <xTaskCreateStatic+0x28>
	__asm volatile
 800c5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	623b      	str	r3, [r7, #32]
 800c5ce:	e7fe      	b.n	800c5ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <xTaskCreateStatic+0x42>
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	61fb      	str	r3, [r7, #28]
 800c5e8:	e7fe      	b.n	800c5e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5ea:	2354      	movs	r3, #84	; 0x54
 800c5ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	2b54      	cmp	r3, #84	; 0x54
 800c5f2:	d009      	beq.n	800c608 <xTaskCreateStatic+0x60>
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	e7fe      	b.n	800c606 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c608:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d01e      	beq.n	800c64e <xTaskCreateStatic+0xa6>
 800c610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c612:	2b00      	cmp	r3, #0
 800c614:	d01b      	beq.n	800c64e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c618:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c61e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	2202      	movs	r2, #2
 800c624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c628:	2300      	movs	r3, #0
 800c62a:	9303      	str	r3, [sp, #12]
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	9302      	str	r3, [sp, #8]
 800c630:	f107 0314 	add.w	r3, r7, #20
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	68b9      	ldr	r1, [r7, #8]
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 f850 	bl	800c6e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c648:	f000 f8d4 	bl	800c7f4 <prvAddNewTaskToReadyList>
 800c64c:	e001      	b.n	800c652 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c652:	697b      	ldr	r3, [r7, #20]
	}
 800c654:	4618      	mov	r0, r3
 800c656:	3728      	adds	r7, #40	; 0x28
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08c      	sub	sp, #48	; 0x30
 800c660:	af04      	add	r7, sp, #16
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c66c:	88fb      	ldrh	r3, [r7, #6]
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	4618      	mov	r0, r3
 800c672:	f001 fdd5 	bl	800e220 <pvPortMalloc>
 800c676:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00e      	beq.n	800c69c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c67e:	2054      	movs	r0, #84	; 0x54
 800c680:	f001 fdce 	bl	800e220 <pvPortMalloc>
 800c684:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	631a      	str	r2, [r3, #48]	; 0x30
 800c692:	e005      	b.n	800c6a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c694:	6978      	ldr	r0, [r7, #20]
 800c696:	f001 fe85 	bl	800e3a4 <vPortFree>
 800c69a:	e001      	b.n	800c6a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d017      	beq.n	800c6d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6ae:	88fa      	ldrh	r2, [r7, #6]
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9303      	str	r3, [sp, #12]
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	9302      	str	r3, [sp, #8]
 800c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ba:	9301      	str	r3, [sp, #4]
 800c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	68b9      	ldr	r1, [r7, #8]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f000 f80e 	bl	800c6e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6ca:	69f8      	ldr	r0, [r7, #28]
 800c6cc:	f000 f892 	bl	800c7f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	61bb      	str	r3, [r7, #24]
 800c6d4:	e002      	b.n	800c6dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6dc:	69bb      	ldr	r3, [r7, #24]
	}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3720      	adds	r7, #32
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b088      	sub	sp, #32
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
 800c6f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6f8:	6879      	ldr	r1, [r7, #4]
 800c6fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c6fe:	440b      	add	r3, r1
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	f023 0307 	bic.w	r3, r3, #7
 800c70c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	f003 0307 	and.w	r3, r3, #7
 800c714:	2b00      	cmp	r3, #0
 800c716:	d009      	beq.n	800c72c <prvInitialiseNewTask+0x46>
 800c718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	617b      	str	r3, [r7, #20]
 800c72a:	e7fe      	b.n	800c72a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d01f      	beq.n	800c772 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c732:	2300      	movs	r3, #0
 800c734:	61fb      	str	r3, [r7, #28]
 800c736:	e012      	b.n	800c75e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	4413      	add	r3, r2
 800c73e:	7819      	ldrb	r1, [r3, #0]
 800c740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	4413      	add	r3, r2
 800c746:	3334      	adds	r3, #52	; 0x34
 800c748:	460a      	mov	r2, r1
 800c74a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	4413      	add	r3, r2
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d006      	beq.n	800c766 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	3301      	adds	r3, #1
 800c75c:	61fb      	str	r3, [r7, #28]
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	2b0f      	cmp	r3, #15
 800c762:	d9e9      	bls.n	800c738 <prvInitialiseNewTask+0x52>
 800c764:	e000      	b.n	800c768 <prvInitialiseNewTask+0x82>
			{
				break;
 800c766:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c770:	e003      	b.n	800c77a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	2200      	movs	r2, #0
 800c776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	2b06      	cmp	r3, #6
 800c77e:	d901      	bls.n	800c784 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c780:	2306      	movs	r3, #6
 800c782:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c788:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c78e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	2200      	movs	r2, #0
 800c794:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	3304      	adds	r3, #4
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fe86 	bl	800b4ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	3318      	adds	r3, #24
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fe fe81 	bl	800b4ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	f1c3 0207 	rsb	r2, r3, #7
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	68f9      	ldr	r1, [r7, #12]
 800c7d2:	69b8      	ldr	r0, [r7, #24]
 800c7d4:	f001 fae4 	bl	800dda0 <pxPortInitialiseStack>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d002      	beq.n	800c7ea <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7ea:	bf00      	nop
 800c7ec:	3720      	adds	r7, #32
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
	...

0800c7f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7fc:	f001 fbf6 	bl	800dfec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c800:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <prvAddNewTaskToReadyList+0xb8>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	4a29      	ldr	r2, [pc, #164]	; (800c8ac <prvAddNewTaskToReadyList+0xb8>)
 800c808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c80a:	4b29      	ldr	r3, [pc, #164]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c812:	4a27      	ldr	r2, [pc, #156]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c818:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <prvAddNewTaskToReadyList+0xb8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d110      	bne.n	800c842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c820:	f000 fca2 	bl	800d168 <prvInitialiseTaskLists>
 800c824:	e00d      	b.n	800c842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c826:	4b23      	ldr	r3, [pc, #140]	; (800c8b4 <prvAddNewTaskToReadyList+0xc0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c82e:	4b20      	ldr	r3, [pc, #128]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c838:	429a      	cmp	r2, r3
 800c83a:	d802      	bhi.n	800c842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c83c:	4a1c      	ldr	r2, [pc, #112]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c842:	4b1d      	ldr	r3, [pc, #116]	; (800c8b8 <prvAddNewTaskToReadyList+0xc4>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	4a1b      	ldr	r2, [pc, #108]	; (800c8b8 <prvAddNewTaskToReadyList+0xc4>)
 800c84a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c850:	2201      	movs	r2, #1
 800c852:	409a      	lsls	r2, r3
 800c854:	4b19      	ldr	r3, [pc, #100]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4313      	orrs	r3, r2
 800c85a:	4a18      	ldr	r2, [pc, #96]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c862:	4613      	mov	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4a15      	ldr	r2, [pc, #84]	; (800c8c0 <prvAddNewTaskToReadyList+0xcc>)
 800c86c:	441a      	add	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3304      	adds	r3, #4
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7fe fe26 	bl	800b4c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c87a:	f001 fbe5 	bl	800e048 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c87e:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <prvAddNewTaskToReadyList+0xc0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00e      	beq.n	800c8a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c886:	4b0a      	ldr	r3, [pc, #40]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	429a      	cmp	r2, r3
 800c892:	d207      	bcs.n	800c8a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c894:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <prvAddNewTaskToReadyList+0xd0>)
 800c896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	24002260 	.word	0x24002260
 800c8b0:	24002160 	.word	0x24002160
 800c8b4:	2400226c 	.word	0x2400226c
 800c8b8:	2400227c 	.word	0x2400227c
 800c8bc:	24002268 	.word	0x24002268
 800c8c0:	24002164 	.word	0x24002164
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c8d0:	f001 fb8c 	bl	800dfec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d102      	bne.n	800c8e0 <vTaskDelete+0x18>
 800c8da:	4b38      	ldr	r3, [pc, #224]	; (800c9bc <vTaskDelete+0xf4>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	e000      	b.n	800c8e2 <vTaskDelete+0x1a>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fe fe49 	bl	800b580 <uxListRemove>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d115      	bne.n	800c920 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f8:	4931      	ldr	r1, [pc, #196]	; (800c9c0 <vTaskDelete+0xf8>)
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	440b      	add	r3, r1
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10a      	bne.n	800c920 <vTaskDelete+0x58>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90e:	2201      	movs	r2, #1
 800c910:	fa02 f303 	lsl.w	r3, r2, r3
 800c914:	43da      	mvns	r2, r3
 800c916:	4b2b      	ldr	r3, [pc, #172]	; (800c9c4 <vTaskDelete+0xfc>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4013      	ands	r3, r2
 800c91c:	4a29      	ldr	r2, [pc, #164]	; (800c9c4 <vTaskDelete+0xfc>)
 800c91e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c924:	2b00      	cmp	r3, #0
 800c926:	d004      	beq.n	800c932 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	3318      	adds	r3, #24
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fe fe27 	bl	800b580 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c932:	4b25      	ldr	r3, [pc, #148]	; (800c9c8 <vTaskDelete+0x100>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	4a23      	ldr	r2, [pc, #140]	; (800c9c8 <vTaskDelete+0x100>)
 800c93a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c93c:	4b1f      	ldr	r3, [pc, #124]	; (800c9bc <vTaskDelete+0xf4>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	429a      	cmp	r2, r3
 800c944:	d10b      	bne.n	800c95e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	481f      	ldr	r0, [pc, #124]	; (800c9cc <vTaskDelete+0x104>)
 800c94e:	f7fe fdba 	bl	800b4c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c952:	4b1f      	ldr	r3, [pc, #124]	; (800c9d0 <vTaskDelete+0x108>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	4a1d      	ldr	r2, [pc, #116]	; (800c9d0 <vTaskDelete+0x108>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e009      	b.n	800c972 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c95e:	4b1d      	ldr	r3, [pc, #116]	; (800c9d4 <vTaskDelete+0x10c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3b01      	subs	r3, #1
 800c964:	4a1b      	ldr	r2, [pc, #108]	; (800c9d4 <vTaskDelete+0x10c>)
 800c966:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 fc69 	bl	800d240 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c96e:	f000 fc95 	bl	800d29c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c972:	f001 fb69 	bl	800e048 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c976:	4b18      	ldr	r3, [pc, #96]	; (800c9d8 <vTaskDelete+0x110>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d01a      	beq.n	800c9b4 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800c97e:	4b0f      	ldr	r3, [pc, #60]	; (800c9bc <vTaskDelete+0xf4>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	429a      	cmp	r2, r3
 800c986:	d115      	bne.n	800c9b4 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c988:	4b14      	ldr	r3, [pc, #80]	; (800c9dc <vTaskDelete+0x114>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d009      	beq.n	800c9a4 <vTaskDelete+0xdc>
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	60bb      	str	r3, [r7, #8]
 800c9a2:	e7fe      	b.n	800c9a2 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800c9a4:	4b0e      	ldr	r3, [pc, #56]	; (800c9e0 <vTaskDelete+0x118>)
 800c9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c9b4:	bf00      	nop
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	24002160 	.word	0x24002160
 800c9c0:	24002164 	.word	0x24002164
 800c9c4:	24002268 	.word	0x24002268
 800c9c8:	2400227c 	.word	0x2400227c
 800c9cc:	24002234 	.word	0x24002234
 800c9d0:	24002248 	.word	0x24002248
 800c9d4:	24002260 	.word	0x24002260
 800c9d8:	2400226c 	.word	0x2400226c
 800c9dc:	24002288 	.word	0x24002288
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d016      	beq.n	800ca24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9f6:	4b13      	ldr	r3, [pc, #76]	; (800ca44 <vTaskDelay+0x60>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d009      	beq.n	800ca12 <vTaskDelay+0x2e>
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	60bb      	str	r3, [r7, #8]
 800ca10:	e7fe      	b.n	800ca10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ca12:	f000 f87f 	bl	800cb14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca16:	2100      	movs	r1, #0
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fe2d 	bl	800d678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca1e:	f000 f887 	bl	800cb30 <xTaskResumeAll>
 800ca22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d107      	bne.n	800ca3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ca2a:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <vTaskDelay+0x64>)
 800ca2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca3a:	bf00      	nop
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	24002288 	.word	0x24002288
 800ca48:	e000ed04 	.word	0xe000ed04

0800ca4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08a      	sub	sp, #40	; 0x28
 800ca50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca56:	2300      	movs	r3, #0
 800ca58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca5a:	463a      	mov	r2, r7
 800ca5c:	1d39      	adds	r1, r7, #4
 800ca5e:	f107 0308 	add.w	r3, r7, #8
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7f3 fe14 	bl	8000690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	9202      	str	r2, [sp, #8]
 800ca70:	9301      	str	r3, [sp, #4]
 800ca72:	2300      	movs	r3, #0
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	2300      	movs	r3, #0
 800ca78:	460a      	mov	r2, r1
 800ca7a:	4920      	ldr	r1, [pc, #128]	; (800cafc <vTaskStartScheduler+0xb0>)
 800ca7c:	4820      	ldr	r0, [pc, #128]	; (800cb00 <vTaskStartScheduler+0xb4>)
 800ca7e:	f7ff fd93 	bl	800c5a8 <xTaskCreateStatic>
 800ca82:	4602      	mov	r2, r0
 800ca84:	4b1f      	ldr	r3, [pc, #124]	; (800cb04 <vTaskStartScheduler+0xb8>)
 800ca86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca88:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <vTaskStartScheduler+0xb8>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca90:	2301      	movs	r3, #1
 800ca92:	617b      	str	r3, [r7, #20]
 800ca94:	e001      	b.n	800ca9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca96:	2300      	movs	r3, #0
 800ca98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d102      	bne.n	800caa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800caa0:	f000 fe50 	bl	800d744 <xTimerCreateTimerTask>
 800caa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d115      	bne.n	800cad8 <vTaskStartScheduler+0x8c>
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cabe:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <vTaskStartScheduler+0xbc>)
 800cac0:	f04f 32ff 	mov.w	r2, #4294967295
 800cac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cac6:	4b11      	ldr	r3, [pc, #68]	; (800cb0c <vTaskStartScheduler+0xc0>)
 800cac8:	2201      	movs	r2, #1
 800caca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cacc:	4b10      	ldr	r3, [pc, #64]	; (800cb10 <vTaskStartScheduler+0xc4>)
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cad2:	f001 f9ed 	bl	800deb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cad6:	e00d      	b.n	800caf4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cade:	d109      	bne.n	800caf4 <vTaskStartScheduler+0xa8>
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e7fe      	b.n	800caf2 <vTaskStartScheduler+0xa6>
}
 800caf4:	bf00      	nop
 800caf6:	3718      	adds	r7, #24
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	08018a64 	.word	0x08018a64
 800cb00:	0800d135 	.word	0x0800d135
 800cb04:	24002284 	.word	0x24002284
 800cb08:	24002280 	.word	0x24002280
 800cb0c:	2400226c 	.word	0x2400226c
 800cb10:	24002264 	.word	0x24002264

0800cb14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb14:	b480      	push	{r7}
 800cb16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cb18:	4b04      	ldr	r3, [pc, #16]	; (800cb2c <vTaskSuspendAll+0x18>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	4a03      	ldr	r2, [pc, #12]	; (800cb2c <vTaskSuspendAll+0x18>)
 800cb20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cb22:	bf00      	nop
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	24002288 	.word	0x24002288

0800cb30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb3e:	4b41      	ldr	r3, [pc, #260]	; (800cc44 <xTaskResumeAll+0x114>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d109      	bne.n	800cb5a <xTaskResumeAll+0x2a>
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	e7fe      	b.n	800cb58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb5a:	f001 fa47 	bl	800dfec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb5e:	4b39      	ldr	r3, [pc, #228]	; (800cc44 <xTaskResumeAll+0x114>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	4a37      	ldr	r2, [pc, #220]	; (800cc44 <xTaskResumeAll+0x114>)
 800cb66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb68:	4b36      	ldr	r3, [pc, #216]	; (800cc44 <xTaskResumeAll+0x114>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d161      	bne.n	800cc34 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb70:	4b35      	ldr	r3, [pc, #212]	; (800cc48 <xTaskResumeAll+0x118>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d05d      	beq.n	800cc34 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb78:	e02e      	b.n	800cbd8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb7a:	4b34      	ldr	r3, [pc, #208]	; (800cc4c <xTaskResumeAll+0x11c>)
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3318      	adds	r3, #24
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fe fcfa 	bl	800b580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3304      	adds	r3, #4
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe fcf5 	bl	800b580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	409a      	lsls	r2, r3
 800cb9e:	4b2c      	ldr	r3, [pc, #176]	; (800cc50 <xTaskResumeAll+0x120>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	4a2a      	ldr	r2, [pc, #168]	; (800cc50 <xTaskResumeAll+0x120>)
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbac:	4613      	mov	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4a27      	ldr	r2, [pc, #156]	; (800cc54 <xTaskResumeAll+0x124>)
 800cbb6:	441a      	add	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f7fe fc81 	bl	800b4c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc8:	4b23      	ldr	r3, [pc, #140]	; (800cc58 <xTaskResumeAll+0x128>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d302      	bcc.n	800cbd8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800cbd2:	4b22      	ldr	r3, [pc, #136]	; (800cc5c <xTaskResumeAll+0x12c>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbd8:	4b1c      	ldr	r3, [pc, #112]	; (800cc4c <xTaskResumeAll+0x11c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1cc      	bne.n	800cb7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbe6:	f000 fb59 	bl	800d29c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cbea:	4b1d      	ldr	r3, [pc, #116]	; (800cc60 <xTaskResumeAll+0x130>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d010      	beq.n	800cc18 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbf6:	f000 f859 	bl	800ccac <xTaskIncrementTick>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cc00:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <xTaskResumeAll+0x12c>)
 800cc02:	2201      	movs	r2, #1
 800cc04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1f1      	bne.n	800cbf6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cc12:	4b13      	ldr	r3, [pc, #76]	; (800cc60 <xTaskResumeAll+0x130>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc18:	4b10      	ldr	r3, [pc, #64]	; (800cc5c <xTaskResumeAll+0x12c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d009      	beq.n	800cc34 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc24:	4b0f      	ldr	r3, [pc, #60]	; (800cc64 <xTaskResumeAll+0x134>)
 800cc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc34:	f001 fa08 	bl	800e048 <vPortExitCritical>

	return xAlreadyYielded;
 800cc38:	68bb      	ldr	r3, [r7, #8]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	24002288 	.word	0x24002288
 800cc48:	24002260 	.word	0x24002260
 800cc4c:	24002220 	.word	0x24002220
 800cc50:	24002268 	.word	0x24002268
 800cc54:	24002164 	.word	0x24002164
 800cc58:	24002160 	.word	0x24002160
 800cc5c:	24002274 	.word	0x24002274
 800cc60:	24002270 	.word	0x24002270
 800cc64:	e000ed04 	.word	0xe000ed04

0800cc68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc6e:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <xTaskGetTickCount+0x1c>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc74:	687b      	ldr	r3, [r7, #4]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	24002264 	.word	0x24002264

0800cc88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc8e:	f001 fa89 	bl	800e1a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cc92:	2300      	movs	r3, #0
 800cc94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cc96:	4b04      	ldr	r3, [pc, #16]	; (800cca8 <xTaskGetTickCountFromISR+0x20>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc9c:	683b      	ldr	r3, [r7, #0]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	24002264 	.word	0x24002264

0800ccac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccb6:	4b4e      	ldr	r3, [pc, #312]	; (800cdf0 <xTaskIncrementTick+0x144>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f040 8087 	bne.w	800cdce <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccc0:	4b4c      	ldr	r3, [pc, #304]	; (800cdf4 <xTaskIncrementTick+0x148>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccc8:	4a4a      	ldr	r2, [pc, #296]	; (800cdf4 <xTaskIncrementTick+0x148>)
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d11f      	bne.n	800cd14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ccd4:	4b48      	ldr	r3, [pc, #288]	; (800cdf8 <xTaskIncrementTick+0x14c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d009      	beq.n	800ccf2 <xTaskIncrementTick+0x46>
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	603b      	str	r3, [r7, #0]
 800ccf0:	e7fe      	b.n	800ccf0 <xTaskIncrementTick+0x44>
 800ccf2:	4b41      	ldr	r3, [pc, #260]	; (800cdf8 <xTaskIncrementTick+0x14c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	4b40      	ldr	r3, [pc, #256]	; (800cdfc <xTaskIncrementTick+0x150>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a3e      	ldr	r2, [pc, #248]	; (800cdf8 <xTaskIncrementTick+0x14c>)
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	4a3e      	ldr	r2, [pc, #248]	; (800cdfc <xTaskIncrementTick+0x150>)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6013      	str	r3, [r2, #0]
 800cd06:	4b3e      	ldr	r3, [pc, #248]	; (800ce00 <xTaskIncrementTick+0x154>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	4a3c      	ldr	r2, [pc, #240]	; (800ce00 <xTaskIncrementTick+0x154>)
 800cd0e:	6013      	str	r3, [r2, #0]
 800cd10:	f000 fac4 	bl	800d29c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd14:	4b3b      	ldr	r3, [pc, #236]	; (800ce04 <xTaskIncrementTick+0x158>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d348      	bcc.n	800cdb0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd1e:	4b36      	ldr	r3, [pc, #216]	; (800cdf8 <xTaskIncrementTick+0x14c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d104      	bne.n	800cd32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd28:	4b36      	ldr	r3, [pc, #216]	; (800ce04 <xTaskIncrementTick+0x158>)
 800cd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2e:	601a      	str	r2, [r3, #0]
					break;
 800cd30:	e03e      	b.n	800cdb0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd32:	4b31      	ldr	r3, [pc, #196]	; (800cdf8 <xTaskIncrementTick+0x14c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd42:	693a      	ldr	r2, [r7, #16]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d203      	bcs.n	800cd52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd4a:	4a2e      	ldr	r2, [pc, #184]	; (800ce04 <xTaskIncrementTick+0x158>)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd50:	e02e      	b.n	800cdb0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	3304      	adds	r3, #4
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fc12 	bl	800b580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d004      	beq.n	800cd6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	3318      	adds	r3, #24
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fe fc09 	bl	800b580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd72:	2201      	movs	r2, #1
 800cd74:	409a      	lsls	r2, r3
 800cd76:	4b24      	ldr	r3, [pc, #144]	; (800ce08 <xTaskIncrementTick+0x15c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	4a22      	ldr	r2, [pc, #136]	; (800ce08 <xTaskIncrementTick+0x15c>)
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd84:	4613      	mov	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	4a1f      	ldr	r2, [pc, #124]	; (800ce0c <xTaskIncrementTick+0x160>)
 800cd8e:	441a      	add	r2, r3
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	3304      	adds	r3, #4
 800cd94:	4619      	mov	r1, r3
 800cd96:	4610      	mov	r0, r2
 800cd98:	f7fe fb95 	bl	800b4c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda0:	4b1b      	ldr	r3, [pc, #108]	; (800ce10 <xTaskIncrementTick+0x164>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d3b9      	bcc.n	800cd1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdae:	e7b6      	b.n	800cd1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cdb0:	4b17      	ldr	r3, [pc, #92]	; (800ce10 <xTaskIncrementTick+0x164>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb6:	4915      	ldr	r1, [pc, #84]	; (800ce0c <xTaskIncrementTick+0x160>)
 800cdb8:	4613      	mov	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	440b      	add	r3, r1
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d907      	bls.n	800cdd8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	617b      	str	r3, [r7, #20]
 800cdcc:	e004      	b.n	800cdd8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cdce:	4b11      	ldr	r3, [pc, #68]	; (800ce14 <xTaskIncrementTick+0x168>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	4a0f      	ldr	r2, [pc, #60]	; (800ce14 <xTaskIncrementTick+0x168>)
 800cdd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cdd8:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <xTaskIncrementTick+0x16c>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800cde0:	2301      	movs	r3, #1
 800cde2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cde4:	697b      	ldr	r3, [r7, #20]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3718      	adds	r7, #24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	24002288 	.word	0x24002288
 800cdf4:	24002264 	.word	0x24002264
 800cdf8:	24002218 	.word	0x24002218
 800cdfc:	2400221c 	.word	0x2400221c
 800ce00:	24002278 	.word	0x24002278
 800ce04:	24002280 	.word	0x24002280
 800ce08:	24002268 	.word	0x24002268
 800ce0c:	24002164 	.word	0x24002164
 800ce10:	24002160 	.word	0x24002160
 800ce14:	24002270 	.word	0x24002270
 800ce18:	24002274 	.word	0x24002274

0800ce1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b087      	sub	sp, #28
 800ce20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce22:	4b26      	ldr	r3, [pc, #152]	; (800cebc <vTaskSwitchContext+0xa0>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d003      	beq.n	800ce32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce2a:	4b25      	ldr	r3, [pc, #148]	; (800cec0 <vTaskSwitchContext+0xa4>)
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce30:	e03e      	b.n	800ceb0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ce32:	4b23      	ldr	r3, [pc, #140]	; (800cec0 <vTaskSwitchContext+0xa4>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce38:	4b22      	ldr	r3, [pc, #136]	; (800cec4 <vTaskSwitchContext+0xa8>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	fab3 f383 	clz	r3, r3
 800ce44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ce46:	7afb      	ldrb	r3, [r7, #11]
 800ce48:	f1c3 031f 	rsb	r3, r3, #31
 800ce4c:	617b      	str	r3, [r7, #20]
 800ce4e:	491e      	ldr	r1, [pc, #120]	; (800cec8 <vTaskSwitchContext+0xac>)
 800ce50:	697a      	ldr	r2, [r7, #20]
 800ce52:	4613      	mov	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	440b      	add	r3, r1
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d109      	bne.n	800ce76 <vTaskSwitchContext+0x5a>
	__asm volatile
 800ce62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	e7fe      	b.n	800ce74 <vTaskSwitchContext+0x58>
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4413      	add	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4a11      	ldr	r2, [pc, #68]	; (800cec8 <vTaskSwitchContext+0xac>)
 800ce82:	4413      	add	r3, r2
 800ce84:	613b      	str	r3, [r7, #16]
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	605a      	str	r2, [r3, #4]
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	685a      	ldr	r2, [r3, #4]
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	3308      	adds	r3, #8
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d104      	bne.n	800cea6 <vTaskSwitchContext+0x8a>
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	605a      	str	r2, [r3, #4]
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	4a07      	ldr	r2, [pc, #28]	; (800cecc <vTaskSwitchContext+0xb0>)
 800ceae:	6013      	str	r3, [r2, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	371c      	adds	r7, #28
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	24002288 	.word	0x24002288
 800cec0:	24002274 	.word	0x24002274
 800cec4:	24002268 	.word	0x24002268
 800cec8:	24002164 	.word	0x24002164
 800cecc:	24002160 	.word	0x24002160

0800ced0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d109      	bne.n	800cef4 <vTaskPlaceOnEventList+0x24>
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	60fb      	str	r3, [r7, #12]
 800cef2:	e7fe      	b.n	800cef2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cef4:	4b07      	ldr	r3, [pc, #28]	; (800cf14 <vTaskPlaceOnEventList+0x44>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3318      	adds	r3, #24
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7fe fb06 	bl	800b50e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf02:	2101      	movs	r1, #1
 800cf04:	6838      	ldr	r0, [r7, #0]
 800cf06:	f000 fbb7 	bl	800d678 <prvAddCurrentTaskToDelayedList>
}
 800cf0a:	bf00      	nop
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	24002160 	.word	0x24002160

0800cf18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d109      	bne.n	800cf3e <vTaskPlaceOnEventListRestricted+0x26>
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	617b      	str	r3, [r7, #20]
 800cf3c:	e7fe      	b.n	800cf3c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf3e:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <vTaskPlaceOnEventListRestricted+0x50>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3318      	adds	r3, #24
 800cf44:	4619      	mov	r1, r3
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f7fe fabd 	bl	800b4c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800cf52:	f04f 33ff 	mov.w	r3, #4294967295
 800cf56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	68b8      	ldr	r0, [r7, #8]
 800cf5c:	f000 fb8c 	bl	800d678 <prvAddCurrentTaskToDelayedList>
	}
 800cf60:	bf00      	nop
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	24002160 	.word	0x24002160

0800cf6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d109      	bne.n	800cf96 <xTaskRemoveFromEventList+0x2a>
 800cf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	60fb      	str	r3, [r7, #12]
 800cf94:	e7fe      	b.n	800cf94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	3318      	adds	r3, #24
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe faf0 	bl	800b580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfa0:	4b1d      	ldr	r3, [pc, #116]	; (800d018 <xTaskRemoveFromEventList+0xac>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d11c      	bne.n	800cfe2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fe fae7 	bl	800b580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	409a      	lsls	r2, r3
 800cfba:	4b18      	ldr	r3, [pc, #96]	; (800d01c <xTaskRemoveFromEventList+0xb0>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	4a16      	ldr	r2, [pc, #88]	; (800d01c <xTaskRemoveFromEventList+0xb0>)
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc8:	4613      	mov	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4a13      	ldr	r2, [pc, #76]	; (800d020 <xTaskRemoveFromEventList+0xb4>)
 800cfd2:	441a      	add	r2, r3
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4610      	mov	r0, r2
 800cfdc:	f7fe fa73 	bl	800b4c6 <vListInsertEnd>
 800cfe0:	e005      	b.n	800cfee <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	3318      	adds	r3, #24
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	480e      	ldr	r0, [pc, #56]	; (800d024 <xTaskRemoveFromEventList+0xb8>)
 800cfea:	f7fe fa6c 	bl	800b4c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <xTaskRemoveFromEventList+0xbc>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d905      	bls.n	800d008 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d000:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <xTaskRemoveFromEventList+0xc0>)
 800d002:	2201      	movs	r2, #1
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	e001      	b.n	800d00c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800d008:	2300      	movs	r3, #0
 800d00a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d00c:	697b      	ldr	r3, [r7, #20]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3718      	adds	r7, #24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	24002288 	.word	0x24002288
 800d01c:	24002268 	.word	0x24002268
 800d020:	24002164 	.word	0x24002164
 800d024:	24002220 	.word	0x24002220
 800d028:	24002160 	.word	0x24002160
 800d02c:	24002274 	.word	0x24002274

0800d030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d038:	4b06      	ldr	r3, [pc, #24]	; (800d054 <vTaskInternalSetTimeOutState+0x24>)
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d040:	4b05      	ldr	r3, [pc, #20]	; (800d058 <vTaskInternalSetTimeOutState+0x28>)
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	605a      	str	r2, [r3, #4]
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	24002278 	.word	0x24002278
 800d058:	24002264 	.word	0x24002264

0800d05c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d109      	bne.n	800d080 <xTaskCheckForTimeOut+0x24>
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	613b      	str	r3, [r7, #16]
 800d07e:	e7fe      	b.n	800d07e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d109      	bne.n	800d09a <xTaskCheckForTimeOut+0x3e>
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	e7fe      	b.n	800d098 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d09a:	f000 ffa7 	bl	800dfec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d09e:	4b1d      	ldr	r3, [pc, #116]	; (800d114 <xTaskCheckForTimeOut+0xb8>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	69ba      	ldr	r2, [r7, #24]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b6:	d102      	bne.n	800d0be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	61fb      	str	r3, [r7, #28]
 800d0bc:	e023      	b.n	800d106 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	4b15      	ldr	r3, [pc, #84]	; (800d118 <xTaskCheckForTimeOut+0xbc>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d007      	beq.n	800d0da <xTaskCheckForTimeOut+0x7e>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	69ba      	ldr	r2, [r7, #24]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d302      	bcc.n	800d0da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	61fb      	str	r3, [r7, #28]
 800d0d8:	e015      	b.n	800d106 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d20b      	bcs.n	800d0fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	1ad2      	subs	r2, r2, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff ff9d 	bl	800d030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	61fb      	str	r3, [r7, #28]
 800d0fa:	e004      	b.n	800d106 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2200      	movs	r2, #0
 800d100:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d102:	2301      	movs	r3, #1
 800d104:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d106:	f000 ff9f 	bl	800e048 <vPortExitCritical>

	return xReturn;
 800d10a:	69fb      	ldr	r3, [r7, #28]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3720      	adds	r7, #32
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	24002264 	.word	0x24002264
 800d118:	24002278 	.word	0x24002278

0800d11c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d120:	4b03      	ldr	r3, [pc, #12]	; (800d130 <vTaskMissedYield+0x14>)
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]
}
 800d126:	bf00      	nop
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	24002274 	.word	0x24002274

0800d134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d13c:	f000 f854 	bl	800d1e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d140:	4b07      	ldr	r3, [pc, #28]	; (800d160 <prvIdleTask+0x2c>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d907      	bls.n	800d158 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d148:	4b06      	ldr	r3, [pc, #24]	; (800d164 <prvIdleTask+0x30>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d158:	f7f3 fa92 	bl	8000680 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d15c:	e7ee      	b.n	800d13c <prvIdleTask+0x8>
 800d15e:	bf00      	nop
 800d160:	24002164 	.word	0x24002164
 800d164:	e000ed04 	.word	0xe000ed04

0800d168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d16e:	2300      	movs	r3, #0
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	e00c      	b.n	800d18e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	4613      	mov	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4a12      	ldr	r2, [pc, #72]	; (800d1c8 <prvInitialiseTaskLists+0x60>)
 800d180:	4413      	add	r3, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe f972 	bl	800b46c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3301      	adds	r3, #1
 800d18c:	607b      	str	r3, [r7, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b06      	cmp	r3, #6
 800d192:	d9ef      	bls.n	800d174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d194:	480d      	ldr	r0, [pc, #52]	; (800d1cc <prvInitialiseTaskLists+0x64>)
 800d196:	f7fe f969 	bl	800b46c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d19a:	480d      	ldr	r0, [pc, #52]	; (800d1d0 <prvInitialiseTaskLists+0x68>)
 800d19c:	f7fe f966 	bl	800b46c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1a0:	480c      	ldr	r0, [pc, #48]	; (800d1d4 <prvInitialiseTaskLists+0x6c>)
 800d1a2:	f7fe f963 	bl	800b46c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1a6:	480c      	ldr	r0, [pc, #48]	; (800d1d8 <prvInitialiseTaskLists+0x70>)
 800d1a8:	f7fe f960 	bl	800b46c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1ac:	480b      	ldr	r0, [pc, #44]	; (800d1dc <prvInitialiseTaskLists+0x74>)
 800d1ae:	f7fe f95d 	bl	800b46c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1b2:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <prvInitialiseTaskLists+0x78>)
 800d1b4:	4a05      	ldr	r2, [pc, #20]	; (800d1cc <prvInitialiseTaskLists+0x64>)
 800d1b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <prvInitialiseTaskLists+0x7c>)
 800d1ba:	4a05      	ldr	r2, [pc, #20]	; (800d1d0 <prvInitialiseTaskLists+0x68>)
 800d1bc:	601a      	str	r2, [r3, #0]
}
 800d1be:	bf00      	nop
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	24002164 	.word	0x24002164
 800d1cc:	240021f0 	.word	0x240021f0
 800d1d0:	24002204 	.word	0x24002204
 800d1d4:	24002220 	.word	0x24002220
 800d1d8:	24002234 	.word	0x24002234
 800d1dc:	2400224c 	.word	0x2400224c
 800d1e0:	24002218 	.word	0x24002218
 800d1e4:	2400221c 	.word	0x2400221c

0800d1e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1ee:	e019      	b.n	800d224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1f0:	f000 fefc 	bl	800dfec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f4:	4b0f      	ldr	r3, [pc, #60]	; (800d234 <prvCheckTasksWaitingTermination+0x4c>)
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3304      	adds	r3, #4
 800d200:	4618      	mov	r0, r3
 800d202:	f7fe f9bd 	bl	800b580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d206:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <prvCheckTasksWaitingTermination+0x50>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	4a0a      	ldr	r2, [pc, #40]	; (800d238 <prvCheckTasksWaitingTermination+0x50>)
 800d20e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d210:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <prvCheckTasksWaitingTermination+0x54>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3b01      	subs	r3, #1
 800d216:	4a09      	ldr	r2, [pc, #36]	; (800d23c <prvCheckTasksWaitingTermination+0x54>)
 800d218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d21a:	f000 ff15 	bl	800e048 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f80e 	bl	800d240 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d224:	4b05      	ldr	r3, [pc, #20]	; (800d23c <prvCheckTasksWaitingTermination+0x54>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1e1      	bne.n	800d1f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d22c:	bf00      	nop
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	24002234 	.word	0x24002234
 800d238:	24002260 	.word	0x24002260
 800d23c:	24002248 	.word	0x24002248

0800d240 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d108      	bne.n	800d264 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d256:	4618      	mov	r0, r3
 800d258:	f001 f8a4 	bl	800e3a4 <vPortFree>
				vPortFree( pxTCB );
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f001 f8a1 	bl	800e3a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d262:	e017      	b.n	800d294 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d103      	bne.n	800d276 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f001 f898 	bl	800e3a4 <vPortFree>
	}
 800d274:	e00e      	b.n	800d294 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d009      	beq.n	800d294 <prvDeleteTCB+0x54>
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	60fb      	str	r3, [r7, #12]
 800d292:	e7fe      	b.n	800d292 <prvDeleteTCB+0x52>
	}
 800d294:	bf00      	nop
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2a2:	4b0c      	ldr	r3, [pc, #48]	; (800d2d4 <prvResetNextTaskUnblockTime+0x38>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2b4:	e008      	b.n	800d2c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2b6:	4b07      	ldr	r3, [pc, #28]	; (800d2d4 <prvResetNextTaskUnblockTime+0x38>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	4a04      	ldr	r2, [pc, #16]	; (800d2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d2c6:	6013      	str	r3, [r2, #0]
}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	24002218 	.word	0x24002218
 800d2d8:	24002280 	.word	0x24002280

0800d2dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2e2:	4b0b      	ldr	r3, [pc, #44]	; (800d310 <xTaskGetSchedulerState+0x34>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d102      	bne.n	800d2f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	607b      	str	r3, [r7, #4]
 800d2ee:	e008      	b.n	800d302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2f0:	4b08      	ldr	r3, [pc, #32]	; (800d314 <xTaskGetSchedulerState+0x38>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d102      	bne.n	800d2fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	607b      	str	r3, [r7, #4]
 800d2fc:	e001      	b.n	800d302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2fe:	2300      	movs	r3, #0
 800d300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d302:	687b      	ldr	r3, [r7, #4]
	}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	2400226c 	.word	0x2400226c
 800d314:	24002288 	.word	0x24002288

0800d318 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d324:	2300      	movs	r3, #0
 800d326:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d069      	beq.n	800d402 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d332:	4b36      	ldr	r3, [pc, #216]	; (800d40c <xTaskPriorityInherit+0xf4>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d338:	429a      	cmp	r2, r3
 800d33a:	d259      	bcs.n	800d3f0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	2b00      	cmp	r3, #0
 800d342:	db06      	blt.n	800d352 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d344:	4b31      	ldr	r3, [pc, #196]	; (800d40c <xTaskPriorityInherit+0xf4>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34a:	f1c3 0207 	rsb	r2, r3, #7
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	6959      	ldr	r1, [r3, #20]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35a:	4613      	mov	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	4a2b      	ldr	r2, [pc, #172]	; (800d410 <xTaskPriorityInherit+0xf8>)
 800d364:	4413      	add	r3, r2
 800d366:	4299      	cmp	r1, r3
 800d368:	d13a      	bne.n	800d3e0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	3304      	adds	r3, #4
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe f906 	bl	800b580 <uxListRemove>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d115      	bne.n	800d3a6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d37e:	4924      	ldr	r1, [pc, #144]	; (800d410 <xTaskPriorityInherit+0xf8>)
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	440b      	add	r3, r1
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10a      	bne.n	800d3a6 <xTaskPriorityInherit+0x8e>
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d394:	2201      	movs	r2, #1
 800d396:	fa02 f303 	lsl.w	r3, r2, r3
 800d39a:	43da      	mvns	r2, r3
 800d39c:	4b1d      	ldr	r3, [pc, #116]	; (800d414 <xTaskPriorityInherit+0xfc>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	4a1c      	ldr	r2, [pc, #112]	; (800d414 <xTaskPriorityInherit+0xfc>)
 800d3a4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3a6:	4b19      	ldr	r3, [pc, #100]	; (800d40c <xTaskPriorityInherit+0xf4>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	409a      	lsls	r2, r3
 800d3b8:	4b16      	ldr	r3, [pc, #88]	; (800d414 <xTaskPriorityInherit+0xfc>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	4a15      	ldr	r2, [pc, #84]	; (800d414 <xTaskPriorityInherit+0xfc>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4a10      	ldr	r2, [pc, #64]	; (800d410 <xTaskPriorityInherit+0xf8>)
 800d3d0:	441a      	add	r2, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7fe f874 	bl	800b4c6 <vListInsertEnd>
 800d3de:	e004      	b.n	800d3ea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <xTaskPriorityInherit+0xf4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	60fb      	str	r3, [r7, #12]
 800d3ee:	e008      	b.n	800d402 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3f4:	4b05      	ldr	r3, [pc, #20]	; (800d40c <xTaskPriorityInherit+0xf4>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d201      	bcs.n	800d402 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d3fe:	2301      	movs	r3, #1
 800d400:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d402:	68fb      	ldr	r3, [r7, #12]
	}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	24002160 	.word	0x24002160
 800d410:	24002164 	.word	0x24002164
 800d414:	24002268 	.word	0x24002268

0800d418 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d424:	2300      	movs	r3, #0
 800d426:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d06c      	beq.n	800d508 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d42e:	4b39      	ldr	r3, [pc, #228]	; (800d514 <xTaskPriorityDisinherit+0xfc>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	429a      	cmp	r2, r3
 800d436:	d009      	beq.n	800d44c <xTaskPriorityDisinherit+0x34>
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	60fb      	str	r3, [r7, #12]
 800d44a:	e7fe      	b.n	800d44a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d450:	2b00      	cmp	r3, #0
 800d452:	d109      	bne.n	800d468 <xTaskPriorityDisinherit+0x50>
 800d454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	60bb      	str	r3, [r7, #8]
 800d466:	e7fe      	b.n	800d466 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d46c:	1e5a      	subs	r2, r3, #1
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d044      	beq.n	800d508 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d482:	2b00      	cmp	r3, #0
 800d484:	d140      	bne.n	800d508 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	3304      	adds	r3, #4
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe f878 	bl	800b580 <uxListRemove>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d115      	bne.n	800d4c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49a:	491f      	ldr	r1, [pc, #124]	; (800d518 <xTaskPriorityDisinherit+0x100>)
 800d49c:	4613      	mov	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4413      	add	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	440b      	add	r3, r1
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <xTaskPriorityDisinherit+0xaa>
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b6:	43da      	mvns	r2, r3
 800d4b8:	4b18      	ldr	r3, [pc, #96]	; (800d51c <xTaskPriorityDisinherit+0x104>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4013      	ands	r3, r2
 800d4be:	4a17      	ldr	r2, [pc, #92]	; (800d51c <xTaskPriorityDisinherit+0x104>)
 800d4c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ce:	f1c3 0207 	rsb	r2, r3, #7
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4da:	2201      	movs	r2, #1
 800d4dc:	409a      	lsls	r2, r3
 800d4de:	4b0f      	ldr	r3, [pc, #60]	; (800d51c <xTaskPriorityDisinherit+0x104>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	4a0d      	ldr	r2, [pc, #52]	; (800d51c <xTaskPriorityDisinherit+0x104>)
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4a08      	ldr	r2, [pc, #32]	; (800d518 <xTaskPriorityDisinherit+0x100>)
 800d4f6:	441a      	add	r2, r3
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f7fd ffe1 	bl	800b4c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d504:	2301      	movs	r3, #1
 800d506:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d508:	697b      	ldr	r3, [r7, #20]
	}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	24002160 	.word	0x24002160
 800d518:	24002164 	.word	0x24002164
 800d51c:	24002268 	.word	0x24002268

0800d520 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d52e:	2301      	movs	r3, #1
 800d530:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	f000 8081 	beq.w	800d63c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d109      	bne.n	800d556 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	e7fe      	b.n	800d554 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d902      	bls.n	800d566 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	61fb      	str	r3, [r7, #28]
 800d564:	e002      	b.n	800d56c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d56a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d570:	69fa      	ldr	r2, [r7, #28]
 800d572:	429a      	cmp	r2, r3
 800d574:	d062      	beq.n	800d63c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d15d      	bne.n	800d63c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d580:	4b30      	ldr	r3, [pc, #192]	; (800d644 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	69ba      	ldr	r2, [r7, #24]
 800d586:	429a      	cmp	r2, r3
 800d588:	d109      	bne.n	800d59e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58e:	f383 8811 	msr	BASEPRI, r3
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	f3bf 8f4f 	dsb	sy
 800d59a:	60bb      	str	r3, [r7, #8]
 800d59c:	e7fe      	b.n	800d59c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	69fa      	ldr	r2, [r7, #28]
 800d5a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	699b      	ldr	r3, [r3, #24]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	db04      	blt.n	800d5bc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	f1c3 0207 	rsb	r2, r3, #7
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	6959      	ldr	r1, [r3, #20]
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4413      	add	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4a1f      	ldr	r2, [pc, #124]	; (800d648 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d5cc:	4413      	add	r3, r2
 800d5ce:	4299      	cmp	r1, r3
 800d5d0:	d134      	bne.n	800d63c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fd ffd2 	bl	800b580 <uxListRemove>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d115      	bne.n	800d60e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e6:	4918      	ldr	r1, [pc, #96]	; (800d648 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	440b      	add	r3, r1
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10a      	bne.n	800d60e <vTaskPriorityDisinheritAfterTimeout+0xee>
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d602:	43da      	mvns	r2, r3
 800d604:	4b11      	ldr	r3, [pc, #68]	; (800d64c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4013      	ands	r3, r2
 800d60a:	4a10      	ldr	r2, [pc, #64]	; (800d64c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d60c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d612:	2201      	movs	r2, #1
 800d614:	409a      	lsls	r2, r3
 800d616:	4b0d      	ldr	r3, [pc, #52]	; (800d64c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	4a0b      	ldr	r2, [pc, #44]	; (800d64c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d61e:	6013      	str	r3, [r2, #0]
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d624:	4613      	mov	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4a06      	ldr	r2, [pc, #24]	; (800d648 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d62e:	441a      	add	r2, r3
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	3304      	adds	r3, #4
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f7fd ff45 	bl	800b4c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d63c:	bf00      	nop
 800d63e:	3720      	adds	r7, #32
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	24002160 	.word	0x24002160
 800d648:	24002164 	.word	0x24002164
 800d64c:	24002268 	.word	0x24002268

0800d650 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d650:	b480      	push	{r7}
 800d652:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d654:	4b07      	ldr	r3, [pc, #28]	; (800d674 <pvTaskIncrementMutexHeldCount+0x24>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d004      	beq.n	800d666 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d65c:	4b05      	ldr	r3, [pc, #20]	; (800d674 <pvTaskIncrementMutexHeldCount+0x24>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d662:	3201      	adds	r2, #1
 800d664:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d666:	4b03      	ldr	r3, [pc, #12]	; (800d674 <pvTaskIncrementMutexHeldCount+0x24>)
 800d668:	681b      	ldr	r3, [r3, #0]
	}
 800d66a:	4618      	mov	r0, r3
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr
 800d674:	24002160 	.word	0x24002160

0800d678 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d682:	4b29      	ldr	r3, [pc, #164]	; (800d728 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d688:	4b28      	ldr	r3, [pc, #160]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3304      	adds	r3, #4
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fd ff76 	bl	800b580 <uxListRemove>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10b      	bne.n	800d6b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d69a:	4b24      	ldr	r3, [pc, #144]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a6:	43da      	mvns	r2, r3
 800d6a8:	4b21      	ldr	r3, [pc, #132]	; (800d730 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	4a20      	ldr	r2, [pc, #128]	; (800d730 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b8:	d10a      	bne.n	800d6d0 <prvAddCurrentTaskToDelayedList+0x58>
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d007      	beq.n	800d6d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6c0:	4b1a      	ldr	r3, [pc, #104]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	481a      	ldr	r0, [pc, #104]	; (800d734 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d6ca:	f7fd fefc 	bl	800b4c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6ce:	e026      	b.n	800d71e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6d8:	4b14      	ldr	r3, [pc, #80]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d209      	bcs.n	800d6fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6e8:	4b13      	ldr	r3, [pc, #76]	; (800d738 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	f7fd ff0a 	bl	800b50e <vListInsert>
}
 800d6fa:	e010      	b.n	800d71e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6fc:	4b0f      	ldr	r3, [pc, #60]	; (800d73c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3304      	adds	r3, #4
 800d706:	4619      	mov	r1, r3
 800d708:	4610      	mov	r0, r2
 800d70a:	f7fd ff00 	bl	800b50e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d70e:	4b0c      	ldr	r3, [pc, #48]	; (800d740 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	429a      	cmp	r2, r3
 800d716:	d202      	bcs.n	800d71e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d718:	4a09      	ldr	r2, [pc, #36]	; (800d740 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6013      	str	r3, [r2, #0]
}
 800d71e:	bf00      	nop
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	24002264 	.word	0x24002264
 800d72c:	24002160 	.word	0x24002160
 800d730:	24002268 	.word	0x24002268
 800d734:	2400224c 	.word	0x2400224c
 800d738:	2400221c 	.word	0x2400221c
 800d73c:	24002218 	.word	0x24002218
 800d740:	24002280 	.word	0x24002280

0800d744 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	; 0x28
 800d748:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d74e:	f000 fae7 	bl	800dd20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d752:	4b1c      	ldr	r3, [pc, #112]	; (800d7c4 <xTimerCreateTimerTask+0x80>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d021      	beq.n	800d79e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d762:	1d3a      	adds	r2, r7, #4
 800d764:	f107 0108 	add.w	r1, r7, #8
 800d768:	f107 030c 	add.w	r3, r7, #12
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7f2 ffa9 	bl	80006c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d772:	6879      	ldr	r1, [r7, #4]
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	9202      	str	r2, [sp, #8]
 800d77a:	9301      	str	r3, [sp, #4]
 800d77c:	2302      	movs	r3, #2
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	2300      	movs	r3, #0
 800d782:	460a      	mov	r2, r1
 800d784:	4910      	ldr	r1, [pc, #64]	; (800d7c8 <xTimerCreateTimerTask+0x84>)
 800d786:	4811      	ldr	r0, [pc, #68]	; (800d7cc <xTimerCreateTimerTask+0x88>)
 800d788:	f7fe ff0e 	bl	800c5a8 <xTaskCreateStatic>
 800d78c:	4602      	mov	r2, r0
 800d78e:	4b10      	ldr	r3, [pc, #64]	; (800d7d0 <xTimerCreateTimerTask+0x8c>)
 800d790:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <xTimerCreateTimerTask+0x8c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d79a:	2301      	movs	r3, #1
 800d79c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d109      	bne.n	800d7b8 <xTimerCreateTimerTask+0x74>
 800d7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	613b      	str	r3, [r7, #16]
 800d7b6:	e7fe      	b.n	800d7b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d7b8:	697b      	ldr	r3, [r7, #20]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3718      	adds	r7, #24
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	240022bc 	.word	0x240022bc
 800d7c8:	08018a6c 	.word	0x08018a6c
 800d7cc:	0800d905 	.word	0x0800d905
 800d7d0:	240022c0 	.word	0x240022c0

0800d7d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08a      	sub	sp, #40	; 0x28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d109      	bne.n	800d800 <xTimerGenericCommand+0x2c>
 800d7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	623b      	str	r3, [r7, #32]
 800d7fe:	e7fe      	b.n	800d7fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d800:	4b19      	ldr	r3, [pc, #100]	; (800d868 <xTimerGenericCommand+0x94>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d02a      	beq.n	800d85e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2b05      	cmp	r3, #5
 800d818:	dc18      	bgt.n	800d84c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d81a:	f7ff fd5f 	bl	800d2dc <xTaskGetSchedulerState>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b02      	cmp	r3, #2
 800d822:	d109      	bne.n	800d838 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d824:	4b10      	ldr	r3, [pc, #64]	; (800d868 <xTimerGenericCommand+0x94>)
 800d826:	6818      	ldr	r0, [r3, #0]
 800d828:	f107 0114 	add.w	r1, r7, #20
 800d82c:	2300      	movs	r3, #0
 800d82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d830:	f7fe f8bc 	bl	800b9ac <xQueueGenericSend>
 800d834:	6278      	str	r0, [r7, #36]	; 0x24
 800d836:	e012      	b.n	800d85e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d838:	4b0b      	ldr	r3, [pc, #44]	; (800d868 <xTimerGenericCommand+0x94>)
 800d83a:	6818      	ldr	r0, [r3, #0]
 800d83c:	f107 0114 	add.w	r1, r7, #20
 800d840:	2300      	movs	r3, #0
 800d842:	2200      	movs	r2, #0
 800d844:	f7fe f8b2 	bl	800b9ac <xQueueGenericSend>
 800d848:	6278      	str	r0, [r7, #36]	; 0x24
 800d84a:	e008      	b.n	800d85e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d84c:	4b06      	ldr	r3, [pc, #24]	; (800d868 <xTimerGenericCommand+0x94>)
 800d84e:	6818      	ldr	r0, [r3, #0]
 800d850:	f107 0114 	add.w	r1, r7, #20
 800d854:	2300      	movs	r3, #0
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	f7fe f9a2 	bl	800bba0 <xQueueGenericSendFromISR>
 800d85c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d860:	4618      	mov	r0, r3
 800d862:	3728      	adds	r7, #40	; 0x28
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	240022bc 	.word	0x240022bc

0800d86c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b088      	sub	sp, #32
 800d870:	af02      	add	r7, sp, #8
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d876:	4b22      	ldr	r3, [pc, #136]	; (800d900 <prvProcessExpiredTimer+0x94>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	3304      	adds	r3, #4
 800d884:	4618      	mov	r0, r3
 800d886:	f7fd fe7b 	bl	800b580 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d890:	f003 0304 	and.w	r3, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	d021      	beq.n	800d8dc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	699a      	ldr	r2, [r3, #24]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	18d1      	adds	r1, r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	6978      	ldr	r0, [r7, #20]
 800d8a6:	f000 f8d1 	bl	800da4c <prvInsertTimerInActiveList>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01e      	beq.n	800d8ee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	6978      	ldr	r0, [r7, #20]
 800d8bc:	f7ff ff8a 	bl	800d7d4 <xTimerGenericCommand>
 800d8c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d112      	bne.n	800d8ee <prvProcessExpiredTimer+0x82>
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	e7fe      	b.n	800d8da <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8e2:	f023 0301 	bic.w	r3, r3, #1
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	6a1b      	ldr	r3, [r3, #32]
 800d8f2:	6978      	ldr	r0, [r7, #20]
 800d8f4:	4798      	blx	r3
}
 800d8f6:	bf00      	nop
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	240022b4 	.word	0x240022b4

0800d904 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d90c:	f107 0308 	add.w	r3, r7, #8
 800d910:	4618      	mov	r0, r3
 800d912:	f000 f857 	bl	800d9c4 <prvGetNextExpireTime>
 800d916:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	4619      	mov	r1, r3
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f000 f803 	bl	800d928 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d922:	f000 f8d5 	bl	800dad0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d926:	e7f1      	b.n	800d90c <prvTimerTask+0x8>

0800d928 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d932:	f7ff f8ef 	bl	800cb14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d936:	f107 0308 	add.w	r3, r7, #8
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 f866 	bl	800da0c <prvSampleTimeNow>
 800d940:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d130      	bne.n	800d9aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10a      	bne.n	800d964 <prvProcessTimerOrBlockTask+0x3c>
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	429a      	cmp	r2, r3
 800d954:	d806      	bhi.n	800d964 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d956:	f7ff f8eb 	bl	800cb30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d95a:	68f9      	ldr	r1, [r7, #12]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7ff ff85 	bl	800d86c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d962:	e024      	b.n	800d9ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d008      	beq.n	800d97c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d96a:	4b13      	ldr	r3, [pc, #76]	; (800d9b8 <prvProcessTimerOrBlockTask+0x90>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <prvProcessTimerOrBlockTask+0x50>
 800d974:	2301      	movs	r3, #1
 800d976:	e000      	b.n	800d97a <prvProcessTimerOrBlockTask+0x52>
 800d978:	2300      	movs	r3, #0
 800d97a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d97c:	4b0f      	ldr	r3, [pc, #60]	; (800d9bc <prvProcessTimerOrBlockTask+0x94>)
 800d97e:	6818      	ldr	r0, [r3, #0]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	1ad3      	subs	r3, r2, r3
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	4619      	mov	r1, r3
 800d98a:	f7fe fdd9 	bl	800c540 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d98e:	f7ff f8cf 	bl	800cb30 <xTaskResumeAll>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d998:	4b09      	ldr	r3, [pc, #36]	; (800d9c0 <prvProcessTimerOrBlockTask+0x98>)
 800d99a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	f3bf 8f6f 	isb	sy
}
 800d9a8:	e001      	b.n	800d9ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d9aa:	f7ff f8c1 	bl	800cb30 <xTaskResumeAll>
}
 800d9ae:	bf00      	nop
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	240022b8 	.word	0x240022b8
 800d9bc:	240022bc 	.word	0x240022bc
 800d9c0:	e000ed04 	.word	0xe000ed04

0800d9c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9cc:	4b0e      	ldr	r3, [pc, #56]	; (800da08 <prvGetNextExpireTime+0x44>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d101      	bne.n	800d9da <prvGetNextExpireTime+0x16>
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	e000      	b.n	800d9dc <prvGetNextExpireTime+0x18>
 800d9da:	2200      	movs	r2, #0
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d105      	bne.n	800d9f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9e8:	4b07      	ldr	r3, [pc, #28]	; (800da08 <prvGetNextExpireTime+0x44>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	60fb      	str	r3, [r7, #12]
 800d9f2:	e001      	b.n	800d9f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3714      	adds	r7, #20
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	240022b4 	.word	0x240022b4

0800da0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da14:	f7ff f928 	bl	800cc68 <xTaskGetTickCount>
 800da18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da1a:	4b0b      	ldr	r3, [pc, #44]	; (800da48 <prvSampleTimeNow+0x3c>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	429a      	cmp	r2, r3
 800da22:	d205      	bcs.n	800da30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da24:	f000 f918 	bl	800dc58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	e002      	b.n	800da36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da36:	4a04      	ldr	r2, [pc, #16]	; (800da48 <prvSampleTimeNow+0x3c>)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da3c:	68fb      	ldr	r3, [r7, #12]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	240022c4 	.word	0x240022c4

0800da4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b086      	sub	sp, #24
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
 800da58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da6a:	68ba      	ldr	r2, [r7, #8]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d812      	bhi.n	800da98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	1ad2      	subs	r2, r2, r3
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d302      	bcc.n	800da86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da80:	2301      	movs	r3, #1
 800da82:	617b      	str	r3, [r7, #20]
 800da84:	e01b      	b.n	800dabe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800da86:	4b10      	ldr	r3, [pc, #64]	; (800dac8 <prvInsertTimerInActiveList+0x7c>)
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	3304      	adds	r3, #4
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f7fd fd3c 	bl	800b50e <vListInsert>
 800da96:	e012      	b.n	800dabe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d206      	bcs.n	800daae <prvInsertTimerInActiveList+0x62>
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d302      	bcc.n	800daae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800daa8:	2301      	movs	r3, #1
 800daaa:	617b      	str	r3, [r7, #20]
 800daac:	e007      	b.n	800dabe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800daae:	4b07      	ldr	r3, [pc, #28]	; (800dacc <prvInsertTimerInActiveList+0x80>)
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3304      	adds	r3, #4
 800dab6:	4619      	mov	r1, r3
 800dab8:	4610      	mov	r0, r2
 800daba:	f7fd fd28 	bl	800b50e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dabe:	697b      	ldr	r3, [r7, #20]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3718      	adds	r7, #24
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	240022b8 	.word	0x240022b8
 800dacc:	240022b4 	.word	0x240022b4

0800dad0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08c      	sub	sp, #48	; 0x30
 800dad4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dad6:	e0ac      	b.n	800dc32 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f2c0 80a8 	blt.w	800dc30 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	695b      	ldr	r3, [r3, #20]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d004      	beq.n	800daf6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	3304      	adds	r3, #4
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fd fd45 	bl	800b580 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800daf6:	1d3b      	adds	r3, r7, #4
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7ff ff87 	bl	800da0c <prvSampleTimeNow>
 800dafe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2b09      	cmp	r3, #9
 800db04:	f200 8095 	bhi.w	800dc32 <prvProcessReceivedCommands+0x162>
 800db08:	a201      	add	r2, pc, #4	; (adr r2, 800db10 <prvProcessReceivedCommands+0x40>)
 800db0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0e:	bf00      	nop
 800db10:	0800db39 	.word	0x0800db39
 800db14:	0800db39 	.word	0x0800db39
 800db18:	0800db39 	.word	0x0800db39
 800db1c:	0800dbab 	.word	0x0800dbab
 800db20:	0800dbbf 	.word	0x0800dbbf
 800db24:	0800dc07 	.word	0x0800dc07
 800db28:	0800db39 	.word	0x0800db39
 800db2c:	0800db39 	.word	0x0800db39
 800db30:	0800dbab 	.word	0x0800dbab
 800db34:	0800dbbf 	.word	0x0800dbbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db3e:	f043 0301 	orr.w	r3, r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	699b      	ldr	r3, [r3, #24]
 800db50:	18d1      	adds	r1, r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6a3a      	ldr	r2, [r7, #32]
 800db56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db58:	f7ff ff78 	bl	800da4c <prvInsertTimerInActiveList>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d067      	beq.n	800dc32 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	2b00      	cmp	r3, #0
 800db76:	d05c      	beq.n	800dc32 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	699b      	ldr	r3, [r3, #24]
 800db7e:	441a      	add	r2, r3
 800db80:	2300      	movs	r3, #0
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	2300      	movs	r3, #0
 800db86:	2100      	movs	r1, #0
 800db88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db8a:	f7ff fe23 	bl	800d7d4 <xTimerGenericCommand>
 800db8e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d14d      	bne.n	800dc32 <prvProcessReceivedCommands+0x162>
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	61bb      	str	r3, [r7, #24]
 800dba8:	e7fe      	b.n	800dba8 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbb0:	f023 0301 	bic.w	r3, r3, #1
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800dbbc:	e039      	b.n	800dc32 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbc4:	f043 0301 	orr.w	r3, r3, #1
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d109      	bne.n	800dbf2 <prvProcessReceivedCommands+0x122>
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	617b      	str	r3, [r7, #20]
 800dbf0:	e7fe      	b.n	800dbf0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	699a      	ldr	r2, [r3, #24]
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	18d1      	adds	r1, r2, r3
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	6a3a      	ldr	r2, [r7, #32]
 800dbfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc00:	f7ff ff24 	bl	800da4c <prvInsertTimerInActiveList>
					break;
 800dc04:	e015      	b.n	800dc32 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc0c:	f003 0302 	and.w	r3, r3, #2
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d103      	bne.n	800dc1c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800dc14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc16:	f000 fbc5 	bl	800e3a4 <vPortFree>
 800dc1a:	e00a      	b.n	800dc32 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc22:	f023 0301 	bic.w	r3, r3, #1
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dc2e:	e000      	b.n	800dc32 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dc30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc32:	4b08      	ldr	r3, [pc, #32]	; (800dc54 <prvProcessReceivedCommands+0x184>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f107 0108 	add.w	r1, r7, #8
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fe f8cd 	bl	800bddc <xQueueReceive>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f47f af47 	bne.w	800dad8 <prvProcessReceivedCommands+0x8>
	}
}
 800dc4a:	bf00      	nop
 800dc4c:	3728      	adds	r7, #40	; 0x28
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	240022bc 	.word	0x240022bc

0800dc58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b088      	sub	sp, #32
 800dc5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc5e:	e047      	b.n	800dcf0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc60:	4b2d      	ldr	r3, [pc, #180]	; (800dd18 <prvSwitchTimerLists+0xc0>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc6a:	4b2b      	ldr	r3, [pc, #172]	; (800dd18 <prvSwitchTimerLists+0xc0>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3304      	adds	r3, #4
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fd fc81 	bl	800b580 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6a1b      	ldr	r3, [r3, #32]
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc8c:	f003 0304 	and.w	r3, r3, #4
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d02d      	beq.n	800dcf0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	699b      	ldr	r3, [r3, #24]
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d90e      	bls.n	800dcc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcb2:	4b19      	ldr	r3, [pc, #100]	; (800dd18 <prvSwitchTimerLists+0xc0>)
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3304      	adds	r3, #4
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	f7fd fc26 	bl	800b50e <vListInsert>
 800dcc2:	e015      	b.n	800dcf0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	2300      	movs	r3, #0
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	2100      	movs	r1, #0
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f7ff fd80 	bl	800d7d4 <xTimerGenericCommand>
 800dcd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d109      	bne.n	800dcf0 <prvSwitchTimerLists+0x98>
 800dcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	603b      	str	r3, [r7, #0]
 800dcee:	e7fe      	b.n	800dcee <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcf0:	4b09      	ldr	r3, [pc, #36]	; (800dd18 <prvSwitchTimerLists+0xc0>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1b2      	bne.n	800dc60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dcfa:	4b07      	ldr	r3, [pc, #28]	; (800dd18 <prvSwitchTimerLists+0xc0>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd00:	4b06      	ldr	r3, [pc, #24]	; (800dd1c <prvSwitchTimerLists+0xc4>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a04      	ldr	r2, [pc, #16]	; (800dd18 <prvSwitchTimerLists+0xc0>)
 800dd06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dd08:	4a04      	ldr	r2, [pc, #16]	; (800dd1c <prvSwitchTimerLists+0xc4>)
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	6013      	str	r3, [r2, #0]
}
 800dd0e:	bf00      	nop
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	240022b4 	.word	0x240022b4
 800dd1c:	240022b8 	.word	0x240022b8

0800dd20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd26:	f000 f961 	bl	800dfec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd2a:	4b15      	ldr	r3, [pc, #84]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d120      	bne.n	800dd74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd32:	4814      	ldr	r0, [pc, #80]	; (800dd84 <prvCheckForValidListAndQueue+0x64>)
 800dd34:	f7fd fb9a 	bl	800b46c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd38:	4813      	ldr	r0, [pc, #76]	; (800dd88 <prvCheckForValidListAndQueue+0x68>)
 800dd3a:	f7fd fb97 	bl	800b46c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd3e:	4b13      	ldr	r3, [pc, #76]	; (800dd8c <prvCheckForValidListAndQueue+0x6c>)
 800dd40:	4a10      	ldr	r2, [pc, #64]	; (800dd84 <prvCheckForValidListAndQueue+0x64>)
 800dd42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd44:	4b12      	ldr	r3, [pc, #72]	; (800dd90 <prvCheckForValidListAndQueue+0x70>)
 800dd46:	4a10      	ldr	r2, [pc, #64]	; (800dd88 <prvCheckForValidListAndQueue+0x68>)
 800dd48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	4b11      	ldr	r3, [pc, #68]	; (800dd94 <prvCheckForValidListAndQueue+0x74>)
 800dd50:	4a11      	ldr	r2, [pc, #68]	; (800dd98 <prvCheckForValidListAndQueue+0x78>)
 800dd52:	210c      	movs	r1, #12
 800dd54:	200a      	movs	r0, #10
 800dd56:	f7fd fca5 	bl	800b6a4 <xQueueGenericCreateStatic>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	4b08      	ldr	r3, [pc, #32]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd5e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd60:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d005      	beq.n	800dd74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd68:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <prvCheckForValidListAndQueue+0x60>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	490b      	ldr	r1, [pc, #44]	; (800dd9c <prvCheckForValidListAndQueue+0x7c>)
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fbbe 	bl	800c4f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd74:	f000 f968 	bl	800e048 <vPortExitCritical>
}
 800dd78:	bf00      	nop
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	240022bc 	.word	0x240022bc
 800dd84:	2400228c 	.word	0x2400228c
 800dd88:	240022a0 	.word	0x240022a0
 800dd8c:	240022b4 	.word	0x240022b4
 800dd90:	240022b8 	.word	0x240022b8
 800dd94:	24002340 	.word	0x24002340
 800dd98:	240022c8 	.word	0x240022c8
 800dd9c:	08018a74 	.word	0x08018a74

0800dda0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3b04      	subs	r3, #4
 800ddb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ddb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3b04      	subs	r3, #4
 800ddbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f023 0201 	bic.w	r2, r3, #1
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3b04      	subs	r3, #4
 800ddce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddd0:	4a0c      	ldr	r2, [pc, #48]	; (800de04 <pxPortInitialiseStack+0x64>)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3b14      	subs	r3, #20
 800ddda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3b04      	subs	r3, #4
 800dde6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f06f 0202 	mvn.w	r2, #2
 800ddee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	3b20      	subs	r3, #32
 800ddf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	0800de09 	.word	0x0800de09

0800de08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800de0e:	2300      	movs	r3, #0
 800de10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de12:	4b11      	ldr	r3, [pc, #68]	; (800de58 <prvTaskExitError+0x50>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1a:	d009      	beq.n	800de30 <prvTaskExitError+0x28>
 800de1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	60fb      	str	r3, [r7, #12]
 800de2e:	e7fe      	b.n	800de2e <prvTaskExitError+0x26>
 800de30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de42:	bf00      	nop
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d0fc      	beq.n	800de44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de4a:	bf00      	nop
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	24000024 	.word	0x24000024
 800de5c:	00000000 	.word	0x00000000

0800de60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de60:	4b07      	ldr	r3, [pc, #28]	; (800de80 <pxCurrentTCBConst2>)
 800de62:	6819      	ldr	r1, [r3, #0]
 800de64:	6808      	ldr	r0, [r1, #0]
 800de66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6a:	f380 8809 	msr	PSP, r0
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f04f 0000 	mov.w	r0, #0
 800de76:	f380 8811 	msr	BASEPRI, r0
 800de7a:	4770      	bx	lr
 800de7c:	f3af 8000 	nop.w

0800de80 <pxCurrentTCBConst2>:
 800de80:	24002160 	.word	0x24002160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de84:	bf00      	nop
 800de86:	bf00      	nop

0800de88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de88:	4808      	ldr	r0, [pc, #32]	; (800deac <prvPortStartFirstTask+0x24>)
 800de8a:	6800      	ldr	r0, [r0, #0]
 800de8c:	6800      	ldr	r0, [r0, #0]
 800de8e:	f380 8808 	msr	MSP, r0
 800de92:	f04f 0000 	mov.w	r0, #0
 800de96:	f380 8814 	msr	CONTROL, r0
 800de9a:	b662      	cpsie	i
 800de9c:	b661      	cpsie	f
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	df00      	svc	0
 800dea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800deaa:	bf00      	nop
 800deac:	e000ed08 	.word	0xe000ed08

0800deb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800deb6:	4b44      	ldr	r3, [pc, #272]	; (800dfc8 <xPortStartScheduler+0x118>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a44      	ldr	r2, [pc, #272]	; (800dfcc <xPortStartScheduler+0x11c>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d109      	bne.n	800ded4 <xPortStartScheduler+0x24>
 800dec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	613b      	str	r3, [r7, #16]
 800ded2:	e7fe      	b.n	800ded2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ded4:	4b3c      	ldr	r3, [pc, #240]	; (800dfc8 <xPortStartScheduler+0x118>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a3d      	ldr	r2, [pc, #244]	; (800dfd0 <xPortStartScheduler+0x120>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d109      	bne.n	800def2 <xPortStartScheduler+0x42>
 800dede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	60fb      	str	r3, [r7, #12]
 800def0:	e7fe      	b.n	800def0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800def2:	4b38      	ldr	r3, [pc, #224]	; (800dfd4 <xPortStartScheduler+0x124>)
 800def4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	b2db      	uxtb	r3, r3
 800defc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	22ff      	movs	r2, #255	; 0xff
 800df02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df0c:	78fb      	ldrb	r3, [r7, #3]
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800df14:	b2da      	uxtb	r2, r3
 800df16:	4b30      	ldr	r3, [pc, #192]	; (800dfd8 <xPortStartScheduler+0x128>)
 800df18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df1a:	4b30      	ldr	r3, [pc, #192]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df1c:	2207      	movs	r2, #7
 800df1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df20:	e009      	b.n	800df36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800df22:	4b2e      	ldr	r3, [pc, #184]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3b01      	subs	r3, #1
 800df28:	4a2c      	ldr	r2, [pc, #176]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df2c:	78fb      	ldrb	r3, [r7, #3]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	b2db      	uxtb	r3, r3
 800df34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df36:	78fb      	ldrb	r3, [r7, #3]
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df3e:	2b80      	cmp	r3, #128	; 0x80
 800df40:	d0ef      	beq.n	800df22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df42:	4b26      	ldr	r3, [pc, #152]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f1c3 0307 	rsb	r3, r3, #7
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d009      	beq.n	800df62 <xPortStartScheduler+0xb2>
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	60bb      	str	r3, [r7, #8]
 800df60:	e7fe      	b.n	800df60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df62:	4b1e      	ldr	r3, [pc, #120]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	021b      	lsls	r3, r3, #8
 800df68:	4a1c      	ldr	r2, [pc, #112]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df6c:	4b1b      	ldr	r3, [pc, #108]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df74:	4a19      	ldr	r2, [pc, #100]	; (800dfdc <xPortStartScheduler+0x12c>)
 800df76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df80:	4b17      	ldr	r3, [pc, #92]	; (800dfe0 <xPortStartScheduler+0x130>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a16      	ldr	r2, [pc, #88]	; (800dfe0 <xPortStartScheduler+0x130>)
 800df86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df8c:	4b14      	ldr	r3, [pc, #80]	; (800dfe0 <xPortStartScheduler+0x130>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a13      	ldr	r2, [pc, #76]	; (800dfe0 <xPortStartScheduler+0x130>)
 800df92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800df96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df98:	f000 f8d6 	bl	800e148 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df9c:	4b11      	ldr	r3, [pc, #68]	; (800dfe4 <xPortStartScheduler+0x134>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dfa2:	f000 f8f5 	bl	800e190 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfa6:	4b10      	ldr	r3, [pc, #64]	; (800dfe8 <xPortStartScheduler+0x138>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a0f      	ldr	r2, [pc, #60]	; (800dfe8 <xPortStartScheduler+0x138>)
 800dfac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dfb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfb2:	f7ff ff69 	bl	800de88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfb6:	f7fe ff31 	bl	800ce1c <vTaskSwitchContext>
	prvTaskExitError();
 800dfba:	f7ff ff25 	bl	800de08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	e000ed00 	.word	0xe000ed00
 800dfcc:	410fc271 	.word	0x410fc271
 800dfd0:	410fc270 	.word	0x410fc270
 800dfd4:	e000e400 	.word	0xe000e400
 800dfd8:	24002388 	.word	0x24002388
 800dfdc:	2400238c 	.word	0x2400238c
 800dfe0:	e000ed20 	.word	0xe000ed20
 800dfe4:	24000024 	.word	0x24000024
 800dfe8:	e000ef34 	.word	0xe000ef34

0800dfec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e004:	4b0e      	ldr	r3, [pc, #56]	; (800e040 <vPortEnterCritical+0x54>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3301      	adds	r3, #1
 800e00a:	4a0d      	ldr	r2, [pc, #52]	; (800e040 <vPortEnterCritical+0x54>)
 800e00c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e00e:	4b0c      	ldr	r3, [pc, #48]	; (800e040 <vPortEnterCritical+0x54>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d10e      	bne.n	800e034 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <vPortEnterCritical+0x58>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d009      	beq.n	800e034 <vPortEnterCritical+0x48>
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	603b      	str	r3, [r7, #0]
 800e032:	e7fe      	b.n	800e032 <vPortEnterCritical+0x46>
	}
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	24000024 	.word	0x24000024
 800e044:	e000ed04 	.word	0xe000ed04

0800e048 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e04e:	4b11      	ldr	r3, [pc, #68]	; (800e094 <vPortExitCritical+0x4c>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d109      	bne.n	800e06a <vPortExitCritical+0x22>
 800e056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	607b      	str	r3, [r7, #4]
 800e068:	e7fe      	b.n	800e068 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e06a:	4b0a      	ldr	r3, [pc, #40]	; (800e094 <vPortExitCritical+0x4c>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	3b01      	subs	r3, #1
 800e070:	4a08      	ldr	r2, [pc, #32]	; (800e094 <vPortExitCritical+0x4c>)
 800e072:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e074:	4b07      	ldr	r3, [pc, #28]	; (800e094 <vPortExitCritical+0x4c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d104      	bne.n	800e086 <vPortExitCritical+0x3e>
 800e07c:	2300      	movs	r3, #0
 800e07e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e086:	bf00      	nop
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	24000024 	.word	0x24000024
	...

0800e0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0a0:	f3ef 8009 	mrs	r0, PSP
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	4b15      	ldr	r3, [pc, #84]	; (800e100 <pxCurrentTCBConst>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	f01e 0f10 	tst.w	lr, #16
 800e0b0:	bf08      	it	eq
 800e0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ba:	6010      	str	r0, [r2, #0]
 800e0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e0c4:	f380 8811 	msr	BASEPRI, r0
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f7fe fea4 	bl	800ce1c <vTaskSwitchContext>
 800e0d4:	f04f 0000 	mov.w	r0, #0
 800e0d8:	f380 8811 	msr	BASEPRI, r0
 800e0dc:	bc09      	pop	{r0, r3}
 800e0de:	6819      	ldr	r1, [r3, #0]
 800e0e0:	6808      	ldr	r0, [r1, #0]
 800e0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e6:	f01e 0f10 	tst.w	lr, #16
 800e0ea:	bf08      	it	eq
 800e0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e0f0:	f380 8809 	msr	PSP, r0
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w

0800e100 <pxCurrentTCBConst>:
 800e100:	24002160 	.word	0x24002160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop

0800e108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e120:	f7fe fdc4 	bl	800ccac <xTaskIncrementTick>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d003      	beq.n	800e132 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e12a:	4b06      	ldr	r3, [pc, #24]	; (800e144 <SysTick_Handler+0x3c>)
 800e12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e130:	601a      	str	r2, [r3, #0]
 800e132:	2300      	movs	r3, #0
 800e134:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	e000ed04 	.word	0xe000ed04

0800e148 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e148:	b480      	push	{r7}
 800e14a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e14c:	4b0b      	ldr	r3, [pc, #44]	; (800e17c <vPortSetupTimerInterrupt+0x34>)
 800e14e:	2200      	movs	r2, #0
 800e150:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e152:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <vPortSetupTimerInterrupt+0x38>)
 800e154:	2200      	movs	r2, #0
 800e156:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e158:	4b0a      	ldr	r3, [pc, #40]	; (800e184 <vPortSetupTimerInterrupt+0x3c>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a0a      	ldr	r2, [pc, #40]	; (800e188 <vPortSetupTimerInterrupt+0x40>)
 800e15e:	fba2 2303 	umull	r2, r3, r2, r3
 800e162:	099b      	lsrs	r3, r3, #6
 800e164:	4a09      	ldr	r2, [pc, #36]	; (800e18c <vPortSetupTimerInterrupt+0x44>)
 800e166:	3b01      	subs	r3, #1
 800e168:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e16a:	4b04      	ldr	r3, [pc, #16]	; (800e17c <vPortSetupTimerInterrupt+0x34>)
 800e16c:	2207      	movs	r2, #7
 800e16e:	601a      	str	r2, [r3, #0]
}
 800e170:	bf00      	nop
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop
 800e17c:	e000e010 	.word	0xe000e010
 800e180:	e000e018 	.word	0xe000e018
 800e184:	24000000 	.word	0x24000000
 800e188:	10624dd3 	.word	0x10624dd3
 800e18c:	e000e014 	.word	0xe000e014

0800e190 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e190:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e1a0 <vPortEnableVFP+0x10>
 800e194:	6801      	ldr	r1, [r0, #0]
 800e196:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e19a:	6001      	str	r1, [r0, #0]
 800e19c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e19e:	bf00      	nop
 800e1a0:	e000ed88 	.word	0xe000ed88

0800e1a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1aa:	f3ef 8305 	mrs	r3, IPSR
 800e1ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b0f      	cmp	r3, #15
 800e1b4:	d913      	bls.n	800e1de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1b6:	4a16      	ldr	r2, [pc, #88]	; (800e210 <vPortValidateInterruptPriority+0x6c>)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1c0:	4b14      	ldr	r3, [pc, #80]	; (800e214 <vPortValidateInterruptPriority+0x70>)
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	7afa      	ldrb	r2, [r7, #11]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d209      	bcs.n	800e1de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	607b      	str	r3, [r7, #4]
 800e1dc:	e7fe      	b.n	800e1dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e1de:	4b0e      	ldr	r3, [pc, #56]	; (800e218 <vPortValidateInterruptPriority+0x74>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e1e6:	4b0d      	ldr	r3, [pc, #52]	; (800e21c <vPortValidateInterruptPriority+0x78>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d909      	bls.n	800e202 <vPortValidateInterruptPriority+0x5e>
 800e1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	603b      	str	r3, [r7, #0]
 800e200:	e7fe      	b.n	800e200 <vPortValidateInterruptPriority+0x5c>
	}
 800e202:	bf00      	nop
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	e000e3f0 	.word	0xe000e3f0
 800e214:	24002388 	.word	0x24002388
 800e218:	e000ed0c 	.word	0xe000ed0c
 800e21c:	2400238c 	.word	0x2400238c

0800e220 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08a      	sub	sp, #40	; 0x28
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e22c:	f7fe fc72 	bl	800cb14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e230:	4b57      	ldr	r3, [pc, #348]	; (800e390 <pvPortMalloc+0x170>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d101      	bne.n	800e23c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e238:	f000 f90c 	bl	800e454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e23c:	4b55      	ldr	r3, [pc, #340]	; (800e394 <pvPortMalloc+0x174>)
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4013      	ands	r3, r2
 800e244:	2b00      	cmp	r3, #0
 800e246:	f040 808c 	bne.w	800e362 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d01c      	beq.n	800e28a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e250:	2208      	movs	r2, #8
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4413      	add	r3, r2
 800e256:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f003 0307 	and.w	r3, r3, #7
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d013      	beq.n	800e28a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f023 0307 	bic.w	r3, r3, #7
 800e268:	3308      	adds	r3, #8
 800e26a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f003 0307 	and.w	r3, r3, #7
 800e272:	2b00      	cmp	r3, #0
 800e274:	d009      	beq.n	800e28a <pvPortMalloc+0x6a>
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	617b      	str	r3, [r7, #20]
 800e288:	e7fe      	b.n	800e288 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d068      	beq.n	800e362 <pvPortMalloc+0x142>
 800e290:	4b41      	ldr	r3, [pc, #260]	; (800e398 <pvPortMalloc+0x178>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	429a      	cmp	r2, r3
 800e298:	d863      	bhi.n	800e362 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e29a:	4b40      	ldr	r3, [pc, #256]	; (800e39c <pvPortMalloc+0x17c>)
 800e29c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e29e:	4b3f      	ldr	r3, [pc, #252]	; (800e39c <pvPortMalloc+0x17c>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2a4:	e004      	b.n	800e2b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d903      	bls.n	800e2c2 <pvPortMalloc+0xa2>
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1f1      	bne.n	800e2a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2c2:	4b33      	ldr	r3, [pc, #204]	; (800e390 <pvPortMalloc+0x170>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d04a      	beq.n	800e362 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2cc:	6a3b      	ldr	r3, [r7, #32]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	4413      	add	r3, r2
 800e2d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	1ad2      	subs	r2, r2, r3
 800e2e6:	2308      	movs	r3, #8
 800e2e8:	005b      	lsls	r3, r3, #1
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d91e      	bls.n	800e32c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	f003 0307 	and.w	r3, r3, #7
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d009      	beq.n	800e314 <pvPortMalloc+0xf4>
 800e300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	613b      	str	r3, [r7, #16]
 800e312:	e7fe      	b.n	800e312 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	1ad2      	subs	r2, r2, r3
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e326:	69b8      	ldr	r0, [r7, #24]
 800e328:	f000 f8f6 	bl	800e518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e32c:	4b1a      	ldr	r3, [pc, #104]	; (800e398 <pvPortMalloc+0x178>)
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	4a18      	ldr	r2, [pc, #96]	; (800e398 <pvPortMalloc+0x178>)
 800e338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e33a:	4b17      	ldr	r3, [pc, #92]	; (800e398 <pvPortMalloc+0x178>)
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	4b18      	ldr	r3, [pc, #96]	; (800e3a0 <pvPortMalloc+0x180>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d203      	bcs.n	800e34e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e346:	4b14      	ldr	r3, [pc, #80]	; (800e398 <pvPortMalloc+0x178>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a15      	ldr	r2, [pc, #84]	; (800e3a0 <pvPortMalloc+0x180>)
 800e34c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e350:	685a      	ldr	r2, [r3, #4]
 800e352:	4b10      	ldr	r3, [pc, #64]	; (800e394 <pvPortMalloc+0x174>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	431a      	orrs	r2, r3
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	2200      	movs	r2, #0
 800e360:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e362:	f7fe fbe5 	bl	800cb30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	f003 0307 	and.w	r3, r3, #7
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d009      	beq.n	800e384 <pvPortMalloc+0x164>
 800e370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e374:	f383 8811 	msr	BASEPRI, r3
 800e378:	f3bf 8f6f 	isb	sy
 800e37c:	f3bf 8f4f 	dsb	sy
 800e380:	60fb      	str	r3, [r7, #12]
 800e382:	e7fe      	b.n	800e382 <pvPortMalloc+0x162>
	return pvReturn;
 800e384:	69fb      	ldr	r3, [r7, #28]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3728      	adds	r7, #40	; 0x28
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	2400a398 	.word	0x2400a398
 800e394:	2400a3a4 	.word	0x2400a3a4
 800e398:	2400a39c 	.word	0x2400a39c
 800e39c:	2400a390 	.word	0x2400a390
 800e3a0:	2400a3a0 	.word	0x2400a3a0

0800e3a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b086      	sub	sp, #24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d046      	beq.n	800e444 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3b6:	2308      	movs	r3, #8
 800e3b8:	425b      	negs	r3, r3
 800e3ba:	697a      	ldr	r2, [r7, #20]
 800e3bc:	4413      	add	r3, r2
 800e3be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	685a      	ldr	r2, [r3, #4]
 800e3c8:	4b20      	ldr	r3, [pc, #128]	; (800e44c <vPortFree+0xa8>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4013      	ands	r3, r2
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d109      	bne.n	800e3e6 <vPortFree+0x42>
 800e3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	60fb      	str	r3, [r7, #12]
 800e3e4:	e7fe      	b.n	800e3e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d009      	beq.n	800e402 <vPortFree+0x5e>
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	60bb      	str	r3, [r7, #8]
 800e400:	e7fe      	b.n	800e400 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	685a      	ldr	r2, [r3, #4]
 800e406:	4b11      	ldr	r3, [pc, #68]	; (800e44c <vPortFree+0xa8>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4013      	ands	r3, r2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d019      	beq.n	800e444 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d115      	bne.n	800e444 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	685a      	ldr	r2, [r3, #4]
 800e41c:	4b0b      	ldr	r3, [pc, #44]	; (800e44c <vPortFree+0xa8>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	43db      	mvns	r3, r3
 800e422:	401a      	ands	r2, r3
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e428:	f7fe fb74 	bl	800cb14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	685a      	ldr	r2, [r3, #4]
 800e430:	4b07      	ldr	r3, [pc, #28]	; (800e450 <vPortFree+0xac>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4413      	add	r3, r2
 800e436:	4a06      	ldr	r2, [pc, #24]	; (800e450 <vPortFree+0xac>)
 800e438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e43a:	6938      	ldr	r0, [r7, #16]
 800e43c:	f000 f86c 	bl	800e518 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e440:	f7fe fb76 	bl	800cb30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e444:	bf00      	nop
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	2400a3a4 	.word	0x2400a3a4
 800e450:	2400a39c 	.word	0x2400a39c

0800e454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e45a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e45e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e460:	4b27      	ldr	r3, [pc, #156]	; (800e500 <prvHeapInit+0xac>)
 800e462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00c      	beq.n	800e488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3307      	adds	r3, #7
 800e472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f023 0307 	bic.w	r3, r3, #7
 800e47a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	4a1f      	ldr	r2, [pc, #124]	; (800e500 <prvHeapInit+0xac>)
 800e484:	4413      	add	r3, r2
 800e486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e48c:	4a1d      	ldr	r2, [pc, #116]	; (800e504 <prvHeapInit+0xb0>)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e492:	4b1c      	ldr	r3, [pc, #112]	; (800e504 <prvHeapInit+0xb0>)
 800e494:	2200      	movs	r2, #0
 800e496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	4413      	add	r3, r2
 800e49e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4a0:	2208      	movs	r2, #8
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	1a9b      	subs	r3, r3, r2
 800e4a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f023 0307 	bic.w	r3, r3, #7
 800e4ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	4a15      	ldr	r2, [pc, #84]	; (800e508 <prvHeapInit+0xb4>)
 800e4b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4b6:	4b14      	ldr	r3, [pc, #80]	; (800e508 <prvHeapInit+0xb4>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4be:	4b12      	ldr	r3, [pc, #72]	; (800e508 <prvHeapInit+0xb4>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4d4:	4b0c      	ldr	r3, [pc, #48]	; (800e508 <prvHeapInit+0xb4>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	4a0a      	ldr	r2, [pc, #40]	; (800e50c <prvHeapInit+0xb8>)
 800e4e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	4a09      	ldr	r2, [pc, #36]	; (800e510 <prvHeapInit+0xbc>)
 800e4ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4ec:	4b09      	ldr	r3, [pc, #36]	; (800e514 <prvHeapInit+0xc0>)
 800e4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e4f2:	601a      	str	r2, [r3, #0]
}
 800e4f4:	bf00      	nop
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	24002390 	.word	0x24002390
 800e504:	2400a390 	.word	0x2400a390
 800e508:	2400a398 	.word	0x2400a398
 800e50c:	2400a3a0 	.word	0x2400a3a0
 800e510:	2400a39c 	.word	0x2400a39c
 800e514:	2400a3a4 	.word	0x2400a3a4

0800e518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e520:	4b28      	ldr	r3, [pc, #160]	; (800e5c4 <prvInsertBlockIntoFreeList+0xac>)
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	e002      	b.n	800e52c <prvInsertBlockIntoFreeList+0x14>
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	60fb      	str	r3, [r7, #12]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	429a      	cmp	r2, r3
 800e534:	d8f7      	bhi.n	800e526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	4413      	add	r3, r2
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	429a      	cmp	r2, r3
 800e546:	d108      	bne.n	800e55a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	441a      	add	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	441a      	add	r2, r3
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d118      	bne.n	800e5a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	4b15      	ldr	r3, [pc, #84]	; (800e5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	429a      	cmp	r2, r3
 800e578:	d00d      	beq.n	800e596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	441a      	add	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	e008      	b.n	800e5a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e596:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	e003      	b.n	800e5a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d002      	beq.n	800e5b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5b6:	bf00      	nop
 800e5b8:	3714      	adds	r7, #20
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	2400a390 	.word	0x2400a390
 800e5c8:	2400a398 	.word	0x2400a398

0800e5cc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800e5d4:	4b29      	ldr	r3, [pc, #164]	; (800e67c <tcpip_thread+0xb0>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d005      	beq.n	800e5e8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800e5dc:	4b27      	ldr	r3, [pc, #156]	; (800e67c <tcpip_thread+0xb0>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a27      	ldr	r2, [pc, #156]	; (800e680 <tcpip_thread+0xb4>)
 800e5e2:	6812      	ldr	r2, [r2, #0]
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800e5e8:	4826      	ldr	r0, [pc, #152]	; (800e684 <tcpip_thread+0xb8>)
 800e5ea:	f009 f8f5 	bl	80177d8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800e5ee:	4825      	ldr	r0, [pc, #148]	; (800e684 <tcpip_thread+0xb8>)
 800e5f0:	f009 f901 	bl	80177f6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800e5f4:	f107 030c 	add.w	r3, r7, #12
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4823      	ldr	r0, [pc, #140]	; (800e688 <tcpip_thread+0xbc>)
 800e5fc:	f006 fba4 	bl	8014d48 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e600:	4820      	ldr	r0, [pc, #128]	; (800e684 <tcpip_thread+0xb8>)
 800e602:	f009 f8e9 	bl	80177d8 <sys_mutex_lock>
    if (msg == NULL) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d106      	bne.n	800e61a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e60c:	4b1f      	ldr	r3, [pc, #124]	; (800e68c <tcpip_thread+0xc0>)
 800e60e:	2269      	movs	r2, #105	; 0x69
 800e610:	491f      	ldr	r1, [pc, #124]	; (800e690 <tcpip_thread+0xc4>)
 800e612:	4820      	ldr	r0, [pc, #128]	; (800e694 <tcpip_thread+0xc8>)
 800e614:	f009 f986 	bl	8017924 <iprintf>
      continue;
 800e618:	e02f      	b.n	800e67a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d011      	beq.n	800e646 <tcpip_thread+0x7a>
 800e622:	2b04      	cmp	r3, #4
 800e624:	d01b      	beq.n	800e65e <tcpip_thread+0x92>
 800e626:	2b02      	cmp	r3, #2
 800e628:	d120      	bne.n	800e66c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	6850      	ldr	r0, [r2, #4]
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	6892      	ldr	r2, [r2, #8]
 800e636:	4611      	mov	r1, r2
 800e638:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	4619      	mov	r1, r3
 800e63e:	2009      	movs	r0, #9
 800e640:	f000 fe60 	bl	800f304 <memp_free>
      break;
 800e644:	e019      	b.n	800e67a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	6892      	ldr	r2, [r2, #8]
 800e64e:	4610      	mov	r0, r2
 800e650:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	4619      	mov	r1, r3
 800e656:	2008      	movs	r0, #8
 800e658:	f000 fe54 	bl	800f304 <memp_free>
      break;
 800e65c:	e00d      	b.n	800e67a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	6892      	ldr	r2, [r2, #8]
 800e666:	4610      	mov	r0, r2
 800e668:	4798      	blx	r3
      break;
 800e66a:	e006      	b.n	800e67a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e66c:	4b07      	ldr	r3, [pc, #28]	; (800e68c <tcpip_thread+0xc0>)
 800e66e:	229b      	movs	r2, #155	; 0x9b
 800e670:	4907      	ldr	r1, [pc, #28]	; (800e690 <tcpip_thread+0xc4>)
 800e672:	4808      	ldr	r0, [pc, #32]	; (800e694 <tcpip_thread+0xc8>)
 800e674:	f009 f956 	bl	8017924 <iprintf>
      break;
 800e678:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800e67a:	e7b8      	b.n	800e5ee <tcpip_thread+0x22>
 800e67c:	2400a3a8 	.word	0x2400a3a8
 800e680:	2400a3ac 	.word	0x2400a3ac
 800e684:	2400a84c 	.word	0x2400a84c
 800e688:	2400a3b0 	.word	0x2400a3b0
 800e68c:	08018a7c 	.word	0x08018a7c
 800e690:	08018aac 	.word	0x08018aac
 800e694:	08018acc 	.word	0x08018acc

0800e698 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e6a4:	481a      	ldr	r0, [pc, #104]	; (800e710 <tcpip_inpkt+0x78>)
 800e6a6:	f009 f85b 	bl	8017760 <sys_mbox_valid>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d105      	bne.n	800e6bc <tcpip_inpkt+0x24>
 800e6b0:	4b18      	ldr	r3, [pc, #96]	; (800e714 <tcpip_inpkt+0x7c>)
 800e6b2:	22b5      	movs	r2, #181	; 0xb5
 800e6b4:	4918      	ldr	r1, [pc, #96]	; (800e718 <tcpip_inpkt+0x80>)
 800e6b6:	4819      	ldr	r0, [pc, #100]	; (800e71c <tcpip_inpkt+0x84>)
 800e6b8:	f009 f934 	bl	8017924 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e6bc:	2009      	movs	r0, #9
 800e6be:	f000 fdab 	bl	800f218 <memp_malloc>
 800e6c2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d102      	bne.n	800e6d0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ce:	e01a      	b.n	800e706 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e6e8:	6979      	ldr	r1, [r7, #20]
 800e6ea:	4809      	ldr	r0, [pc, #36]	; (800e710 <tcpip_inpkt+0x78>)
 800e6ec:	f008 ffdf 	bl	80176ae <sys_mbox_trypost>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d006      	beq.n	800e704 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e6f6:	6979      	ldr	r1, [r7, #20]
 800e6f8:	2009      	movs	r0, #9
 800e6fa:	f000 fe03 	bl	800f304 <memp_free>
    return ERR_MEM;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	e000      	b.n	800e706 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e704:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e706:	4618      	mov	r0, r3
 800e708:	3718      	adds	r7, #24
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	2400a3b0 	.word	0x2400a3b0
 800e714:	08018a7c 	.word	0x08018a7c
 800e718:	08018af4 	.word	0x08018af4
 800e71c:	08018acc 	.word	0x08018acc

0800e720 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800e730:	f003 0318 	and.w	r3, r3, #24
 800e734:	2b00      	cmp	r3, #0
 800e736:	d006      	beq.n	800e746 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e738:	4a08      	ldr	r2, [pc, #32]	; (800e75c <tcpip_input+0x3c>)
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff ffab 	bl	800e698 <tcpip_inpkt>
 800e742:	4603      	mov	r3, r0
 800e744:	e005      	b.n	800e752 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800e746:	4a06      	ldr	r2, [pc, #24]	; (800e760 <tcpip_input+0x40>)
 800e748:	6839      	ldr	r1, [r7, #0]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7ff ffa4 	bl	800e698 <tcpip_inpkt>
 800e750:	4603      	mov	r3, r0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	08017489 	.word	0x08017489
 800e760:	0801644d 	.word	0x0801644d

0800e764 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	4613      	mov	r3, r2
 800e770:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e772:	481d      	ldr	r0, [pc, #116]	; (800e7e8 <tcpip_callback_with_block+0x84>)
 800e774:	f008 fff4 	bl	8017760 <sys_mbox_valid>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d105      	bne.n	800e78a <tcpip_callback_with_block+0x26>
 800e77e:	4b1b      	ldr	r3, [pc, #108]	; (800e7ec <tcpip_callback_with_block+0x88>)
 800e780:	22ee      	movs	r2, #238	; 0xee
 800e782:	491b      	ldr	r1, [pc, #108]	; (800e7f0 <tcpip_callback_with_block+0x8c>)
 800e784:	481b      	ldr	r0, [pc, #108]	; (800e7f4 <tcpip_callback_with_block+0x90>)
 800e786:	f009 f8cd 	bl	8017924 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e78a:	2008      	movs	r0, #8
 800e78c:	f000 fd44 	bl	800f218 <memp_malloc>
 800e790:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d102      	bne.n	800e79e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800e798:	f04f 33ff 	mov.w	r3, #4294967295
 800e79c:	e01f      	b.n	800e7de <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2203      	movs	r2, #3
 800e7a2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	609a      	str	r2, [r3, #8]
  if (block) {
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d004      	beq.n	800e7c0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800e7b6:	6979      	ldr	r1, [r7, #20]
 800e7b8:	480b      	ldr	r0, [pc, #44]	; (800e7e8 <tcpip_callback_with_block+0x84>)
 800e7ba:	f008 ff63 	bl	8017684 <sys_mbox_post>
 800e7be:	e00d      	b.n	800e7dc <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e7c0:	6979      	ldr	r1, [r7, #20]
 800e7c2:	4809      	ldr	r0, [pc, #36]	; (800e7e8 <tcpip_callback_with_block+0x84>)
 800e7c4:	f008 ff73 	bl	80176ae <sys_mbox_trypost>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d006      	beq.n	800e7dc <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e7ce:	6979      	ldr	r1, [r7, #20]
 800e7d0:	2008      	movs	r0, #8
 800e7d2:	f000 fd97 	bl	800f304 <memp_free>
      return ERR_MEM;
 800e7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7da:	e000      	b.n	800e7de <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	2400a3b0 	.word	0x2400a3b0
 800e7ec:	08018a7c 	.word	0x08018a7c
 800e7f0:	08018af4 	.word	0x08018af4
 800e7f4:	08018acc 	.word	0x08018acc

0800e7f8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af02      	add	r7, sp, #8
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e802:	f000 f923 	bl	800ea4c <lwip_init>

  tcpip_init_done = initfunc;
 800e806:	4a17      	ldr	r2, [pc, #92]	; (800e864 <tcpip_init+0x6c>)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e80c:	4a16      	ldr	r2, [pc, #88]	; (800e868 <tcpip_init+0x70>)
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e812:	2106      	movs	r1, #6
 800e814:	4815      	ldr	r0, [pc, #84]	; (800e86c <tcpip_init+0x74>)
 800e816:	f008 ff13 	bl	8017640 <sys_mbox_new>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d006      	beq.n	800e82e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e820:	4b13      	ldr	r3, [pc, #76]	; (800e870 <tcpip_init+0x78>)
 800e822:	f240 12d5 	movw	r2, #469	; 0x1d5
 800e826:	4913      	ldr	r1, [pc, #76]	; (800e874 <tcpip_init+0x7c>)
 800e828:	4813      	ldr	r0, [pc, #76]	; (800e878 <tcpip_init+0x80>)
 800e82a:	f009 f87b 	bl	8017924 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e82e:	4813      	ldr	r0, [pc, #76]	; (800e87c <tcpip_init+0x84>)
 800e830:	f008 ffb6 	bl	80177a0 <sys_mutex_new>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d006      	beq.n	800e848 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e83a:	4b0d      	ldr	r3, [pc, #52]	; (800e870 <tcpip_init+0x78>)
 800e83c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800e840:	490f      	ldr	r1, [pc, #60]	; (800e880 <tcpip_init+0x88>)
 800e842:	480d      	ldr	r0, [pc, #52]	; (800e878 <tcpip_init+0x80>)
 800e844:	f009 f86e 	bl	8017924 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e848:	2300      	movs	r3, #0
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e850:	2200      	movs	r2, #0
 800e852:	490c      	ldr	r1, [pc, #48]	; (800e884 <tcpip_init+0x8c>)
 800e854:	480c      	ldr	r0, [pc, #48]	; (800e888 <tcpip_init+0x90>)
 800e856:	f008 ffdb 	bl	8017810 <sys_thread_new>
}
 800e85a:	bf00      	nop
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	2400a3a8 	.word	0x2400a3a8
 800e868:	2400a3ac 	.word	0x2400a3ac
 800e86c:	2400a3b0 	.word	0x2400a3b0
 800e870:	08018a7c 	.word	0x08018a7c
 800e874:	08018b04 	.word	0x08018b04
 800e878:	08018acc 	.word	0x08018acc
 800e87c:	2400a84c 	.word	0x2400a84c
 800e880:	08018b28 	.word	0x08018b28
 800e884:	0800e5cd 	.word	0x0800e5cd
 800e888:	08018b4c 	.word	0x08018b4c

0800e88c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800e896:	88fb      	ldrh	r3, [r7, #6]
 800e898:	ba5b      	rev16	r3, r3
 800e89a:	b29b      	uxth	r3, r3
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	061a      	lsls	r2, r3, #24
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	021b      	lsls	r3, r3, #8
 800e8b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8bc:	431a      	orrs	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	0a1b      	lsrs	r3, r3, #8
 800e8c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e8c6:	431a      	orrs	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	0e1b      	lsrs	r3, r3, #24
 800e8cc:	4313      	orrs	r3, r2
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e8da:	b480      	push	{r7}
 800e8dc:	b089      	sub	sp, #36	; 0x24
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	f003 0301 	and.w	r3, r3, #1
 800e8f6:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00d      	beq.n	800e91a <lwip_standard_chksum+0x40>
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	dd0a      	ble.n	800e91a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e904:	69fa      	ldr	r2, [r7, #28]
 800e906:	1c53      	adds	r3, r2, #1
 800e908:	61fb      	str	r3, [r7, #28]
 800e90a:	f107 030e 	add.w	r3, r7, #14
 800e90e:	3301      	adds	r3, #1
 800e910:	7812      	ldrb	r2, [r2, #0]
 800e912:	701a      	strb	r2, [r3, #0]
    len--;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	3b01      	subs	r3, #1
 800e918:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e91e:	e00a      	b.n	800e936 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	1c9a      	adds	r2, r3, #2
 800e924:	61ba      	str	r2, [r7, #24]
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	461a      	mov	r2, r3
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	4413      	add	r3, r2
 800e92e:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	3b02      	subs	r3, #2
 800e934:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	dcf1      	bgt.n	800e920 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dd04      	ble.n	800e94c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e942:	f107 030e 	add.w	r3, r7, #14
 800e946:	69ba      	ldr	r2, [r7, #24]
 800e948:	7812      	ldrb	r2, [r2, #0]
 800e94a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e94c:	89fb      	ldrh	r3, [r7, #14]
 800e94e:	461a      	mov	r2, r3
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	4413      	add	r3, r2
 800e954:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	0c1a      	lsrs	r2, r3, #16
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	4413      	add	r3, r2
 800e960:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	0c1a      	lsrs	r2, r3, #16
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	b29b      	uxth	r3, r3
 800e96a:	4413      	add	r3, r2
 800e96c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d007      	beq.n	800e984 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	021b      	lsls	r3, r3, #8
 800e978:	b29a      	uxth	r2, r3
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	0a1b      	lsrs	r3, r3, #8
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	4313      	orrs	r3, r2
 800e982:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	b29b      	uxth	r3, r3
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3724      	adds	r7, #36	; 0x24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	460b      	mov	r3, r1
 800e99e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e9a0:	887b      	ldrh	r3, [r7, #2]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ff98 	bl	800e8da <lwip_standard_chksum>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	43db      	mvns	r3, r3
 800e9ae:	b29b      	uxth	r3, r3
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	617b      	str	r3, [r7, #20]
  swapped = 0;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	73fb      	strb	r3, [r7, #15]
  for (q = p; q != NULL; q = q->next) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	613b      	str	r3, [r7, #16]
 800e9cc:	e028      	b.n	800ea20 <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	895b      	ldrh	r3, [r3, #10]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f7ff ff7e 	bl	800e8da <lwip_standard_chksum>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	0c1a      	lsrs	r2, r3, #16
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	4413      	add	r3, r2
 800e9f2:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	895b      	ldrh	r3, [r3, #10]
 800e9f8:	f003 0301 	and.w	r3, r3, #1
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00b      	beq.n	800ea1a <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
 800ea02:	7bfb      	ldrb	r3, [r7, #15]
 800ea04:	f1c3 0301 	rsb	r3, r3, #1
 800ea08:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	021b      	lsls	r3, r3, #8
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	4313      	orrs	r3, r2
 800ea18:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	613b      	str	r3, [r7, #16]
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1d3      	bne.n	800e9ce <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d007      	beq.n	800ea3c <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	021b      	lsls	r3, r3, #8
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	0a1b      	lsrs	r3, r3, #8
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	43db      	mvns	r3, r3
 800ea42:	b29b      	uxth	r3, r3
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3718      	adds	r7, #24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ea56:	f008 fe95 	bl	8017784 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ea5a:	f000 f8a7 	bl	800ebac <mem_init>
  memp_init();
 800ea5e:	f000 fb6d 	bl	800f13c <memp_init>
  pbuf_init();
  netif_init();
 800ea62:	f000 fc79 	bl	800f358 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ea66:	f006 f995 	bl	8014d94 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ea6a:	f001 fc95 	bl	8010398 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800ea6e:	f006 f827 	bl	8014ac0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ea72:	bf00      	nop
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
	...

0800ea7c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ea84:	4b40      	ldr	r3, [pc, #256]	; (800eb88 <plug_holes+0x10c>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d206      	bcs.n	800ea9c <plug_holes+0x20>
 800ea8e:	4b3f      	ldr	r3, [pc, #252]	; (800eb8c <plug_holes+0x110>)
 800ea90:	f240 125d 	movw	r2, #349	; 0x15d
 800ea94:	493e      	ldr	r1, [pc, #248]	; (800eb90 <plug_holes+0x114>)
 800ea96:	483f      	ldr	r0, [pc, #252]	; (800eb94 <plug_holes+0x118>)
 800ea98:	f008 ff44 	bl	8017924 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ea9c:	4b3e      	ldr	r3, [pc, #248]	; (800eb98 <plug_holes+0x11c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d306      	bcc.n	800eab4 <plug_holes+0x38>
 800eaa6:	4b39      	ldr	r3, [pc, #228]	; (800eb8c <plug_holes+0x110>)
 800eaa8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800eaac:	493b      	ldr	r1, [pc, #236]	; (800eb9c <plug_holes+0x120>)
 800eaae:	4839      	ldr	r0, [pc, #228]	; (800eb94 <plug_holes+0x118>)
 800eab0:	f008 ff38 	bl	8017924 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	791b      	ldrb	r3, [r3, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d006      	beq.n	800eaca <plug_holes+0x4e>
 800eabc:	4b33      	ldr	r3, [pc, #204]	; (800eb8c <plug_holes+0x110>)
 800eabe:	f240 125f 	movw	r2, #351	; 0x15f
 800eac2:	4937      	ldr	r1, [pc, #220]	; (800eba0 <plug_holes+0x124>)
 800eac4:	4833      	ldr	r0, [pc, #204]	; (800eb94 <plug_holes+0x118>)
 800eac6:	f008 ff2d 	bl	8017924 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	881b      	ldrh	r3, [r3, #0]
 800eace:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ead2:	d906      	bls.n	800eae2 <plug_holes+0x66>
 800ead4:	4b2d      	ldr	r3, [pc, #180]	; (800eb8c <plug_holes+0x110>)
 800ead6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800eada:	4932      	ldr	r1, [pc, #200]	; (800eba4 <plug_holes+0x128>)
 800eadc:	482d      	ldr	r0, [pc, #180]	; (800eb94 <plug_holes+0x118>)
 800eade:	f008 ff21 	bl	8017924 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800eae2:	4b29      	ldr	r3, [pc, #164]	; (800eb88 <plug_holes+0x10c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	8812      	ldrh	r2, [r2, #0]
 800eaea:	4413      	add	r3, r2
 800eaec:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d01f      	beq.n	800eb36 <plug_holes+0xba>
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	791b      	ldrb	r3, [r3, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d11b      	bne.n	800eb36 <plug_holes+0xba>
 800eafe:	4b26      	ldr	r3, [pc, #152]	; (800eb98 <plug_holes+0x11c>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d016      	beq.n	800eb36 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800eb08:	4b27      	ldr	r3, [pc, #156]	; (800eba8 <plug_holes+0x12c>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d102      	bne.n	800eb18 <plug_holes+0x9c>
      lfree = mem;
 800eb12:	4a25      	ldr	r2, [pc, #148]	; (800eba8 <plug_holes+0x12c>)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	881a      	ldrh	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4a19      	ldr	r2, [pc, #100]	; (800eb88 <plug_holes+0x10c>)
 800eb24:	6812      	ldr	r2, [r2, #0]
 800eb26:	1a99      	subs	r1, r3, r2
 800eb28:	4b17      	ldr	r3, [pc, #92]	; (800eb88 <plug_holes+0x10c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	68fa      	ldr	r2, [r7, #12]
 800eb2e:	8812      	ldrh	r2, [r2, #0]
 800eb30:	4413      	add	r3, r2
 800eb32:	b28a      	uxth	r2, r1
 800eb34:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800eb36:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <plug_holes+0x10c>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	8852      	ldrh	r2, [r2, #2]
 800eb3e:	4413      	add	r3, r2
 800eb40:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d01a      	beq.n	800eb80 <plug_holes+0x104>
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	791b      	ldrb	r3, [r3, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d116      	bne.n	800eb80 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800eb52:	4b15      	ldr	r3, [pc, #84]	; (800eba8 <plug_holes+0x12c>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d102      	bne.n	800eb62 <plug_holes+0xe6>
      lfree = pmem;
 800eb5c:	4a12      	ldr	r2, [pc, #72]	; (800eba8 <plug_holes+0x12c>)
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	881a      	ldrh	r2, [r3, #0]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	4a06      	ldr	r2, [pc, #24]	; (800eb88 <plug_holes+0x10c>)
 800eb6e:	6812      	ldr	r2, [r2, #0]
 800eb70:	1a99      	subs	r1, r3, r2
 800eb72:	4b05      	ldr	r3, [pc, #20]	; (800eb88 <plug_holes+0x10c>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	8812      	ldrh	r2, [r2, #0]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	b28a      	uxth	r2, r1
 800eb7e:	805a      	strh	r2, [r3, #2]
  }
}
 800eb80:	bf00      	nop
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	2400a3b4 	.word	0x2400a3b4
 800eb8c:	08018b5c 	.word	0x08018b5c
 800eb90:	08018b8c 	.word	0x08018b8c
 800eb94:	08018ba4 	.word	0x08018ba4
 800eb98:	2400a3b8 	.word	0x2400a3b8
 800eb9c:	08018bcc 	.word	0x08018bcc
 800eba0:	08018be8 	.word	0x08018be8
 800eba4:	08018c04 	.word	0x08018c04
 800eba8:	2400a3bc 	.word	0x2400a3bc

0800ebac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <mem_init+0x78>)
 800ebb4:	4a1c      	ldr	r2, [pc, #112]	; (800ec28 <mem_init+0x7c>)
 800ebb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ebb8:	4b1a      	ldr	r3, [pc, #104]	; (800ec24 <mem_init+0x78>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ebc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ebd2:	4b14      	ldr	r3, [pc, #80]	; (800ec24 <mem_init+0x78>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800ebda:	4a14      	ldr	r2, [pc, #80]	; (800ec2c <mem_init+0x80>)
 800ebdc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ebde:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <mem_init+0x80>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ebe6:	4b11      	ldr	r3, [pc, #68]	; (800ec2c <mem_init+0x80>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ebee:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ebf0:	4b0e      	ldr	r3, [pc, #56]	; (800ec2c <mem_init+0x80>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ebf8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ebfa:	4b0a      	ldr	r3, [pc, #40]	; (800ec24 <mem_init+0x78>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4a0c      	ldr	r2, [pc, #48]	; (800ec30 <mem_init+0x84>)
 800ec00:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ec02:	480c      	ldr	r0, [pc, #48]	; (800ec34 <mem_init+0x88>)
 800ec04:	f008 fdcc 	bl	80177a0 <sys_mutex_new>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d006      	beq.n	800ec1c <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ec0e:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <mem_init+0x8c>)
 800ec10:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ec14:	4909      	ldr	r1, [pc, #36]	; (800ec3c <mem_init+0x90>)
 800ec16:	480a      	ldr	r0, [pc, #40]	; (800ec40 <mem_init+0x94>)
 800ec18:	f008 fe84 	bl	8017924 <iprintf>
  }
}
 800ec1c:	bf00      	nop
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	2400a3b4 	.word	0x2400a3b4
 800ec28:	30044000 	.word	0x30044000
 800ec2c:	2400a3b8 	.word	0x2400a3b8
 800ec30:	2400a3bc 	.word	0x2400a3bc
 800ec34:	2400a3c0 	.word	0x2400a3c0
 800ec38:	08018b5c 	.word	0x08018b5c
 800ec3c:	08018c30 	.word	0x08018c30
 800ec40:	08018ba4 	.word	0x08018ba4

0800ec44 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d050      	beq.n	800ecf4 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f003 0303 	and.w	r3, r3, #3
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d006      	beq.n	800ec6a <mem_free+0x26>
 800ec5c:	4b27      	ldr	r3, [pc, #156]	; (800ecfc <mem_free+0xb8>)
 800ec5e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800ec62:	4927      	ldr	r1, [pc, #156]	; (800ed00 <mem_free+0xbc>)
 800ec64:	4827      	ldr	r0, [pc, #156]	; (800ed04 <mem_free+0xc0>)
 800ec66:	f008 fe5d 	bl	8017924 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ec6a:	4b27      	ldr	r3, [pc, #156]	; (800ed08 <mem_free+0xc4>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d304      	bcc.n	800ec7e <mem_free+0x3a>
 800ec74:	4b25      	ldr	r3, [pc, #148]	; (800ed0c <mem_free+0xc8>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d306      	bcc.n	800ec8c <mem_free+0x48>
 800ec7e:	4b1f      	ldr	r3, [pc, #124]	; (800ecfc <mem_free+0xb8>)
 800ec80:	f240 12af 	movw	r2, #431	; 0x1af
 800ec84:	4922      	ldr	r1, [pc, #136]	; (800ed10 <mem_free+0xcc>)
 800ec86:	481f      	ldr	r0, [pc, #124]	; (800ed04 <mem_free+0xc0>)
 800ec88:	f008 fe4c 	bl	8017924 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ec8c:	4b1e      	ldr	r3, [pc, #120]	; (800ed08 <mem_free+0xc4>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d304      	bcc.n	800eca0 <mem_free+0x5c>
 800ec96:	4b1d      	ldr	r3, [pc, #116]	; (800ed0c <mem_free+0xc8>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d306      	bcc.n	800ecae <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800eca0:	f008 fddc 	bl	801785c <sys_arch_protect>
 800eca4:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800eca6:	68b8      	ldr	r0, [r7, #8]
 800eca8:	f008 fde6 	bl	8017878 <sys_arch_unprotect>
    return;
 800ecac:	e023      	b.n	800ecf6 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ecae:	4819      	ldr	r0, [pc, #100]	; (800ed14 <mem_free+0xd0>)
 800ecb0:	f008 fd92 	bl	80177d8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	3b08      	subs	r3, #8
 800ecb8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	791b      	ldrb	r3, [r3, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d106      	bne.n	800ecd0 <mem_free+0x8c>
 800ecc2:	4b0e      	ldr	r3, [pc, #56]	; (800ecfc <mem_free+0xb8>)
 800ecc4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800ecc8:	4913      	ldr	r1, [pc, #76]	; (800ed18 <mem_free+0xd4>)
 800ecca:	480e      	ldr	r0, [pc, #56]	; (800ed04 <mem_free+0xc0>)
 800eccc:	f008 fe2a 	bl	8017924 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ecd6:	4b11      	ldr	r3, [pc, #68]	; (800ed1c <mem_free+0xd8>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d202      	bcs.n	800ece6 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ece0:	4a0e      	ldr	r2, [pc, #56]	; (800ed1c <mem_free+0xd8>)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f7ff fec8 	bl	800ea7c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ecec:	4809      	ldr	r0, [pc, #36]	; (800ed14 <mem_free+0xd0>)
 800ecee:	f008 fd82 	bl	80177f6 <sys_mutex_unlock>
 800ecf2:	e000      	b.n	800ecf6 <mem_free+0xb2>
    return;
 800ecf4:	bf00      	nop
}
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	08018b5c 	.word	0x08018b5c
 800ed00:	08018c4c 	.word	0x08018c4c
 800ed04:	08018ba4 	.word	0x08018ba4
 800ed08:	2400a3b4 	.word	0x2400a3b4
 800ed0c:	2400a3b8 	.word	0x2400a3b8
 800ed10:	08018c70 	.word	0x08018c70
 800ed14:	2400a3c0 	.word	0x2400a3c0
 800ed18:	08018c88 	.word	0x08018c88
 800ed1c:	2400a3bc 	.word	0x2400a3bc

0800ed20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ed2c:	887b      	ldrh	r3, [r7, #2]
 800ed2e:	3303      	adds	r3, #3
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	f023 0303 	bic.w	r3, r3, #3
 800ed36:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800ed38:	887b      	ldrh	r3, [r7, #2]
 800ed3a:	2b0b      	cmp	r3, #11
 800ed3c:	d801      	bhi.n	800ed42 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ed3e:	230c      	movs	r3, #12
 800ed40:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ed42:	887b      	ldrh	r3, [r7, #2]
 800ed44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed48:	d901      	bls.n	800ed4e <mem_trim+0x2e>
    return NULL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e0bd      	b.n	800eeca <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ed4e:	4b61      	ldr	r3, [pc, #388]	; (800eed4 <mem_trim+0x1b4>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d304      	bcc.n	800ed62 <mem_trim+0x42>
 800ed58:	4b5f      	ldr	r3, [pc, #380]	; (800eed8 <mem_trim+0x1b8>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d306      	bcc.n	800ed70 <mem_trim+0x50>
 800ed62:	4b5e      	ldr	r3, [pc, #376]	; (800eedc <mem_trim+0x1bc>)
 800ed64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ed68:	495d      	ldr	r1, [pc, #372]	; (800eee0 <mem_trim+0x1c0>)
 800ed6a:	485e      	ldr	r0, [pc, #376]	; (800eee4 <mem_trim+0x1c4>)
 800ed6c:	f008 fdda 	bl	8017924 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ed70:	4b58      	ldr	r3, [pc, #352]	; (800eed4 <mem_trim+0x1b4>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d304      	bcc.n	800ed84 <mem_trim+0x64>
 800ed7a:	4b57      	ldr	r3, [pc, #348]	; (800eed8 <mem_trim+0x1b8>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d307      	bcc.n	800ed94 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800ed84:	f008 fd6a 	bl	801785c <sys_arch_protect>
 800ed88:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f008 fd74 	bl	8017878 <sys_arch_unprotect>
    return rmem;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	e09a      	b.n	800eeca <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	3b08      	subs	r3, #8
 800ed98:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	4a4d      	ldr	r2, [pc, #308]	; (800eed4 <mem_trim+0x1b4>)
 800ed9e:	6812      	ldr	r2, [r2, #0]
 800eda0:	1a9b      	subs	r3, r3, r2
 800eda2:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	881a      	ldrh	r2, [r3, #0]
 800eda8:	8b7b      	ldrh	r3, [r7, #26]
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	b29b      	uxth	r3, r3
 800edae:	3b08      	subs	r3, #8
 800edb0:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800edb2:	887a      	ldrh	r2, [r7, #2]
 800edb4:	8b3b      	ldrh	r3, [r7, #24]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d906      	bls.n	800edc8 <mem_trim+0xa8>
 800edba:	4b48      	ldr	r3, [pc, #288]	; (800eedc <mem_trim+0x1bc>)
 800edbc:	f240 2206 	movw	r2, #518	; 0x206
 800edc0:	4949      	ldr	r1, [pc, #292]	; (800eee8 <mem_trim+0x1c8>)
 800edc2:	4848      	ldr	r0, [pc, #288]	; (800eee4 <mem_trim+0x1c4>)
 800edc4:	f008 fdae 	bl	8017924 <iprintf>
  if (newsize > size) {
 800edc8:	887a      	ldrh	r2, [r7, #2]
 800edca:	8b3b      	ldrh	r3, [r7, #24]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d901      	bls.n	800edd4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800edd0:	2300      	movs	r3, #0
 800edd2:	e07a      	b.n	800eeca <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800edd4:	887a      	ldrh	r2, [r7, #2]
 800edd6:	8b3b      	ldrh	r3, [r7, #24]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d101      	bne.n	800ede0 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	e074      	b.n	800eeca <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ede0:	4842      	ldr	r0, [pc, #264]	; (800eeec <mem_trim+0x1cc>)
 800ede2:	f008 fcf9 	bl	80177d8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ede6:	4b3b      	ldr	r3, [pc, #236]	; (800eed4 <mem_trim+0x1b4>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	69fa      	ldr	r2, [r7, #28]
 800edec:	8812      	ldrh	r2, [r2, #0]
 800edee:	4413      	add	r3, r2
 800edf0:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	791b      	ldrb	r3, [r3, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d131      	bne.n	800ee5e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ee00:	8b7a      	ldrh	r2, [r7, #26]
 800ee02:	887b      	ldrh	r3, [r7, #2]
 800ee04:	4413      	add	r3, r2
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	3308      	adds	r3, #8
 800ee0a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800ee0c:	4b38      	ldr	r3, [pc, #224]	; (800eef0 <mem_trim+0x1d0>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	697a      	ldr	r2, [r7, #20]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d105      	bne.n	800ee22 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ee16:	4b2f      	ldr	r3, [pc, #188]	; (800eed4 <mem_trim+0x1b4>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	8a7b      	ldrh	r3, [r7, #18]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	4a34      	ldr	r2, [pc, #208]	; (800eef0 <mem_trim+0x1d0>)
 800ee20:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ee22:	4b2c      	ldr	r3, [pc, #176]	; (800eed4 <mem_trim+0x1b4>)
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	8a7b      	ldrh	r3, [r7, #18]
 800ee28:	4413      	add	r3, r2
 800ee2a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	8a3a      	ldrh	r2, [r7, #16]
 800ee36:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	8b7a      	ldrh	r2, [r7, #26]
 800ee3c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	8a7a      	ldrh	r2, [r7, #18]
 800ee42:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	881b      	ldrh	r3, [r3, #0]
 800ee48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee4c:	d039      	beq.n	800eec2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ee4e:	4b21      	ldr	r3, [pc, #132]	; (800eed4 <mem_trim+0x1b4>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	8812      	ldrh	r2, [r2, #0]
 800ee56:	4413      	add	r3, r2
 800ee58:	8a7a      	ldrh	r2, [r7, #18]
 800ee5a:	805a      	strh	r2, [r3, #2]
 800ee5c:	e031      	b.n	800eec2 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ee5e:	887b      	ldrh	r3, [r7, #2]
 800ee60:	f103 0214 	add.w	r2, r3, #20
 800ee64:	8b3b      	ldrh	r3, [r7, #24]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d82b      	bhi.n	800eec2 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ee6a:	8b7a      	ldrh	r2, [r7, #26]
 800ee6c:	887b      	ldrh	r3, [r7, #2]
 800ee6e:	4413      	add	r3, r2
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	3308      	adds	r3, #8
 800ee74:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ee76:	4b17      	ldr	r3, [pc, #92]	; (800eed4 <mem_trim+0x1b4>)
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	8a7b      	ldrh	r3, [r7, #18]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800ee80:	4b1b      	ldr	r3, [pc, #108]	; (800eef0 <mem_trim+0x1d0>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	697a      	ldr	r2, [r7, #20]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d202      	bcs.n	800ee90 <mem_trim+0x170>
      lfree = mem2;
 800ee8a:	4a19      	ldr	r2, [pc, #100]	; (800eef0 <mem_trim+0x1d0>)
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	2200      	movs	r2, #0
 800ee94:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	881a      	ldrh	r2, [r3, #0]
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	8b7a      	ldrh	r2, [r7, #26]
 800eea2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	8a7a      	ldrh	r2, [r7, #18]
 800eea8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eeb2:	d006      	beq.n	800eec2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800eeb4:	4b07      	ldr	r3, [pc, #28]	; (800eed4 <mem_trim+0x1b4>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	8812      	ldrh	r2, [r2, #0]
 800eebc:	4413      	add	r3, r2
 800eebe:	8a7a      	ldrh	r2, [r7, #18]
 800eec0:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800eec2:	480a      	ldr	r0, [pc, #40]	; (800eeec <mem_trim+0x1cc>)
 800eec4:	f008 fc97 	bl	80177f6 <sys_mutex_unlock>
  return rmem;
 800eec8:	687b      	ldr	r3, [r7, #4]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3720      	adds	r7, #32
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	2400a3b4 	.word	0x2400a3b4
 800eed8:	2400a3b8 	.word	0x2400a3b8
 800eedc:	08018b5c 	.word	0x08018b5c
 800eee0:	08018c9c 	.word	0x08018c9c
 800eee4:	08018ba4 	.word	0x08018ba4
 800eee8:	08018cb4 	.word	0x08018cb4
 800eeec:	2400a3c0 	.word	0x2400a3c0
 800eef0:	2400a3bc 	.word	0x2400a3bc

0800eef4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800eefe:	88fb      	ldrh	r3, [r7, #6]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <mem_malloc+0x14>
    return NULL;
 800ef04:	2300      	movs	r3, #0
 800ef06:	e0d1      	b.n	800f0ac <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ef08:	88fb      	ldrh	r3, [r7, #6]
 800ef0a:	3303      	adds	r3, #3
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	f023 0303 	bic.w	r3, r3, #3
 800ef12:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800ef14:	88fb      	ldrh	r3, [r7, #6]
 800ef16:	2b0b      	cmp	r3, #11
 800ef18:	d801      	bhi.n	800ef1e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ef1e:	88fb      	ldrh	r3, [r7, #6]
 800ef20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef24:	d901      	bls.n	800ef2a <mem_malloc+0x36>
    return NULL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	e0c0      	b.n	800f0ac <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ef2a:	4862      	ldr	r0, [pc, #392]	; (800f0b4 <mem_malloc+0x1c0>)
 800ef2c:	f008 fc54 	bl	80177d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ef30:	4b61      	ldr	r3, [pc, #388]	; (800f0b8 <mem_malloc+0x1c4>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	461a      	mov	r2, r3
 800ef36:	4b61      	ldr	r3, [pc, #388]	; (800f0bc <mem_malloc+0x1c8>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	83fb      	strh	r3, [r7, #30]
 800ef3e:	e0aa      	b.n	800f096 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800ef40:	4b5e      	ldr	r3, [pc, #376]	; (800f0bc <mem_malloc+0x1c8>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	8bfb      	ldrh	r3, [r7, #30]
 800ef46:	4413      	add	r3, r2
 800ef48:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	791b      	ldrb	r3, [r3, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f040 809b 	bne.w	800f08a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	8bfb      	ldrh	r3, [r7, #30]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	f1a3 0208 	sub.w	r2, r3, #8
 800ef62:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800ef64:	429a      	cmp	r2, r3
 800ef66:	f0c0 8090 	bcc.w	800f08a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	8bfb      	ldrh	r3, [r7, #30]
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	f1a3 0208 	sub.w	r2, r3, #8
 800ef78:	88fb      	ldrh	r3, [r7, #6]
 800ef7a:	3314      	adds	r3, #20
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d327      	bcc.n	800efd0 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800ef80:	8bfa      	ldrh	r2, [r7, #30]
 800ef82:	88fb      	ldrh	r3, [r7, #6]
 800ef84:	4413      	add	r3, r2
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	3308      	adds	r3, #8
 800ef8a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800ef8c:	4b4b      	ldr	r3, [pc, #300]	; (800f0bc <mem_malloc+0x1c8>)
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	8a7b      	ldrh	r3, [r7, #18]
 800ef92:	4413      	add	r3, r2
 800ef94:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	881a      	ldrh	r2, [r3, #0]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	8bfa      	ldrh	r2, [r7, #30]
 800efa8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	8a7a      	ldrh	r2, [r7, #18]
 800efae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	2201      	movs	r2, #1
 800efb4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800efbe:	d00a      	beq.n	800efd6 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800efc0:	4b3e      	ldr	r3, [pc, #248]	; (800f0bc <mem_malloc+0x1c8>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	8812      	ldrh	r2, [r2, #0]
 800efc8:	4413      	add	r3, r2
 800efca:	8a7a      	ldrh	r2, [r7, #18]
 800efcc:	805a      	strh	r2, [r3, #2]
 800efce:	e002      	b.n	800efd6 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2201      	movs	r2, #1
 800efd4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800efd6:	4b38      	ldr	r3, [pc, #224]	; (800f0b8 <mem_malloc+0x1c4>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d127      	bne.n	800f030 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800efe0:	4b35      	ldr	r3, [pc, #212]	; (800f0b8 <mem_malloc+0x1c4>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800efe6:	e005      	b.n	800eff4 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800efe8:	4b34      	ldr	r3, [pc, #208]	; (800f0bc <mem_malloc+0x1c8>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	69ba      	ldr	r2, [r7, #24]
 800efee:	8812      	ldrh	r2, [r2, #0]
 800eff0:	4413      	add	r3, r2
 800eff2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	791b      	ldrb	r3, [r3, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d004      	beq.n	800f006 <mem_malloc+0x112>
 800effc:	4b30      	ldr	r3, [pc, #192]	; (800f0c0 <mem_malloc+0x1cc>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	69ba      	ldr	r2, [r7, #24]
 800f002:	429a      	cmp	r2, r3
 800f004:	d1f0      	bne.n	800efe8 <mem_malloc+0xf4>
          }
          lfree = cur;
 800f006:	4a2c      	ldr	r2, [pc, #176]	; (800f0b8 <mem_malloc+0x1c4>)
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f00c:	4b2a      	ldr	r3, [pc, #168]	; (800f0b8 <mem_malloc+0x1c4>)
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	4b2b      	ldr	r3, [pc, #172]	; (800f0c0 <mem_malloc+0x1cc>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	429a      	cmp	r2, r3
 800f016:	d00b      	beq.n	800f030 <mem_malloc+0x13c>
 800f018:	4b27      	ldr	r3, [pc, #156]	; (800f0b8 <mem_malloc+0x1c4>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	791b      	ldrb	r3, [r3, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d006      	beq.n	800f030 <mem_malloc+0x13c>
 800f022:	4b28      	ldr	r3, [pc, #160]	; (800f0c4 <mem_malloc+0x1d0>)
 800f024:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f028:	4927      	ldr	r1, [pc, #156]	; (800f0c8 <mem_malloc+0x1d4>)
 800f02a:	4828      	ldr	r0, [pc, #160]	; (800f0cc <mem_malloc+0x1d8>)
 800f02c:	f008 fc7a 	bl	8017924 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f030:	4820      	ldr	r0, [pc, #128]	; (800f0b4 <mem_malloc+0x1c0>)
 800f032:	f008 fbe0 	bl	80177f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f036:	88fa      	ldrh	r2, [r7, #6]
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	4413      	add	r3, r2
 800f03c:	3308      	adds	r3, #8
 800f03e:	4a20      	ldr	r2, [pc, #128]	; (800f0c0 <mem_malloc+0x1cc>)
 800f040:	6812      	ldr	r2, [r2, #0]
 800f042:	4293      	cmp	r3, r2
 800f044:	d906      	bls.n	800f054 <mem_malloc+0x160>
 800f046:	4b1f      	ldr	r3, [pc, #124]	; (800f0c4 <mem_malloc+0x1d0>)
 800f048:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f04c:	4920      	ldr	r1, [pc, #128]	; (800f0d0 <mem_malloc+0x1dc>)
 800f04e:	481f      	ldr	r0, [pc, #124]	; (800f0cc <mem_malloc+0x1d8>)
 800f050:	f008 fc68 	bl	8017924 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	f003 0303 	and.w	r3, r3, #3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d006      	beq.n	800f06c <mem_malloc+0x178>
 800f05e:	4b19      	ldr	r3, [pc, #100]	; (800f0c4 <mem_malloc+0x1d0>)
 800f060:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f064:	491b      	ldr	r1, [pc, #108]	; (800f0d4 <mem_malloc+0x1e0>)
 800f066:	4819      	ldr	r0, [pc, #100]	; (800f0cc <mem_malloc+0x1d8>)
 800f068:	f008 fc5c 	bl	8017924 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	f003 0303 	and.w	r3, r3, #3
 800f072:	2b00      	cmp	r3, #0
 800f074:	d006      	beq.n	800f084 <mem_malloc+0x190>
 800f076:	4b13      	ldr	r3, [pc, #76]	; (800f0c4 <mem_malloc+0x1d0>)
 800f078:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800f07c:	4916      	ldr	r1, [pc, #88]	; (800f0d8 <mem_malloc+0x1e4>)
 800f07e:	4813      	ldr	r0, [pc, #76]	; (800f0cc <mem_malloc+0x1d8>)
 800f080:	f008 fc50 	bl	8017924 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	3308      	adds	r3, #8
 800f088:	e010      	b.n	800f0ac <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800f08a:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <mem_malloc+0x1c8>)
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	8bfb      	ldrh	r3, [r7, #30]
 800f090:	4413      	add	r3, r2
 800f092:	881b      	ldrh	r3, [r3, #0]
 800f094:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f096:	8bfa      	ldrh	r2, [r7, #30]
 800f098:	88fb      	ldrh	r3, [r7, #6]
 800f09a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	f4ff af4e 	bcc.w	800ef40 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f0a4:	4803      	ldr	r0, [pc, #12]	; (800f0b4 <mem_malloc+0x1c0>)
 800f0a6:	f008 fba6 	bl	80177f6 <sys_mutex_unlock>
  return NULL;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3720      	adds	r7, #32
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	2400a3c0 	.word	0x2400a3c0
 800f0b8:	2400a3bc 	.word	0x2400a3bc
 800f0bc:	2400a3b4 	.word	0x2400a3b4
 800f0c0:	2400a3b8 	.word	0x2400a3b8
 800f0c4:	08018b5c 	.word	0x08018b5c
 800f0c8:	08018cd4 	.word	0x08018cd4
 800f0cc:	08018ba4 	.word	0x08018ba4
 800f0d0:	08018cf0 	.word	0x08018cf0
 800f0d4:	08018d20 	.word	0x08018d20
 800f0d8:	08018d50 	.word	0x08018d50

0800f0dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	3303      	adds	r3, #3
 800f0f2:	f023 0303 	bic.w	r3, r3, #3
 800f0f6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	e011      	b.n	800f122 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	461a      	mov	r2, r3
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	4413      	add	r3, r2
 800f11a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	3301      	adds	r3, #1
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	885b      	ldrh	r3, [r3, #2]
 800f126:	461a      	mov	r2, r3
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	4293      	cmp	r3, r2
 800f12c:	dbe7      	blt.n	800f0fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f12e:	bf00      	nop
 800f130:	3714      	adds	r7, #20
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
	...

0800f13c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f142:	2300      	movs	r3, #0
 800f144:	80fb      	strh	r3, [r7, #6]
 800f146:	e009      	b.n	800f15c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f148:	88fb      	ldrh	r3, [r7, #6]
 800f14a:	4a08      	ldr	r2, [pc, #32]	; (800f16c <memp_init+0x30>)
 800f14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f150:	4618      	mov	r0, r3
 800f152:	f7ff ffc3 	bl	800f0dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f156:	88fb      	ldrh	r3, [r7, #6]
 800f158:	3301      	adds	r3, #1
 800f15a:	80fb      	strh	r3, [r7, #6]
 800f15c:	88fb      	ldrh	r3, [r7, #6]
 800f15e:	2b0d      	cmp	r3, #13
 800f160:	d9f2      	bls.n	800f148 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f162:	bf00      	nop
 800f164:	3708      	adds	r7, #8
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	0801a8c0 	.word	0x0801a8c0

0800f170 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f178:	f008 fb70 	bl	801785c <sys_arch_protect>
 800f17c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d015      	beq.n	800f1b8 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	6812      	ldr	r2, [r2, #0]
 800f194:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	f003 0303 	and.w	r3, r3, #3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d006      	beq.n	800f1ae <do_memp_malloc_pool+0x3e>
 800f1a0:	4b09      	ldr	r3, [pc, #36]	; (800f1c8 <do_memp_malloc_pool+0x58>)
 800f1a2:	f240 1249 	movw	r2, #329	; 0x149
 800f1a6:	4909      	ldr	r1, [pc, #36]	; (800f1cc <do_memp_malloc_pool+0x5c>)
 800f1a8:	4809      	ldr	r0, [pc, #36]	; (800f1d0 <do_memp_malloc_pool+0x60>)
 800f1aa:	f008 fbbb 	bl	8017924 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	f008 fb62 	bl	8017878 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	e003      	b.n	800f1c0 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f008 fb5d 	bl	8017878 <sys_arch_unprotect>
  return NULL;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	08018d74 	.word	0x08018d74
 800f1cc:	08018da4 	.word	0x08018da4
 800f1d0:	08018dc8 	.word	0x08018dc8

0800f1d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d106      	bne.n	800f1f0 <memp_malloc_pool+0x1c>
 800f1e2:	4b0a      	ldr	r3, [pc, #40]	; (800f20c <memp_malloc_pool+0x38>)
 800f1e4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f1e8:	4909      	ldr	r1, [pc, #36]	; (800f210 <memp_malloc_pool+0x3c>)
 800f1ea:	480a      	ldr	r0, [pc, #40]	; (800f214 <memp_malloc_pool+0x40>)
 800f1ec:	f008 fb9a 	bl	8017924 <iprintf>
  if (desc == NULL) {
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <memp_malloc_pool+0x26>
    return NULL;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	e003      	b.n	800f202 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7ff ffb8 	bl	800f170 <do_memp_malloc_pool>
 800f200:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f202:	4618      	mov	r0, r3
 800f204:	3708      	adds	r7, #8
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	08018d74 	.word	0x08018d74
 800f210:	08018df0 	.word	0x08018df0
 800f214:	08018dc8 	.word	0x08018dc8

0800f218 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f222:	79fb      	ldrb	r3, [r7, #7]
 800f224:	2b0d      	cmp	r3, #13
 800f226:	d908      	bls.n	800f23a <memp_malloc+0x22>
 800f228:	4b0a      	ldr	r3, [pc, #40]	; (800f254 <memp_malloc+0x3c>)
 800f22a:	f240 1287 	movw	r2, #391	; 0x187
 800f22e:	490a      	ldr	r1, [pc, #40]	; (800f258 <memp_malloc+0x40>)
 800f230:	480a      	ldr	r0, [pc, #40]	; (800f25c <memp_malloc+0x44>)
 800f232:	f008 fb77 	bl	8017924 <iprintf>
 800f236:	2300      	movs	r3, #0
 800f238:	e008      	b.n	800f24c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	4a08      	ldr	r2, [pc, #32]	; (800f260 <memp_malloc+0x48>)
 800f23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff ff94 	bl	800f170 <do_memp_malloc_pool>
 800f248:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f24a:	68fb      	ldr	r3, [r7, #12]
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	08018d74 	.word	0x08018d74
 800f258:	08018e04 	.word	0x08018e04
 800f25c:	08018dc8 	.word	0x08018dc8
 800f260:	0801a8c0 	.word	0x0801a8c0

0800f264 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	f003 0303 	and.w	r3, r3, #3
 800f274:	2b00      	cmp	r3, #0
 800f276:	d006      	beq.n	800f286 <do_memp_free_pool+0x22>
 800f278:	4b0d      	ldr	r3, [pc, #52]	; (800f2b0 <do_memp_free_pool+0x4c>)
 800f27a:	f240 129d 	movw	r2, #413	; 0x19d
 800f27e:	490d      	ldr	r1, [pc, #52]	; (800f2b4 <do_memp_free_pool+0x50>)
 800f280:	480d      	ldr	r0, [pc, #52]	; (800f2b8 <do_memp_free_pool+0x54>)
 800f282:	f008 fb4f 	bl	8017924 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f28a:	f008 fae7 	bl	801785c <sys_arch_protect>
 800f28e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f2a2:	68b8      	ldr	r0, [r7, #8]
 800f2a4:	f008 fae8 	bl	8017878 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f2a8:	bf00      	nop
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	08018d74 	.word	0x08018d74
 800f2b4:	08018e24 	.word	0x08018e24
 800f2b8:	08018dc8 	.word	0x08018dc8

0800f2bc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d106      	bne.n	800f2da <memp_free_pool+0x1e>
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	; (800f2f8 <memp_free_pool+0x3c>)
 800f2ce:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800f2d2:	490a      	ldr	r1, [pc, #40]	; (800f2fc <memp_free_pool+0x40>)
 800f2d4:	480a      	ldr	r0, [pc, #40]	; (800f300 <memp_free_pool+0x44>)
 800f2d6:	f008 fb25 	bl	8017924 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d007      	beq.n	800f2f0 <memp_free_pool+0x34>
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d004      	beq.n	800f2f0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f7ff ffbb 	bl	800f264 <do_memp_free_pool>
 800f2ee:	e000      	b.n	800f2f2 <memp_free_pool+0x36>
    return;
 800f2f0:	bf00      	nop
}
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	08018d74 	.word	0x08018d74
 800f2fc:	08018df0 	.word	0x08018df0
 800f300:	08018dc8 	.word	0x08018dc8

0800f304 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	4603      	mov	r3, r0
 800f30c:	6039      	str	r1, [r7, #0]
 800f30e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f310:	79fb      	ldrb	r3, [r7, #7]
 800f312:	2b0d      	cmp	r3, #13
 800f314:	d907      	bls.n	800f326 <memp_free+0x22>
 800f316:	4b0c      	ldr	r3, [pc, #48]	; (800f348 <memp_free+0x44>)
 800f318:	f240 12db 	movw	r2, #475	; 0x1db
 800f31c:	490b      	ldr	r1, [pc, #44]	; (800f34c <memp_free+0x48>)
 800f31e:	480c      	ldr	r0, [pc, #48]	; (800f350 <memp_free+0x4c>)
 800f320:	f008 fb00 	bl	8017924 <iprintf>
 800f324:	e00c      	b.n	800f340 <memp_free+0x3c>

  if (mem == NULL) {
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d008      	beq.n	800f33e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	4a09      	ldr	r2, [pc, #36]	; (800f354 <memp_free+0x50>)
 800f330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	4618      	mov	r0, r3
 800f338:	f7ff ff94 	bl	800f264 <do_memp_free_pool>
 800f33c:	e000      	b.n	800f340 <memp_free+0x3c>
    return;
 800f33e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	08018d74 	.word	0x08018d74
 800f34c:	08018e44 	.word	0x08018e44
 800f350:	08018dc8 	.word	0x08018dc8
 800f354:	0801a8c0 	.word	0x0801a8c0

0800f358 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f358:	b480      	push	{r7}
 800f35a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f35c:	bf00      	nop
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
	...

0800f368 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
 800f374:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d105      	bne.n	800f388 <netif_add+0x20>
 800f37c:	4b22      	ldr	r3, [pc, #136]	; (800f408 <netif_add+0xa0>)
 800f37e:	22fb      	movs	r2, #251	; 0xfb
 800f380:	4922      	ldr	r1, [pc, #136]	; (800f40c <netif_add+0xa4>)
 800f382:	4823      	ldr	r0, [pc, #140]	; (800f410 <netif_add+0xa8>)
 800f384:	f008 face 	bl	8017924 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2200      	movs	r2, #0
 800f398:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2203      	movs	r2, #3
 800f3a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	69ba      	ldr	r2, [r7, #24]
 800f3ba:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
 800f3bc:	4b15      	ldr	r3, [pc, #84]	; (800f414 <netif_add+0xac>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	1c5a      	adds	r2, r3, #1
 800f3c2:	b2d1      	uxtb	r1, r2
 800f3c4:	4a13      	ldr	r2, [pc, #76]	; (800f414 <netif_add+0xac>)
 800f3c6:	7011      	strb	r1, [r2, #0]
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6a3a      	ldr	r2, [r7, #32]
 800f3d2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	68b9      	ldr	r1, [r7, #8]
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f000 f81e 	bl	800f41c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	4798      	blx	r3
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d001      	beq.n	800f3f0 <netif_add+0x88>
    return NULL;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e007      	b.n	800f400 <netif_add+0x98>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f3f0:	4b09      	ldr	r3, [pc, #36]	; (800f418 <netif_add+0xb0>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f3f8:	4a07      	ldr	r2, [pc, #28]	; (800f418 <netif_add+0xb0>)
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	08018e60 	.word	0x08018e60
 800f40c:	08018e94 	.word	0x08018e94
 800f410:	08018eac 	.word	0x08018eac
 800f414:	2400a3fc 	.word	0x2400a3fc
 800f418:	2400da10 	.word	0x2400da10

0800f41c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
 800f428:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d003      	beq.n	800f438 <netif_set_addr+0x1c>
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10c      	bne.n	800f452 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800f438:	68b9      	ldr	r1, [r7, #8]
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f000 f81a 	bl	800f474 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800f440:	6879      	ldr	r1, [r7, #4]
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f000 f86a 	bl	800f51c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f000 f852 	bl	800f4f4 <netif_set_gw>
 800f450:	e00b      	b.n	800f46a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800f452:	6879      	ldr	r1, [r7, #4]
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f000 f861 	bl	800f51c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f000 f849 	bl	800f4f4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800f462:	68b9      	ldr	r1, [r7, #8]
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f000 f805 	bl	800f474 <netif_set_ipaddr>
  }
}
 800f46a:	bf00      	nop
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
	...

0800f474 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d003      	beq.n	800f48c <netif_set_ipaddr+0x18>
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	60fb      	str	r3, [r7, #12]
 800f48a:	e002      	b.n	800f492 <netif_set_ipaddr+0x1e>
 800f48c:	4b18      	ldr	r3, [pc, #96]	; (800f4f0 <netif_set_ipaddr+0x7c>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	3304      	adds	r3, #4
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d024      	beq.n	800f4e8 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	f107 020c 	add.w	r2, r7, #12
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f002 f903 	bl	80116b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	f107 020c 	add.w	r2, r7, #12
 800f4b6:	4611      	mov	r1, r2
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f005 fd95 	bl	8014fe8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d002      	beq.n	800f4ca <netif_set_ipaddr+0x56>
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	e000      	b.n	800f4cc <netif_set_ipaddr+0x58>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f4d0:	2101      	movs	r1, #1
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 f871 	bl	800f5ba <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	69db      	ldr	r3, [r3, #28]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d003      	beq.n	800f4e8 <netif_set_ipaddr+0x74>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	69db      	ldr	r3, [r3, #28]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800f4e8:	bf00      	nop
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	0801a938 	.word	0x0801a938

0800f4f4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <netif_set_gw+0x16>
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	e000      	b.n	800f50c <netif_set_gw+0x18>
 800f50a:	2300      	movs	r3, #0
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800f510:	bf00      	nop
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d002      	beq.n	800f532 <netif_set_netmask+0x16>
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	e000      	b.n	800f534 <netif_set_netmask+0x18>
 800f532:	2300      	movs	r3, #0
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800f538:	bf00      	nop
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f54c:	4a04      	ldr	r2, [pc, #16]	; (800f560 <netif_set_default+0x1c>)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f552:	bf00      	nop
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	2400da14 	.word	0x2400da14

0800f564 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f572:	f003 0301 	and.w	r3, r3, #1
 800f576:	2b00      	cmp	r3, #0
 800f578:	d11b      	bne.n	800f5b2 <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f580:	f043 0301 	orr.w	r3, r3, #1
 800f584:	b2da      	uxtb	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	69db      	ldr	r3, [r3, #28]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d003      	beq.n	800f59c <netif_set_up+0x38>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	69db      	ldr	r3, [r3, #28]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f5a2:	f003 0304 	and.w	r3, r3, #4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d003      	beq.n	800f5b2 <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f5aa:	2103      	movs	r1, #3
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 f804 	bl	800f5ba <netif_issue_reports>
    }
  }
}
 800f5b2:	bf00      	nop
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b082      	sub	sp, #8
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
 800f5c2:	460b      	mov	r3, r1
 800f5c4:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f5c6:	78fb      	ldrb	r3, [r7, #3]
 800f5c8:	f003 0301 	and.w	r3, r3, #1
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d011      	beq.n	800f5f4 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00c      	beq.n	800f5f4 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f5e0:	f003 0308 	and.w	r3, r3, #8
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d005      	beq.n	800f5f4 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f006 fcee 	bl	8015fd0 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800f5f4:	bf00      	nop
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f60a:	f003 0301 	and.w	r3, r3, #1
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d01a      	beq.n	800f648 <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f618:	f023 0301 	bic.w	r3, r3, #1
 800f61c:	b2da      	uxtb	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f62a:	f003 0308 	and.w	r3, r3, #8
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d002      	beq.n	800f638 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f006 f842 	bl	80156bc <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	69db      	ldr	r3, [r3, #28]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d003      	beq.n	800f648 <netif_set_down+0x4c>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	4798      	blx	r3
  }
}
 800f648:	bf00      	nop
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f65e:	f003 0304 	and.w	r3, r3, #4
 800f662:	2b00      	cmp	r3, #0
 800f664:	d11b      	bne.n	800f69e <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f66c:	f043 0304 	orr.w	r3, r3, #4
 800f670:	b2da      	uxtb	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f67e:	f003 0301 	and.w	r3, r3, #1
 800f682:	2b00      	cmp	r3, #0
 800f684:	d003      	beq.n	800f68e <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f686:	2103      	movs	r1, #3
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7ff ff96 	bl	800f5ba <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a1b      	ldr	r3, [r3, #32]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d003      	beq.n	800f69e <netif_set_link_up+0x4e>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6a1b      	ldr	r3, [r3, #32]
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	4798      	blx	r3
  }
}
 800f69e:	bf00      	nop
 800f6a0:	3708      	adds	r7, #8
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b082      	sub	sp, #8
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f6b4:	f003 0304 	and.w	r3, r3, #4
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d010      	beq.n	800f6de <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f6c2:	f023 0304 	bic.w	r3, r3, #4
 800f6c6:	b2da      	uxtb	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    NETIF_LINK_CALLBACK(netif);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d003      	beq.n	800f6de <netif_set_link_down+0x38>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a1b      	ldr	r3, [r3, #32]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	4798      	blx	r3
  }
}
 800f6de:	bf00      	nop
 800f6e0:	3708      	adds	r7, #8
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	6039      	str	r1, [r7, #0]
  if (netif) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d002      	beq.n	800f6fc <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	621a      	str	r2, [r3, #32]
  }
}
 800f6fc:	bf00      	nop
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f70e:	f008 f8a5 	bl	801785c <sys_arch_protect>
 800f712:	6038      	str	r0, [r7, #0]
 800f714:	4b0f      	ldr	r3, [pc, #60]	; (800f754 <pbuf_free_ooseq+0x4c>)
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]
 800f71a:	6838      	ldr	r0, [r7, #0]
 800f71c:	f008 f8ac 	bl	8017878 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f720:	4b0d      	ldr	r3, [pc, #52]	; (800f758 <pbuf_free_ooseq+0x50>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	607b      	str	r3, [r7, #4]
 800f726:	e00f      	b.n	800f748 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d008      	beq.n	800f742 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f734:	4618      	mov	r0, r3
 800f736:	f001 fcf8 	bl	801112a <tcp_segs_free>
      pcb->ooseq = NULL;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800f740:	e005      	b.n	800f74e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	607b      	str	r3, [r7, #4]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1ec      	bne.n	800f728 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	2400da18 	.word	0x2400da18
 800f758:	2400da20 	.word	0x2400da20

0800f75c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f764:	f7ff ffd0 	bl	800f708 <pbuf_free_ooseq>
}
 800f768:	bf00      	nop
 800f76a:	3708      	adds	r7, #8
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f776:	f008 f871 	bl	801785c <sys_arch_protect>
 800f77a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f77c:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <pbuf_pool_is_empty+0x50>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f782:	4b0f      	ldr	r3, [pc, #60]	; (800f7c0 <pbuf_pool_is_empty+0x50>)
 800f784:	2201      	movs	r2, #1
 800f786:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f008 f875 	bl	8017878 <sys_arch_unprotect>

  if (!queued) {
 800f78e:	78fb      	ldrb	r3, [r7, #3]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d110      	bne.n	800f7b6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f794:	2200      	movs	r2, #0
 800f796:	2100      	movs	r1, #0
 800f798:	480a      	ldr	r0, [pc, #40]	; (800f7c4 <pbuf_pool_is_empty+0x54>)
 800f79a:	f7fe ffe3 	bl	800e764 <tcpip_callback_with_block>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d008      	beq.n	800f7b6 <pbuf_pool_is_empty+0x46>
 800f7a4:	f008 f85a 	bl	801785c <sys_arch_protect>
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	4b05      	ldr	r3, [pc, #20]	; (800f7c0 <pbuf_pool_is_empty+0x50>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f008 f861 	bl	8017878 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f7b6:	bf00      	nop
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	2400da18 	.word	0x2400da18
 800f7c4:	0800f75d 	.word	0x0800f75d

0800f7c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b088      	sub	sp, #32
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	71fb      	strb	r3, [r7, #7]
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	80bb      	strh	r3, [r7, #4]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800f7da:	79fb      	ldrb	r3, [r7, #7]
 800f7dc:	2b04      	cmp	r3, #4
 800f7de:	d81c      	bhi.n	800f81a <pbuf_alloc+0x52>
 800f7e0:	a201      	add	r2, pc, #4	; (adr r2, 800f7e8 <pbuf_alloc+0x20>)
 800f7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e6:	bf00      	nop
 800f7e8:	0800f7fd 	.word	0x0800f7fd
 800f7ec:	0800f803 	.word	0x0800f803
 800f7f0:	0800f809 	.word	0x0800f809
 800f7f4:	0800f80f 	.word	0x0800f80f
 800f7f8:	0800f815 	.word	0x0800f815
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f7fc:	2336      	movs	r3, #54	; 0x36
 800f7fe:	82fb      	strh	r3, [r7, #22]
    break;
 800f800:	e014      	b.n	800f82c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f802:	2322      	movs	r3, #34	; 0x22
 800f804:	82fb      	strh	r3, [r7, #22]
    break;
 800f806:	e011      	b.n	800f82c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f808:	230e      	movs	r3, #14
 800f80a:	82fb      	strh	r3, [r7, #22]
    break;
 800f80c:	e00e      	b.n	800f82c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f80e:	2300      	movs	r3, #0
 800f810:	82fb      	strh	r3, [r7, #22]
    break;
 800f812:	e00b      	b.n	800f82c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800f814:	2300      	movs	r3, #0
 800f816:	82fb      	strh	r3, [r7, #22]
    break;
 800f818:	e008      	b.n	800f82c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800f81a:	4ba5      	ldr	r3, [pc, #660]	; (800fab0 <pbuf_alloc+0x2e8>)
 800f81c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800f820:	49a4      	ldr	r1, [pc, #656]	; (800fab4 <pbuf_alloc+0x2ec>)
 800f822:	48a5      	ldr	r0, [pc, #660]	; (800fab8 <pbuf_alloc+0x2f0>)
 800f824:	f008 f87e 	bl	8017924 <iprintf>
    return NULL;
 800f828:	2300      	movs	r3, #0
 800f82a:	e15d      	b.n	800fae8 <pbuf_alloc+0x320>
  }

  switch (type) {
 800f82c:	79bb      	ldrb	r3, [r7, #6]
 800f82e:	2b03      	cmp	r3, #3
 800f830:	f200 8134 	bhi.w	800fa9c <pbuf_alloc+0x2d4>
 800f834:	a201      	add	r2, pc, #4	; (adr r2, 800f83c <pbuf_alloc+0x74>)
 800f836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f83a:	bf00      	nop
 800f83c:	0800f9dd 	.word	0x0800f9dd
 800f840:	0800fa69 	.word	0x0800fa69
 800f844:	0800fa69 	.word	0x0800fa69
 800f848:	0800f84d 	.word	0x0800f84d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f84c:	200d      	movs	r0, #13
 800f84e:	f7ff fce3 	bl	800f218 <memp_malloc>
 800f852:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d103      	bne.n	800f862 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800f85a:	f7ff ff89 	bl	800f770 <pbuf_pool_is_empty>
      return NULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	e142      	b.n	800fae8 <pbuf_alloc+0x320>
    }
    p->type = type;
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	79ba      	ldrb	r2, [r7, #6]
 800f866:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	2200      	movs	r2, #0
 800f86c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f86e:	8afb      	ldrh	r3, [r7, #22]
 800f870:	3310      	adds	r3, #16
 800f872:	69fa      	ldr	r2, [r7, #28]
 800f874:	4413      	add	r3, r2
 800f876:	3303      	adds	r3, #3
 800f878:	f023 0303 	bic.w	r3, r3, #3
 800f87c:	461a      	mov	r2, r3
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	f003 0303 	and.w	r3, r3, #3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d006      	beq.n	800f89c <pbuf_alloc+0xd4>
 800f88e:	4b88      	ldr	r3, [pc, #544]	; (800fab0 <pbuf_alloc+0x2e8>)
 800f890:	f240 1229 	movw	r2, #297	; 0x129
 800f894:	4989      	ldr	r1, [pc, #548]	; (800fabc <pbuf_alloc+0x2f4>)
 800f896:	4888      	ldr	r0, [pc, #544]	; (800fab8 <pbuf_alloc+0x2f0>)
 800f898:	f008 f844 	bl	8017924 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	88ba      	ldrh	r2, [r7, #4]
 800f8a0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f8a2:	8afb      	ldrh	r3, [r7, #22]
 800f8a4:	3303      	adds	r3, #3
 800f8a6:	f023 0303 	bic.w	r3, r3, #3
 800f8aa:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800f8ae:	88bb      	ldrh	r3, [r7, #4]
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	bf28      	it	cs
 800f8b4:	4613      	movcs	r3, r2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	69fa      	ldr	r2, [r7, #28]
 800f8c2:	8952      	ldrh	r2, [r2, #10]
 800f8c4:	441a      	add	r2, r3
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d906      	bls.n	800f8de <pbuf_alloc+0x116>
 800f8d0:	4b77      	ldr	r3, [pc, #476]	; (800fab0 <pbuf_alloc+0x2e8>)
 800f8d2:	f44f 7298 	mov.w	r2, #304	; 0x130
 800f8d6:	497a      	ldr	r1, [pc, #488]	; (800fac0 <pbuf_alloc+0x2f8>)
 800f8d8:	4877      	ldr	r0, [pc, #476]	; (800fab8 <pbuf_alloc+0x2f0>)
 800f8da:	f008 f823 	bl	8017924 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f8de:	8afb      	ldrh	r3, [r7, #22]
 800f8e0:	3303      	adds	r3, #3
 800f8e2:	f023 0303 	bic.w	r3, r3, #3
 800f8e6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f8ea:	d106      	bne.n	800f8fa <pbuf_alloc+0x132>
 800f8ec:	4b70      	ldr	r3, [pc, #448]	; (800fab0 <pbuf_alloc+0x2e8>)
 800f8ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f8f2:	4974      	ldr	r1, [pc, #464]	; (800fac4 <pbuf_alloc+0x2fc>)
 800f8f4:	4870      	ldr	r0, [pc, #448]	; (800fab8 <pbuf_alloc+0x2f0>)
 800f8f6:	f008 f815 	bl	8017924 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800f904:	88bb      	ldrh	r3, [r7, #4]
 800f906:	69fa      	ldr	r2, [r7, #28]
 800f908:	8952      	ldrh	r2, [r2, #10]
 800f90a:	1a9b      	subs	r3, r3, r2
 800f90c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800f90e:	e061      	b.n	800f9d4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f910:	200d      	movs	r0, #13
 800f912:	f7ff fc81 	bl	800f218 <memp_malloc>
 800f916:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d106      	bne.n	800f92c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800f91e:	f7ff ff27 	bl	800f770 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800f922:	69f8      	ldr	r0, [r7, #28]
 800f924:	f000 fac2 	bl	800feac <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800f928:	2300      	movs	r3, #0
 800f92a:	e0dd      	b.n	800fae8 <pbuf_alloc+0x320>
      }
      q->type = type;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	79ba      	ldrb	r2, [r7, #6]
 800f930:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2200      	movs	r2, #0
 800f936:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800f93e:	69bb      	ldr	r3, [r7, #24]
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f94a:	4293      	cmp	r3, r2
 800f94c:	dd06      	ble.n	800f95c <pbuf_alloc+0x194>
 800f94e:	4b58      	ldr	r3, [pc, #352]	; (800fab0 <pbuf_alloc+0x2e8>)
 800f950:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f954:	495c      	ldr	r1, [pc, #368]	; (800fac8 <pbuf_alloc+0x300>)
 800f956:	4858      	ldr	r0, [pc, #352]	; (800fab8 <pbuf_alloc+0x2f0>)
 800f958:	f007 ffe4 	bl	8017924 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	b29a      	uxth	r2, r3
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	b29b      	uxth	r3, r3
 800f968:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f96c:	bf28      	it	cs
 800f96e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800f972:	b29a      	uxth	r2, r3
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f103 0210 	add.w	r2, r3, #16
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	f003 0303 	and.w	r3, r3, #3
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d006      	beq.n	800f99c <pbuf_alloc+0x1d4>
 800f98e:	4b48      	ldr	r3, [pc, #288]	; (800fab0 <pbuf_alloc+0x2e8>)
 800f990:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800f994:	494d      	ldr	r1, [pc, #308]	; (800facc <pbuf_alloc+0x304>)
 800f996:	4848      	ldr	r0, [pc, #288]	; (800fab8 <pbuf_alloc+0x2f0>)
 800f998:	f007 ffc4 	bl	8017924 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	69fa      	ldr	r2, [r7, #28]
 800f9a2:	8952      	ldrh	r2, [r2, #10]
 800f9a4:	441a      	add	r2, r3
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d906      	bls.n	800f9be <pbuf_alloc+0x1f6>
 800f9b0:	4b3f      	ldr	r3, [pc, #252]	; (800fab0 <pbuf_alloc+0x2e8>)
 800f9b2:	f240 1255 	movw	r2, #341	; 0x155
 800f9b6:	4942      	ldr	r1, [pc, #264]	; (800fac0 <pbuf_alloc+0x2f8>)
 800f9b8:	483f      	ldr	r0, [pc, #252]	; (800fab8 <pbuf_alloc+0x2f0>)
 800f9ba:	f007 ffb3 	bl	8017924 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	895b      	ldrh	r3, [r3, #10]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	1a9b      	subs	r3, r3, r2
 800f9ce:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	dc9a      	bgt.n	800f910 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800f9da:	e07e      	b.n	800fada <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800f9dc:	8afb      	ldrh	r3, [r7, #22]
 800f9de:	3313      	adds	r3, #19
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	f023 0303 	bic.w	r3, r3, #3
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	88bb      	ldrh	r3, [r7, #4]
 800f9ea:	3303      	adds	r3, #3
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	f023 0303 	bic.w	r3, r3, #3
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4413      	add	r3, r2
 800f9f6:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800f9f8:	897a      	ldrh	r2, [r7, #10]
 800f9fa:	88bb      	ldrh	r3, [r7, #4]
 800f9fc:	3303      	adds	r3, #3
 800f9fe:	f023 0303 	bic.w	r3, r3, #3
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d201      	bcs.n	800fa0a <pbuf_alloc+0x242>
        return NULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	e06e      	b.n	800fae8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800fa0a:	897b      	ldrh	r3, [r7, #10]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7ff fa71 	bl	800eef4 <mem_malloc>
 800fa12:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <pbuf_alloc+0x256>
      return NULL;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e064      	b.n	800fae8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800fa1e:	8afb      	ldrh	r3, [r7, #22]
 800fa20:	3310      	adds	r3, #16
 800fa22:	69fa      	ldr	r2, [r7, #28]
 800fa24:	4413      	add	r3, r2
 800fa26:	3303      	adds	r3, #3
 800fa28:	f023 0303 	bic.w	r3, r3, #3
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	88ba      	ldrh	r2, [r7, #4]
 800fa36:	811a      	strh	r2, [r3, #8]
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	891a      	ldrh	r2, [r3, #8]
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	2200      	movs	r2, #0
 800fa44:	601a      	str	r2, [r3, #0]
    p->type = type;
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	79ba      	ldrb	r2, [r7, #6]
 800fa4a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	f003 0303 	and.w	r3, r3, #3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d03f      	beq.n	800fad8 <pbuf_alloc+0x310>
 800fa58:	4b15      	ldr	r3, [pc, #84]	; (800fab0 <pbuf_alloc+0x2e8>)
 800fa5a:	f240 1277 	movw	r2, #375	; 0x177
 800fa5e:	491c      	ldr	r1, [pc, #112]	; (800fad0 <pbuf_alloc+0x308>)
 800fa60:	4815      	ldr	r0, [pc, #84]	; (800fab8 <pbuf_alloc+0x2f0>)
 800fa62:	f007 ff5f 	bl	8017924 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800fa66:	e037      	b.n	800fad8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fa68:	200c      	movs	r0, #12
 800fa6a:	f7ff fbd5 	bl	800f218 <memp_malloc>
 800fa6e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	e036      	b.n	800fae8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	88ba      	ldrh	r2, [r7, #4]
 800fa84:	811a      	strh	r2, [r3, #8]
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	891a      	ldrh	r2, [r3, #8]
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
    p->type = type;
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	79ba      	ldrb	r2, [r7, #6]
 800fa98:	731a      	strb	r2, [r3, #12]
    break;
 800fa9a:	e01e      	b.n	800fada <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fa9c:	4b04      	ldr	r3, [pc, #16]	; (800fab0 <pbuf_alloc+0x2e8>)
 800fa9e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800faa2:	490c      	ldr	r1, [pc, #48]	; (800fad4 <pbuf_alloc+0x30c>)
 800faa4:	4804      	ldr	r0, [pc, #16]	; (800fab8 <pbuf_alloc+0x2f0>)
 800faa6:	f007 ff3d 	bl	8017924 <iprintf>
    return NULL;
 800faaa:	2300      	movs	r3, #0
 800faac:	e01c      	b.n	800fae8 <pbuf_alloc+0x320>
 800faae:	bf00      	nop
 800fab0:	08018ed4 	.word	0x08018ed4
 800fab4:	08018f04 	.word	0x08018f04
 800fab8:	08018f20 	.word	0x08018f20
 800fabc:	08018f48 	.word	0x08018f48
 800fac0:	08018f78 	.word	0x08018f78
 800fac4:	08018fac 	.word	0x08018fac
 800fac8:	08018fe0 	.word	0x08018fe0
 800facc:	08018ff4 	.word	0x08018ff4
 800fad0:	08019024 	.word	0x08019024
 800fad4:	08019050 	.word	0x08019050
    break;
 800fad8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	2201      	movs	r2, #1
 800fade:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	2200      	movs	r2, #0
 800fae4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fae6:	69fb      	ldr	r3, [r7, #28]
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3720      	adds	r7, #32
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	603b      	str	r3, [r7, #0]
 800faf8:	4603      	mov	r3, r0
 800fafa:	71fb      	strb	r3, [r7, #7]
 800fafc:	460b      	mov	r3, r1
 800fafe:	80bb      	strh	r3, [r7, #4]
 800fb00:	4613      	mov	r3, r2
 800fb02:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800fb04:	79fb      	ldrb	r3, [r7, #7]
 800fb06:	2b04      	cmp	r3, #4
 800fb08:	d81b      	bhi.n	800fb42 <pbuf_alloced_custom+0x52>
 800fb0a:	a201      	add	r2, pc, #4	; (adr r2, 800fb10 <pbuf_alloced_custom+0x20>)
 800fb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb10:	0800fb25 	.word	0x0800fb25
 800fb14:	0800fb2b 	.word	0x0800fb2b
 800fb18:	0800fb31 	.word	0x0800fb31
 800fb1c:	0800fb37 	.word	0x0800fb37
 800fb20:	0800fb3d 	.word	0x0800fb3d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800fb24:	2336      	movs	r3, #54	; 0x36
 800fb26:	81fb      	strh	r3, [r7, #14]
    break;
 800fb28:	e014      	b.n	800fb54 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800fb2a:	2322      	movs	r3, #34	; 0x22
 800fb2c:	81fb      	strh	r3, [r7, #14]
    break;
 800fb2e:	e011      	b.n	800fb54 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800fb30:	230e      	movs	r3, #14
 800fb32:	81fb      	strh	r3, [r7, #14]
    break;
 800fb34:	e00e      	b.n	800fb54 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800fb36:	2300      	movs	r3, #0
 800fb38:	81fb      	strh	r3, [r7, #14]
    break;
 800fb3a:	e00b      	b.n	800fb54 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	81fb      	strh	r3, [r7, #14]
    break;
 800fb40:	e008      	b.n	800fb54 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800fb42:	4b1d      	ldr	r3, [pc, #116]	; (800fbb8 <pbuf_alloced_custom+0xc8>)
 800fb44:	f240 12c5 	movw	r2, #453	; 0x1c5
 800fb48:	491c      	ldr	r1, [pc, #112]	; (800fbbc <pbuf_alloced_custom+0xcc>)
 800fb4a:	481d      	ldr	r0, [pc, #116]	; (800fbc0 <pbuf_alloced_custom+0xd0>)
 800fb4c:	f007 feea 	bl	8017924 <iprintf>
    return NULL;
 800fb50:	2300      	movs	r3, #0
 800fb52:	e02d      	b.n	800fbb0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fb54:	89fb      	ldrh	r3, [r7, #14]
 800fb56:	3303      	adds	r3, #3
 800fb58:	f023 0203 	bic.w	r2, r3, #3
 800fb5c:	88bb      	ldrh	r3, [r7, #4]
 800fb5e:	441a      	add	r2, r3
 800fb60:	8bbb      	ldrh	r3, [r7, #28]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d901      	bls.n	800fb6a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fb66:	2300      	movs	r3, #0
 800fb68:	e022      	b.n	800fbb0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d008      	beq.n	800fb88 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fb76:	89fb      	ldrh	r3, [r7, #14]
 800fb78:	3303      	adds	r3, #3
 800fb7a:	f023 0303 	bic.w	r3, r3, #3
 800fb7e:	69ba      	ldr	r2, [r7, #24]
 800fb80:	441a      	add	r2, r3
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	605a      	str	r2, [r3, #4]
 800fb86:	e002      	b.n	800fb8e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	2202      	movs	r2, #2
 800fb92:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	88ba      	ldrh	r2, [r7, #4]
 800fb98:	811a      	strh	r2, [r3, #8]
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	891a      	ldrh	r2, [r3, #8]
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	79ba      	ldrb	r2, [r7, #6]
 800fba6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800fbae:	683b      	ldr	r3, [r7, #0]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	08018ed4 	.word	0x08018ed4
 800fbbc:	0801906c 	.word	0x0801906c
 800fbc0:	08018f20 	.word	0x08018f20

0800fbc4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b086      	sub	sp, #24
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	460b      	mov	r3, r1
 800fbce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d106      	bne.n	800fbe4 <pbuf_realloc+0x20>
 800fbd6:	4b4b      	ldr	r3, [pc, #300]	; (800fd04 <pbuf_realloc+0x140>)
 800fbd8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800fbdc:	494a      	ldr	r1, [pc, #296]	; (800fd08 <pbuf_realloc+0x144>)
 800fbde:	484b      	ldr	r0, [pc, #300]	; (800fd0c <pbuf_realloc+0x148>)
 800fbe0:	f007 fea0 	bl	8017924 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	7b1b      	ldrb	r3, [r3, #12]
 800fbe8:	2b03      	cmp	r3, #3
 800fbea:	d012      	beq.n	800fc12 <pbuf_realloc+0x4e>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	7b1b      	ldrb	r3, [r3, #12]
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d00e      	beq.n	800fc12 <pbuf_realloc+0x4e>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	7b1b      	ldrb	r3, [r3, #12]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d00a      	beq.n	800fc12 <pbuf_realloc+0x4e>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	7b1b      	ldrb	r3, [r3, #12]
 800fc00:	2b02      	cmp	r3, #2
 800fc02:	d006      	beq.n	800fc12 <pbuf_realloc+0x4e>
 800fc04:	4b3f      	ldr	r3, [pc, #252]	; (800fd04 <pbuf_realloc+0x140>)
 800fc06:	f240 12f7 	movw	r2, #503	; 0x1f7
 800fc0a:	4941      	ldr	r1, [pc, #260]	; (800fd10 <pbuf_realloc+0x14c>)
 800fc0c:	483f      	ldr	r0, [pc, #252]	; (800fd0c <pbuf_realloc+0x148>)
 800fc0e:	f007 fe89 	bl	8017924 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	891b      	ldrh	r3, [r3, #8]
 800fc16:	887a      	ldrh	r2, [r7, #2]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d26f      	bcs.n	800fcfc <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800fc1c:	887b      	ldrh	r3, [r7, #2]
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	8912      	ldrh	r2, [r2, #8]
 800fc22:	1a9b      	subs	r3, r3, r2
 800fc24:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fc26:	887b      	ldrh	r3, [r7, #2]
 800fc28:	827b      	strh	r3, [r7, #18]
  q = p;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fc2e:	e025      	b.n	800fc7c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	895b      	ldrh	r3, [r3, #10]
 800fc34:	8a7a      	ldrh	r2, [r7, #18]
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fc40:	4293      	cmp	r3, r2
 800fc42:	dd06      	ble.n	800fc52 <pbuf_realloc+0x8e>
 800fc44:	4b2f      	ldr	r3, [pc, #188]	; (800fd04 <pbuf_realloc+0x140>)
 800fc46:	f240 220b 	movw	r2, #523	; 0x20b
 800fc4a:	4932      	ldr	r1, [pc, #200]	; (800fd14 <pbuf_realloc+0x150>)
 800fc4c:	482f      	ldr	r0, [pc, #188]	; (800fd0c <pbuf_realloc+0x148>)
 800fc4e:	f007 fe69 	bl	8017924 <iprintf>
    q->tot_len += (u16_t)grow;
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	891a      	ldrh	r2, [r3, #8]
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	4413      	add	r3, r2
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d106      	bne.n	800fc7c <pbuf_realloc+0xb8>
 800fc6e:	4b25      	ldr	r3, [pc, #148]	; (800fd04 <pbuf_realloc+0x140>)
 800fc70:	f240 220f 	movw	r2, #527	; 0x20f
 800fc74:	4928      	ldr	r1, [pc, #160]	; (800fd18 <pbuf_realloc+0x154>)
 800fc76:	4825      	ldr	r0, [pc, #148]	; (800fd0c <pbuf_realloc+0x148>)
 800fc78:	f007 fe54 	bl	8017924 <iprintf>
  while (rem_len > q->len) {
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	895b      	ldrh	r3, [r3, #10]
 800fc80:	8a7a      	ldrh	r2, [r7, #18]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d8d4      	bhi.n	800fc30 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	7b1b      	ldrb	r3, [r3, #12]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d122      	bne.n	800fcd4 <pbuf_realloc+0x110>
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	895b      	ldrh	r3, [r3, #10]
 800fc92:	8a7a      	ldrh	r2, [r7, #18]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d01d      	beq.n	800fcd4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	7b5b      	ldrb	r3, [r3, #13]
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d117      	bne.n	800fcd4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	1ad3      	subs	r3, r2, r3
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	8a7b      	ldrh	r3, [r7, #18]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	6978      	ldr	r0, [r7, #20]
 800fcba:	f7ff f831 	bl	800ed20 <mem_trim>
 800fcbe:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <pbuf_realloc+0x110>
 800fcc6:	4b0f      	ldr	r3, [pc, #60]	; (800fd04 <pbuf_realloc+0x140>)
 800fcc8:	f240 221d 	movw	r2, #541	; 0x21d
 800fccc:	4913      	ldr	r1, [pc, #76]	; (800fd1c <pbuf_realloc+0x158>)
 800fcce:	480f      	ldr	r0, [pc, #60]	; (800fd0c <pbuf_realloc+0x148>)
 800fcd0:	f007 fe28 	bl	8017924 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	8a7a      	ldrh	r2, [r7, #18]
 800fcd8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	895a      	ldrh	r2, [r3, #10]
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d004      	beq.n	800fcf4 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f000 f8dc 	bl	800feac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	e000      	b.n	800fcfe <pbuf_realloc+0x13a>
    return;
 800fcfc:	bf00      	nop

}
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	08018ed4 	.word	0x08018ed4
 800fd08:	08019090 	.word	0x08019090
 800fd0c:	08018f20 	.word	0x08018f20
 800fd10:	080190a8 	.word	0x080190a8
 800fd14:	080190c4 	.word	0x080190c4
 800fd18:	080190d8 	.word	0x080190d8
 800fd1c:	080190f0 	.word	0x080190f0

0800fd20 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	460b      	mov	r3, r1
 800fd2a:	807b      	strh	r3, [r7, #2]
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <pbuf_header_impl+0x24>
 800fd36:	4b46      	ldr	r3, [pc, #280]	; (800fe50 <pbuf_header_impl+0x130>)
 800fd38:	f240 223f 	movw	r2, #575	; 0x23f
 800fd3c:	4945      	ldr	r1, [pc, #276]	; (800fe54 <pbuf_header_impl+0x134>)
 800fd3e:	4846      	ldr	r0, [pc, #280]	; (800fe58 <pbuf_header_impl+0x138>)
 800fd40:	f007 fdf0 	bl	8017924 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800fd44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d002      	beq.n	800fd52 <pbuf_header_impl+0x32>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d101      	bne.n	800fd56 <pbuf_header_impl+0x36>
    return 0;
 800fd52:	2300      	movs	r3, #0
 800fd54:	e078      	b.n	800fe48 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800fd56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	da10      	bge.n	800fd80 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800fd5e:	887b      	ldrh	r3, [r7, #2]
 800fd60:	425b      	negs	r3, r3
 800fd62:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	895b      	ldrh	r3, [r3, #10]
 800fd68:	89fa      	ldrh	r2, [r7, #14]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d90a      	bls.n	800fd84 <pbuf_header_impl+0x64>
 800fd6e:	4b38      	ldr	r3, [pc, #224]	; (800fe50 <pbuf_header_impl+0x130>)
 800fd70:	f240 2247 	movw	r2, #583	; 0x247
 800fd74:	4939      	ldr	r1, [pc, #228]	; (800fe5c <pbuf_header_impl+0x13c>)
 800fd76:	4838      	ldr	r0, [pc, #224]	; (800fe58 <pbuf_header_impl+0x138>)
 800fd78:	f007 fdd4 	bl	8017924 <iprintf>
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e063      	b.n	800fe48 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800fd80:	887b      	ldrh	r3, [r7, #2]
 800fd82:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	7b1b      	ldrb	r3, [r3, #12]
 800fd88:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800fd90:	89bb      	ldrh	r3, [r7, #12]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <pbuf_header_impl+0x7c>
 800fd96:	89bb      	ldrh	r3, [r7, #12]
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d112      	bne.n	800fdc2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fda4:	425b      	negs	r3, r3
 800fda6:	441a      	add	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	685a      	ldr	r2, [r3, #4]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3310      	adds	r3, #16
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d238      	bcs.n	800fe2a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e042      	b.n	800fe48 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800fdc2:	89bb      	ldrh	r3, [r7, #12]
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	d002      	beq.n	800fdce <pbuf_header_impl+0xae>
 800fdc8:	89bb      	ldrh	r3, [r7, #12]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d124      	bne.n	800fe18 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fdce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	da0d      	bge.n	800fdf2 <pbuf_header_impl+0xd2>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	895b      	ldrh	r3, [r3, #10]
 800fdda:	89fa      	ldrh	r2, [r7, #14]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d808      	bhi.n	800fdf2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	685a      	ldr	r2, [r3, #4]
 800fde4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fde8:	425b      	negs	r3, r3
 800fdea:	441a      	add	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	605a      	str	r2, [r3, #4]
 800fdf0:	e011      	b.n	800fe16 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800fdf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	dd0b      	ble.n	800fe12 <pbuf_header_impl+0xf2>
 800fdfa:	787b      	ldrb	r3, [r7, #1]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d008      	beq.n	800fe12 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	685a      	ldr	r2, [r3, #4]
 800fe04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe08:	425b      	negs	r3, r3
 800fe0a:	441a      	add	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	605a      	str	r2, [r3, #4]
 800fe10:	e001      	b.n	800fe16 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fe12:	2301      	movs	r3, #1
 800fe14:	e018      	b.n	800fe48 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fe16:	e008      	b.n	800fe2a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800fe18:	4b0d      	ldr	r3, [pc, #52]	; (800fe50 <pbuf_header_impl+0x130>)
 800fe1a:	f240 2277 	movw	r2, #631	; 0x277
 800fe1e:	4910      	ldr	r1, [pc, #64]	; (800fe60 <pbuf_header_impl+0x140>)
 800fe20:	480d      	ldr	r0, [pc, #52]	; (800fe58 <pbuf_header_impl+0x138>)
 800fe22:	f007 fd7f 	bl	8017924 <iprintf>
    return 1;
 800fe26:	2301      	movs	r3, #1
 800fe28:	e00e      	b.n	800fe48 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	895a      	ldrh	r2, [r3, #10]
 800fe2e:	887b      	ldrh	r3, [r7, #2]
 800fe30:	4413      	add	r3, r2
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	891a      	ldrh	r2, [r3, #8]
 800fe3c:	887b      	ldrh	r3, [r7, #2]
 800fe3e:	4413      	add	r3, r2
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	08018ed4 	.word	0x08018ed4
 800fe54:	0801910c 	.word	0x0801910c
 800fe58:	08018f20 	.word	0x08018f20
 800fe5c:	08019118 	.word	0x08019118
 800fe60:	08019138 	.word	0x08019138

0800fe64 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800fe70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe74:	2200      	movs	r2, #0
 800fe76:	4619      	mov	r1, r3
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7ff ff51 	bl	800fd20 <pbuf_header_impl>
 800fe7e:	4603      	mov	r3, r0
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	460b      	mov	r3, r1
 800fe92:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800fe94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe98:	2201      	movs	r2, #1
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7ff ff3f 	bl	800fd20 <pbuf_header_impl>
 800fea2:	4603      	mov	r3, r0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10b      	bne.n	800fed2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d106      	bne.n	800fece <pbuf_free+0x22>
 800fec0:	4b41      	ldr	r3, [pc, #260]	; (800ffc8 <pbuf_free+0x11c>)
 800fec2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fec6:	4941      	ldr	r1, [pc, #260]	; (800ffcc <pbuf_free+0x120>)
 800fec8:	4841      	ldr	r0, [pc, #260]	; (800ffd0 <pbuf_free+0x124>)
 800feca:	f007 fd2b 	bl	8017924 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	e076      	b.n	800ffc0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	7b1b      	ldrb	r3, [r3, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d012      	beq.n	800ff00 <pbuf_free+0x54>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	7b1b      	ldrb	r3, [r3, #12]
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d00e      	beq.n	800ff00 <pbuf_free+0x54>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	7b1b      	ldrb	r3, [r3, #12]
 800fee6:	2b02      	cmp	r3, #2
 800fee8:	d00a      	beq.n	800ff00 <pbuf_free+0x54>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	7b1b      	ldrb	r3, [r3, #12]
 800feee:	2b03      	cmp	r3, #3
 800fef0:	d006      	beq.n	800ff00 <pbuf_free+0x54>
 800fef2:	4b35      	ldr	r3, [pc, #212]	; (800ffc8 <pbuf_free+0x11c>)
 800fef4:	f240 22de 	movw	r2, #734	; 0x2de
 800fef8:	4936      	ldr	r1, [pc, #216]	; (800ffd4 <pbuf_free+0x128>)
 800fefa:	4835      	ldr	r0, [pc, #212]	; (800ffd0 <pbuf_free+0x124>)
 800fefc:	f007 fd12 	bl	8017924 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800ff00:	2300      	movs	r3, #0
 800ff02:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ff04:	e058      	b.n	800ffb8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ff06:	f007 fca9 	bl	801785c <sys_arch_protect>
 800ff0a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	89db      	ldrh	r3, [r3, #14]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d106      	bne.n	800ff22 <pbuf_free+0x76>
 800ff14:	4b2c      	ldr	r3, [pc, #176]	; (800ffc8 <pbuf_free+0x11c>)
 800ff16:	f240 22eb 	movw	r2, #747	; 0x2eb
 800ff1a:	492f      	ldr	r1, [pc, #188]	; (800ffd8 <pbuf_free+0x12c>)
 800ff1c:	482c      	ldr	r0, [pc, #176]	; (800ffd0 <pbuf_free+0x124>)
 800ff1e:	f007 fd01 	bl	8017924 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	89db      	ldrh	r3, [r3, #14]
 800ff26:	3b01      	subs	r3, #1
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	81da      	strh	r2, [r3, #14]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	89db      	ldrh	r3, [r3, #14]
 800ff32:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800ff34:	69b8      	ldr	r0, [r7, #24]
 800ff36:	f007 fc9f 	bl	8017878 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ff3a:	8afb      	ldrh	r3, [r7, #22]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d139      	bne.n	800ffb4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	7b1b      	ldrb	r3, [r3, #12]
 800ff4a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	7b5b      	ldrb	r3, [r3, #13]
 800ff50:	f003 0302 	and.w	r3, r3, #2
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d011      	beq.n	800ff7c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d106      	bne.n	800ff72 <pbuf_free+0xc6>
 800ff64:	4b18      	ldr	r3, [pc, #96]	; (800ffc8 <pbuf_free+0x11c>)
 800ff66:	f240 22f9 	movw	r2, #761	; 0x2f9
 800ff6a:	491c      	ldr	r1, [pc, #112]	; (800ffdc <pbuf_free+0x130>)
 800ff6c:	4818      	ldr	r0, [pc, #96]	; (800ffd0 <pbuf_free+0x124>)
 800ff6e:	f007 fcd9 	bl	8017924 <iprintf>
        pc->custom_free_function(p);
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	4798      	blx	r3
 800ff7a:	e015      	b.n	800ffa8 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800ff7c:	89fb      	ldrh	r3, [r7, #14]
 800ff7e:	2b03      	cmp	r3, #3
 800ff80:	d104      	bne.n	800ff8c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800ff82:	6879      	ldr	r1, [r7, #4]
 800ff84:	200d      	movs	r0, #13
 800ff86:	f7ff f9bd 	bl	800f304 <memp_free>
 800ff8a:	e00d      	b.n	800ffa8 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800ff8c:	89fb      	ldrh	r3, [r7, #14]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d002      	beq.n	800ff98 <pbuf_free+0xec>
 800ff92:	89fb      	ldrh	r3, [r7, #14]
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d104      	bne.n	800ffa2 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800ff98:	6879      	ldr	r1, [r7, #4]
 800ff9a:	200c      	movs	r0, #12
 800ff9c:	f7ff f9b2 	bl	800f304 <memp_free>
 800ffa0:	e002      	b.n	800ffa8 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7fe fe4e 	bl	800ec44 <mem_free>
        }
      }
      count++;
 800ffa8:	7ffb      	ldrb	r3, [r7, #31]
 800ffaa:	3301      	adds	r3, #1
 800ffac:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	607b      	str	r3, [r7, #4]
 800ffb2:	e001      	b.n	800ffb8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1a3      	bne.n	800ff06 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ffbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	08018ed4 	.word	0x08018ed4
 800ffcc:	0801910c 	.word	0x0801910c
 800ffd0:	08018f20 	.word	0x08018f20
 800ffd4:	08019148 	.word	0x08019148
 800ffd8:	08019160 	.word	0x08019160
 800ffdc:	08019178 	.word	0x08019178

0800ffe0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ffec:	e005      	b.n	800fffa <pbuf_clen+0x1a>
    ++len;
 800ffee:	89fb      	ldrh	r3, [r7, #14]
 800fff0:	3301      	adds	r3, #1
 800fff2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d1f6      	bne.n	800ffee <pbuf_clen+0xe>
  }
  return len;
 8010000:	89fb      	ldrh	r3, [r7, #14]
}
 8010002:	4618      	mov	r0, r3
 8010004:	3714      	adds	r7, #20
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
	...

08010010 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d016      	beq.n	801004c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801001e:	f007 fc1d 	bl	801785c <sys_arch_protect>
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	89db      	ldrh	r3, [r3, #14]
 8010028:	3301      	adds	r3, #1
 801002a:	b29a      	uxth	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	81da      	strh	r2, [r3, #14]
 8010030:	68f8      	ldr	r0, [r7, #12]
 8010032:	f007 fc21 	bl	8017878 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	89db      	ldrh	r3, [r3, #14]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d106      	bne.n	801004c <pbuf_ref+0x3c>
 801003e:	4b05      	ldr	r3, [pc, #20]	; (8010054 <pbuf_ref+0x44>)
 8010040:	f240 3239 	movw	r2, #825	; 0x339
 8010044:	4904      	ldr	r1, [pc, #16]	; (8010058 <pbuf_ref+0x48>)
 8010046:	4805      	ldr	r0, [pc, #20]	; (801005c <pbuf_ref+0x4c>)
 8010048:	f007 fc6c 	bl	8017924 <iprintf>
  }
}
 801004c:	bf00      	nop
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	08018ed4 	.word	0x08018ed4
 8010058:	0801919c 	.word	0x0801919c
 801005c:	08018f20 	.word	0x08018f20

08010060 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <pbuf_cat+0x16>
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d107      	bne.n	8010086 <pbuf_cat+0x26>
 8010076:	4b20      	ldr	r3, [pc, #128]	; (80100f8 <pbuf_cat+0x98>)
 8010078:	f240 324d 	movw	r2, #845	; 0x34d
 801007c:	491f      	ldr	r1, [pc, #124]	; (80100fc <pbuf_cat+0x9c>)
 801007e:	4820      	ldr	r0, [pc, #128]	; (8010100 <pbuf_cat+0xa0>)
 8010080:	f007 fc50 	bl	8017924 <iprintf>
 8010084:	e034      	b.n	80100f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	60fb      	str	r3, [r7, #12]
 801008a:	e00a      	b.n	80100a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	891a      	ldrh	r2, [r3, #8]
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	891b      	ldrh	r3, [r3, #8]
 8010094:	4413      	add	r3, r2
 8010096:	b29a      	uxth	r2, r3
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1f0      	bne.n	801008c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	891a      	ldrh	r2, [r3, #8]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	895b      	ldrh	r3, [r3, #10]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d006      	beq.n	80100c4 <pbuf_cat+0x64>
 80100b6:	4b10      	ldr	r3, [pc, #64]	; (80100f8 <pbuf_cat+0x98>)
 80100b8:	f240 3255 	movw	r2, #853	; 0x355
 80100bc:	4911      	ldr	r1, [pc, #68]	; (8010104 <pbuf_cat+0xa4>)
 80100be:	4810      	ldr	r0, [pc, #64]	; (8010100 <pbuf_cat+0xa0>)
 80100c0:	f007 fc30 	bl	8017924 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d006      	beq.n	80100da <pbuf_cat+0x7a>
 80100cc:	4b0a      	ldr	r3, [pc, #40]	; (80100f8 <pbuf_cat+0x98>)
 80100ce:	f240 3256 	movw	r2, #854	; 0x356
 80100d2:	490d      	ldr	r1, [pc, #52]	; (8010108 <pbuf_cat+0xa8>)
 80100d4:	480a      	ldr	r0, [pc, #40]	; (8010100 <pbuf_cat+0xa0>)
 80100d6:	f007 fc25 	bl	8017924 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	891a      	ldrh	r2, [r3, #8]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	891b      	ldrh	r3, [r3, #8]
 80100e2:	4413      	add	r3, r2
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	683a      	ldr	r2, [r7, #0]
 80100ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	08018ed4 	.word	0x08018ed4
 80100fc:	080191b0 	.word	0x080191b0
 8010100:	08018f20 	.word	0x08018f20
 8010104:	080191e8 	.word	0x080191e8
 8010108:	08019218 	.word	0x08019218

0801010c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010116:	2300      	movs	r3, #0
 8010118:	81fb      	strh	r3, [r7, #14]
 801011a:	2300      	movs	r3, #0
 801011c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d008      	beq.n	8010136 <pbuf_copy+0x2a>
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d005      	beq.n	8010136 <pbuf_copy+0x2a>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	891a      	ldrh	r2, [r3, #8]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	891b      	ldrh	r3, [r3, #8]
 8010132:	429a      	cmp	r2, r3
 8010134:	d209      	bcs.n	801014a <pbuf_copy+0x3e>
 8010136:	4b54      	ldr	r3, [pc, #336]	; (8010288 <pbuf_copy+0x17c>)
 8010138:	f240 32bd 	movw	r2, #957	; 0x3bd
 801013c:	4953      	ldr	r1, [pc, #332]	; (801028c <pbuf_copy+0x180>)
 801013e:	4854      	ldr	r0, [pc, #336]	; (8010290 <pbuf_copy+0x184>)
 8010140:	f007 fbf0 	bl	8017924 <iprintf>
 8010144:	f06f 030f 	mvn.w	r3, #15
 8010148:	e099      	b.n	801027e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	895b      	ldrh	r3, [r3, #10]
 801014e:	461a      	mov	r2, r3
 8010150:	89fb      	ldrh	r3, [r7, #14]
 8010152:	1ad2      	subs	r2, r2, r3
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	895b      	ldrh	r3, [r3, #10]
 8010158:	4619      	mov	r1, r3
 801015a:	89bb      	ldrh	r3, [r7, #12]
 801015c:	1acb      	subs	r3, r1, r3
 801015e:	429a      	cmp	r2, r3
 8010160:	db05      	blt.n	801016e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	895a      	ldrh	r2, [r3, #10]
 8010166:	89bb      	ldrh	r3, [r7, #12]
 8010168:	1ad3      	subs	r3, r2, r3
 801016a:	817b      	strh	r3, [r7, #10]
 801016c:	e004      	b.n	8010178 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	895a      	ldrh	r2, [r3, #10]
 8010172:	89fb      	ldrh	r3, [r7, #14]
 8010174:	1ad3      	subs	r3, r2, r3
 8010176:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685a      	ldr	r2, [r3, #4]
 801017c:	89fb      	ldrh	r3, [r7, #14]
 801017e:	18d0      	adds	r0, r2, r3
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	685a      	ldr	r2, [r3, #4]
 8010184:	89bb      	ldrh	r3, [r7, #12]
 8010186:	4413      	add	r3, r2
 8010188:	897a      	ldrh	r2, [r7, #10]
 801018a:	4619      	mov	r1, r3
 801018c:	f007 fbb7 	bl	80178fe <memcpy>
    offset_to += len;
 8010190:	89fa      	ldrh	r2, [r7, #14]
 8010192:	897b      	ldrh	r3, [r7, #10]
 8010194:	4413      	add	r3, r2
 8010196:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010198:	89ba      	ldrh	r2, [r7, #12]
 801019a:	897b      	ldrh	r3, [r7, #10]
 801019c:	4413      	add	r3, r2
 801019e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	895b      	ldrh	r3, [r3, #10]
 80101a4:	89fa      	ldrh	r2, [r7, #14]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d906      	bls.n	80101b8 <pbuf_copy+0xac>
 80101aa:	4b37      	ldr	r3, [pc, #220]	; (8010288 <pbuf_copy+0x17c>)
 80101ac:	f240 32cd 	movw	r2, #973	; 0x3cd
 80101b0:	4938      	ldr	r1, [pc, #224]	; (8010294 <pbuf_copy+0x188>)
 80101b2:	4837      	ldr	r0, [pc, #220]	; (8010290 <pbuf_copy+0x184>)
 80101b4:	f007 fbb6 	bl	8017924 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	895b      	ldrh	r3, [r3, #10]
 80101bc:	89ba      	ldrh	r2, [r7, #12]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d906      	bls.n	80101d0 <pbuf_copy+0xc4>
 80101c2:	4b31      	ldr	r3, [pc, #196]	; (8010288 <pbuf_copy+0x17c>)
 80101c4:	f240 32ce 	movw	r2, #974	; 0x3ce
 80101c8:	4933      	ldr	r1, [pc, #204]	; (8010298 <pbuf_copy+0x18c>)
 80101ca:	4831      	ldr	r0, [pc, #196]	; (8010290 <pbuf_copy+0x184>)
 80101cc:	f007 fbaa 	bl	8017924 <iprintf>
    if (offset_from >= p_from->len) {
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	895b      	ldrh	r3, [r3, #10]
 80101d4:	89ba      	ldrh	r2, [r7, #12]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d304      	bcc.n	80101e4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80101da:	2300      	movs	r3, #0
 80101dc:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	895b      	ldrh	r3, [r3, #10]
 80101e8:	89fa      	ldrh	r2, [r7, #14]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d114      	bne.n	8010218 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80101ee:	2300      	movs	r3, #0
 80101f0:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10c      	bne.n	8010218 <pbuf_copy+0x10c>
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d009      	beq.n	8010218 <pbuf_copy+0x10c>
 8010204:	4b20      	ldr	r3, [pc, #128]	; (8010288 <pbuf_copy+0x17c>)
 8010206:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801020a:	4924      	ldr	r1, [pc, #144]	; (801029c <pbuf_copy+0x190>)
 801020c:	4820      	ldr	r0, [pc, #128]	; (8010290 <pbuf_copy+0x184>)
 801020e:	f007 fb89 	bl	8017924 <iprintf>
 8010212:	f06f 030f 	mvn.w	r3, #15
 8010216:	e032      	b.n	801027e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d013      	beq.n	8010246 <pbuf_copy+0x13a>
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	895a      	ldrh	r2, [r3, #10]
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	891b      	ldrh	r3, [r3, #8]
 8010226:	429a      	cmp	r2, r3
 8010228:	d10d      	bne.n	8010246 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d009      	beq.n	8010246 <pbuf_copy+0x13a>
 8010232:	4b15      	ldr	r3, [pc, #84]	; (8010288 <pbuf_copy+0x17c>)
 8010234:	f240 32de 	movw	r2, #990	; 0x3de
 8010238:	4919      	ldr	r1, [pc, #100]	; (80102a0 <pbuf_copy+0x194>)
 801023a:	4815      	ldr	r0, [pc, #84]	; (8010290 <pbuf_copy+0x184>)
 801023c:	f007 fb72 	bl	8017924 <iprintf>
 8010240:	f06f 0305 	mvn.w	r3, #5
 8010244:	e01b      	b.n	801027e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d013      	beq.n	8010274 <pbuf_copy+0x168>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	895a      	ldrh	r2, [r3, #10]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	891b      	ldrh	r3, [r3, #8]
 8010254:	429a      	cmp	r2, r3
 8010256:	d10d      	bne.n	8010274 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d009      	beq.n	8010274 <pbuf_copy+0x168>
 8010260:	4b09      	ldr	r3, [pc, #36]	; (8010288 <pbuf_copy+0x17c>)
 8010262:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010266:	490e      	ldr	r1, [pc, #56]	; (80102a0 <pbuf_copy+0x194>)
 8010268:	4809      	ldr	r0, [pc, #36]	; (8010290 <pbuf_copy+0x184>)
 801026a:	f007 fb5b 	bl	8017924 <iprintf>
 801026e:	f06f 0305 	mvn.w	r3, #5
 8010272:	e004      	b.n	801027e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	f47f af67 	bne.w	801014a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	08018ed4 	.word	0x08018ed4
 801028c:	08019264 	.word	0x08019264
 8010290:	08018f20 	.word	0x08018f20
 8010294:	08019294 	.word	0x08019294
 8010298:	080192ac 	.word	0x080192ac
 801029c:	080192c8 	.word	0x080192c8
 80102a0:	080192d8 	.word	0x080192d8

080102a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	4611      	mov	r1, r2
 80102b0:	461a      	mov	r2, r3
 80102b2:	460b      	mov	r3, r1
 80102b4:	80fb      	strh	r3, [r7, #6]
 80102b6:	4613      	mov	r3, r2
 80102b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80102ba:	2300      	movs	r3, #0
 80102bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d108      	bne.n	80102d6 <pbuf_copy_partial+0x32>
 80102c4:	4b30      	ldr	r3, [pc, #192]	; (8010388 <pbuf_copy_partial+0xe4>)
 80102c6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80102ca:	4930      	ldr	r1, [pc, #192]	; (801038c <pbuf_copy_partial+0xe8>)
 80102cc:	4830      	ldr	r0, [pc, #192]	; (8010390 <pbuf_copy_partial+0xec>)
 80102ce:	f007 fb29 	bl	8017924 <iprintf>
 80102d2:	2300      	movs	r3, #0
 80102d4:	e054      	b.n	8010380 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d108      	bne.n	80102ee <pbuf_copy_partial+0x4a>
 80102dc:	4b2a      	ldr	r3, [pc, #168]	; (8010388 <pbuf_copy_partial+0xe4>)
 80102de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80102e2:	492c      	ldr	r1, [pc, #176]	; (8010394 <pbuf_copy_partial+0xf0>)
 80102e4:	482a      	ldr	r0, [pc, #168]	; (8010390 <pbuf_copy_partial+0xec>)
 80102e6:	f007 fb1d 	bl	8017924 <iprintf>
 80102ea:	2300      	movs	r3, #0
 80102ec:	e048      	b.n	8010380 <pbuf_copy_partial+0xdc>

  left = 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <pbuf_copy_partial+0x5a>
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d101      	bne.n	8010302 <pbuf_copy_partial+0x5e>
    return 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	e03e      	b.n	8010380 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	61fb      	str	r3, [r7, #28]
 8010306:	e034      	b.n	8010372 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010308:	88bb      	ldrh	r3, [r7, #4]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d00a      	beq.n	8010324 <pbuf_copy_partial+0x80>
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	895b      	ldrh	r3, [r3, #10]
 8010312:	88ba      	ldrh	r2, [r7, #4]
 8010314:	429a      	cmp	r2, r3
 8010316:	d305      	bcc.n	8010324 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	895b      	ldrh	r3, [r3, #10]
 801031c:	88ba      	ldrh	r2, [r7, #4]
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	80bb      	strh	r3, [r7, #4]
 8010322:	e023      	b.n	801036c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	895a      	ldrh	r2, [r3, #10]
 8010328:	88bb      	ldrh	r3, [r7, #4]
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801032e:	8b3a      	ldrh	r2, [r7, #24]
 8010330:	88fb      	ldrh	r3, [r7, #6]
 8010332:	429a      	cmp	r2, r3
 8010334:	d901      	bls.n	801033a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8010336:	88fb      	ldrh	r3, [r7, #6]
 8010338:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 801033a:	8b7b      	ldrh	r3, [r7, #26]
 801033c:	68ba      	ldr	r2, [r7, #8]
 801033e:	18d0      	adds	r0, r2, r3
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	685a      	ldr	r2, [r3, #4]
 8010344:	88bb      	ldrh	r3, [r7, #4]
 8010346:	4413      	add	r3, r2
 8010348:	8b3a      	ldrh	r2, [r7, #24]
 801034a:	4619      	mov	r1, r3
 801034c:	f007 fad7 	bl	80178fe <memcpy>
      copied_total += buf_copy_len;
 8010350:	8afa      	ldrh	r2, [r7, #22]
 8010352:	8b3b      	ldrh	r3, [r7, #24]
 8010354:	4413      	add	r3, r2
 8010356:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010358:	8b7a      	ldrh	r2, [r7, #26]
 801035a:	8b3b      	ldrh	r3, [r7, #24]
 801035c:	4413      	add	r3, r2
 801035e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8010360:	88fa      	ldrh	r2, [r7, #6]
 8010362:	8b3b      	ldrh	r3, [r7, #24]
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010368:	2300      	movs	r3, #0
 801036a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	61fb      	str	r3, [r7, #28]
 8010372:	88fb      	ldrh	r3, [r7, #6]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d002      	beq.n	801037e <pbuf_copy_partial+0xda>
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1c4      	bne.n	8010308 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801037e:	8afb      	ldrh	r3, [r7, #22]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3720      	adds	r7, #32
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	08018ed4 	.word	0x08018ed4
 801038c:	08019304 	.word	0x08019304
 8010390:	08018f20 	.word	0x08018f20
 8010394:	08019324 	.word	0x08019324

08010398 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010398:	b480      	push	{r7}
 801039a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801039c:	bf00      	nop
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
	...

080103a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80103ac:	f000 fdf0 	bl	8010f90 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80103b0:	4b07      	ldr	r3, [pc, #28]	; (80103d0 <tcp_tmr+0x28>)
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	3301      	adds	r3, #1
 80103b6:	b2da      	uxtb	r2, r3
 80103b8:	4b05      	ldr	r3, [pc, #20]	; (80103d0 <tcp_tmr+0x28>)
 80103ba:	701a      	strb	r2, [r3, #0]
 80103bc:	4b04      	ldr	r3, [pc, #16]	; (80103d0 <tcp_tmr+0x28>)
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	f003 0301 	and.w	r3, r3, #1
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d001      	beq.n	80103cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80103c8:	f000 fb22 	bl	8010a10 <tcp_slowtmr>
  }
}
 80103cc:	bf00      	nop
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	2400a3fd 	.word	0x2400a3fd

080103d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	60fb      	str	r3, [r7, #12]
 80103e2:	e00a      	b.n	80103fa <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103e8:	683a      	ldr	r2, [r7, #0]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d102      	bne.n	80103f4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2200      	movs	r2, #0
 80103f2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	60fb      	str	r3, [r7, #12]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1f1      	bne.n	80103e4 <tcp_remove_listener+0x10>
      }
   }
}
 8010400:	bf00      	nop
 8010402:	3714      	adds	r7, #20
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d105      	bne.n	8010426 <tcp_listen_closed+0x1a>
 801041a:	4b13      	ldr	r3, [pc, #76]	; (8010468 <tcp_listen_closed+0x5c>)
 801041c:	22c0      	movs	r2, #192	; 0xc0
 801041e:	4913      	ldr	r1, [pc, #76]	; (801046c <tcp_listen_closed+0x60>)
 8010420:	4813      	ldr	r0, [pc, #76]	; (8010470 <tcp_listen_closed+0x64>)
 8010422:	f007 fa7f 	bl	8017924 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	7d1b      	ldrb	r3, [r3, #20]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d005      	beq.n	801043a <tcp_listen_closed+0x2e>
 801042e:	4b0e      	ldr	r3, [pc, #56]	; (8010468 <tcp_listen_closed+0x5c>)
 8010430:	22c1      	movs	r2, #193	; 0xc1
 8010432:	4910      	ldr	r1, [pc, #64]	; (8010474 <tcp_listen_closed+0x68>)
 8010434:	480e      	ldr	r0, [pc, #56]	; (8010470 <tcp_listen_closed+0x64>)
 8010436:	f007 fa75 	bl	8017924 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801043a:	2301      	movs	r3, #1
 801043c:	60fb      	str	r3, [r7, #12]
 801043e:	e00b      	b.n	8010458 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8010440:	4a0d      	ldr	r2, [pc, #52]	; (8010478 <tcp_listen_closed+0x6c>)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	6879      	ldr	r1, [r7, #4]
 801044c:	4618      	mov	r0, r3
 801044e:	f7ff ffc1 	bl	80103d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	3301      	adds	r3, #1
 8010456:	60fb      	str	r3, [r7, #12]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2b03      	cmp	r3, #3
 801045c:	d9f0      	bls.n	8010440 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801045e:	bf00      	nop
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	08019458 	.word	0x08019458
 801046c:	08019488 	.word	0x08019488
 8010470:	08019494 	.word	0x08019494
 8010474:	080194bc 	.word	0x080194bc
 8010478:	0801a910 	.word	0x0801a910

0801047c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801047c:	b5b0      	push	{r4, r5, r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af02      	add	r7, sp, #8
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	460b      	mov	r3, r1
 8010486:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010488:	78fb      	ldrb	r3, [r7, #3]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d075      	beq.n	801057a <tcp_close_shutdown+0xfe>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	7d1b      	ldrb	r3, [r3, #20]
 8010492:	2b04      	cmp	r3, #4
 8010494:	d003      	beq.n	801049e <tcp_close_shutdown+0x22>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	7d1b      	ldrb	r3, [r3, #20]
 801049a:	2b07      	cmp	r3, #7
 801049c:	d16d      	bne.n	801057a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d104      	bne.n	80104b0 <tcp_close_shutdown+0x34>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80104ae:	d064      	beq.n	801057a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	7e9b      	ldrb	r3, [r3, #26]
 80104b4:	f003 0310 	and.w	r3, r3, #16
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d106      	bne.n	80104ca <tcp_close_shutdown+0x4e>
 80104bc:	4b59      	ldr	r3, [pc, #356]	; (8010624 <tcp_close_shutdown+0x1a8>)
 80104be:	f240 120f 	movw	r2, #271	; 0x10f
 80104c2:	4959      	ldr	r1, [pc, #356]	; (8010628 <tcp_close_shutdown+0x1ac>)
 80104c4:	4859      	ldr	r0, [pc, #356]	; (801062c <tcp_close_shutdown+0x1b0>)
 80104c6:	f007 fa2d 	bl	8017924 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80104d2:	687c      	ldr	r4, [r7, #4]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	1d1d      	adds	r5, r3, #4
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	8adb      	ldrh	r3, [r3, #22]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	8b12      	ldrh	r2, [r2, #24]
 80104e0:	9201      	str	r2, [sp, #4]
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	462b      	mov	r3, r5
 80104e6:	4622      	mov	r2, r4
 80104e8:	f004 f862 	bl	80145b0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 ffc5 	bl	801147c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80104f2:	4b4f      	ldr	r3, [pc, #316]	; (8010630 <tcp_close_shutdown+0x1b4>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d105      	bne.n	8010508 <tcp_close_shutdown+0x8c>
 80104fc:	4b4c      	ldr	r3, [pc, #304]	; (8010630 <tcp_close_shutdown+0x1b4>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	4a4b      	ldr	r2, [pc, #300]	; (8010630 <tcp_close_shutdown+0x1b4>)
 8010504:	6013      	str	r3, [r2, #0]
 8010506:	e013      	b.n	8010530 <tcp_close_shutdown+0xb4>
 8010508:	4b49      	ldr	r3, [pc, #292]	; (8010630 <tcp_close_shutdown+0x1b4>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	60fb      	str	r3, [r7, #12]
 801050e:	e00c      	b.n	801052a <tcp_close_shutdown+0xae>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	429a      	cmp	r2, r3
 8010518:	d104      	bne.n	8010524 <tcp_close_shutdown+0xa8>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68da      	ldr	r2, [r3, #12]
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	60da      	str	r2, [r3, #12]
 8010522:	e005      	b.n	8010530 <tcp_close_shutdown+0xb4>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d1ef      	bne.n	8010510 <tcp_close_shutdown+0x94>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	60da      	str	r2, [r3, #12]
 8010536:	4b3f      	ldr	r3, [pc, #252]	; (8010634 <tcp_close_shutdown+0x1b8>)
 8010538:	2201      	movs	r2, #1
 801053a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	7d1b      	ldrb	r3, [r3, #20]
 8010540:	2b04      	cmp	r3, #4
 8010542:	d10c      	bne.n	801055e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	220a      	movs	r2, #10
 8010548:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801054a:	4b3b      	ldr	r3, [pc, #236]	; (8010638 <tcp_close_shutdown+0x1bc>)
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	60da      	str	r2, [r3, #12]
 8010552:	4a39      	ldr	r2, [pc, #228]	; (8010638 <tcp_close_shutdown+0x1bc>)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6013      	str	r3, [r2, #0]
 8010558:	f004 fa7c 	bl	8014a54 <tcp_timer_needed>
 801055c:	e00b      	b.n	8010576 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801055e:	4b37      	ldr	r3, [pc, #220]	; (801063c <tcp_close_shutdown+0x1c0>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	429a      	cmp	r2, r3
 8010566:	d102      	bne.n	801056e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8010568:	f003 faec 	bl	8013b44 <tcp_trigger_input_pcb_close>
 801056c:	e003      	b.n	8010576 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801056e:	6879      	ldr	r1, [r7, #4]
 8010570:	2001      	movs	r0, #1
 8010572:	f7fe fec7 	bl	800f304 <memp_free>
        }
      }
      return ERR_OK;
 8010576:	2300      	movs	r3, #0
 8010578:	e050      	b.n	801061c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	7d1b      	ldrb	r3, [r3, #20]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d02e      	beq.n	80105e0 <tcp_close_shutdown+0x164>
 8010582:	2b02      	cmp	r3, #2
 8010584:	d038      	beq.n	80105f8 <tcp_close_shutdown+0x17c>
 8010586:	2b00      	cmp	r3, #0
 8010588:	d142      	bne.n	8010610 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	8adb      	ldrh	r3, [r3, #22]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d021      	beq.n	80105d6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010592:	4b2b      	ldr	r3, [pc, #172]	; (8010640 <tcp_close_shutdown+0x1c4>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	429a      	cmp	r2, r3
 801059a:	d105      	bne.n	80105a8 <tcp_close_shutdown+0x12c>
 801059c:	4b28      	ldr	r3, [pc, #160]	; (8010640 <tcp_close_shutdown+0x1c4>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	4a27      	ldr	r2, [pc, #156]	; (8010640 <tcp_close_shutdown+0x1c4>)
 80105a4:	6013      	str	r3, [r2, #0]
 80105a6:	e013      	b.n	80105d0 <tcp_close_shutdown+0x154>
 80105a8:	4b25      	ldr	r3, [pc, #148]	; (8010640 <tcp_close_shutdown+0x1c4>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	60bb      	str	r3, [r7, #8]
 80105ae:	e00c      	b.n	80105ca <tcp_close_shutdown+0x14e>
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d104      	bne.n	80105c4 <tcp_close_shutdown+0x148>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	68da      	ldr	r2, [r3, #12]
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	60da      	str	r2, [r3, #12]
 80105c2:	e005      	b.n	80105d0 <tcp_close_shutdown+0x154>
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	60bb      	str	r3, [r7, #8]
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1ef      	bne.n	80105b0 <tcp_close_shutdown+0x134>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80105d6:	6879      	ldr	r1, [r7, #4]
 80105d8:	2001      	movs	r0, #1
 80105da:	f7fe fe93 	bl	800f304 <memp_free>
    break;
 80105de:	e01c      	b.n	801061a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff ff13 	bl	801040c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80105e6:	6879      	ldr	r1, [r7, #4]
 80105e8:	4816      	ldr	r0, [pc, #88]	; (8010644 <tcp_close_shutdown+0x1c8>)
 80105ea:	f000 ff89 	bl	8011500 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80105ee:	6879      	ldr	r1, [r7, #4]
 80105f0:	2002      	movs	r0, #2
 80105f2:	f7fe fe87 	bl	800f304 <memp_free>
    break;
 80105f6:	e010      	b.n	801061a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80105f8:	6879      	ldr	r1, [r7, #4]
 80105fa:	480d      	ldr	r0, [pc, #52]	; (8010630 <tcp_close_shutdown+0x1b4>)
 80105fc:	f000 ff80 	bl	8011500 <tcp_pcb_remove>
 8010600:	4b0c      	ldr	r3, [pc, #48]	; (8010634 <tcp_close_shutdown+0x1b8>)
 8010602:	2201      	movs	r2, #1
 8010604:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8010606:	6879      	ldr	r1, [r7, #4]
 8010608:	2001      	movs	r0, #1
 801060a:	f7fe fe7b 	bl	800f304 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801060e:	e004      	b.n	801061a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 f819 	bl	8010648 <tcp_close_shutdown_fin>
 8010616:	4603      	mov	r3, r0
 8010618:	e000      	b.n	801061c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 801061a:	2300      	movs	r3, #0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bdb0      	pop	{r4, r5, r7, pc}
 8010624:	08019458 	.word	0x08019458
 8010628:	080194d4 	.word	0x080194d4
 801062c:	08019494 	.word	0x08019494
 8010630:	2400da20 	.word	0x2400da20
 8010634:	2400da1c 	.word	0x2400da1c
 8010638:	2400da30 	.word	0x2400da30
 801063c:	2400da34 	.word	0x2400da34
 8010640:	2400da2c 	.word	0x2400da2c
 8010644:	2400da28 	.word	0x2400da28

08010648 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <tcp_close_shutdown_fin+0x1c>
 8010656:	4b2c      	ldr	r3, [pc, #176]	; (8010708 <tcp_close_shutdown_fin+0xc0>)
 8010658:	f240 124d 	movw	r2, #333	; 0x14d
 801065c:	492b      	ldr	r1, [pc, #172]	; (801070c <tcp_close_shutdown_fin+0xc4>)
 801065e:	482c      	ldr	r0, [pc, #176]	; (8010710 <tcp_close_shutdown_fin+0xc8>)
 8010660:	f007 f960 	bl	8017924 <iprintf>

  switch (pcb->state) {
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	7d1b      	ldrb	r3, [r3, #20]
 8010668:	2b04      	cmp	r3, #4
 801066a:	d010      	beq.n	801068e <tcp_close_shutdown_fin+0x46>
 801066c:	2b07      	cmp	r3, #7
 801066e:	d01b      	beq.n	80106a8 <tcp_close_shutdown_fin+0x60>
 8010670:	2b03      	cmp	r3, #3
 8010672:	d126      	bne.n	80106c2 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f003 faf1 	bl	8013c5c <tcp_send_fin>
 801067a:	4603      	mov	r3, r0
 801067c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801067e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d11f      	bne.n	80106c6 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2205      	movs	r2, #5
 801068a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801068c:	e01b      	b.n	80106c6 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f003 fae4 	bl	8013c5c <tcp_send_fin>
 8010694:	4603      	mov	r3, r0
 8010696:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d114      	bne.n	80106ca <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2205      	movs	r2, #5
 80106a4:	751a      	strb	r2, [r3, #20]
    }
    break;
 80106a6:	e010      	b.n	80106ca <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f003 fad7 	bl	8013c5c <tcp_send_fin>
 80106ae:	4603      	mov	r3, r0
 80106b0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80106b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d109      	bne.n	80106ce <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2209      	movs	r2, #9
 80106be:	751a      	strb	r2, [r3, #20]
    }
    break;
 80106c0:	e005      	b.n	80106ce <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80106c2:	2300      	movs	r3, #0
 80106c4:	e01c      	b.n	8010700 <tcp_close_shutdown_fin+0xb8>
    break;
 80106c6:	bf00      	nop
 80106c8:	e002      	b.n	80106d0 <tcp_close_shutdown_fin+0x88>
    break;
 80106ca:	bf00      	nop
 80106cc:	e000      	b.n	80106d0 <tcp_close_shutdown_fin+0x88>
    break;
 80106ce:	bf00      	nop
  }

  if (err == ERR_OK) {
 80106d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d103      	bne.n	80106e0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f003 fcdf 	bl	801409c <tcp_output>
 80106de:	e00d      	b.n	80106fc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80106e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e8:	d108      	bne.n	80106fc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	7e9b      	ldrb	r3, [r3, #26]
 80106ee:	f043 0308 	orr.w	r3, r3, #8
 80106f2:	b2da      	uxtb	r2, r3
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	e001      	b.n	8010700 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80106fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	08019458 	.word	0x08019458
 801070c:	08019488 	.word	0x08019488
 8010710:	08019494 	.word	0x08019494

08010714 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	7d1b      	ldrb	r3, [r3, #20]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d006      	beq.n	8010732 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	7e9b      	ldrb	r3, [r3, #26]
 8010728:	f043 0310 	orr.w	r3, r3, #16
 801072c:	b2da      	uxtb	r2, r3
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010732:	2101      	movs	r1, #1
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff fea1 	bl	801047c <tcp_close_shutdown>
 801073a:	4603      	mov	r3, r0
}
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b08c      	sub	sp, #48	; 0x30
 8010748:	af02      	add	r7, sp, #8
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	7d1b      	ldrb	r3, [r3, #20]
 8010752:	2b01      	cmp	r3, #1
 8010754:	d106      	bne.n	8010764 <tcp_abandon+0x20>
 8010756:	4b4d      	ldr	r3, [pc, #308]	; (801088c <tcp_abandon+0x148>)
 8010758:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801075c:	494c      	ldr	r1, [pc, #304]	; (8010890 <tcp_abandon+0x14c>)
 801075e:	484d      	ldr	r0, [pc, #308]	; (8010894 <tcp_abandon+0x150>)
 8010760:	f007 f8e0 	bl	8017924 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	7d1b      	ldrb	r3, [r3, #20]
 8010768:	2b0a      	cmp	r3, #10
 801076a:	d108      	bne.n	801077e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801076c:	6879      	ldr	r1, [r7, #4]
 801076e:	484a      	ldr	r0, [pc, #296]	; (8010898 <tcp_abandon+0x154>)
 8010770:	f000 fec6 	bl	8011500 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8010774:	6879      	ldr	r1, [r7, #4]
 8010776:	2001      	movs	r0, #1
 8010778:	f7fe fdc4 	bl	800f304 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 801077c:	e081      	b.n	8010882 <tcp_abandon+0x13e>
    int send_rst = 0;
 801077e:	2300      	movs	r3, #0
 8010780:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010782:	2300      	movs	r3, #0
 8010784:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801078a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010790:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010798:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	691b      	ldr	r3, [r3, #16]
 801079e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	7d1b      	ldrb	r3, [r3, #20]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d126      	bne.n	80107f6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	8adb      	ldrh	r3, [r3, #22]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d02e      	beq.n	801080e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80107b0:	4b3a      	ldr	r3, [pc, #232]	; (801089c <tcp_abandon+0x158>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d105      	bne.n	80107c6 <tcp_abandon+0x82>
 80107ba:	4b38      	ldr	r3, [pc, #224]	; (801089c <tcp_abandon+0x158>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	4a36      	ldr	r2, [pc, #216]	; (801089c <tcp_abandon+0x158>)
 80107c2:	6013      	str	r3, [r2, #0]
 80107c4:	e013      	b.n	80107ee <tcp_abandon+0xaa>
 80107c6:	4b35      	ldr	r3, [pc, #212]	; (801089c <tcp_abandon+0x158>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	61fb      	str	r3, [r7, #28]
 80107cc:	e00c      	b.n	80107e8 <tcp_abandon+0xa4>
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d104      	bne.n	80107e2 <tcp_abandon+0x9e>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68da      	ldr	r2, [r3, #12]
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	60da      	str	r2, [r3, #12]
 80107e0:	e005      	b.n	80107ee <tcp_abandon+0xaa>
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	61fb      	str	r3, [r7, #28]
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d1ef      	bne.n	80107ce <tcp_abandon+0x8a>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	60da      	str	r2, [r3, #12]
 80107f4:	e00b      	b.n	801080e <tcp_abandon+0xca>
      send_rst = reset;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	8adb      	ldrh	r3, [r3, #22]
 80107fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010800:	6879      	ldr	r1, [r7, #4]
 8010802:	4827      	ldr	r0, [pc, #156]	; (80108a0 <tcp_abandon+0x15c>)
 8010804:	f000 fe7c 	bl	8011500 <tcp_pcb_remove>
 8010808:	4b26      	ldr	r3, [pc, #152]	; (80108a4 <tcp_abandon+0x160>)
 801080a:	2201      	movs	r2, #1
 801080c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010812:	2b00      	cmp	r3, #0
 8010814:	d004      	beq.n	8010820 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801081a:	4618      	mov	r0, r3
 801081c:	f000 fc85 	bl	801112a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010824:	2b00      	cmp	r3, #0
 8010826:	d004      	beq.n	8010832 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801082c:	4618      	mov	r0, r3
 801082e:	f000 fc7c 	bl	801112a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010836:	2b00      	cmp	r3, #0
 8010838:	d004      	beq.n	8010844 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801083e:	4618      	mov	r0, r3
 8010840:	f000 fc73 	bl	801112a <tcp_segs_free>
    if (send_rst) {
 8010844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010846:	2b00      	cmp	r3, #0
 8010848:	d00c      	beq.n	8010864 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	1d19      	adds	r1, r3, #4
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	8b1b      	ldrh	r3, [r3, #24]
 8010854:	9301      	str	r3, [sp, #4]
 8010856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	460b      	mov	r3, r1
 801085c:	6979      	ldr	r1, [r7, #20]
 801085e:	69b8      	ldr	r0, [r7, #24]
 8010860:	f003 fea6 	bl	80145b0 <tcp_rst>
    last_state = pcb->state;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	7d1b      	ldrb	r3, [r3, #20]
 8010868:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801086a:	6879      	ldr	r1, [r7, #4]
 801086c:	2001      	movs	r0, #1
 801086e:	f7fe fd49 	bl	800f304 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d004      	beq.n	8010882 <tcp_abandon+0x13e>
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	f06f 010c 	mvn.w	r1, #12
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	4798      	blx	r3
}
 8010882:	bf00      	nop
 8010884:	3728      	adds	r7, #40	; 0x28
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	08019458 	.word	0x08019458
 8010890:	080194f0 	.word	0x080194f0
 8010894:	08019494 	.word	0x08019494
 8010898:	2400da30 	.word	0x2400da30
 801089c:	2400da2c 	.word	0x2400da2c
 80108a0:	2400da20 	.word	0x2400da20
 80108a4:	2400da1c 	.word	0x2400da1c

080108a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80108b0:	2101      	movs	r1, #1
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f7ff ff46 	bl	8010744 <tcp_abandon>
}
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80108d0:	4413      	add	r3, r2
 80108d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80108dc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80108e0:	bf28      	it	cs
 80108e2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80108e6:	b292      	uxth	r2, r2
 80108e8:	4413      	add	r3, r2
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	db08      	blt.n	8010904 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	e020      	b.n	8010946 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801090c:	1ad3      	subs	r3, r2, r3
 801090e:	2b00      	cmp	r3, #0
 8010910:	dd03      	ble.n	801091a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2200      	movs	r2, #0
 8010916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010918:	e014      	b.n	8010944 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801092c:	d306      	bcc.n	801093c <tcp_update_rcv_ann_wnd+0x7c>
 801092e:	4b08      	ldr	r3, [pc, #32]	; (8010950 <tcp_update_rcv_ann_wnd+0x90>)
 8010930:	f44f 7242 	mov.w	r2, #776	; 0x308
 8010934:	4907      	ldr	r1, [pc, #28]	; (8010954 <tcp_update_rcv_ann_wnd+0x94>)
 8010936:	4808      	ldr	r0, [pc, #32]	; (8010958 <tcp_update_rcv_ann_wnd+0x98>)
 8010938:	f006 fff4 	bl	8017924 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	b29a      	uxth	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010944:	2300      	movs	r3, #0
  }
}
 8010946:	4618      	mov	r0, r3
 8010948:	3710      	adds	r7, #16
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	08019458 	.word	0x08019458
 8010954:	08019570 	.word	0x08019570
 8010958:	08019494 	.word	0x08019494

0801095c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	460b      	mov	r3, r1
 8010966:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	7d1b      	ldrb	r3, [r3, #20]
 801096c:	2b01      	cmp	r3, #1
 801096e:	d106      	bne.n	801097e <tcp_recved+0x22>
 8010970:	4b23      	ldr	r3, [pc, #140]	; (8010a00 <tcp_recved+0xa4>)
 8010972:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010976:	4923      	ldr	r1, [pc, #140]	; (8010a04 <tcp_recved+0xa8>)
 8010978:	4823      	ldr	r0, [pc, #140]	; (8010a08 <tcp_recved+0xac>)
 801097a:	f006 ffd3 	bl	8017924 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010982:	887b      	ldrh	r3, [r7, #2]
 8010984:	4413      	add	r3, r2
 8010986:	b29a      	uxth	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010990:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010994:	d904      	bls.n	80109a0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801099c:	851a      	strh	r2, [r3, #40]	; 0x28
 801099e:	e017      	b.n	80109d0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d113      	bne.n	80109d0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	7d1b      	ldrb	r3, [r3, #20]
 80109ac:	2b07      	cmp	r3, #7
 80109ae:	d003      	beq.n	80109b8 <tcp_recved+0x5c>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	7d1b      	ldrb	r3, [r3, #20]
 80109b4:	2b09      	cmp	r3, #9
 80109b6:	d104      	bne.n	80109c2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80109be:	851a      	strh	r2, [r3, #40]	; 0x28
 80109c0:	e006      	b.n	80109d0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80109c2:	4b0f      	ldr	r3, [pc, #60]	; (8010a00 <tcp_recved+0xa4>)
 80109c4:	f240 322d 	movw	r2, #813	; 0x32d
 80109c8:	4910      	ldr	r1, [pc, #64]	; (8010a0c <tcp_recved+0xb0>)
 80109ca:	480f      	ldr	r0, [pc, #60]	; (8010a08 <tcp_recved+0xac>)
 80109cc:	f006 ffaa 	bl	8017924 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7ff ff75 	bl	80108c0 <tcp_update_rcv_ann_wnd>
 80109d6:	4603      	mov	r3, r0
 80109d8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80109e0:	db09      	blt.n	80109f6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	7e9b      	ldrb	r3, [r3, #26]
 80109e6:	f043 0302 	orr.w	r3, r3, #2
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f003 fb53 	bl	801409c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80109f6:	bf00      	nop
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	08019458 	.word	0x08019458
 8010a04:	0801958c 	.word	0x0801958c
 8010a08:	08019494 	.word	0x08019494
 8010a0c:	080195b4 	.word	0x080195b4

08010a10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010a10:	b5b0      	push	{r4, r5, r7, lr}
 8010a12:	b08c      	sub	sp, #48	; 0x30
 8010a14:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010a16:	2300      	movs	r3, #0
 8010a18:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8010a1a:	4b96      	ldr	r3, [pc, #600]	; (8010c74 <tcp_slowtmr+0x264>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	4a94      	ldr	r2, [pc, #592]	; (8010c74 <tcp_slowtmr+0x264>)
 8010a22:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010a24:	4b94      	ldr	r3, [pc, #592]	; (8010c78 <tcp_slowtmr+0x268>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	4b92      	ldr	r3, [pc, #584]	; (8010c78 <tcp_slowtmr+0x268>)
 8010a2e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010a30:	2300      	movs	r3, #0
 8010a32:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8010a34:	4b91      	ldr	r3, [pc, #580]	; (8010c7c <tcp_slowtmr+0x26c>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010a3a:	e227      	b.n	8010e8c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3e:	7d1b      	ldrb	r3, [r3, #20]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d106      	bne.n	8010a52 <tcp_slowtmr+0x42>
 8010a44:	4b8e      	ldr	r3, [pc, #568]	; (8010c80 <tcp_slowtmr+0x270>)
 8010a46:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8010a4a:	498e      	ldr	r1, [pc, #568]	; (8010c84 <tcp_slowtmr+0x274>)
 8010a4c:	488e      	ldr	r0, [pc, #568]	; (8010c88 <tcp_slowtmr+0x278>)
 8010a4e:	f006 ff69 	bl	8017924 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a54:	7d1b      	ldrb	r3, [r3, #20]
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d106      	bne.n	8010a68 <tcp_slowtmr+0x58>
 8010a5a:	4b89      	ldr	r3, [pc, #548]	; (8010c80 <tcp_slowtmr+0x270>)
 8010a5c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010a60:	498a      	ldr	r1, [pc, #552]	; (8010c8c <tcp_slowtmr+0x27c>)
 8010a62:	4889      	ldr	r0, [pc, #548]	; (8010c88 <tcp_slowtmr+0x278>)
 8010a64:	f006 ff5e 	bl	8017924 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6a:	7d1b      	ldrb	r3, [r3, #20]
 8010a6c:	2b0a      	cmp	r3, #10
 8010a6e:	d106      	bne.n	8010a7e <tcp_slowtmr+0x6e>
 8010a70:	4b83      	ldr	r3, [pc, #524]	; (8010c80 <tcp_slowtmr+0x270>)
 8010a72:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8010a76:	4986      	ldr	r1, [pc, #536]	; (8010c90 <tcp_slowtmr+0x280>)
 8010a78:	4883      	ldr	r0, [pc, #524]	; (8010c88 <tcp_slowtmr+0x278>)
 8010a7a:	f006 ff53 	bl	8017924 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a80:	7f5a      	ldrb	r2, [r3, #29]
 8010a82:	4b7d      	ldr	r3, [pc, #500]	; (8010c78 <tcp_slowtmr+0x268>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d103      	bne.n	8010a92 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	68db      	ldr	r3, [r3, #12]
 8010a8e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8010a90:	e1fc      	b.n	8010e8c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010a92:	4b79      	ldr	r3, [pc, #484]	; (8010c78 <tcp_slowtmr+0x268>)
 8010a94:	781a      	ldrb	r2, [r3, #0]
 8010a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a98:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa4:	7d1b      	ldrb	r3, [r3, #20]
 8010aa6:	2b02      	cmp	r3, #2
 8010aa8:	d108      	bne.n	8010abc <tcp_slowtmr+0xac>
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ab0:	2b05      	cmp	r3, #5
 8010ab2:	d903      	bls.n	8010abc <tcp_slowtmr+0xac>
      ++pcb_remove;
 8010ab4:	7ffb      	ldrb	r3, [r7, #31]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	77fb      	strb	r3, [r7, #31]
 8010aba:	e0a2      	b.n	8010c02 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8010abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ac2:	2b0b      	cmp	r3, #11
 8010ac4:	d903      	bls.n	8010ace <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8010ac6:	7ffb      	ldrb	r3, [r7, #31]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	77fb      	strb	r3, [r7, #31]
 8010acc:	e099      	b.n	8010c02 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d032      	beq.n	8010b3e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ada:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	4a6c      	ldr	r2, [pc, #432]	; (8010c94 <tcp_slowtmr+0x284>)
 8010ae2:	5cd3      	ldrb	r3, [r2, r3]
 8010ae4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8010ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010aec:	7cfa      	ldrb	r2, [r7, #19]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d907      	bls.n	8010b02 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8010af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010af8:	3301      	adds	r3, #1
 8010afa:	b2da      	uxtb	r2, r3
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8010b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b04:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010b08:	7cfa      	ldrb	r2, [r7, #19]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d879      	bhi.n	8010c02 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8010b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b10:	f003 fee0 	bl	80148d4 <tcp_zero_window_probe>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d173      	bne.n	8010c02 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8010b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b24:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010b28:	2b06      	cmp	r3, #6
 8010b2a:	d86a      	bhi.n	8010c02 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010b32:	3301      	adds	r3, #1
 8010b34:	b2da      	uxtb	r2, r3
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010b3c:	e061      	b.n	8010c02 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	db08      	blt.n	8010b5a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8010b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	3301      	adds	r3, #1
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	b21a      	sxth	r2, r3
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8010b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d04f      	beq.n	8010c02 <tcp_slowtmr+0x1f2>
 8010b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b64:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	db47      	blt.n	8010c02 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8010b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b74:	7d1b      	ldrb	r3, [r3, #20]
 8010b76:	2b02      	cmp	r3, #2
 8010b78:	d018      	beq.n	8010bac <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b80:	2b0c      	cmp	r3, #12
 8010b82:	bf28      	it	cs
 8010b84:	230c      	movcs	r3, #12
 8010b86:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b8e:	10db      	asrs	r3, r3, #3
 8010b90:	b21b      	sxth	r3, r3
 8010b92:	461a      	mov	r2, r3
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b9a:	4413      	add	r3, r2
 8010b9c:	7dfa      	ldrb	r2, [r7, #23]
 8010b9e:	493e      	ldr	r1, [pc, #248]	; (8010c98 <tcp_slowtmr+0x288>)
 8010ba0:	5c8a      	ldrb	r2, [r1, r2]
 8010ba2:	4093      	lsls	r3, r2
 8010ba4:	b21a      	sxth	r2, r3
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	2200      	movs	r2, #0
 8010bb0:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	bf28      	it	cs
 8010bc2:	4613      	movcs	r3, r2
 8010bc4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8010bc6:	8abb      	ldrh	r3, [r7, #20]
 8010bc8:	085b      	lsrs	r3, r3, #1
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d206      	bcs.n	8010bf2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8010be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010be8:	005b      	lsls	r3, r3, #1
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8010bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8010bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bfe:	f003 fd4d 	bl	801469c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c04:	7d1b      	ldrb	r3, [r3, #20]
 8010c06:	2b06      	cmp	r3, #6
 8010c08:	d10f      	bne.n	8010c2a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0c:	7e9b      	ldrb	r3, [r3, #26]
 8010c0e:	f003 0310 	and.w	r3, r3, #16
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d009      	beq.n	8010c2a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c16:	4b17      	ldr	r3, [pc, #92]	; (8010c74 <tcp_slowtmr+0x264>)
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	2b28      	cmp	r3, #40	; 0x28
 8010c22:	d902      	bls.n	8010c2a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010c24:	7ffb      	ldrb	r3, [r7, #31]
 8010c26:	3301      	adds	r3, #1
 8010c28:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2c:	7a1b      	ldrb	r3, [r3, #8]
 8010c2e:	f003 0308 	and.w	r3, r3, #8
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d05d      	beq.n	8010cf2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8010c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c38:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c3a:	2b04      	cmp	r3, #4
 8010c3c:	d003      	beq.n	8010c46 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c40:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8010c42:	2b07      	cmp	r3, #7
 8010c44:	d155      	bne.n	8010cf2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c46:	4b0b      	ldr	r3, [pc, #44]	; (8010c74 <tcp_slowtmr+0x264>)
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	6a1b      	ldr	r3, [r3, #32]
 8010c4e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8010c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c52:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010c56:	4b11      	ldr	r3, [pc, #68]	; (8010c9c <tcp_slowtmr+0x28c>)
 8010c58:	440b      	add	r3, r1
 8010c5a:	4911      	ldr	r1, [pc, #68]	; (8010ca0 <tcp_slowtmr+0x290>)
 8010c5c:	fba1 1303 	umull	r1, r3, r1, r3
 8010c60:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d91e      	bls.n	8010ca4 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010c66:	7ffb      	ldrb	r3, [r7, #31]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8010c6c:	7fbb      	ldrb	r3, [r7, #30]
 8010c6e:	3301      	adds	r3, #1
 8010c70:	77bb      	strb	r3, [r7, #30]
 8010c72:	e03e      	b.n	8010cf2 <tcp_slowtmr+0x2e2>
 8010c74:	2400da24 	.word	0x2400da24
 8010c78:	2400a3fe 	.word	0x2400a3fe
 8010c7c:	2400da20 	.word	0x2400da20
 8010c80:	08019458 	.word	0x08019458
 8010c84:	08019608 	.word	0x08019608
 8010c88:	08019494 	.word	0x08019494
 8010c8c:	08019634 	.word	0x08019634
 8010c90:	08019660 	.word	0x08019660
 8010c94:	0801a908 	.word	0x0801a908
 8010c98:	0801a8f8 	.word	0x0801a8f8
 8010c9c:	000a4cb8 	.word	0x000a4cb8
 8010ca0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ca4:	4b97      	ldr	r3, [pc, #604]	; (8010f04 <tcp_slowtmr+0x4f4>)
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	6a1b      	ldr	r3, [r3, #32]
 8010cac:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8010cba:	4618      	mov	r0, r3
 8010cbc:	4b92      	ldr	r3, [pc, #584]	; (8010f08 <tcp_slowtmr+0x4f8>)
 8010cbe:	fb03 f300 	mul.w	r3, r3, r0
 8010cc2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8010cc4:	4991      	ldr	r1, [pc, #580]	; (8010f0c <tcp_slowtmr+0x4fc>)
 8010cc6:	fba1 1303 	umull	r1, r3, r1, r3
 8010cca:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d910      	bls.n	8010cf2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8010cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cd2:	f003 fdc2 	bl	801485a <tcp_keepalive>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8010cda:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d107      	bne.n	8010cf2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8010ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8010ce8:	3301      	adds	r3, #1
 8010cea:	b2da      	uxtb	r2, r3
 8010cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cee:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d016      	beq.n	8010d28 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8010cfa:	4b82      	ldr	r3, [pc, #520]	; (8010f04 <tcp_slowtmr+0x4f4>)
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d00:	6a1b      	ldr	r3, [r3, #32]
 8010d02:	1ad2      	subs	r2, r2, r3
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	005b      	lsls	r3, r3, #1
 8010d10:	440b      	add	r3, r1
 8010d12:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d307      	bcc.n	8010d28 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f000 fa04 	bl	801112a <tcp_segs_free>
      pcb->ooseq = NULL;
 8010d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d24:	2200      	movs	r2, #0
 8010d26:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2a:	7d1b      	ldrb	r3, [r3, #20]
 8010d2c:	2b03      	cmp	r3, #3
 8010d2e:	d109      	bne.n	8010d44 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d30:	4b74      	ldr	r3, [pc, #464]	; (8010f04 <tcp_slowtmr+0x4f4>)
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	6a1b      	ldr	r3, [r3, #32]
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	2b28      	cmp	r3, #40	; 0x28
 8010d3c:	d902      	bls.n	8010d44 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010d3e:	7ffb      	ldrb	r3, [r7, #31]
 8010d40:	3301      	adds	r3, #1
 8010d42:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d46:	7d1b      	ldrb	r3, [r3, #20]
 8010d48:	2b09      	cmp	r3, #9
 8010d4a:	d109      	bne.n	8010d60 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010d4c:	4b6d      	ldr	r3, [pc, #436]	; (8010f04 <tcp_slowtmr+0x4f4>)
 8010d4e:	681a      	ldr	r2, [r3, #0]
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	6a1b      	ldr	r3, [r3, #32]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	2bf0      	cmp	r3, #240	; 0xf0
 8010d58:	d902      	bls.n	8010d60 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8010d5a:	7ffb      	ldrb	r3, [r7, #31]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010d60:	7ffb      	ldrb	r3, [r7, #31]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d05d      	beq.n	8010e22 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d6c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d70:	f000 fb84 	bl	801147c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010d74:	6a3b      	ldr	r3, [r7, #32]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d010      	beq.n	8010d9c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010d7a:	4b65      	ldr	r3, [pc, #404]	; (8010f10 <tcp_slowtmr+0x500>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d106      	bne.n	8010d92 <tcp_slowtmr+0x382>
 8010d84:	4b63      	ldr	r3, [pc, #396]	; (8010f14 <tcp_slowtmr+0x504>)
 8010d86:	f240 4289 	movw	r2, #1161	; 0x489
 8010d8a:	4963      	ldr	r1, [pc, #396]	; (8010f18 <tcp_slowtmr+0x508>)
 8010d8c:	4863      	ldr	r0, [pc, #396]	; (8010f1c <tcp_slowtmr+0x50c>)
 8010d8e:	f006 fdc9 	bl	8017924 <iprintf>
        prev->next = pcb->next;
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	60da      	str	r2, [r3, #12]
 8010d9a:	e00f      	b.n	8010dbc <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010d9c:	4b5c      	ldr	r3, [pc, #368]	; (8010f10 <tcp_slowtmr+0x500>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d006      	beq.n	8010db4 <tcp_slowtmr+0x3a4>
 8010da6:	4b5b      	ldr	r3, [pc, #364]	; (8010f14 <tcp_slowtmr+0x504>)
 8010da8:	f240 428d 	movw	r2, #1165	; 0x48d
 8010dac:	495c      	ldr	r1, [pc, #368]	; (8010f20 <tcp_slowtmr+0x510>)
 8010dae:	485b      	ldr	r0, [pc, #364]	; (8010f1c <tcp_slowtmr+0x50c>)
 8010db0:	f006 fdb8 	bl	8017924 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	4a55      	ldr	r2, [pc, #340]	; (8010f10 <tcp_slowtmr+0x500>)
 8010dba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010dbc:	7fbb      	ldrb	r3, [r7, #30]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d010      	beq.n	8010de4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010dca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	1d1d      	adds	r5, r3, #4
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd2:	8adb      	ldrh	r3, [r3, #22]
 8010dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd6:	8b12      	ldrh	r2, [r2, #24]
 8010dd8:	9201      	str	r2, [sp, #4]
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	462b      	mov	r3, r5
 8010dde:	4622      	mov	r2, r4
 8010de0:	f003 fbe6 	bl	80145b0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	691b      	ldr	r3, [r3, #16]
 8010de8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	7d1b      	ldrb	r3, [r3, #20]
 8010dee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	2001      	movs	r0, #1
 8010dfe:	f7fe fa81 	bl	800f304 <memp_free>

      tcp_active_pcbs_changed = 0;
 8010e02:	4b48      	ldr	r3, [pc, #288]	; (8010f24 <tcp_slowtmr+0x514>)
 8010e04:	2200      	movs	r2, #0
 8010e06:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d004      	beq.n	8010e18 <tcp_slowtmr+0x408>
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f06f 010c 	mvn.w	r1, #12
 8010e14:	68b8      	ldr	r0, [r7, #8]
 8010e16:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010e18:	4b42      	ldr	r3, [pc, #264]	; (8010f24 <tcp_slowtmr+0x514>)
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d035      	beq.n	8010e8c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8010e20:	e606      	b.n	8010a30 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010e2c:	6a3b      	ldr	r3, [r7, #32]
 8010e2e:	7edb      	ldrb	r3, [r3, #27]
 8010e30:	3301      	adds	r3, #1
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	6a3b      	ldr	r3, [r7, #32]
 8010e36:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8010e38:	6a3b      	ldr	r3, [r7, #32]
 8010e3a:	7eda      	ldrb	r2, [r3, #27]
 8010e3c:	6a3b      	ldr	r3, [r7, #32]
 8010e3e:	7f1b      	ldrb	r3, [r3, #28]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d323      	bcc.n	8010e8c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8010e44:	6a3b      	ldr	r3, [r7, #32]
 8010e46:	2200      	movs	r2, #0
 8010e48:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010e4a:	4b36      	ldr	r3, [pc, #216]	; (8010f24 <tcp_slowtmr+0x514>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010e50:	6a3b      	ldr	r3, [r7, #32]
 8010e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00a      	beq.n	8010e70 <tcp_slowtmr+0x460>
 8010e5a:	6a3b      	ldr	r3, [r7, #32]
 8010e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e60:	6a3a      	ldr	r2, [r7, #32]
 8010e62:	6912      	ldr	r2, [r2, #16]
 8010e64:	6a39      	ldr	r1, [r7, #32]
 8010e66:	4610      	mov	r0, r2
 8010e68:	4798      	blx	r3
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	777b      	strb	r3, [r7, #29]
 8010e6e:	e001      	b.n	8010e74 <tcp_slowtmr+0x464>
 8010e70:	2300      	movs	r3, #0
 8010e72:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8010e74:	4b2b      	ldr	r3, [pc, #172]	; (8010f24 <tcp_slowtmr+0x514>)
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d000      	beq.n	8010e7e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8010e7c:	e5d8      	b.n	8010a30 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010e7e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d102      	bne.n	8010e8c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8010e86:	6a38      	ldr	r0, [r7, #32]
 8010e88:	f003 f908 	bl	801409c <tcp_output>
  while (pcb != NULL) {
 8010e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f47f add4 	bne.w	8010a3c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010e94:	2300      	movs	r3, #0
 8010e96:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8010e98:	4b23      	ldr	r3, [pc, #140]	; (8010f28 <tcp_slowtmr+0x518>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010e9e:	e068      	b.n	8010f72 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea2:	7d1b      	ldrb	r3, [r3, #20]
 8010ea4:	2b0a      	cmp	r3, #10
 8010ea6:	d006      	beq.n	8010eb6 <tcp_slowtmr+0x4a6>
 8010ea8:	4b1a      	ldr	r3, [pc, #104]	; (8010f14 <tcp_slowtmr+0x504>)
 8010eaa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010eae:	491f      	ldr	r1, [pc, #124]	; (8010f2c <tcp_slowtmr+0x51c>)
 8010eb0:	481a      	ldr	r0, [pc, #104]	; (8010f1c <tcp_slowtmr+0x50c>)
 8010eb2:	f006 fd37 	bl	8017924 <iprintf>
    pcb_remove = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010eba:	4b12      	ldr	r3, [pc, #72]	; (8010f04 <tcp_slowtmr+0x4f4>)
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec0:	6a1b      	ldr	r3, [r3, #32]
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	2bf0      	cmp	r3, #240	; 0xf0
 8010ec6:	d902      	bls.n	8010ece <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8010ec8:	7ffb      	ldrb	r3, [r7, #31]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010ece:	7ffb      	ldrb	r3, [r7, #31]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d049      	beq.n	8010f68 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ed6:	f000 fad1 	bl	801147c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010eda:	6a3b      	ldr	r3, [r7, #32]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d029      	beq.n	8010f34 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010ee0:	4b11      	ldr	r3, [pc, #68]	; (8010f28 <tcp_slowtmr+0x518>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d106      	bne.n	8010ef8 <tcp_slowtmr+0x4e8>
 8010eea:	4b0a      	ldr	r3, [pc, #40]	; (8010f14 <tcp_slowtmr+0x504>)
 8010eec:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8010ef0:	490f      	ldr	r1, [pc, #60]	; (8010f30 <tcp_slowtmr+0x520>)
 8010ef2:	480a      	ldr	r0, [pc, #40]	; (8010f1c <tcp_slowtmr+0x50c>)
 8010ef4:	f006 fd16 	bl	8017924 <iprintf>
        prev->next = pcb->next;
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efa:	68da      	ldr	r2, [r3, #12]
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	60da      	str	r2, [r3, #12]
 8010f00:	e028      	b.n	8010f54 <tcp_slowtmr+0x544>
 8010f02:	bf00      	nop
 8010f04:	2400da24 	.word	0x2400da24
 8010f08:	000124f8 	.word	0x000124f8
 8010f0c:	10624dd3 	.word	0x10624dd3
 8010f10:	2400da20 	.word	0x2400da20
 8010f14:	08019458 	.word	0x08019458
 8010f18:	08019690 	.word	0x08019690
 8010f1c:	08019494 	.word	0x08019494
 8010f20:	080196bc 	.word	0x080196bc
 8010f24:	2400da1c 	.word	0x2400da1c
 8010f28:	2400da30 	.word	0x2400da30
 8010f2c:	080196e8 	.word	0x080196e8
 8010f30:	08019718 	.word	0x08019718
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010f34:	4b12      	ldr	r3, [pc, #72]	; (8010f80 <tcp_slowtmr+0x570>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d006      	beq.n	8010f4c <tcp_slowtmr+0x53c>
 8010f3e:	4b11      	ldr	r3, [pc, #68]	; (8010f84 <tcp_slowtmr+0x574>)
 8010f40:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8010f44:	4910      	ldr	r1, [pc, #64]	; (8010f88 <tcp_slowtmr+0x578>)
 8010f46:	4811      	ldr	r0, [pc, #68]	; (8010f8c <tcp_slowtmr+0x57c>)
 8010f48:	f006 fcec 	bl	8017924 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	4a0b      	ldr	r2, [pc, #44]	; (8010f80 <tcp_slowtmr+0x570>)
 8010f52:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010f5e:	69b9      	ldr	r1, [r7, #24]
 8010f60:	2001      	movs	r0, #1
 8010f62:	f7fe f9cf 	bl	800f304 <memp_free>
 8010f66:	e004      	b.n	8010f72 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8010f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d193      	bne.n	8010ea0 <tcp_slowtmr+0x490>
    }
  }
}
 8010f78:	bf00      	nop
 8010f7a:	3728      	adds	r7, #40	; 0x28
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8010f80:	2400da30 	.word	0x2400da30
 8010f84:	08019458 	.word	0x08019458
 8010f88:	08019740 	.word	0x08019740
 8010f8c:	08019494 	.word	0x08019494

08010f90 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010f96:	4b2d      	ldr	r3, [pc, #180]	; (801104c <tcp_fasttmr+0xbc>)
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	b2da      	uxtb	r2, r3
 8010f9e:	4b2b      	ldr	r3, [pc, #172]	; (801104c <tcp_fasttmr+0xbc>)
 8010fa0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010fa2:	4b2b      	ldr	r3, [pc, #172]	; (8011050 <tcp_fasttmr+0xc0>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010fa8:	e048      	b.n	801103c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	7f5a      	ldrb	r2, [r3, #29]
 8010fae:	4b27      	ldr	r3, [pc, #156]	; (801104c <tcp_fasttmr+0xbc>)
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d03f      	beq.n	8011036 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010fb6:	4b25      	ldr	r3, [pc, #148]	; (801104c <tcp_fasttmr+0xbc>)
 8010fb8:	781a      	ldrb	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	7e9b      	ldrb	r3, [r3, #26]
 8010fc2:	f003 0301 	and.w	r3, r3, #1
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d010      	beq.n	8010fec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	7e9b      	ldrb	r3, [r3, #26]
 8010fce:	f043 0302 	orr.w	r3, r3, #2
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f003 f85f 	bl	801409c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	7e9b      	ldrb	r3, [r3, #26]
 8010fe2:	f023 0303 	bic.w	r3, r3, #3
 8010fe6:	b2da      	uxtb	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	7e9b      	ldrb	r3, [r3, #26]
 8010ff0:	f003 0308 	and.w	r3, r3, #8
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d009      	beq.n	801100c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	7e9b      	ldrb	r3, [r3, #26]
 8010ffc:	f023 0308 	bic.w	r3, r3, #8
 8011000:	b2da      	uxtb	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7ff fb1e 	bl	8010648 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011016:	2b00      	cmp	r3, #0
 8011018:	d00a      	beq.n	8011030 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801101a:	4b0e      	ldr	r3, [pc, #56]	; (8011054 <tcp_fasttmr+0xc4>)
 801101c:	2200      	movs	r2, #0
 801101e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 f819 	bl	8011058 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011026:	4b0b      	ldr	r3, [pc, #44]	; (8011054 <tcp_fasttmr+0xc4>)
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d000      	beq.n	8011030 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801102e:	e7b8      	b.n	8010fa2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	607b      	str	r3, [r7, #4]
 8011034:	e002      	b.n	801103c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	68db      	ldr	r3, [r3, #12]
 801103a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1b3      	bne.n	8010faa <tcp_fasttmr+0x1a>
    }
  }
}
 8011042:	bf00      	nop
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	2400a3fe 	.word	0x2400a3fe
 8011050:	2400da20 	.word	0x2400da20
 8011054:	2400da1c 	.word	0x2400da1c

08011058 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011058:	b590      	push	{r4, r7, lr}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011064:	7b5b      	ldrb	r3, [r3, #13]
 8011066:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801106c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00b      	beq.n	8011096 <tcp_process_refused_data+0x3e>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6918      	ldr	r0, [r3, #16]
 8011088:	2300      	movs	r3, #0
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	6879      	ldr	r1, [r7, #4]
 801108e:	47a0      	blx	r4
 8011090:	4603      	mov	r3, r0
 8011092:	73fb      	strb	r3, [r7, #15]
 8011094:	e007      	b.n	80110a6 <tcp_process_refused_data+0x4e>
 8011096:	2300      	movs	r3, #0
 8011098:	68ba      	ldr	r2, [r7, #8]
 801109a:	6879      	ldr	r1, [r7, #4]
 801109c:	2000      	movs	r0, #0
 801109e:	f000 f88c 	bl	80111ba <tcp_recv_null>
 80110a2:	4603      	mov	r3, r0
 80110a4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80110a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d12a      	bne.n	8011104 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80110ae:	7bbb      	ldrb	r3, [r7, #14]
 80110b0:	f003 0320 	and.w	r3, r3, #32
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d033      	beq.n	8011120 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110c0:	d005      	beq.n	80110ce <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110c6:	3301      	adds	r3, #1
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d00b      	beq.n	80110f0 <tcp_process_refused_data+0x98>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6918      	ldr	r0, [r3, #16]
 80110e2:	2300      	movs	r3, #0
 80110e4:	2200      	movs	r2, #0
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	47a0      	blx	r4
 80110ea:	4603      	mov	r3, r0
 80110ec:	73fb      	strb	r3, [r7, #15]
 80110ee:	e001      	b.n	80110f4 <tcp_process_refused_data+0x9c>
 80110f0:	2300      	movs	r3, #0
 80110f2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80110f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110f8:	f113 0f0d 	cmn.w	r3, #13
 80110fc:	d110      	bne.n	8011120 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80110fe:	f06f 030c 	mvn.w	r3, #12
 8011102:	e00e      	b.n	8011122 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8011104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011108:	f113 0f0d 	cmn.w	r3, #13
 801110c:	d102      	bne.n	8011114 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801110e:	f06f 030c 	mvn.w	r3, #12
 8011112:	e006      	b.n	8011122 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	68ba      	ldr	r2, [r7, #8]
 8011118:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801111a:	f06f 0304 	mvn.w	r3, #4
 801111e:	e000      	b.n	8011122 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3714      	adds	r7, #20
 8011126:	46bd      	mov	sp, r7
 8011128:	bd90      	pop	{r4, r7, pc}

0801112a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801112a:	b580      	push	{r7, lr}
 801112c:	b084      	sub	sp, #16
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011132:	e007      	b.n	8011144 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f809 	bl	8011152 <tcp_seg_free>
    seg = next;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1f4      	bne.n	8011134 <tcp_segs_free+0xa>
  }
}
 801114a:	bf00      	nop
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}

08011152 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011152:	b580      	push	{r7, lr}
 8011154:	b082      	sub	sp, #8
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d00c      	beq.n	801117a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d004      	beq.n	8011172 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	4618      	mov	r0, r3
 801116e:	f7fe fe9d 	bl	800feac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011172:	6879      	ldr	r1, [r7, #4]
 8011174:	2003      	movs	r0, #3
 8011176:	f7fe f8c5 	bl	800f304 <memp_free>
  }
}
 801117a:	bf00      	nop
 801117c:	3708      	adds	r7, #8
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b084      	sub	sp, #16
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801118a:	2003      	movs	r0, #3
 801118c:	f7fe f844 	bl	800f218 <memp_malloc>
 8011190:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d101      	bne.n	801119c <tcp_seg_copy+0x1a>
    return NULL;
 8011198:	2300      	movs	r3, #0
 801119a:	e00a      	b.n	80111b2 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801119c:	2210      	movs	r2, #16
 801119e:	6879      	ldr	r1, [r7, #4]
 80111a0:	68f8      	ldr	r0, [r7, #12]
 80111a2:	f006 fbac 	bl	80178fe <memcpy>
  pbuf_ref(cseg->p);
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe ff30 	bl	8010010 <pbuf_ref>
  return cseg;
 80111b0:	68fb      	ldr	r3, [r7, #12]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b084      	sub	sp, #16
 80111be:	af00      	add	r7, sp, #0
 80111c0:	60f8      	str	r0, [r7, #12]
 80111c2:	60b9      	str	r1, [r7, #8]
 80111c4:	607a      	str	r2, [r7, #4]
 80111c6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d009      	beq.n	80111e2 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	891b      	ldrh	r3, [r3, #8]
 80111d2:	4619      	mov	r1, r3
 80111d4:	68b8      	ldr	r0, [r7, #8]
 80111d6:	f7ff fbc1 	bl	801095c <tcp_recved>
    pbuf_free(p);
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7fe fe66 	bl	800feac <pbuf_free>
 80111e0:	e008      	b.n	80111f4 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80111e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d104      	bne.n	80111f4 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80111ea:	68b8      	ldr	r0, [r7, #8]
 80111ec:	f7ff fa92 	bl	8010714 <tcp_close>
 80111f0:	4603      	mov	r3, r0
 80111f2:	e000      	b.n	80111f6 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
	...

08011200 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b086      	sub	sp, #24
 8011204:	af00      	add	r7, sp, #0
 8011206:	4603      	mov	r3, r0
 8011208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801120e:	2b00      	cmp	r3, #0
 8011210:	db01      	blt.n	8011216 <tcp_kill_prio+0x16>
 8011212:	79fb      	ldrb	r3, [r7, #7]
 8011214:	e000      	b.n	8011218 <tcp_kill_prio+0x18>
 8011216:	237f      	movs	r3, #127	; 0x7f
 8011218:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801121a:	2300      	movs	r3, #0
 801121c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801121e:	2300      	movs	r3, #0
 8011220:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011222:	4b16      	ldr	r3, [pc, #88]	; (801127c <tcp_kill_prio+0x7c>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	617b      	str	r3, [r7, #20]
 8011228:	e01a      	b.n	8011260 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	7d5b      	ldrb	r3, [r3, #21]
 801122e:	7afa      	ldrb	r2, [r7, #11]
 8011230:	429a      	cmp	r2, r3
 8011232:	d312      	bcc.n	801125a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011234:	4b12      	ldr	r3, [pc, #72]	; (8011280 <tcp_kill_prio+0x80>)
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	6a1b      	ldr	r3, [r3, #32]
 801123c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 801123e:	68fa      	ldr	r2, [r7, #12]
 8011240:	429a      	cmp	r2, r3
 8011242:	d80a      	bhi.n	801125a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8011244:	4b0e      	ldr	r3, [pc, #56]	; (8011280 <tcp_kill_prio+0x80>)
 8011246:	681a      	ldr	r2, [r3, #0]
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	6a1b      	ldr	r3, [r3, #32]
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	7d5b      	ldrb	r3, [r3, #21]
 8011258:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	617b      	str	r3, [r7, #20]
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d1e1      	bne.n	801122a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d002      	beq.n	8011272 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801126c:	6938      	ldr	r0, [r7, #16]
 801126e:	f7ff fb1b 	bl	80108a8 <tcp_abort>
  }
}
 8011272:	bf00      	nop
 8011274:	3718      	adds	r7, #24
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	2400da20 	.word	0x2400da20
 8011280:	2400da24 	.word	0x2400da24

08011284 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b086      	sub	sp, #24
 8011288:	af00      	add	r7, sp, #0
 801128a:	4603      	mov	r3, r0
 801128c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	2b08      	cmp	r3, #8
 8011292:	d009      	beq.n	80112a8 <tcp_kill_state+0x24>
 8011294:	79fb      	ldrb	r3, [r7, #7]
 8011296:	2b09      	cmp	r3, #9
 8011298:	d006      	beq.n	80112a8 <tcp_kill_state+0x24>
 801129a:	4b1a      	ldr	r3, [pc, #104]	; (8011304 <tcp_kill_state+0x80>)
 801129c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80112a0:	4919      	ldr	r1, [pc, #100]	; (8011308 <tcp_kill_state+0x84>)
 80112a2:	481a      	ldr	r0, [pc, #104]	; (801130c <tcp_kill_state+0x88>)
 80112a4:	f006 fb3e 	bl	8017924 <iprintf>

  inactivity = 0;
 80112a8:	2300      	movs	r3, #0
 80112aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80112ac:	2300      	movs	r3, #0
 80112ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112b0:	4b17      	ldr	r3, [pc, #92]	; (8011310 <tcp_kill_state+0x8c>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	617b      	str	r3, [r7, #20]
 80112b6:	e017      	b.n	80112e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	7d1b      	ldrb	r3, [r3, #20]
 80112bc:	79fa      	ldrb	r2, [r7, #7]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d10f      	bne.n	80112e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80112c2:	4b14      	ldr	r3, [pc, #80]	; (8011314 <tcp_kill_state+0x90>)
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	6a1b      	ldr	r3, [r3, #32]
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	68fa      	ldr	r2, [r7, #12]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d807      	bhi.n	80112e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80112d2:	4b10      	ldr	r3, [pc, #64]	; (8011314 <tcp_kill_state+0x90>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	6a1b      	ldr	r3, [r3, #32]
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	617b      	str	r3, [r7, #20]
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d1e4      	bne.n	80112b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d003      	beq.n	80112fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80112f4:	2100      	movs	r1, #0
 80112f6:	6938      	ldr	r0, [r7, #16]
 80112f8:	f7ff fa24 	bl	8010744 <tcp_abandon>
  }
}
 80112fc:	bf00      	nop
 80112fe:	3718      	adds	r7, #24
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	08019458 	.word	0x08019458
 8011308:	08019768 	.word	0x08019768
 801130c:	08019494 	.word	0x08019494
 8011310:	2400da20 	.word	0x2400da20
 8011314:	2400da24 	.word	0x2400da24

08011318 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801131e:	2300      	movs	r3, #0
 8011320:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011326:	4b12      	ldr	r3, [pc, #72]	; (8011370 <tcp_kill_timewait+0x58>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	60fb      	str	r3, [r7, #12]
 801132c:	e012      	b.n	8011354 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801132e:	4b11      	ldr	r3, [pc, #68]	; (8011374 <tcp_kill_timewait+0x5c>)
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	6a1b      	ldr	r3, [r3, #32]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	429a      	cmp	r2, r3
 801133c:	d807      	bhi.n	801134e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801133e:	4b0d      	ldr	r3, [pc, #52]	; (8011374 <tcp_kill_timewait+0x5c>)
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	6a1b      	ldr	r3, [r3, #32]
 8011346:	1ad3      	subs	r3, r2, r3
 8011348:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	60fb      	str	r3, [r7, #12]
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1e9      	bne.n	801132e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011360:	68b8      	ldr	r0, [r7, #8]
 8011362:	f7ff faa1 	bl	80108a8 <tcp_abort>
  }
}
 8011366:	bf00      	nop
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	2400da30 	.word	0x2400da30
 8011374:	2400da24 	.word	0x2400da24

08011378 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	4603      	mov	r3, r0
 8011380:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011382:	2001      	movs	r0, #1
 8011384:	f7fd ff48 	bl	800f218 <memp_malloc>
 8011388:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d124      	bne.n	80113da <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011390:	f7ff ffc2 	bl	8011318 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011394:	2001      	movs	r0, #1
 8011396:	f7fd ff3f 	bl	800f218 <memp_malloc>
 801139a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d11b      	bne.n	80113da <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80113a2:	2009      	movs	r0, #9
 80113a4:	f7ff ff6e 	bl	8011284 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80113a8:	2001      	movs	r0, #1
 80113aa:	f7fd ff35 	bl	800f218 <memp_malloc>
 80113ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d111      	bne.n	80113da <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80113b6:	2008      	movs	r0, #8
 80113b8:	f7ff ff64 	bl	8011284 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80113bc:	2001      	movs	r0, #1
 80113be:	f7fd ff2b 	bl	800f218 <memp_malloc>
 80113c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d107      	bne.n	80113da <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80113ca:	79fb      	ldrb	r3, [r7, #7]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7ff ff17 	bl	8011200 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80113d2:	2001      	movs	r0, #1
 80113d4:	f7fd ff20 	bl	800f218 <memp_malloc>
 80113d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d03f      	beq.n	8011460 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80113e0:	2298      	movs	r2, #152	; 0x98
 80113e2:	2100      	movs	r1, #0
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f006 fa95 	bl	8017914 <memset>
    pcb->prio = prio;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	79fa      	ldrb	r2, [r7, #7]
 80113ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80113f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	22ff      	movs	r2, #255	; 0xff
 801140e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011416:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2206      	movs	r2, #6
 801141c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2206      	movs	r2, #6
 8011424:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801142c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2201      	movs	r2, #1
 8011432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011436:	4b0d      	ldr	r3, [pc, #52]	; (801146c <tcp_alloc+0xf4>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801143e:	4b0c      	ldr	r3, [pc, #48]	; (8011470 <tcp_alloc+0xf8>)
 8011440:	781a      	ldrb	r2, [r3, #0]
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801144c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	4a08      	ldr	r2, [pc, #32]	; (8011474 <tcp_alloc+0xfc>)
 8011454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	4a07      	ldr	r2, [pc, #28]	; (8011478 <tcp_alloc+0x100>)
 801145c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011460:	68fb      	ldr	r3, [r7, #12]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	2400da24 	.word	0x2400da24
 8011470:	2400a3fe 	.word	0x2400a3fe
 8011474:	080111bb 	.word	0x080111bb
 8011478:	006ddd00 	.word	0x006ddd00

0801147c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	7d1b      	ldrb	r3, [r3, #20]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d034      	beq.n	80114f6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011490:	2b0a      	cmp	r3, #10
 8011492:	d030      	beq.n	80114f6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011498:	2b01      	cmp	r3, #1
 801149a:	d02c      	beq.n	80114f6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d007      	beq.n	80114b4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fe fcff 	bl	800feac <pbuf_free>
      pcb->refused_data = NULL;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7ff fe36 	bl	801112a <tcp_segs_free>
    pcb->ooseq = NULL;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2200      	movs	r2, #0
 80114c2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7ff fe2a 	bl	801112a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114da:	4618      	mov	r0, r3
 80114dc:	f7ff fe25 	bl	801112a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	669a      	str	r2, [r3, #104]	; 0x68
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80114f6:	bf00      	nop
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
	...

08011500 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	683a      	ldr	r2, [r7, #0]
 8011510:	429a      	cmp	r2, r3
 8011512:	d105      	bne.n	8011520 <tcp_pcb_remove+0x20>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68da      	ldr	r2, [r3, #12]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	601a      	str	r2, [r3, #0]
 801151e:	e013      	b.n	8011548 <tcp_pcb_remove+0x48>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	60fb      	str	r3, [r7, #12]
 8011526:	e00c      	b.n	8011542 <tcp_pcb_remove+0x42>
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	683a      	ldr	r2, [r7, #0]
 801152e:	429a      	cmp	r2, r3
 8011530:	d104      	bne.n	801153c <tcp_pcb_remove+0x3c>
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	68da      	ldr	r2, [r3, #12]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	60da      	str	r2, [r3, #12]
 801153a:	e005      	b.n	8011548 <tcp_pcb_remove+0x48>
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	60fb      	str	r3, [r7, #12]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1ef      	bne.n	8011528 <tcp_pcb_remove+0x28>
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	2200      	movs	r2, #0
 801154c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801154e:	6838      	ldr	r0, [r7, #0]
 8011550:	f7ff ff94 	bl	801147c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	7d1b      	ldrb	r3, [r3, #20]
 8011558:	2b0a      	cmp	r3, #10
 801155a:	d013      	beq.n	8011584 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8011560:	2b01      	cmp	r3, #1
 8011562:	d00f      	beq.n	8011584 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	7e9b      	ldrb	r3, [r3, #26]
 8011568:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801156c:	2b00      	cmp	r3, #0
 801156e:	d009      	beq.n	8011584 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	7e9b      	ldrb	r3, [r3, #26]
 8011574:	f043 0302 	orr.w	r3, r3, #2
 8011578:	b2da      	uxtb	r2, r3
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801157e:	6838      	ldr	r0, [r7, #0]
 8011580:	f002 fd8c 	bl	801409c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	7d1b      	ldrb	r3, [r3, #20]
 8011588:	2b01      	cmp	r3, #1
 801158a:	d020      	beq.n	80115ce <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011590:	2b00      	cmp	r3, #0
 8011592:	d006      	beq.n	80115a2 <tcp_pcb_remove+0xa2>
 8011594:	4b13      	ldr	r3, [pc, #76]	; (80115e4 <tcp_pcb_remove+0xe4>)
 8011596:	f240 7253 	movw	r2, #1875	; 0x753
 801159a:	4913      	ldr	r1, [pc, #76]	; (80115e8 <tcp_pcb_remove+0xe8>)
 801159c:	4813      	ldr	r0, [pc, #76]	; (80115ec <tcp_pcb_remove+0xec>)
 801159e:	f006 f9c1 	bl	8017924 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d006      	beq.n	80115b8 <tcp_pcb_remove+0xb8>
 80115aa:	4b0e      	ldr	r3, [pc, #56]	; (80115e4 <tcp_pcb_remove+0xe4>)
 80115ac:	f240 7254 	movw	r2, #1876	; 0x754
 80115b0:	490f      	ldr	r1, [pc, #60]	; (80115f0 <tcp_pcb_remove+0xf0>)
 80115b2:	480e      	ldr	r0, [pc, #56]	; (80115ec <tcp_pcb_remove+0xec>)
 80115b4:	f006 f9b6 	bl	8017924 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d006      	beq.n	80115ce <tcp_pcb_remove+0xce>
 80115c0:	4b08      	ldr	r3, [pc, #32]	; (80115e4 <tcp_pcb_remove+0xe4>)
 80115c2:	f240 7256 	movw	r2, #1878	; 0x756
 80115c6:	490b      	ldr	r1, [pc, #44]	; (80115f4 <tcp_pcb_remove+0xf4>)
 80115c8:	4808      	ldr	r0, [pc, #32]	; (80115ec <tcp_pcb_remove+0xec>)
 80115ca:	f006 f9ab 	bl	8017924 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	2200      	movs	r2, #0
 80115d2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	2200      	movs	r2, #0
 80115d8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80115da:	bf00      	nop
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	08019458 	.word	0x08019458
 80115e8:	08019810 	.word	0x08019810
 80115ec:	08019494 	.word	0x08019494
 80115f0:	08019828 	.word	0x08019828
 80115f4:	08019844 	.word	0x08019844

080115f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011600:	4b07      	ldr	r3, [pc, #28]	; (8011620 <tcp_next_iss+0x28>)
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	4b07      	ldr	r3, [pc, #28]	; (8011624 <tcp_next_iss+0x2c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4413      	add	r3, r2
 801160a:	4a05      	ldr	r2, [pc, #20]	; (8011620 <tcp_next_iss+0x28>)
 801160c:	6013      	str	r3, [r2, #0]
  return iss;
 801160e:	4b04      	ldr	r3, [pc, #16]	; (8011620 <tcp_next_iss+0x28>)
 8011610:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011612:	4618      	mov	r0, r3
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	24000028 	.word	0x24000028
 8011624:	2400da24 	.word	0x2400da24

08011628 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	6039      	str	r1, [r7, #0]
 8011632:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8011634:	6838      	ldr	r0, [r7, #0]
 8011636:	f004 fe8f 	bl	8016358 <ip4_route>
 801163a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d101      	bne.n	8011646 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8011642:	88fb      	ldrh	r3, [r7, #6]
 8011644:	e010      	b.n	8011668 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801164a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801164c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d008      	beq.n	8011666 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8011654:	897b      	ldrh	r3, [r7, #10]
 8011656:	3b28      	subs	r3, #40	; 0x28
 8011658:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801165a:	893a      	ldrh	r2, [r7, #8]
 801165c:	88fb      	ldrh	r3, [r7, #6]
 801165e:	4293      	cmp	r3, r2
 8011660:	bf28      	it	cs
 8011662:	4613      	movcs	r3, r2
 8011664:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8011666:	88fb      	ldrh	r3, [r7, #6]
}
 8011668:	4618      	mov	r0, r3
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801167e:	e011      	b.n	80116a4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	429a      	cmp	r2, r3
 801168a:	d108      	bne.n	801169e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7ff f908 	bl	80108a8 <tcp_abort>
      pcb = next;
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	60fb      	str	r3, [r7, #12]
 801169c:	e002      	b.n	80116a4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d1ea      	bne.n	8011680 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80116aa:	bf00      	nop
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
	...

080116b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d02c      	beq.n	801171e <tcp_netif_ip_addr_changed+0x6a>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d028      	beq.n	801171e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80116cc:	4b16      	ldr	r3, [pc, #88]	; (8011728 <tcp_netif_ip_addr_changed+0x74>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4619      	mov	r1, r3
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f7ff ffcc 	bl	8011670 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80116d8:	4b14      	ldr	r3, [pc, #80]	; (801172c <tcp_netif_ip_addr_changed+0x78>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	4619      	mov	r1, r3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff ffc6 	bl	8011670 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d019      	beq.n	801171e <tcp_netif_ip_addr_changed+0x6a>
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d015      	beq.n	801171e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80116f2:	4b0f      	ldr	r3, [pc, #60]	; (8011730 <tcp_netif_ip_addr_changed+0x7c>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	60fb      	str	r3, [r7, #12]
 80116f8:	e00e      	b.n	8011718 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	429a      	cmp	r2, r3
 801170a:	d103      	bne.n	8011714 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	60fb      	str	r3, [r7, #12]
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1ed      	bne.n	80116fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801171e:	bf00      	nop
 8011720:	3710      	adds	r7, #16
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	2400da20 	.word	0x2400da20
 801172c:	2400da2c 	.word	0x2400da2c
 8011730:	2400da28 	.word	0x2400da28

08011734 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011734:	b590      	push	{r4, r7, lr}
 8011736:	b08b      	sub	sp, #44	; 0x2c
 8011738:	af02      	add	r7, sp, #8
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	4a82      	ldr	r2, [pc, #520]	; (801194c <tcp_input+0x218>)
 8011744:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	895b      	ldrh	r3, [r3, #10]
 801174a:	2b13      	cmp	r3, #19
 801174c:	f240 838a 	bls.w	8011e64 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011750:	4b7f      	ldr	r3, [pc, #508]	; (8011950 <tcp_input+0x21c>)
 8011752:	695a      	ldr	r2, [r3, #20]
 8011754:	4b7e      	ldr	r3, [pc, #504]	; (8011950 <tcp_input+0x21c>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	4619      	mov	r1, r3
 801175a:	4610      	mov	r0, r2
 801175c:	f005 f886 	bl	801686c <ip4_addr_isbroadcast_u32>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	f040 8380 	bne.w	8011e68 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011768:	4b79      	ldr	r3, [pc, #484]	; (8011950 <tcp_input+0x21c>)
 801176a:	695b      	ldr	r3, [r3, #20]
 801176c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011770:	2be0      	cmp	r3, #224	; 0xe0
 8011772:	f000 8379 	beq.w	8011e68 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8011776:	4b75      	ldr	r3, [pc, #468]	; (801194c <tcp_input+0x218>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	899b      	ldrh	r3, [r3, #12]
 801177c:	b29b      	uxth	r3, r3
 801177e:	4618      	mov	r0, r3
 8011780:	f7fd f884 	bl	800e88c <lwip_htons>
 8011784:	4603      	mov	r3, r0
 8011786:	0b1b      	lsrs	r3, r3, #12
 8011788:	b29b      	uxth	r3, r3
 801178a:	b2db      	uxtb	r3, r3
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011790:	7cbb      	ldrb	r3, [r7, #18]
 8011792:	2b13      	cmp	r3, #19
 8011794:	f240 8368 	bls.w	8011e68 <tcp_input+0x734>
 8011798:	7cbb      	ldrb	r3, [r7, #18]
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	891b      	ldrh	r3, [r3, #8]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	f200 8361 	bhi.w	8011e68 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80117a6:	7cbb      	ldrb	r3, [r7, #18]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	3b14      	subs	r3, #20
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	4b69      	ldr	r3, [pc, #420]	; (8011954 <tcp_input+0x220>)
 80117b0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80117b2:	4b69      	ldr	r3, [pc, #420]	; (8011958 <tcp_input+0x224>)
 80117b4:	2200      	movs	r2, #0
 80117b6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	895a      	ldrh	r2, [r3, #10]
 80117bc:	7cbb      	ldrb	r3, [r7, #18]
 80117be:	b29b      	uxth	r3, r3
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d30d      	bcc.n	80117e0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80117c4:	4b63      	ldr	r3, [pc, #396]	; (8011954 <tcp_input+0x220>)
 80117c6:	881a      	ldrh	r2, [r3, #0]
 80117c8:	4b64      	ldr	r3, [pc, #400]	; (801195c <tcp_input+0x228>)
 80117ca:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80117cc:	7cbb      	ldrb	r3, [r7, #18]
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	425b      	negs	r3, r3
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	b21b      	sxth	r3, r3
 80117d6:	4619      	mov	r1, r3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7fe fb43 	bl	800fe64 <pbuf_header>
 80117de:	e055      	b.n	801188c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d105      	bne.n	80117f4 <tcp_input+0xc0>
 80117e8:	4b5d      	ldr	r3, [pc, #372]	; (8011960 <tcp_input+0x22c>)
 80117ea:	22b2      	movs	r2, #178	; 0xb2
 80117ec:	495d      	ldr	r1, [pc, #372]	; (8011964 <tcp_input+0x230>)
 80117ee:	485e      	ldr	r0, [pc, #376]	; (8011968 <tcp_input+0x234>)
 80117f0:	f006 f898 	bl	8017924 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80117f4:	f06f 0113 	mvn.w	r1, #19
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7fe fb33 	bl	800fe64 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	895a      	ldrh	r2, [r3, #10]
 8011802:	4b56      	ldr	r3, [pc, #344]	; (801195c <tcp_input+0x228>)
 8011804:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8011806:	4b53      	ldr	r3, [pc, #332]	; (8011954 <tcp_input+0x220>)
 8011808:	881a      	ldrh	r2, [r3, #0]
 801180a:	4b54      	ldr	r3, [pc, #336]	; (801195c <tcp_input+0x228>)
 801180c:	881b      	ldrh	r3, [r3, #0]
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8011812:	4b52      	ldr	r3, [pc, #328]	; (801195c <tcp_input+0x228>)
 8011814:	881b      	ldrh	r3, [r3, #0]
 8011816:	425b      	negs	r3, r3
 8011818:	b29b      	uxth	r3, r3
 801181a:	b21b      	sxth	r3, r3
 801181c:	4619      	mov	r1, r3
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7fe fb20 	bl	800fe64 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	895b      	ldrh	r3, [r3, #10]
 801182a:	8a3a      	ldrh	r2, [r7, #16]
 801182c:	429a      	cmp	r2, r3
 801182e:	f200 831d 	bhi.w	8011e6c <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	4a47      	ldr	r2, [pc, #284]	; (8011958 <tcp_input+0x224>)
 801183a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	8a3b      	ldrh	r3, [r7, #16]
 8011842:	425b      	negs	r3, r3
 8011844:	b29b      	uxth	r3, r3
 8011846:	b21b      	sxth	r3, r3
 8011848:	4619      	mov	r1, r3
 801184a:	4610      	mov	r0, r2
 801184c:	f7fe fb0a 	bl	800fe64 <pbuf_header>
    p->tot_len -= opt2len;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	891a      	ldrh	r2, [r3, #8]
 8011854:	8a3b      	ldrh	r3, [r7, #16]
 8011856:	1ad3      	subs	r3, r2, r3
 8011858:	b29a      	uxth	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	895b      	ldrh	r3, [r3, #10]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d005      	beq.n	8011872 <tcp_input+0x13e>
 8011866:	4b3e      	ldr	r3, [pc, #248]	; (8011960 <tcp_input+0x22c>)
 8011868:	22cf      	movs	r2, #207	; 0xcf
 801186a:	4940      	ldr	r1, [pc, #256]	; (801196c <tcp_input+0x238>)
 801186c:	483e      	ldr	r0, [pc, #248]	; (8011968 <tcp_input+0x234>)
 801186e:	f006 f859 	bl	8017924 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	891a      	ldrh	r2, [r3, #8]
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	891b      	ldrh	r3, [r3, #8]
 801187c:	429a      	cmp	r2, r3
 801187e:	d005      	beq.n	801188c <tcp_input+0x158>
 8011880:	4b37      	ldr	r3, [pc, #220]	; (8011960 <tcp_input+0x22c>)
 8011882:	22d0      	movs	r2, #208	; 0xd0
 8011884:	493a      	ldr	r1, [pc, #232]	; (8011970 <tcp_input+0x23c>)
 8011886:	4838      	ldr	r0, [pc, #224]	; (8011968 <tcp_input+0x234>)
 8011888:	f006 f84c 	bl	8017924 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801188c:	4b2f      	ldr	r3, [pc, #188]	; (801194c <tcp_input+0x218>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	b29a      	uxth	r2, r3
 8011894:	4b2d      	ldr	r3, [pc, #180]	; (801194c <tcp_input+0x218>)
 8011896:	681c      	ldr	r4, [r3, #0]
 8011898:	4610      	mov	r0, r2
 801189a:	f7fc fff7 	bl	800e88c <lwip_htons>
 801189e:	4603      	mov	r3, r0
 80118a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80118a2:	4b2a      	ldr	r3, [pc, #168]	; (801194c <tcp_input+0x218>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	885b      	ldrh	r3, [r3, #2]
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	4b28      	ldr	r3, [pc, #160]	; (801194c <tcp_input+0x218>)
 80118ac:	681c      	ldr	r4, [r3, #0]
 80118ae:	4610      	mov	r0, r2
 80118b0:	f7fc ffec 	bl	800e88c <lwip_htons>
 80118b4:	4603      	mov	r3, r0
 80118b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80118b8:	4b24      	ldr	r3, [pc, #144]	; (801194c <tcp_input+0x218>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	685a      	ldr	r2, [r3, #4]
 80118be:	4b23      	ldr	r3, [pc, #140]	; (801194c <tcp_input+0x218>)
 80118c0:	681c      	ldr	r4, [r3, #0]
 80118c2:	4610      	mov	r0, r2
 80118c4:	f7fc fff0 	bl	800e8a8 <lwip_htonl>
 80118c8:	4603      	mov	r3, r0
 80118ca:	6063      	str	r3, [r4, #4]
 80118cc:	6863      	ldr	r3, [r4, #4]
 80118ce:	4a29      	ldr	r2, [pc, #164]	; (8011974 <tcp_input+0x240>)
 80118d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80118d2:	4b1e      	ldr	r3, [pc, #120]	; (801194c <tcp_input+0x218>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	689a      	ldr	r2, [r3, #8]
 80118d8:	4b1c      	ldr	r3, [pc, #112]	; (801194c <tcp_input+0x218>)
 80118da:	681c      	ldr	r4, [r3, #0]
 80118dc:	4610      	mov	r0, r2
 80118de:	f7fc ffe3 	bl	800e8a8 <lwip_htonl>
 80118e2:	4603      	mov	r3, r0
 80118e4:	60a3      	str	r3, [r4, #8]
 80118e6:	68a3      	ldr	r3, [r4, #8]
 80118e8:	4a23      	ldr	r2, [pc, #140]	; (8011978 <tcp_input+0x244>)
 80118ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80118ec:	4b17      	ldr	r3, [pc, #92]	; (801194c <tcp_input+0x218>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	89db      	ldrh	r3, [r3, #14]
 80118f2:	b29a      	uxth	r2, r3
 80118f4:	4b15      	ldr	r3, [pc, #84]	; (801194c <tcp_input+0x218>)
 80118f6:	681c      	ldr	r4, [r3, #0]
 80118f8:	4610      	mov	r0, r2
 80118fa:	f7fc ffc7 	bl	800e88c <lwip_htons>
 80118fe:	4603      	mov	r3, r0
 8011900:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011902:	4b12      	ldr	r3, [pc, #72]	; (801194c <tcp_input+0x218>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	899b      	ldrh	r3, [r3, #12]
 8011908:	b29b      	uxth	r3, r3
 801190a:	4618      	mov	r0, r3
 801190c:	f7fc ffbe 	bl	800e88c <lwip_htons>
 8011910:	4603      	mov	r3, r0
 8011912:	b2db      	uxtb	r3, r3
 8011914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011918:	b2da      	uxtb	r2, r3
 801191a:	4b18      	ldr	r3, [pc, #96]	; (801197c <tcp_input+0x248>)
 801191c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	891a      	ldrh	r2, [r3, #8]
 8011922:	4b16      	ldr	r3, [pc, #88]	; (801197c <tcp_input+0x248>)
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	f003 0303 	and.w	r3, r3, #3
 801192a:	2b00      	cmp	r3, #0
 801192c:	bf14      	ite	ne
 801192e:	2301      	movne	r3, #1
 8011930:	2300      	moveq	r3, #0
 8011932:	b2db      	uxtb	r3, r3
 8011934:	b29b      	uxth	r3, r3
 8011936:	4413      	add	r3, r2
 8011938:	b29a      	uxth	r2, r3
 801193a:	4b11      	ldr	r3, [pc, #68]	; (8011980 <tcp_input+0x24c>)
 801193c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801193e:	2300      	movs	r3, #0
 8011940:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011942:	4b10      	ldr	r3, [pc, #64]	; (8011984 <tcp_input+0x250>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	61fb      	str	r3, [r7, #28]
 8011948:	e082      	b.n	8011a50 <tcp_input+0x31c>
 801194a:	bf00      	nop
 801194c:	2400a410 	.word	0x2400a410
 8011950:	2400a850 	.word	0x2400a850
 8011954:	2400a414 	.word	0x2400a414
 8011958:	2400a418 	.word	0x2400a418
 801195c:	2400a416 	.word	0x2400a416
 8011960:	0801985c 	.word	0x0801985c
 8011964:	08019890 	.word	0x08019890
 8011968:	080198a0 	.word	0x080198a0
 801196c:	080198c8 	.word	0x080198c8
 8011970:	080198d4 	.word	0x080198d4
 8011974:	2400a420 	.word	0x2400a420
 8011978:	2400a424 	.word	0x2400a424
 801197c:	2400a42c 	.word	0x2400a42c
 8011980:	2400a42a 	.word	0x2400a42a
 8011984:	2400da20 	.word	0x2400da20
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	7d1b      	ldrb	r3, [r3, #20]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d105      	bne.n	801199c <tcp_input+0x268>
 8011990:	4b8f      	ldr	r3, [pc, #572]	; (8011bd0 <tcp_input+0x49c>)
 8011992:	22e2      	movs	r2, #226	; 0xe2
 8011994:	498f      	ldr	r1, [pc, #572]	; (8011bd4 <tcp_input+0x4a0>)
 8011996:	4890      	ldr	r0, [pc, #576]	; (8011bd8 <tcp_input+0x4a4>)
 8011998:	f005 ffc4 	bl	8017924 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	7d1b      	ldrb	r3, [r3, #20]
 80119a0:	2b0a      	cmp	r3, #10
 80119a2:	d105      	bne.n	80119b0 <tcp_input+0x27c>
 80119a4:	4b8a      	ldr	r3, [pc, #552]	; (8011bd0 <tcp_input+0x49c>)
 80119a6:	22e3      	movs	r2, #227	; 0xe3
 80119a8:	498c      	ldr	r1, [pc, #560]	; (8011bdc <tcp_input+0x4a8>)
 80119aa:	488b      	ldr	r0, [pc, #556]	; (8011bd8 <tcp_input+0x4a4>)
 80119ac:	f005 ffba 	bl	8017924 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d105      	bne.n	80119c4 <tcp_input+0x290>
 80119b8:	4b85      	ldr	r3, [pc, #532]	; (8011bd0 <tcp_input+0x49c>)
 80119ba:	22e4      	movs	r2, #228	; 0xe4
 80119bc:	4988      	ldr	r1, [pc, #544]	; (8011be0 <tcp_input+0x4ac>)
 80119be:	4886      	ldr	r0, [pc, #536]	; (8011bd8 <tcp_input+0x4a4>)
 80119c0:	f005 ffb0 	bl	8017924 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	8b1a      	ldrh	r2, [r3, #24]
 80119c8:	4b86      	ldr	r3, [pc, #536]	; (8011be4 <tcp_input+0x4b0>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d138      	bne.n	8011a46 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	8ada      	ldrh	r2, [r3, #22]
 80119d8:	4b82      	ldr	r3, [pc, #520]	; (8011be4 <tcp_input+0x4b0>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	885b      	ldrh	r3, [r3, #2]
 80119de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d130      	bne.n	8011a46 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	685a      	ldr	r2, [r3, #4]
 80119e8:	4b7f      	ldr	r3, [pc, #508]	; (8011be8 <tcp_input+0x4b4>)
 80119ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d12a      	bne.n	8011a46 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	4b7c      	ldr	r3, [pc, #496]	; (8011be8 <tcp_input+0x4b4>)
 80119f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d124      	bne.n	8011a46 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80119fc:	69fb      	ldr	r3, [r7, #28]
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	69fa      	ldr	r2, [r7, #28]
 8011a02:	429a      	cmp	r2, r3
 8011a04:	d105      	bne.n	8011a12 <tcp_input+0x2de>
 8011a06:	4b72      	ldr	r3, [pc, #456]	; (8011bd0 <tcp_input+0x49c>)
 8011a08:	22ec      	movs	r2, #236	; 0xec
 8011a0a:	4978      	ldr	r1, [pc, #480]	; (8011bec <tcp_input+0x4b8>)
 8011a0c:	4872      	ldr	r0, [pc, #456]	; (8011bd8 <tcp_input+0x4a4>)
 8011a0e:	f005 ff89 	bl	8017924 <iprintf>
      if (prev != NULL) {
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d00a      	beq.n	8011a2e <tcp_input+0x2fa>
        prev->next = pcb->next;
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	68da      	ldr	r2, [r3, #12]
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011a20:	4b73      	ldr	r3, [pc, #460]	; (8011bf0 <tcp_input+0x4bc>)
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011a28:	4a71      	ldr	r2, [pc, #452]	; (8011bf0 <tcp_input+0x4bc>)
 8011a2a:	69fb      	ldr	r3, [r7, #28]
 8011a2c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	69fa      	ldr	r2, [r7, #28]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d10f      	bne.n	8011a58 <tcp_input+0x324>
 8011a38:	4b65      	ldr	r3, [pc, #404]	; (8011bd0 <tcp_input+0x49c>)
 8011a3a:	22f4      	movs	r2, #244	; 0xf4
 8011a3c:	496d      	ldr	r1, [pc, #436]	; (8011bf4 <tcp_input+0x4c0>)
 8011a3e:	4866      	ldr	r0, [pc, #408]	; (8011bd8 <tcp_input+0x4a4>)
 8011a40:	f005 ff70 	bl	8017924 <iprintf>
      break;
 8011a44:	e008      	b.n	8011a58 <tcp_input+0x324>
    }
    prev = pcb;
 8011a46:	69fb      	ldr	r3, [r7, #28]
 8011a48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	61fb      	str	r3, [r7, #28]
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d198      	bne.n	8011988 <tcp_input+0x254>
 8011a56:	e000      	b.n	8011a5a <tcp_input+0x326>
      break;
 8011a58:	bf00      	nop
  }

  if (pcb == NULL) {
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d173      	bne.n	8011b48 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a60:	4b65      	ldr	r3, [pc, #404]	; (8011bf8 <tcp_input+0x4c4>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	61fb      	str	r3, [r7, #28]
 8011a66:	e02f      	b.n	8011ac8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	7d1b      	ldrb	r3, [r3, #20]
 8011a6c:	2b0a      	cmp	r3, #10
 8011a6e:	d005      	beq.n	8011a7c <tcp_input+0x348>
 8011a70:	4b57      	ldr	r3, [pc, #348]	; (8011bd0 <tcp_input+0x49c>)
 8011a72:	22fe      	movs	r2, #254	; 0xfe
 8011a74:	4961      	ldr	r1, [pc, #388]	; (8011bfc <tcp_input+0x4c8>)
 8011a76:	4858      	ldr	r0, [pc, #352]	; (8011bd8 <tcp_input+0x4a4>)
 8011a78:	f005 ff54 	bl	8017924 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	8b1a      	ldrh	r2, [r3, #24]
 8011a80:	4b58      	ldr	r3, [pc, #352]	; (8011be4 <tcp_input+0x4b0>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d11a      	bne.n	8011ac2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	8ada      	ldrh	r2, [r3, #22]
 8011a90:	4b54      	ldr	r3, [pc, #336]	; (8011be4 <tcp_input+0x4b0>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	885b      	ldrh	r3, [r3, #2]
 8011a96:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d112      	bne.n	8011ac2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	4b51      	ldr	r3, [pc, #324]	; (8011be8 <tcp_input+0x4b4>)
 8011aa2:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d10c      	bne.n	8011ac2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	4b4e      	ldr	r3, [pc, #312]	; (8011be8 <tcp_input+0x4b4>)
 8011aae:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d106      	bne.n	8011ac2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8011ab4:	69f8      	ldr	r0, [r7, #28]
 8011ab6:	f000 fb15 	bl	80120e4 <tcp_timewait_input>
        pbuf_free(p);
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f7fe f9f6 	bl	800feac <pbuf_free>
        return;
 8011ac0:	e1da      	b.n	8011e78 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	61fb      	str	r3, [r7, #28]
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1cc      	bne.n	8011a68 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011ad2:	4b4b      	ldr	r3, [pc, #300]	; (8011c00 <tcp_input+0x4cc>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	617b      	str	r3, [r7, #20]
 8011ad8:	e019      	b.n	8011b0e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	8ada      	ldrh	r2, [r3, #22]
 8011ade:	4b41      	ldr	r3, [pc, #260]	; (8011be4 <tcp_input+0x4b0>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	885b      	ldrh	r3, [r3, #2]
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d10c      	bne.n	8011b04 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	4b3e      	ldr	r3, [pc, #248]	; (8011be8 <tcp_input+0x4b4>)
 8011af0:	695b      	ldr	r3, [r3, #20]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d00f      	beq.n	8011b16 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d00d      	beq.n	8011b18 <tcp_input+0x3e4>
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d009      	beq.n	8011b18 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	617b      	str	r3, [r7, #20]
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1e2      	bne.n	8011ada <tcp_input+0x3a6>
 8011b14:	e000      	b.n	8011b18 <tcp_input+0x3e4>
            break;
 8011b16:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d014      	beq.n	8011b48 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00a      	beq.n	8011b3a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	68da      	ldr	r2, [r3, #12]
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011b2c:	4b34      	ldr	r3, [pc, #208]	; (8011c00 <tcp_input+0x4cc>)
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011b34:	4a32      	ldr	r2, [pc, #200]	; (8011c00 <tcp_input+0x4cc>)
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8011b3a:	6978      	ldr	r0, [r7, #20]
 8011b3c:	f000 f9f0 	bl	8011f20 <tcp_listen_input>
      pbuf_free(p);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7fe f9b3 	bl	800feac <pbuf_free>
      return;
 8011b46:	e197      	b.n	8011e78 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	f000 8164 	beq.w	8011e18 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011b50:	4b2c      	ldr	r3, [pc, #176]	; (8011c04 <tcp_input+0x4d0>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	891a      	ldrh	r2, [r3, #8]
 8011b5a:	4b2a      	ldr	r3, [pc, #168]	; (8011c04 <tcp_input+0x4d0>)
 8011b5c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011b5e:	4a29      	ldr	r2, [pc, #164]	; (8011c04 <tcp_input+0x4d0>)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011b64:	4b1f      	ldr	r3, [pc, #124]	; (8011be4 <tcp_input+0x4b0>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a26      	ldr	r2, [pc, #152]	; (8011c04 <tcp_input+0x4d0>)
 8011b6a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011b6c:	4b26      	ldr	r3, [pc, #152]	; (8011c08 <tcp_input+0x4d4>)
 8011b6e:	2200      	movs	r2, #0
 8011b70:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011b72:	4b26      	ldr	r3, [pc, #152]	; (8011c0c <tcp_input+0x4d8>)
 8011b74:	2200      	movs	r2, #0
 8011b76:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011b78:	4b25      	ldr	r3, [pc, #148]	; (8011c10 <tcp_input+0x4dc>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011b7e:	4b25      	ldr	r3, [pc, #148]	; (8011c14 <tcp_input+0x4e0>)
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	f003 0308 	and.w	r3, r3, #8
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d006      	beq.n	8011b98 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	7b5b      	ldrb	r3, [r3, #13]
 8011b8e:	f043 0301 	orr.w	r3, r3, #1
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d03d      	beq.n	8011c1c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011ba0:	69f8      	ldr	r0, [r7, #28]
 8011ba2:	f7ff fa59 	bl	8011058 <tcp_process_refused_data>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	f113 0f0d 	cmn.w	r3, #13
 8011bac:	d007      	beq.n	8011bbe <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d032      	beq.n	8011c1c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011bb6:	4b18      	ldr	r3, [pc, #96]	; (8011c18 <tcp_input+0x4e4>)
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d02e      	beq.n	8011c1c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f040 8108 	bne.w	8011dd8 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011bc8:	69f8      	ldr	r0, [r7, #28]
 8011bca:	f002 fa0b 	bl	8013fe4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011bce:	e103      	b.n	8011dd8 <tcp_input+0x6a4>
 8011bd0:	0801985c 	.word	0x0801985c
 8011bd4:	080198f4 	.word	0x080198f4
 8011bd8:	080198a0 	.word	0x080198a0
 8011bdc:	0801991c 	.word	0x0801991c
 8011be0:	08019948 	.word	0x08019948
 8011be4:	2400a410 	.word	0x2400a410
 8011be8:	2400a850 	.word	0x2400a850
 8011bec:	08019970 	.word	0x08019970
 8011bf0:	2400da20 	.word	0x2400da20
 8011bf4:	0801999c 	.word	0x0801999c
 8011bf8:	2400da30 	.word	0x2400da30
 8011bfc:	080199c8 	.word	0x080199c8
 8011c00:	2400da28 	.word	0x2400da28
 8011c04:	2400a400 	.word	0x2400a400
 8011c08:	2400a430 	.word	0x2400a430
 8011c0c:	2400a42d 	.word	0x2400a42d
 8011c10:	2400a428 	.word	0x2400a428
 8011c14:	2400a42c 	.word	0x2400a42c
 8011c18:	2400a42a 	.word	0x2400a42a
      }
    }
    tcp_input_pcb = pcb;
 8011c1c:	4a98      	ldr	r2, [pc, #608]	; (8011e80 <tcp_input+0x74c>)
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011c22:	69f8      	ldr	r0, [r7, #28]
 8011c24:	f000 fac6 	bl	80121b4 <tcp_process>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011c2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c30:	f113 0f0d 	cmn.w	r3, #13
 8011c34:	f000 80d2 	beq.w	8011ddc <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8011c38:	4b92      	ldr	r3, [pc, #584]	; (8011e84 <tcp_input+0x750>)
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	f003 0308 	and.w	r3, r3, #8
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d016      	beq.n	8011c72 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d008      	beq.n	8011c60 <tcp_input+0x52c>
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c54:	69fa      	ldr	r2, [r7, #28]
 8011c56:	6912      	ldr	r2, [r2, #16]
 8011c58:	f06f 010d 	mvn.w	r1, #13
 8011c5c:	4610      	mov	r0, r2
 8011c5e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011c60:	69f9      	ldr	r1, [r7, #28]
 8011c62:	4889      	ldr	r0, [pc, #548]	; (8011e88 <tcp_input+0x754>)
 8011c64:	f7ff fc4c 	bl	8011500 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8011c68:	69f9      	ldr	r1, [r7, #28]
 8011c6a:	2001      	movs	r0, #1
 8011c6c:	f7fd fb4a 	bl	800f304 <memp_free>
 8011c70:	e0bf      	b.n	8011df2 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8011c72:	2300      	movs	r3, #0
 8011c74:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011c76:	4b85      	ldr	r3, [pc, #532]	; (8011e8c <tcp_input+0x758>)
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d01b      	beq.n	8011cb6 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011c7e:	4b83      	ldr	r3, [pc, #524]	; (8011e8c <tcp_input+0x758>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d009      	beq.n	8011ca0 <tcp_input+0x56c>
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c90:	69fa      	ldr	r2, [r7, #28]
 8011c92:	6910      	ldr	r0, [r2, #16]
 8011c94:	89fa      	ldrh	r2, [r7, #14]
 8011c96:	69f9      	ldr	r1, [r7, #28]
 8011c98:	4798      	blx	r3
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	74fb      	strb	r3, [r7, #19]
 8011c9e:	e001      	b.n	8011ca4 <tcp_input+0x570>
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ca8:	f113 0f0d 	cmn.w	r3, #13
 8011cac:	f000 8098 	beq.w	8011de0 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011cb0:	4b76      	ldr	r3, [pc, #472]	; (8011e8c <tcp_input+0x758>)
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011cb6:	69f8      	ldr	r0, [r7, #28]
 8011cb8:	f000 f900 	bl	8011ebc <tcp_input_delayed_close>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f040 8090 	bne.w	8011de4 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011cc4:	4b72      	ldr	r3, [pc, #456]	; (8011e90 <tcp_input+0x75c>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d041      	beq.n	8011d50 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d006      	beq.n	8011ce2 <tcp_input+0x5ae>
 8011cd4:	4b6f      	ldr	r3, [pc, #444]	; (8011e94 <tcp_input+0x760>)
 8011cd6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8011cda:	496f      	ldr	r1, [pc, #444]	; (8011e98 <tcp_input+0x764>)
 8011cdc:	486f      	ldr	r0, [pc, #444]	; (8011e9c <tcp_input+0x768>)
 8011cde:	f005 fe21 	bl	8017924 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	7e9b      	ldrb	r3, [r3, #26]
 8011ce6:	f003 0310 	and.w	r3, r3, #16
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d008      	beq.n	8011d00 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011cee:	4b68      	ldr	r3, [pc, #416]	; (8011e90 <tcp_input+0x75c>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fe f8da 	bl	800feac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011cf8:	69f8      	ldr	r0, [r7, #28]
 8011cfa:	f7fe fdd5 	bl	80108a8 <tcp_abort>
            goto aborted;
 8011cfe:	e078      	b.n	8011df2 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00c      	beq.n	8011d24 <tcp_input+0x5f0>
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	6918      	ldr	r0, [r3, #16]
 8011d14:	4b5e      	ldr	r3, [pc, #376]	; (8011e90 <tcp_input+0x75c>)
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	2300      	movs	r3, #0
 8011d1a:	69f9      	ldr	r1, [r7, #28]
 8011d1c:	47a0      	blx	r4
 8011d1e:	4603      	mov	r3, r0
 8011d20:	74fb      	strb	r3, [r7, #19]
 8011d22:	e008      	b.n	8011d36 <tcp_input+0x602>
 8011d24:	4b5a      	ldr	r3, [pc, #360]	; (8011e90 <tcp_input+0x75c>)
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	2300      	movs	r3, #0
 8011d2a:	69f9      	ldr	r1, [r7, #28]
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	f7ff fa44 	bl	80111ba <tcp_recv_null>
 8011d32:	4603      	mov	r3, r0
 8011d34:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011d36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d3a:	f113 0f0d 	cmn.w	r3, #13
 8011d3e:	d053      	beq.n	8011de8 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011d40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d003      	beq.n	8011d50 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011d48:	4b51      	ldr	r3, [pc, #324]	; (8011e90 <tcp_input+0x75c>)
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011d50:	4b4c      	ldr	r3, [pc, #304]	; (8011e84 <tcp_input+0x750>)
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f003 0320 	and.w	r3, r3, #32
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d030      	beq.n	8011dbe <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d009      	beq.n	8011d78 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d68:	7b5a      	ldrb	r2, [r3, #13]
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d6e:	f042 0220 	orr.w	r2, r2, #32
 8011d72:	b2d2      	uxtb	r2, r2
 8011d74:	735a      	strb	r2, [r3, #13]
 8011d76:	e022      	b.n	8011dbe <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d7c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011d80:	d005      	beq.n	8011d8e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d86:	3301      	adds	r3, #1
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00b      	beq.n	8011db0 <tcp_input+0x67c>
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	6918      	ldr	r0, [r3, #16]
 8011da2:	2300      	movs	r3, #0
 8011da4:	2200      	movs	r2, #0
 8011da6:	69f9      	ldr	r1, [r7, #28]
 8011da8:	47a0      	blx	r4
 8011daa:	4603      	mov	r3, r0
 8011dac:	74fb      	strb	r3, [r7, #19]
 8011dae:	e001      	b.n	8011db4 <tcp_input+0x680>
 8011db0:	2300      	movs	r3, #0
 8011db2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011db4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011db8:	f113 0f0d 	cmn.w	r3, #13
 8011dbc:	d016      	beq.n	8011dec <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011dbe:	4b30      	ldr	r3, [pc, #192]	; (8011e80 <tcp_input+0x74c>)
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011dc4:	69f8      	ldr	r0, [r7, #28]
 8011dc6:	f000 f879 	bl	8011ebc <tcp_input_delayed_close>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10f      	bne.n	8011df0 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011dd0:	69f8      	ldr	r0, [r7, #28]
 8011dd2:	f002 f963 	bl	801409c <tcp_output>
 8011dd6:	e00c      	b.n	8011df2 <tcp_input+0x6be>
        goto aborted;
 8011dd8:	bf00      	nop
 8011dda:	e00a      	b.n	8011df2 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011ddc:	bf00      	nop
 8011dde:	e008      	b.n	8011df2 <tcp_input+0x6be>
              goto aborted;
 8011de0:	bf00      	nop
 8011de2:	e006      	b.n	8011df2 <tcp_input+0x6be>
          goto aborted;
 8011de4:	bf00      	nop
 8011de6:	e004      	b.n	8011df2 <tcp_input+0x6be>
            goto aborted;
 8011de8:	bf00      	nop
 8011dea:	e002      	b.n	8011df2 <tcp_input+0x6be>
              goto aborted;
 8011dec:	bf00      	nop
 8011dee:	e000      	b.n	8011df2 <tcp_input+0x6be>
          goto aborted;
 8011df0:	bf00      	nop
    tcp_input_pcb = NULL;
 8011df2:	4b23      	ldr	r3, [pc, #140]	; (8011e80 <tcp_input+0x74c>)
 8011df4:	2200      	movs	r2, #0
 8011df6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011df8:	4b25      	ldr	r3, [pc, #148]	; (8011e90 <tcp_input+0x75c>)
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8011dfe:	4b28      	ldr	r3, [pc, #160]	; (8011ea0 <tcp_input+0x76c>)
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d037      	beq.n	8011e76 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8011e06:	4b26      	ldr	r3, [pc, #152]	; (8011ea0 <tcp_input+0x76c>)
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7fe f84e 	bl	800feac <pbuf_free>
      inseg.p = NULL;
 8011e10:	4b23      	ldr	r3, [pc, #140]	; (8011ea0 <tcp_input+0x76c>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011e16:	e02e      	b.n	8011e76 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011e18:	4b22      	ldr	r3, [pc, #136]	; (8011ea4 <tcp_input+0x770>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	899b      	ldrh	r3, [r3, #12]
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fc fd33 	bl	800e88c <lwip_htons>
 8011e26:	4603      	mov	r3, r0
 8011e28:	f003 0304 	and.w	r3, r3, #4
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d115      	bne.n	8011e5c <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e30:	4b1d      	ldr	r3, [pc, #116]	; (8011ea8 <tcp_input+0x774>)
 8011e32:	6818      	ldr	r0, [r3, #0]
 8011e34:	4b1d      	ldr	r3, [pc, #116]	; (8011eac <tcp_input+0x778>)
 8011e36:	881b      	ldrh	r3, [r3, #0]
 8011e38:	461a      	mov	r2, r3
 8011e3a:	4b1d      	ldr	r3, [pc, #116]	; (8011eb0 <tcp_input+0x77c>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e40:	4b18      	ldr	r3, [pc, #96]	; (8011ea4 <tcp_input+0x770>)
 8011e42:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e44:	885b      	ldrh	r3, [r3, #2]
 8011e46:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e48:	4a16      	ldr	r2, [pc, #88]	; (8011ea4 <tcp_input+0x770>)
 8011e4a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e4c:	8812      	ldrh	r2, [r2, #0]
 8011e4e:	b292      	uxth	r2, r2
 8011e50:	9201      	str	r2, [sp, #4]
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	4b17      	ldr	r3, [pc, #92]	; (8011eb4 <tcp_input+0x780>)
 8011e56:	4a18      	ldr	r2, [pc, #96]	; (8011eb8 <tcp_input+0x784>)
 8011e58:	f002 fbaa 	bl	80145b0 <tcp_rst>
    pbuf_free(p);
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f7fe f825 	bl	800feac <pbuf_free>
  return;
 8011e62:	e008      	b.n	8011e76 <tcp_input+0x742>
    goto dropped;
 8011e64:	bf00      	nop
 8011e66:	e002      	b.n	8011e6e <tcp_input+0x73a>
dropped:
 8011e68:	bf00      	nop
 8011e6a:	e000      	b.n	8011e6e <tcp_input+0x73a>
      goto dropped;
 8011e6c:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7fe f81c 	bl	800feac <pbuf_free>
 8011e74:	e000      	b.n	8011e78 <tcp_input+0x744>
  return;
 8011e76:	bf00      	nop
}
 8011e78:	3724      	adds	r7, #36	; 0x24
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd90      	pop	{r4, r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	2400da34 	.word	0x2400da34
 8011e84:	2400a42d 	.word	0x2400a42d
 8011e88:	2400da20 	.word	0x2400da20
 8011e8c:	2400a428 	.word	0x2400a428
 8011e90:	2400a430 	.word	0x2400a430
 8011e94:	0801985c 	.word	0x0801985c
 8011e98:	080199f8 	.word	0x080199f8
 8011e9c:	080198a0 	.word	0x080198a0
 8011ea0:	2400a400 	.word	0x2400a400
 8011ea4:	2400a410 	.word	0x2400a410
 8011ea8:	2400a424 	.word	0x2400a424
 8011eac:	2400a42a 	.word	0x2400a42a
 8011eb0:	2400a420 	.word	0x2400a420
 8011eb4:	2400a860 	.word	0x2400a860
 8011eb8:	2400a864 	.word	0x2400a864

08011ebc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8011ec4:	4b14      	ldr	r3, [pc, #80]	; (8011f18 <tcp_input_delayed_close+0x5c>)
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	f003 0310 	and.w	r3, r3, #16
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d01d      	beq.n	8011f0c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	7e9b      	ldrb	r3, [r3, #26]
 8011ed4:	f003 0310 	and.w	r3, r3, #16
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d10d      	bne.n	8011ef8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d008      	beq.n	8011ef8 <tcp_input_delayed_close+0x3c>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	6912      	ldr	r2, [r2, #16]
 8011ef0:	f06f 010e 	mvn.w	r1, #14
 8011ef4:	4610      	mov	r0, r2
 8011ef6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011ef8:	6879      	ldr	r1, [r7, #4]
 8011efa:	4808      	ldr	r0, [pc, #32]	; (8011f1c <tcp_input_delayed_close+0x60>)
 8011efc:	f7ff fb00 	bl	8011500 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011f00:	6879      	ldr	r1, [r7, #4]
 8011f02:	2001      	movs	r0, #1
 8011f04:	f7fd f9fe 	bl	800f304 <memp_free>
    return 1;
 8011f08:	2301      	movs	r3, #1
 8011f0a:	e000      	b.n	8011f0e <tcp_input_delayed_close+0x52>
  }
  return 0;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	2400a42d 	.word	0x2400a42d
 8011f1c:	2400da20 	.word	0x2400da20

08011f20 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b088      	sub	sp, #32
 8011f24:	af02      	add	r7, sp, #8
 8011f26:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011f28:	4b64      	ldr	r3, [pc, #400]	; (80120bc <tcp_listen_input+0x19c>)
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	f003 0304 	and.w	r3, r3, #4
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	f040 80bc 	bne.w	80120ae <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011f36:	4b61      	ldr	r3, [pc, #388]	; (80120bc <tcp_listen_input+0x19c>)
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	f003 0310 	and.w	r3, r3, #16
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d016      	beq.n	8011f70 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f42:	4b5f      	ldr	r3, [pc, #380]	; (80120c0 <tcp_listen_input+0x1a0>)
 8011f44:	6818      	ldr	r0, [r3, #0]
 8011f46:	4b5f      	ldr	r3, [pc, #380]	; (80120c4 <tcp_listen_input+0x1a4>)
 8011f48:	881b      	ldrh	r3, [r3, #0]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	4b5e      	ldr	r3, [pc, #376]	; (80120c8 <tcp_listen_input+0x1a8>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f52:	4b5e      	ldr	r3, [pc, #376]	; (80120cc <tcp_listen_input+0x1ac>)
 8011f54:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f56:	885b      	ldrh	r3, [r3, #2]
 8011f58:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f5a:	4a5c      	ldr	r2, [pc, #368]	; (80120cc <tcp_listen_input+0x1ac>)
 8011f5c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f5e:	8812      	ldrh	r2, [r2, #0]
 8011f60:	b292      	uxth	r2, r2
 8011f62:	9201      	str	r2, [sp, #4]
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	4b5a      	ldr	r3, [pc, #360]	; (80120d0 <tcp_listen_input+0x1b0>)
 8011f68:	4a5a      	ldr	r2, [pc, #360]	; (80120d4 <tcp_listen_input+0x1b4>)
 8011f6a:	f002 fb21 	bl	80145b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011f6e:	e0a0      	b.n	80120b2 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8011f70:	4b52      	ldr	r3, [pc, #328]	; (80120bc <tcp_listen_input+0x19c>)
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	f003 0302 	and.w	r3, r3, #2
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	f000 809a 	beq.w	80120b2 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	7d5b      	ldrb	r3, [r3, #21]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7ff f9f8 	bl	8011378 <tcp_alloc>
 8011f88:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d111      	bne.n	8011fb4 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	699b      	ldr	r3, [r3, #24]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d00a      	beq.n	8011fae <tcp_listen_input+0x8e>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	699b      	ldr	r3, [r3, #24]
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	6910      	ldr	r0, [r2, #16]
 8011fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	4798      	blx	r3
 8011fa8:	4603      	mov	r3, r0
 8011faa:	73bb      	strb	r3, [r7, #14]
      return;
 8011fac:	e082      	b.n	80120b4 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011fae:	23f0      	movs	r3, #240	; 0xf0
 8011fb0:	73bb      	strb	r3, [r7, #14]
      return;
 8011fb2:	e07f      	b.n	80120b4 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011fb4:	4b48      	ldr	r3, [pc, #288]	; (80120d8 <tcp_listen_input+0x1b8>)
 8011fb6:	695a      	ldr	r2, [r3, #20]
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011fbc:	4b46      	ldr	r3, [pc, #280]	; (80120d8 <tcp_listen_input+0x1b8>)
 8011fbe:	691a      	ldr	r2, [r3, #16]
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	8ada      	ldrh	r2, [r3, #22]
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011fcc:	4b3f      	ldr	r3, [pc, #252]	; (80120cc <tcp_listen_input+0x1ac>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	881b      	ldrh	r3, [r3, #0]
 8011fd2:	b29a      	uxth	r2, r3
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	2203      	movs	r2, #3
 8011fdc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011fde:	4b3a      	ldr	r3, [pc, #232]	; (80120c8 <tcp_listen_input+0x1a8>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	1c5a      	adds	r2, r3, #1
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011ff0:	6978      	ldr	r0, [r7, #20]
 8011ff2:	f7ff fb01 	bl	80115f8 <tcp_next_iss>
 8011ff6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	693a      	ldr	r2, [r7, #16]
 8011ffc:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	693a      	ldr	r2, [r7, #16]
 8012002:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	693a      	ldr	r2, [r7, #16]
 8012008:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	693a      	ldr	r2, [r7, #16]
 801200e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012010:	4b2d      	ldr	r3, [pc, #180]	; (80120c8 <tcp_listen_input+0x1a8>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	1e5a      	subs	r2, r3, #1
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	691a      	ldr	r2, [r3, #16]
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	7a1b      	ldrb	r3, [r3, #8]
 801202c:	f003 030c 	and.w	r3, r3, #12
 8012030:	b2da      	uxtb	r2, r3
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012036:	4b29      	ldr	r3, [pc, #164]	; (80120dc <tcp_listen_input+0x1bc>)
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	60da      	str	r2, [r3, #12]
 801203e:	4a27      	ldr	r2, [pc, #156]	; (80120dc <tcp_listen_input+0x1bc>)
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	6013      	str	r3, [r2, #0]
 8012044:	f002 fd06 	bl	8014a54 <tcp_timer_needed>
 8012048:	4b25      	ldr	r3, [pc, #148]	; (80120e0 <tcp_listen_input+0x1c0>)
 801204a:	2201      	movs	r2, #1
 801204c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801204e:	6978      	ldr	r0, [r7, #20]
 8012050:	f001 fd14 	bl	8013a7c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012054:	4b1d      	ldr	r3, [pc, #116]	; (80120cc <tcp_listen_input+0x1ac>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	89db      	ldrh	r3, [r3, #14]
 801205a:	b29a      	uxth	r2, r3
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	3304      	adds	r3, #4
 8012076:	4619      	mov	r1, r3
 8012078:	4610      	mov	r0, r2
 801207a:	f7ff fad5 	bl	8011628 <tcp_eff_send_mss_impl>
 801207e:	4603      	mov	r3, r0
 8012080:	461a      	mov	r2, r3
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012086:	2112      	movs	r1, #18
 8012088:	6978      	ldr	r0, [r7, #20]
 801208a:	f001 feaf 	bl	8013dec <tcp_enqueue_flags>
 801208e:	4603      	mov	r3, r0
 8012090:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d004      	beq.n	80120a4 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801209a:	2100      	movs	r1, #0
 801209c:	6978      	ldr	r0, [r7, #20]
 801209e:	f7fe fb51 	bl	8010744 <tcp_abandon>
      return;
 80120a2:	e007      	b.n	80120b4 <tcp_listen_input+0x194>
    tcp_output(npcb);
 80120a4:	6978      	ldr	r0, [r7, #20]
 80120a6:	f001 fff9 	bl	801409c <tcp_output>
  return;
 80120aa:	bf00      	nop
 80120ac:	e001      	b.n	80120b2 <tcp_listen_input+0x192>
    return;
 80120ae:	bf00      	nop
 80120b0:	e000      	b.n	80120b4 <tcp_listen_input+0x194>
  return;
 80120b2:	bf00      	nop
}
 80120b4:	3718      	adds	r7, #24
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	bf00      	nop
 80120bc:	2400a42c 	.word	0x2400a42c
 80120c0:	2400a424 	.word	0x2400a424
 80120c4:	2400a42a 	.word	0x2400a42a
 80120c8:	2400a420 	.word	0x2400a420
 80120cc:	2400a410 	.word	0x2400a410
 80120d0:	2400a860 	.word	0x2400a860
 80120d4:	2400a864 	.word	0x2400a864
 80120d8:	2400a850 	.word	0x2400a850
 80120dc:	2400da20 	.word	0x2400da20
 80120e0:	2400da1c 	.word	0x2400da1c

080120e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af02      	add	r7, sp, #8
 80120ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80120ec:	4b29      	ldr	r3, [pc, #164]	; (8012194 <tcp_timewait_input+0xb0>)
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f003 0304 	and.w	r3, r3, #4
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d147      	bne.n	8012188 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80120f8:	4b26      	ldr	r3, [pc, #152]	; (8012194 <tcp_timewait_input+0xb0>)
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f003 0302 	and.w	r3, r3, #2
 8012100:	2b00      	cmp	r3, #0
 8012102:	d027      	beq.n	8012154 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012104:	4b24      	ldr	r3, [pc, #144]	; (8012198 <tcp_timewait_input+0xb4>)
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210c:	1ad3      	subs	r3, r2, r3
 801210e:	2b00      	cmp	r3, #0
 8012110:	db2a      	blt.n	8012168 <tcp_timewait_input+0x84>
 8012112:	4b21      	ldr	r3, [pc, #132]	; (8012198 <tcp_timewait_input+0xb4>)
 8012114:	681a      	ldr	r2, [r3, #0]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801211a:	6879      	ldr	r1, [r7, #4]
 801211c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801211e:	440b      	add	r3, r1
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	dc20      	bgt.n	8012168 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012126:	4b1d      	ldr	r3, [pc, #116]	; (801219c <tcp_timewait_input+0xb8>)
 8012128:	6818      	ldr	r0, [r3, #0]
 801212a:	4b1d      	ldr	r3, [pc, #116]	; (80121a0 <tcp_timewait_input+0xbc>)
 801212c:	881b      	ldrh	r3, [r3, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	4b19      	ldr	r3, [pc, #100]	; (8012198 <tcp_timewait_input+0xb4>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012136:	4b1b      	ldr	r3, [pc, #108]	; (80121a4 <tcp_timewait_input+0xc0>)
 8012138:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801213a:	885b      	ldrh	r3, [r3, #2]
 801213c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801213e:	4a19      	ldr	r2, [pc, #100]	; (80121a4 <tcp_timewait_input+0xc0>)
 8012140:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012142:	8812      	ldrh	r2, [r2, #0]
 8012144:	b292      	uxth	r2, r2
 8012146:	9201      	str	r2, [sp, #4]
 8012148:	9300      	str	r3, [sp, #0]
 801214a:	4b17      	ldr	r3, [pc, #92]	; (80121a8 <tcp_timewait_input+0xc4>)
 801214c:	4a17      	ldr	r2, [pc, #92]	; (80121ac <tcp_timewait_input+0xc8>)
 801214e:	f002 fa2f 	bl	80145b0 <tcp_rst>
      return;
 8012152:	e01c      	b.n	801218e <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8012154:	4b0f      	ldr	r3, [pc, #60]	; (8012194 <tcp_timewait_input+0xb0>)
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	f003 0301 	and.w	r3, r3, #1
 801215c:	2b00      	cmp	r3, #0
 801215e:	d003      	beq.n	8012168 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012160:	4b13      	ldr	r3, [pc, #76]	; (80121b0 <tcp_timewait_input+0xcc>)
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012168:	4b0d      	ldr	r3, [pc, #52]	; (80121a0 <tcp_timewait_input+0xbc>)
 801216a:	881b      	ldrh	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00d      	beq.n	801218c <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7e9b      	ldrb	r3, [r3, #26]
 8012174:	f043 0302 	orr.w	r3, r3, #2
 8012178:	b2da      	uxtb	r2, r3
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f001 ff8c 	bl	801409c <tcp_output>
  }
  return;
 8012184:	bf00      	nop
 8012186:	e001      	b.n	801218c <tcp_timewait_input+0xa8>
    return;
 8012188:	bf00      	nop
 801218a:	e000      	b.n	801218e <tcp_timewait_input+0xaa>
  return;
 801218c:	bf00      	nop
}
 801218e:	3708      	adds	r7, #8
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	2400a42c 	.word	0x2400a42c
 8012198:	2400a420 	.word	0x2400a420
 801219c:	2400a424 	.word	0x2400a424
 80121a0:	2400a42a 	.word	0x2400a42a
 80121a4:	2400a410 	.word	0x2400a410
 80121a8:	2400a860 	.word	0x2400a860
 80121ac:	2400a864 	.word	0x2400a864
 80121b0:	2400da24 	.word	0x2400da24

080121b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b08a      	sub	sp, #40	; 0x28
 80121b8:	af02      	add	r7, sp, #8
 80121ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80121bc:	2300      	movs	r3, #0
 80121be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80121c0:	2300      	movs	r3, #0
 80121c2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80121c4:	4ba4      	ldr	r3, [pc, #656]	; (8012458 <tcp_process+0x2a4>)
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	f003 0304 	and.w	r3, r3, #4
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d04e      	beq.n	801226e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	7d1b      	ldrb	r3, [r3, #20]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d108      	bne.n	80121ea <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80121dc:	4b9f      	ldr	r3, [pc, #636]	; (801245c <tcp_process+0x2a8>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d123      	bne.n	801222c <tcp_process+0x78>
        acceptable = 1;
 80121e4:	2301      	movs	r3, #1
 80121e6:	76fb      	strb	r3, [r7, #27]
 80121e8:	e020      	b.n	801222c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121ee:	4b9c      	ldr	r3, [pc, #624]	; (8012460 <tcp_process+0x2ac>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d102      	bne.n	80121fc <tcp_process+0x48>
        acceptable = 1;
 80121f6:	2301      	movs	r3, #1
 80121f8:	76fb      	strb	r3, [r7, #27]
 80121fa:	e017      	b.n	801222c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80121fc:	4b98      	ldr	r3, [pc, #608]	; (8012460 <tcp_process+0x2ac>)
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012204:	1ad3      	subs	r3, r2, r3
 8012206:	2b00      	cmp	r3, #0
 8012208:	db10      	blt.n	801222c <tcp_process+0x78>
 801220a:	4b95      	ldr	r3, [pc, #596]	; (8012460 <tcp_process+0x2ac>)
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012212:	6879      	ldr	r1, [r7, #4]
 8012214:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012216:	440b      	add	r3, r1
 8012218:	1ad3      	subs	r3, r2, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	dc06      	bgt.n	801222c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	7e9b      	ldrb	r3, [r3, #26]
 8012222:	f043 0302 	orr.w	r3, r3, #2
 8012226:	b2da      	uxtb	r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801222c:	7efb      	ldrb	r3, [r7, #27]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d01b      	beq.n	801226a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	7d1b      	ldrb	r3, [r3, #20]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d106      	bne.n	8012248 <tcp_process+0x94>
 801223a:	4b8a      	ldr	r3, [pc, #552]	; (8012464 <tcp_process+0x2b0>)
 801223c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012240:	4989      	ldr	r1, [pc, #548]	; (8012468 <tcp_process+0x2b4>)
 8012242:	488a      	ldr	r0, [pc, #552]	; (801246c <tcp_process+0x2b8>)
 8012244:	f005 fb6e 	bl	8017924 <iprintf>
      recv_flags |= TF_RESET;
 8012248:	4b89      	ldr	r3, [pc, #548]	; (8012470 <tcp_process+0x2bc>)
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	f043 0308 	orr.w	r3, r3, #8
 8012250:	b2da      	uxtb	r2, r3
 8012252:	4b87      	ldr	r3, [pc, #540]	; (8012470 <tcp_process+0x2bc>)
 8012254:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	7e9b      	ldrb	r3, [r3, #26]
 801225a:	f023 0301 	bic.w	r3, r3, #1
 801225e:	b2da      	uxtb	r2, r3
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8012264:	f06f 030d 	mvn.w	r3, #13
 8012268:	e34d      	b.n	8012906 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801226a:	2300      	movs	r3, #0
 801226c:	e34b      	b.n	8012906 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801226e:	4b7a      	ldr	r3, [pc, #488]	; (8012458 <tcp_process+0x2a4>)
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	f003 0302 	and.w	r3, r3, #2
 8012276:	2b00      	cmp	r3, #0
 8012278:	d010      	beq.n	801229c <tcp_process+0xe8>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	7d1b      	ldrb	r3, [r3, #20]
 801227e:	2b02      	cmp	r3, #2
 8012280:	d00c      	beq.n	801229c <tcp_process+0xe8>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	7d1b      	ldrb	r3, [r3, #20]
 8012286:	2b03      	cmp	r3, #3
 8012288:	d008      	beq.n	801229c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	7e9b      	ldrb	r3, [r3, #26]
 801228e:	f043 0302 	orr.w	r3, r3, #2
 8012292:	b2da      	uxtb	r2, r3
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8012298:	2300      	movs	r3, #0
 801229a:	e334      	b.n	8012906 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	7e9b      	ldrb	r3, [r3, #26]
 80122a0:	f003 0310 	and.w	r3, r3, #16
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d103      	bne.n	80122b0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80122a8:	4b72      	ldr	r3, [pc, #456]	; (8012474 <tcp_process+0x2c0>)
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f001 fbdf 	bl	8013a7c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	7d1b      	ldrb	r3, [r3, #20]
 80122c2:	3b02      	subs	r3, #2
 80122c4:	2b07      	cmp	r3, #7
 80122c6:	f200 830e 	bhi.w	80128e6 <tcp_process+0x732>
 80122ca:	a201      	add	r2, pc, #4	; (adr r2, 80122d0 <tcp_process+0x11c>)
 80122cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122d0:	080122f1 	.word	0x080122f1
 80122d4:	080124e9 	.word	0x080124e9
 80122d8:	08012641 	.word	0x08012641
 80122dc:	0801266b 	.word	0x0801266b
 80122e0:	08012795 	.word	0x08012795
 80122e4:	08012641 	.word	0x08012641
 80122e8:	08012821 	.word	0x08012821
 80122ec:	080128b1 	.word	0x080128b1
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80122f0:	4b59      	ldr	r3, [pc, #356]	; (8012458 <tcp_process+0x2a4>)
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	f003 0310 	and.w	r3, r3, #16
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 80cb 	beq.w	8012494 <tcp_process+0x2e0>
 80122fe:	4b56      	ldr	r3, [pc, #344]	; (8012458 <tcp_process+0x2a4>)
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	f003 0302 	and.w	r3, r3, #2
 8012306:	2b00      	cmp	r3, #0
 8012308:	f000 80c4 	beq.w	8012494 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012310:	1c5a      	adds	r2, r3, #1
 8012312:	4b52      	ldr	r3, [pc, #328]	; (801245c <tcp_process+0x2a8>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	429a      	cmp	r2, r3
 8012318:	f040 80bc 	bne.w	8012494 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 801231c:	4b50      	ldr	r3, [pc, #320]	; (8012460 <tcp_process+0x2ac>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	1c5a      	adds	r2, r3, #1
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 801232e:	4b4b      	ldr	r3, [pc, #300]	; (801245c <tcp_process+0x2a8>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8012336:	4b50      	ldr	r3, [pc, #320]	; (8012478 <tcp_process+0x2c4>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	89db      	ldrh	r3, [r3, #14]
 801233c:	b29a      	uxth	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012350:	4b43      	ldr	r3, [pc, #268]	; (8012460 <tcp_process+0x2ac>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	1e5a      	subs	r2, r3, #1
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2204      	movs	r2, #4
 801235e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	3304      	adds	r3, #4
 8012368:	4619      	mov	r1, r3
 801236a:	4610      	mov	r0, r2
 801236c:	f7ff f95c 	bl	8011628 <tcp_eff_send_mss_impl>
 8012370:	4603      	mov	r3, r0
 8012372:	461a      	mov	r2, r3
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801237c:	005b      	lsls	r3, r3, #1
 801237e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012382:	429a      	cmp	r2, r3
 8012384:	bf38      	it	cc
 8012386:	461a      	movcc	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	4293      	cmp	r3, r2
 8012390:	bf28      	it	cs
 8012392:	4613      	movcs	r3, r2
 8012394:	b29a      	uxth	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d106      	bne.n	80123b4 <tcp_process+0x200>
 80123a6:	4b2f      	ldr	r3, [pc, #188]	; (8012464 <tcp_process+0x2b0>)
 80123a8:	f240 321a 	movw	r2, #794	; 0x31a
 80123ac:	4933      	ldr	r1, [pc, #204]	; (801247c <tcp_process+0x2c8>)
 80123ae:	482f      	ldr	r0, [pc, #188]	; (801246c <tcp_process+0x2b8>)
 80123b0:	f005 fab8 	bl	8017924 <iprintf>
      --pcb->snd_queuelen;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80123ba:	3b01      	subs	r3, #1
 80123bc:	b29a      	uxth	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d111      	bne.n	80123f4 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123d4:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d106      	bne.n	80123ea <tcp_process+0x236>
 80123dc:	4b21      	ldr	r3, [pc, #132]	; (8012464 <tcp_process+0x2b0>)
 80123de:	f240 3222 	movw	r2, #802	; 0x322
 80123e2:	4927      	ldr	r1, [pc, #156]	; (8012480 <tcp_process+0x2cc>)
 80123e4:	4821      	ldr	r0, [pc, #132]	; (801246c <tcp_process+0x2b8>)
 80123e6:	f005 fa9d 	bl	8017924 <iprintf>
        pcb->unsent = rseg->next;
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	669a      	str	r2, [r3, #104]	; 0x68
 80123f2:	e003      	b.n	80123fc <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80123fc:	69f8      	ldr	r0, [r7, #28]
 80123fe:	f7fe fea8 	bl	8011152 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012406:	2b00      	cmp	r3, #0
 8012408:	d104      	bne.n	8012414 <tcp_process+0x260>
        pcb->rtime = -1;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012410:	861a      	strh	r2, [r3, #48]	; 0x30
 8012412:	e006      	b.n	8012422 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00a      	beq.n	8012442 <tcp_process+0x28e>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	6910      	ldr	r0, [r2, #16]
 8012436:	2200      	movs	r2, #0
 8012438:	6879      	ldr	r1, [r7, #4]
 801243a:	4798      	blx	r3
 801243c:	4603      	mov	r3, r0
 801243e:	76bb      	strb	r3, [r7, #26]
 8012440:	e001      	b.n	8012446 <tcp_process+0x292>
 8012442:	2300      	movs	r3, #0
 8012444:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8012446:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801244a:	f113 0f0d 	cmn.w	r3, #13
 801244e:	d119      	bne.n	8012484 <tcp_process+0x2d0>
        return ERR_ABRT;
 8012450:	f06f 030c 	mvn.w	r3, #12
 8012454:	e257      	b.n	8012906 <tcp_process+0x752>
 8012456:	bf00      	nop
 8012458:	2400a42c 	.word	0x2400a42c
 801245c:	2400a424 	.word	0x2400a424
 8012460:	2400a420 	.word	0x2400a420
 8012464:	0801985c 	.word	0x0801985c
 8012468:	08019a14 	.word	0x08019a14
 801246c:	080198a0 	.word	0x080198a0
 8012470:	2400a42d 	.word	0x2400a42d
 8012474:	2400da24 	.word	0x2400da24
 8012478:	2400a410 	.word	0x2400a410
 801247c:	08019a34 	.word	0x08019a34
 8012480:	08019a4c 	.word	0x08019a4c
      }
      tcp_ack_now(pcb);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	7e9b      	ldrb	r3, [r3, #26]
 8012488:	f043 0302 	orr.w	r3, r3, #2
 801248c:	b2da      	uxtb	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8012492:	e22a      	b.n	80128ea <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8012494:	4b9f      	ldr	r3, [pc, #636]	; (8012714 <tcp_process+0x560>)
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	f003 0310 	and.w	r3, r3, #16
 801249c:	2b00      	cmp	r3, #0
 801249e:	f000 8224 	beq.w	80128ea <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80124a2:	4b9d      	ldr	r3, [pc, #628]	; (8012718 <tcp_process+0x564>)
 80124a4:	6818      	ldr	r0, [r3, #0]
 80124a6:	4b9d      	ldr	r3, [pc, #628]	; (801271c <tcp_process+0x568>)
 80124a8:	881b      	ldrh	r3, [r3, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	4b9c      	ldr	r3, [pc, #624]	; (8012720 <tcp_process+0x56c>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80124b2:	4b9c      	ldr	r3, [pc, #624]	; (8012724 <tcp_process+0x570>)
 80124b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80124b6:	885b      	ldrh	r3, [r3, #2]
 80124b8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80124ba:	4a9a      	ldr	r2, [pc, #616]	; (8012724 <tcp_process+0x570>)
 80124bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80124be:	8812      	ldrh	r2, [r2, #0]
 80124c0:	b292      	uxth	r2, r2
 80124c2:	9201      	str	r2, [sp, #4]
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	4b98      	ldr	r3, [pc, #608]	; (8012728 <tcp_process+0x574>)
 80124c8:	4a98      	ldr	r2, [pc, #608]	; (801272c <tcp_process+0x578>)
 80124ca:	f002 f871 	bl	80145b0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124d4:	2b05      	cmp	r3, #5
 80124d6:	f200 8208 	bhi.w	80128ea <tcp_process+0x736>
        pcb->rtime = 0;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2200      	movs	r2, #0
 80124de:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f002 f8db 	bl	801469c <tcp_rexmit_rto>
    break;
 80124e6:	e200      	b.n	80128ea <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80124e8:	4b8a      	ldr	r3, [pc, #552]	; (8012714 <tcp_process+0x560>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	f003 0310 	and.w	r3, r3, #16
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	f000 8091 	beq.w	8012618 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80124f6:	4b88      	ldr	r3, [pc, #544]	; (8012718 <tcp_process+0x564>)
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	3b01      	subs	r3, #1
 8012502:	2b00      	cmp	r3, #0
 8012504:	db71      	blt.n	80125ea <tcp_process+0x436>
 8012506:	4b84      	ldr	r3, [pc, #528]	; (8012718 <tcp_process+0x564>)
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	2b00      	cmp	r3, #0
 8012512:	dc6a      	bgt.n	80125ea <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2204      	movs	r2, #4
 8012518:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00b      	beq.n	801253a <tcp_process+0x386>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012526:	699b      	ldr	r3, [r3, #24]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d106      	bne.n	801253a <tcp_process+0x386>
 801252c:	4b80      	ldr	r3, [pc, #512]	; (8012730 <tcp_process+0x57c>)
 801252e:	f240 3251 	movw	r2, #849	; 0x351
 8012532:	4980      	ldr	r1, [pc, #512]	; (8012734 <tcp_process+0x580>)
 8012534:	4880      	ldr	r0, [pc, #512]	; (8012738 <tcp_process+0x584>)
 8012536:	f005 f9f5 	bl	8017924 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801253e:	2b00      	cmp	r3, #0
 8012540:	d102      	bne.n	8012548 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8012542:	23fa      	movs	r3, #250	; 0xfa
 8012544:	76bb      	strb	r3, [r7, #26]
 8012546:	e011      	b.n	801256c <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801254c:	699b      	ldr	r3, [r3, #24]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d00a      	beq.n	8012568 <tcp_process+0x3b4>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012556:	699b      	ldr	r3, [r3, #24]
 8012558:	687a      	ldr	r2, [r7, #4]
 801255a:	6910      	ldr	r0, [r2, #16]
 801255c:	2200      	movs	r2, #0
 801255e:	6879      	ldr	r1, [r7, #4]
 8012560:	4798      	blx	r3
 8012562:	4603      	mov	r3, r0
 8012564:	76bb      	strb	r3, [r7, #26]
 8012566:	e001      	b.n	801256c <tcp_process+0x3b8>
 8012568:	23f0      	movs	r3, #240	; 0xf0
 801256a:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801256c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00a      	beq.n	801258a <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8012574:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012578:	f113 0f0d 	cmn.w	r3, #13
 801257c:	d002      	beq.n	8012584 <tcp_process+0x3d0>
            tcp_abort(pcb);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7fe f992 	bl	80108a8 <tcp_abort>
          }
          return ERR_ABRT;
 8012584:	f06f 030c 	mvn.w	r3, #12
 8012588:	e1bd      	b.n	8012906 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 fa42 	bl	8012a14 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8012590:	4b6a      	ldr	r3, [pc, #424]	; (801273c <tcp_process+0x588>)
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d005      	beq.n	80125a4 <tcp_process+0x3f0>
          recv_acked--;
 8012598:	4b68      	ldr	r3, [pc, #416]	; (801273c <tcp_process+0x588>)
 801259a:	881b      	ldrh	r3, [r3, #0]
 801259c:	3b01      	subs	r3, #1
 801259e:	b29a      	uxth	r2, r3
 80125a0:	4b66      	ldr	r3, [pc, #408]	; (801273c <tcp_process+0x588>)
 80125a2:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80125ae:	429a      	cmp	r2, r3
 80125b0:	bf38      	it	cc
 80125b2:	461a      	movcc	r2, r3
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	4293      	cmp	r3, r2
 80125bc:	bf28      	it	cs
 80125be:	4613      	movcs	r3, r2
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80125c8:	4b5d      	ldr	r3, [pc, #372]	; (8012740 <tcp_process+0x58c>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	f003 0320 	and.w	r3, r3, #32
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d034      	beq.n	801263e <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	7e9b      	ldrb	r3, [r3, #26]
 80125d8:	f043 0302 	orr.w	r3, r3, #2
 80125dc:	b2da      	uxtb	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2207      	movs	r2, #7
 80125e6:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80125e8:	e029      	b.n	801263e <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80125ea:	4b4b      	ldr	r3, [pc, #300]	; (8012718 <tcp_process+0x564>)
 80125ec:	6818      	ldr	r0, [r3, #0]
 80125ee:	4b4b      	ldr	r3, [pc, #300]	; (801271c <tcp_process+0x568>)
 80125f0:	881b      	ldrh	r3, [r3, #0]
 80125f2:	461a      	mov	r2, r3
 80125f4:	4b4a      	ldr	r3, [pc, #296]	; (8012720 <tcp_process+0x56c>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125fa:	4b4a      	ldr	r3, [pc, #296]	; (8012724 <tcp_process+0x570>)
 80125fc:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80125fe:	885b      	ldrh	r3, [r3, #2]
 8012600:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012602:	4a48      	ldr	r2, [pc, #288]	; (8012724 <tcp_process+0x570>)
 8012604:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012606:	8812      	ldrh	r2, [r2, #0]
 8012608:	b292      	uxth	r2, r2
 801260a:	9201      	str	r2, [sp, #4]
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	4b46      	ldr	r3, [pc, #280]	; (8012728 <tcp_process+0x574>)
 8012610:	4a46      	ldr	r2, [pc, #280]	; (801272c <tcp_process+0x578>)
 8012612:	f001 ffcd 	bl	80145b0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8012616:	e16a      	b.n	80128ee <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012618:	4b3e      	ldr	r3, [pc, #248]	; (8012714 <tcp_process+0x560>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	f003 0302 	and.w	r3, r3, #2
 8012620:	2b00      	cmp	r3, #0
 8012622:	f000 8164 	beq.w	80128ee <tcp_process+0x73a>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801262a:	1e5a      	subs	r2, r3, #1
 801262c:	4b3c      	ldr	r3, [pc, #240]	; (8012720 <tcp_process+0x56c>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	429a      	cmp	r2, r3
 8012632:	f040 815c 	bne.w	80128ee <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f002 f866 	bl	8014708 <tcp_rexmit>
    break;
 801263c:	e157      	b.n	80128ee <tcp_process+0x73a>
 801263e:	e156      	b.n	80128ee <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 f9e7 	bl	8012a14 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012646:	4b3e      	ldr	r3, [pc, #248]	; (8012740 <tcp_process+0x58c>)
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	f003 0320 	and.w	r3, r3, #32
 801264e:	2b00      	cmp	r3, #0
 8012650:	f000 814f 	beq.w	80128f2 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	7e9b      	ldrb	r3, [r3, #26]
 8012658:	f043 0302 	orr.w	r3, r3, #2
 801265c:	b2da      	uxtb	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2207      	movs	r2, #7
 8012666:	751a      	strb	r2, [r3, #20]
    }
    break;
 8012668:	e143      	b.n	80128f2 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 f9d2 	bl	8012a14 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012670:	4b33      	ldr	r3, [pc, #204]	; (8012740 <tcp_process+0x58c>)
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	f003 0320 	and.w	r3, r3, #32
 8012678:	2b00      	cmp	r3, #0
 801267a:	d074      	beq.n	8012766 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801267c:	4b25      	ldr	r3, [pc, #148]	; (8012714 <tcp_process+0x560>)
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	f003 0310 	and.w	r3, r3, #16
 8012684:	2b00      	cmp	r3, #0
 8012686:	d063      	beq.n	8012750 <tcp_process+0x59c>
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801268c:	4b22      	ldr	r3, [pc, #136]	; (8012718 <tcp_process+0x564>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	429a      	cmp	r2, r3
 8012692:	d15d      	bne.n	8012750 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012698:	2b00      	cmp	r3, #0
 801269a:	d159      	bne.n	8012750 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7e9b      	ldrb	r3, [r3, #26]
 80126a0:	f043 0302 	orr.w	r3, r3, #2
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7fe fee6 	bl	801147c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80126b0:	4b24      	ldr	r3, [pc, #144]	; (8012744 <tcp_process+0x590>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d105      	bne.n	80126c6 <tcp_process+0x512>
 80126ba:	4b22      	ldr	r3, [pc, #136]	; (8012744 <tcp_process+0x590>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	4a20      	ldr	r2, [pc, #128]	; (8012744 <tcp_process+0x590>)
 80126c2:	6013      	str	r3, [r2, #0]
 80126c4:	e013      	b.n	80126ee <tcp_process+0x53a>
 80126c6:	4b1f      	ldr	r3, [pc, #124]	; (8012744 <tcp_process+0x590>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	617b      	str	r3, [r7, #20]
 80126cc:	e00c      	b.n	80126e8 <tcp_process+0x534>
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	68db      	ldr	r3, [r3, #12]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d104      	bne.n	80126e2 <tcp_process+0x52e>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	68da      	ldr	r2, [r3, #12]
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	60da      	str	r2, [r3, #12]
 80126e0:	e005      	b.n	80126ee <tcp_process+0x53a>
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	617b      	str	r3, [r7, #20]
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1ef      	bne.n	80126ce <tcp_process+0x51a>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2200      	movs	r2, #0
 80126f2:	60da      	str	r2, [r3, #12]
 80126f4:	4b14      	ldr	r3, [pc, #80]	; (8012748 <tcp_process+0x594>)
 80126f6:	2201      	movs	r2, #1
 80126f8:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	220a      	movs	r2, #10
 80126fe:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012700:	4b12      	ldr	r3, [pc, #72]	; (801274c <tcp_process+0x598>)
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	60da      	str	r2, [r3, #12]
 8012708:	4a10      	ldr	r2, [pc, #64]	; (801274c <tcp_process+0x598>)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6013      	str	r3, [r2, #0]
 801270e:	f002 f9a1 	bl	8014a54 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8012712:	e0f0      	b.n	80128f6 <tcp_process+0x742>
 8012714:	2400a42c 	.word	0x2400a42c
 8012718:	2400a424 	.word	0x2400a424
 801271c:	2400a42a 	.word	0x2400a42a
 8012720:	2400a420 	.word	0x2400a420
 8012724:	2400a410 	.word	0x2400a410
 8012728:	2400a860 	.word	0x2400a860
 801272c:	2400a864 	.word	0x2400a864
 8012730:	0801985c 	.word	0x0801985c
 8012734:	08019a60 	.word	0x08019a60
 8012738:	080198a0 	.word	0x080198a0
 801273c:	2400a428 	.word	0x2400a428
 8012740:	2400a42d 	.word	0x2400a42d
 8012744:	2400da20 	.word	0x2400da20
 8012748:	2400da1c 	.word	0x2400da1c
 801274c:	2400da30 	.word	0x2400da30
        tcp_ack_now(pcb);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	7e9b      	ldrb	r3, [r3, #26]
 8012754:	f043 0302 	orr.w	r3, r3, #2
 8012758:	b2da      	uxtb	r2, r3
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2208      	movs	r2, #8
 8012762:	751a      	strb	r2, [r3, #20]
    break;
 8012764:	e0c7      	b.n	80128f6 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012766:	4b6a      	ldr	r3, [pc, #424]	; (8012910 <tcp_process+0x75c>)
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	f003 0310 	and.w	r3, r3, #16
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 80c1 	beq.w	80128f6 <tcp_process+0x742>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012778:	4b66      	ldr	r3, [pc, #408]	; (8012914 <tcp_process+0x760>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	429a      	cmp	r2, r3
 801277e:	f040 80ba 	bne.w	80128f6 <tcp_process+0x742>
               pcb->unsent == NULL) {
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012786:	2b00      	cmp	r3, #0
 8012788:	f040 80b5 	bne.w	80128f6 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2206      	movs	r2, #6
 8012790:	751a      	strb	r2, [r3, #20]
    break;
 8012792:	e0b0      	b.n	80128f6 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f000 f93d 	bl	8012a14 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801279a:	4b5f      	ldr	r3, [pc, #380]	; (8012918 <tcp_process+0x764>)
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	f003 0320 	and.w	r3, r3, #32
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f000 80a9 	beq.w	80128fa <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	7e9b      	ldrb	r3, [r3, #26]
 80127ac:	f043 0302 	orr.w	r3, r3, #2
 80127b0:	b2da      	uxtb	r2, r3
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7fe fe60 	bl	801147c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80127bc:	4b57      	ldr	r3, [pc, #348]	; (801291c <tcp_process+0x768>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d105      	bne.n	80127d2 <tcp_process+0x61e>
 80127c6:	4b55      	ldr	r3, [pc, #340]	; (801291c <tcp_process+0x768>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	4a53      	ldr	r2, [pc, #332]	; (801291c <tcp_process+0x768>)
 80127ce:	6013      	str	r3, [r2, #0]
 80127d0:	e013      	b.n	80127fa <tcp_process+0x646>
 80127d2:	4b52      	ldr	r3, [pc, #328]	; (801291c <tcp_process+0x768>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	613b      	str	r3, [r7, #16]
 80127d8:	e00c      	b.n	80127f4 <tcp_process+0x640>
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	68db      	ldr	r3, [r3, #12]
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d104      	bne.n	80127ee <tcp_process+0x63a>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	68da      	ldr	r2, [r3, #12]
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	60da      	str	r2, [r3, #12]
 80127ec:	e005      	b.n	80127fa <tcp_process+0x646>
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	613b      	str	r3, [r7, #16]
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1ef      	bne.n	80127da <tcp_process+0x626>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	60da      	str	r2, [r3, #12]
 8012800:	4b47      	ldr	r3, [pc, #284]	; (8012920 <tcp_process+0x76c>)
 8012802:	2201      	movs	r2, #1
 8012804:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	220a      	movs	r2, #10
 801280a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801280c:	4b45      	ldr	r3, [pc, #276]	; (8012924 <tcp_process+0x770>)
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	60da      	str	r2, [r3, #12]
 8012814:	4a43      	ldr	r2, [pc, #268]	; (8012924 <tcp_process+0x770>)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	f002 f91b 	bl	8014a54 <tcp_timer_needed>
    }
    break;
 801281e:	e06c      	b.n	80128fa <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f000 f8f7 	bl	8012a14 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012826:	4b3a      	ldr	r3, [pc, #232]	; (8012910 <tcp_process+0x75c>)
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	f003 0310 	and.w	r3, r3, #16
 801282e:	2b00      	cmp	r3, #0
 8012830:	d065      	beq.n	80128fe <tcp_process+0x74a>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012836:	4b37      	ldr	r3, [pc, #220]	; (8012914 <tcp_process+0x760>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	429a      	cmp	r2, r3
 801283c:	d15f      	bne.n	80128fe <tcp_process+0x74a>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012842:	2b00      	cmp	r3, #0
 8012844:	d15b      	bne.n	80128fe <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7fe fe18 	bl	801147c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801284c:	4b33      	ldr	r3, [pc, #204]	; (801291c <tcp_process+0x768>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	687a      	ldr	r2, [r7, #4]
 8012852:	429a      	cmp	r2, r3
 8012854:	d105      	bne.n	8012862 <tcp_process+0x6ae>
 8012856:	4b31      	ldr	r3, [pc, #196]	; (801291c <tcp_process+0x768>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	4a2f      	ldr	r2, [pc, #188]	; (801291c <tcp_process+0x768>)
 801285e:	6013      	str	r3, [r2, #0]
 8012860:	e013      	b.n	801288a <tcp_process+0x6d6>
 8012862:	4b2e      	ldr	r3, [pc, #184]	; (801291c <tcp_process+0x768>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	60fb      	str	r3, [r7, #12]
 8012868:	e00c      	b.n	8012884 <tcp_process+0x6d0>
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	68db      	ldr	r3, [r3, #12]
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	429a      	cmp	r2, r3
 8012872:	d104      	bne.n	801287e <tcp_process+0x6ca>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	68da      	ldr	r2, [r3, #12]
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	60da      	str	r2, [r3, #12]
 801287c:	e005      	b.n	801288a <tcp_process+0x6d6>
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	60fb      	str	r3, [r7, #12]
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1ef      	bne.n	801286a <tcp_process+0x6b6>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	60da      	str	r2, [r3, #12]
 8012890:	4b23      	ldr	r3, [pc, #140]	; (8012920 <tcp_process+0x76c>)
 8012892:	2201      	movs	r2, #1
 8012894:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	220a      	movs	r2, #10
 801289a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801289c:	4b21      	ldr	r3, [pc, #132]	; (8012924 <tcp_process+0x770>)
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	60da      	str	r2, [r3, #12]
 80128a4:	4a1f      	ldr	r2, [pc, #124]	; (8012924 <tcp_process+0x770>)
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6013      	str	r3, [r2, #0]
 80128aa:	f002 f8d3 	bl	8014a54 <tcp_timer_needed>
    }
    break;
 80128ae:	e026      	b.n	80128fe <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 f8af 	bl	8012a14 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80128b6:	4b16      	ldr	r3, [pc, #88]	; (8012910 <tcp_process+0x75c>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	f003 0310 	and.w	r3, r3, #16
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d01f      	beq.n	8012902 <tcp_process+0x74e>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80128c6:	4b13      	ldr	r3, [pc, #76]	; (8012914 <tcp_process+0x760>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d119      	bne.n	8012902 <tcp_process+0x74e>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d115      	bne.n	8012902 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80128d6:	4b10      	ldr	r3, [pc, #64]	; (8012918 <tcp_process+0x764>)
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	f043 0310 	orr.w	r3, r3, #16
 80128de:	b2da      	uxtb	r2, r3
 80128e0:	4b0d      	ldr	r3, [pc, #52]	; (8012918 <tcp_process+0x764>)
 80128e2:	701a      	strb	r2, [r3, #0]
    }
    break;
 80128e4:	e00d      	b.n	8012902 <tcp_process+0x74e>
  default:
    break;
 80128e6:	bf00      	nop
 80128e8:	e00c      	b.n	8012904 <tcp_process+0x750>
    break;
 80128ea:	bf00      	nop
 80128ec:	e00a      	b.n	8012904 <tcp_process+0x750>
    break;
 80128ee:	bf00      	nop
 80128f0:	e008      	b.n	8012904 <tcp_process+0x750>
    break;
 80128f2:	bf00      	nop
 80128f4:	e006      	b.n	8012904 <tcp_process+0x750>
    break;
 80128f6:	bf00      	nop
 80128f8:	e004      	b.n	8012904 <tcp_process+0x750>
    break;
 80128fa:	bf00      	nop
 80128fc:	e002      	b.n	8012904 <tcp_process+0x750>
    break;
 80128fe:	bf00      	nop
 8012900:	e000      	b.n	8012904 <tcp_process+0x750>
    break;
 8012902:	bf00      	nop
  }
  return ERR_OK;
 8012904:	2300      	movs	r3, #0
}
 8012906:	4618      	mov	r0, r3
 8012908:	3720      	adds	r7, #32
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	2400a42c 	.word	0x2400a42c
 8012914:	2400a424 	.word	0x2400a424
 8012918:	2400a42d 	.word	0x2400a42d
 801291c:	2400da20 	.word	0x2400da20
 8012920:	2400da1c 	.word	0x2400da1c
 8012924:	2400da30 	.word	0x2400da30

08012928 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012928:	b590      	push	{r4, r7, lr}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	899b      	ldrh	r3, [r3, #12]
 8012938:	b29b      	uxth	r3, r3
 801293a:	4618      	mov	r0, r3
 801293c:	f7fb ffa6 	bl	800e88c <lwip_htons>
 8012940:	4603      	mov	r3, r0
 8012942:	f003 0301 	and.w	r3, r3, #1
 8012946:	2b00      	cmp	r3, #0
 8012948:	d027      	beq.n	801299a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801294a:	6838      	ldr	r0, [r7, #0]
 801294c:	f7fe fbed 	bl	801112a <tcp_segs_free>
    next = NULL;
 8012950:	2300      	movs	r3, #0
 8012952:	603b      	str	r3, [r7, #0]
 8012954:	e055      	b.n	8012a02 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	899b      	ldrh	r3, [r3, #12]
 801295c:	b29b      	uxth	r3, r3
 801295e:	4618      	mov	r0, r3
 8012960:	f7fb ff94 	bl	800e88c <lwip_htons>
 8012964:	4603      	mov	r3, r0
 8012966:	f003 0301 	and.w	r3, r3, #1
 801296a:	2b00      	cmp	r3, #0
 801296c:	d00d      	beq.n	801298a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	899b      	ldrh	r3, [r3, #12]
 8012974:	b29c      	uxth	r4, r3
 8012976:	2001      	movs	r0, #1
 8012978:	f7fb ff88 	bl	800e88c <lwip_htons>
 801297c:	4603      	mov	r3, r0
 801297e:	461a      	mov	r2, r3
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	4322      	orrs	r2, r4
 8012986:	b292      	uxth	r2, r2
 8012988:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012994:	68f8      	ldr	r0, [r7, #12]
 8012996:	f7fe fbdc 	bl	8011152 <tcp_seg_free>
    while (next &&
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00e      	beq.n	80129be <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	891b      	ldrh	r3, [r3, #8]
 80129a4:	461a      	mov	r2, r3
 80129a6:	4b1a      	ldr	r3, [pc, #104]	; (8012a10 <tcp_oos_insert_segment+0xe8>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	441a      	add	r2, r3
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	68db      	ldr	r3, [r3, #12]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	6839      	ldr	r1, [r7, #0]
 80129b4:	8909      	ldrh	r1, [r1, #8]
 80129b6:	440b      	add	r3, r1
 80129b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	dacb      	bge.n	8012956 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d01e      	beq.n	8012a02 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	891b      	ldrh	r3, [r3, #8]
 80129c8:	461a      	mov	r2, r3
 80129ca:	4b11      	ldr	r3, [pc, #68]	; (8012a10 <tcp_oos_insert_segment+0xe8>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	441a      	add	r2, r3
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	685b      	ldr	r3, [r3, #4]
 80129d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80129d8:	2b00      	cmp	r3, #0
 80129da:	dd12      	ble.n	8012a02 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	4b0a      	ldr	r3, [pc, #40]	; (8012a10 <tcp_oos_insert_segment+0xe8>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	1ad3      	subs	r3, r2, r3
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	685a      	ldr	r2, [r3, #4]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	891b      	ldrh	r3, [r3, #8]
 80129fa:	4619      	mov	r1, r3
 80129fc:	4610      	mov	r0, r2
 80129fe:	f7fd f8e1 	bl	800fbc4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	601a      	str	r2, [r3, #0]
}
 8012a08:	bf00      	nop
 8012a0a:	3714      	adds	r7, #20
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd90      	pop	{r4, r7, pc}
 8012a10:	2400a420 	.word	0x2400a420

08012a14 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a16:	b08d      	sub	sp, #52	; 0x34
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	7d1b      	ldrb	r3, [r3, #20]
 8012a24:	2b03      	cmp	r3, #3
 8012a26:	d806      	bhi.n	8012a36 <tcp_receive+0x22>
 8012a28:	4ba6      	ldr	r3, [pc, #664]	; (8012cc4 <tcp_receive+0x2b0>)
 8012a2a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8012a2e:	49a6      	ldr	r1, [pc, #664]	; (8012cc8 <tcp_receive+0x2b4>)
 8012a30:	48a6      	ldr	r0, [pc, #664]	; (8012ccc <tcp_receive+0x2b8>)
 8012a32:	f004 ff77 	bl	8017924 <iprintf>

  if (flags & TCP_ACK) {
 8012a36:	4ba6      	ldr	r3, [pc, #664]	; (8012cd0 <tcp_receive+0x2bc>)
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	f003 0310 	and.w	r3, r3, #16
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	f000 82bf 	beq.w	8012fc2 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a4a:	461a      	mov	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a50:	4413      	add	r3, r2
 8012a52:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a58:	4b9e      	ldr	r3, [pc, #632]	; (8012cd4 <tcp_receive+0x2c0>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	db1b      	blt.n	8012a9a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a66:	4b9b      	ldr	r3, [pc, #620]	; (8012cd4 <tcp_receive+0x2c0>)
 8012a68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d106      	bne.n	8012a7c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a72:	4b99      	ldr	r3, [pc, #612]	; (8012cd8 <tcp_receive+0x2c4>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	1ad3      	subs	r3, r2, r3
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	db0e      	blt.n	8012a9a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a80:	4b95      	ldr	r3, [pc, #596]	; (8012cd8 <tcp_receive+0x2c4>)
 8012a82:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d141      	bne.n	8012b0c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012a88:	4b94      	ldr	r3, [pc, #592]	; (8012cdc <tcp_receive+0x2c8>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	89db      	ldrh	r3, [r3, #14]
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d938      	bls.n	8012b0c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012a9a:	4b90      	ldr	r3, [pc, #576]	; (8012cdc <tcp_receive+0x2c8>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	89db      	ldrh	r3, [r3, #14]
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d205      	bcs.n	8012ac4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8012ac4:	4b83      	ldr	r3, [pc, #524]	; (8012cd4 <tcp_receive+0x2c0>)
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8012acc:	4b82      	ldr	r3, [pc, #520]	; (8012cd8 <tcp_receive+0x2c4>)
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d10d      	bne.n	8012afa <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d111      	bne.n	8012b0c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2200      	movs	r2, #0
 8012aec:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2201      	movs	r2, #1
 8012af4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8012af8:	e008      	b.n	8012b0c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d003      	beq.n	8012b0c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2200      	movs	r2, #0
 8012b08:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012b0c:	4b72      	ldr	r3, [pc, #456]	; (8012cd8 <tcp_receive+0x2c4>)
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b14:	1ad3      	subs	r3, r2, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	dc53      	bgt.n	8012bc2 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8012b1a:	4b71      	ldr	r3, [pc, #452]	; (8012ce0 <tcp_receive+0x2cc>)
 8012b1c:	881b      	ldrh	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d146      	bne.n	8012bb0 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8012b2c:	4413      	add	r3, r2
 8012b2e:	697a      	ldr	r2, [r7, #20]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d13d      	bne.n	8012bb0 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	db38      	blt.n	8012bb0 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b42:	4b65      	ldr	r3, [pc, #404]	; (8012cd8 <tcp_receive+0x2c4>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d132      	bne.n	8012bb0 <tcp_receive+0x19c>
              found_dupack = 1;
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b54:	2bff      	cmp	r3, #255	; 0xff
 8012b56:	d007      	beq.n	8012b68 <tcp_receive+0x154>
                ++pcb->dupacks;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b5e:	3301      	adds	r3, #1
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b6e:	2b03      	cmp	r3, #3
 8012b70:	d916      	bls.n	8012ba0 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b7c:	4413      	add	r3, r2
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d912      	bls.n	8012bb0 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b94:	4413      	add	r3, r2
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012b9e:	e007      	b.n	8012bb0 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012ba6:	2b03      	cmp	r3, #3
 8012ba8:	d102      	bne.n	8012bb0 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f001 fdfc 	bl	80147a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f040 8169 	bne.w	8012e8a <tcp_receive+0x476>
        pcb->dupacks = 0;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012bc0:	e163      	b.n	8012e8a <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8012bc2:	4b45      	ldr	r3, [pc, #276]	; (8012cd8 <tcp_receive+0x2c4>)
 8012bc4:	681a      	ldr	r2, [r3, #0]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	3b01      	subs	r3, #1
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f2c0 8107 	blt.w	8012de2 <tcp_receive+0x3ce>
 8012bd4:	4b40      	ldr	r3, [pc, #256]	; (8012cd8 <tcp_receive+0x2c4>)
 8012bd6:	681a      	ldr	r2, [r3, #0]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f300 80ff 	bgt.w	8012de2 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	7e9b      	ldrb	r3, [r3, #26]
 8012be8:	f003 0304 	and.w	r3, r3, #4
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d00c      	beq.n	8012c0a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	7e9b      	ldrb	r3, [r3, #26]
 8012bf4:	f023 0304 	bic.w	r3, r3, #4
 8012bf8:	b2da      	uxtb	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c18:	10db      	asrs	r3, r3, #3
 8012c1a:	b21b      	sxth	r3, r3
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	4413      	add	r3, r2
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	b21a      	sxth	r2, r3
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012c3a:	4b27      	ldr	r3, [pc, #156]	; (8012cd8 <tcp_receive+0x2c4>)
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	7d1b      	ldrb	r3, [r3, #20]
 8012c46:	2b03      	cmp	r3, #3
 8012c48:	f240 8094 	bls.w	8012d74 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d216      	bcs.n	8012c8a <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c66:	4413      	add	r3, r2
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d97f      	bls.n	8012d74 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c7e:	4413      	add	r3, r2
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012c88:	e074      	b.n	8012d74 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c94:	4619      	mov	r1, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c9a:	fb03 f301 	mul.w	r3, r3, r1
 8012c9e:	6879      	ldr	r1, [r7, #4]
 8012ca0:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8012ca4:	fb93 f3f1 	sdiv	r3, r3, r1
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	4413      	add	r3, r2
 8012cac:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012cb4:	8a7a      	ldrh	r2, [r7, #18]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d95c      	bls.n	8012d74 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	8a7a      	ldrh	r2, [r7, #18]
 8012cbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8012cc2:	e057      	b.n	8012d74 <tcp_receive+0x360>
 8012cc4:	0801985c 	.word	0x0801985c
 8012cc8:	08019a80 	.word	0x08019a80
 8012ccc:	080198a0 	.word	0x080198a0
 8012cd0:	2400a42c 	.word	0x2400a42c
 8012cd4:	2400a420 	.word	0x2400a420
 8012cd8:	2400a424 	.word	0x2400a424
 8012cdc:	2400a410 	.word	0x2400a410
 8012ce0:	2400a42a 	.word	0x2400a42a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7fd f96e 	bl	800ffe0 <pbuf_clen>
 8012d04:	4603      	mov	r3, r0
 8012d06:	429c      	cmp	r4, r3
 8012d08:	d206      	bcs.n	8012d18 <tcp_receive+0x304>
 8012d0a:	4b70      	ldr	r3, [pc, #448]	; (8012ecc <tcp_receive+0x4b8>)
 8012d0c:	f240 429e 	movw	r2, #1182	; 0x49e
 8012d10:	496f      	ldr	r1, [pc, #444]	; (8012ed0 <tcp_receive+0x4bc>)
 8012d12:	4870      	ldr	r0, [pc, #448]	; (8012ed4 <tcp_receive+0x4c0>)
 8012d14:	f004 fe06 	bl	8017924 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8012d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7fd f95f 	bl	800ffe0 <pbuf_clen>
 8012d22:	4603      	mov	r3, r0
 8012d24:	461a      	mov	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012d2c:	1a9b      	subs	r3, r3, r2
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8012d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d38:	891a      	ldrh	r2, [r3, #8]
 8012d3a:	4b67      	ldr	r3, [pc, #412]	; (8012ed8 <tcp_receive+0x4c4>)
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	4413      	add	r3, r2
 8012d40:	b29a      	uxth	r2, r3
 8012d42:	4b65      	ldr	r3, [pc, #404]	; (8012ed8 <tcp_receive+0x4c4>)
 8012d44:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8012d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d48:	f7fe fa03 	bl	8011152 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00e      	beq.n	8012d74 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d10a      	bne.n	8012d74 <tcp_receive+0x360>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d106      	bne.n	8012d74 <tcp_receive+0x360>
 8012d66:	4b59      	ldr	r3, [pc, #356]	; (8012ecc <tcp_receive+0x4b8>)
 8012d68:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8012d6c:	495b      	ldr	r1, [pc, #364]	; (8012edc <tcp_receive+0x4c8>)
 8012d6e:	4859      	ldr	r0, [pc, #356]	; (8012ed4 <tcp_receive+0x4c0>)
 8012d70:	f004 fdd8 	bl	8017924 <iprintf>
      while (pcb->unacked != NULL &&
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d022      	beq.n	8012dc2 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fb fd8f 	bl	800e8a8 <lwip_htonl>
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d90:	891b      	ldrh	r3, [r3, #8]
 8012d92:	461d      	mov	r5, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	899b      	ldrh	r3, [r3, #12]
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7fb fd74 	bl	800e88c <lwip_htons>
 8012da4:	4603      	mov	r3, r0
 8012da6:	f003 0303 	and.w	r3, r3, #3
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d001      	beq.n	8012db2 <tcp_receive+0x39e>
 8012dae:	2301      	movs	r3, #1
 8012db0:	e000      	b.n	8012db4 <tcp_receive+0x3a0>
 8012db2:	2300      	movs	r3, #0
 8012db4:	442b      	add	r3, r5
 8012db6:	18e2      	adds	r2, r4, r3
 8012db8:	4b49      	ldr	r3, [pc, #292]	; (8012ee0 <tcp_receive+0x4cc>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	dd90      	ble.n	8012ce4 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d104      	bne.n	8012dd4 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012dd0:	861a      	strh	r2, [r3, #48]	; 0x30
 8012dd2:	e002      	b.n	8012dda <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	76da      	strb	r2, [r3, #27]
 8012de0:	e002      	b.n	8012de8 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f001 f8fe 	bl	8013fe4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8012de8:	e04f      	b.n	8012e8a <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d103      	bne.n	8012e0a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2200      	movs	r2, #0
 8012e06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e12:	685b      	ldr	r3, [r3, #4]
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fd f8e3 	bl	800ffe0 <pbuf_clen>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	429c      	cmp	r4, r3
 8012e1e:	d206      	bcs.n	8012e2e <tcp_receive+0x41a>
 8012e20:	4b2a      	ldr	r3, [pc, #168]	; (8012ecc <tcp_receive+0x4b8>)
 8012e22:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012e26:	492a      	ldr	r1, [pc, #168]	; (8012ed0 <tcp_receive+0x4bc>)
 8012e28:	482a      	ldr	r0, [pc, #168]	; (8012ed4 <tcp_receive+0x4c0>)
 8012e2a:	f004 fd7b 	bl	8017924 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8012e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7fd f8d4 	bl	800ffe0 <pbuf_clen>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012e42:	1a9b      	subs	r3, r3, r2
 8012e44:	b29a      	uxth	r2, r3
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8012e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4e:	891a      	ldrh	r2, [r3, #8]
 8012e50:	4b21      	ldr	r3, [pc, #132]	; (8012ed8 <tcp_receive+0x4c4>)
 8012e52:	881b      	ldrh	r3, [r3, #0]
 8012e54:	4413      	add	r3, r2
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	4b1f      	ldr	r3, [pc, #124]	; (8012ed8 <tcp_receive+0x4c4>)
 8012e5a:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8012e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e5e:	f7fe f978 	bl	8011152 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d00e      	beq.n	8012e8a <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d10a      	bne.n	8012e8a <tcp_receive+0x476>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d106      	bne.n	8012e8a <tcp_receive+0x476>
 8012e7c:	4b13      	ldr	r3, [pc, #76]	; (8012ecc <tcp_receive+0x4b8>)
 8012e7e:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8012e82:	4916      	ldr	r1, [pc, #88]	; (8012edc <tcp_receive+0x4c8>)
 8012e84:	4813      	ldr	r0, [pc, #76]	; (8012ed4 <tcp_receive+0x4c0>)
 8012e86:	f004 fd4d 	bl	8017924 <iprintf>
    while (pcb->unsent != NULL &&
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d036      	beq.n	8012f00 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012e92:	4b13      	ldr	r3, [pc, #76]	; (8012ee0 <tcp_receive+0x4cc>)
 8012e94:	681c      	ldr	r4, [r3, #0]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e9a:	68db      	ldr	r3, [r3, #12]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fb fd02 	bl	800e8a8 <lwip_htonl>
 8012ea4:	4605      	mov	r5, r0
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012eaa:	891b      	ldrh	r3, [r3, #8]
 8012eac:	461e      	mov	r6, r3
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012eb2:	68db      	ldr	r3, [r3, #12]
 8012eb4:	899b      	ldrh	r3, [r3, #12]
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7fb fce7 	bl	800e88c <lwip_htons>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	f003 0303 	and.w	r3, r3, #3
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d00d      	beq.n	8012ee4 <tcp_receive+0x4d0>
 8012ec8:	2301      	movs	r3, #1
 8012eca:	e00c      	b.n	8012ee6 <tcp_receive+0x4d2>
 8012ecc:	0801985c 	.word	0x0801985c
 8012ed0:	08019a9c 	.word	0x08019a9c
 8012ed4:	080198a0 	.word	0x080198a0
 8012ed8:	2400a428 	.word	0x2400a428
 8012edc:	08019ac4 	.word	0x08019ac4
 8012ee0:	2400a424 	.word	0x2400a424
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	4433      	add	r3, r6
 8012ee8:	442b      	add	r3, r5
 8012eea:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	db07      	blt.n	8012f00 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012ef0:	4b8d      	ldr	r3, [pc, #564]	; (8013128 <tcp_receive+0x714>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ef8:	1ad3      	subs	r3, r2, r3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f77f af75 	ble.w	8012dea <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f06:	4b89      	ldr	r3, [pc, #548]	; (801312c <tcp_receive+0x718>)
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d052      	beq.n	8012fc2 <tcp_receive+0x5ae>
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f20:	4b81      	ldr	r3, [pc, #516]	; (8013128 <tcp_receive+0x714>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	1ad3      	subs	r3, r2, r3
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	da4b      	bge.n	8012fc2 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012f2a:	4b81      	ldr	r3, [pc, #516]	; (8013130 <tcp_receive+0x71c>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	1ad3      	subs	r3, r2, r3
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8012f3c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012f44:	10db      	asrs	r3, r3, #3
 8012f46:	b21b      	sxth	r3, r3
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012f56:	b29a      	uxth	r2, r3
 8012f58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f5a:	4413      	add	r3, r2
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	b21a      	sxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012f64:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	da03      	bge.n	8012f74 <tcp_receive+0x560>
        m = -m;
 8012f6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f6e:	425b      	negs	r3, r3
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8012f74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012f7c:	109b      	asrs	r3, r3, #2
 8012f7e:	b21b      	sxth	r3, r3
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	1ad3      	subs	r3, r2, r3
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f92:	4413      	add	r3, r2
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	b21a      	sxth	r2, r3
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012fa2:	10db      	asrs	r3, r3, #3
 8012fa4:	b21b      	sxth	r3, r3
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	4413      	add	r3, r2
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	b21a      	sxth	r2, r3
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012fc2:	4b5c      	ldr	r3, [pc, #368]	; (8013134 <tcp_receive+0x720>)
 8012fc4:	881b      	ldrh	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f000 84f1 	beq.w	80139ae <tcp_receive+0xf9a>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	7d1b      	ldrb	r3, [r3, #20]
 8012fd0:	2b06      	cmp	r3, #6
 8012fd2:	f200 84ec 	bhi.w	80139ae <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fda:	4b57      	ldr	r3, [pc, #348]	; (8013138 <tcp_receive+0x724>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	1ad3      	subs	r3, r2, r3
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	f2c0 80b8 	blt.w	8013158 <tcp_receive+0x744>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fec:	4b51      	ldr	r3, [pc, #324]	; (8013134 <tcp_receive+0x720>)
 8012fee:	881b      	ldrh	r3, [r3, #0]
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	4b51      	ldr	r3, [pc, #324]	; (8013138 <tcp_receive+0x724>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	440b      	add	r3, r1
 8012ff8:	1ad3      	subs	r3, r2, r3
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f300 80ab 	bgt.w	8013158 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013002:	4b4e      	ldr	r3, [pc, #312]	; (801313c <tcp_receive+0x728>)
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801300c:	4b4a      	ldr	r3, [pc, #296]	; (8013138 <tcp_receive+0x724>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013014:	4b49      	ldr	r3, [pc, #292]	; (801313c <tcp_receive+0x728>)
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d106      	bne.n	801302a <tcp_receive+0x616>
 801301c:	4b48      	ldr	r3, [pc, #288]	; (8013140 <tcp_receive+0x72c>)
 801301e:	f240 523c 	movw	r2, #1340	; 0x53c
 8013022:	4948      	ldr	r1, [pc, #288]	; (8013144 <tcp_receive+0x730>)
 8013024:	4848      	ldr	r0, [pc, #288]	; (8013148 <tcp_receive+0x734>)
 8013026:	f004 fc7d 	bl	8017924 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013030:	4293      	cmp	r3, r2
 8013032:	dd06      	ble.n	8013042 <tcp_receive+0x62e>
 8013034:	4b42      	ldr	r3, [pc, #264]	; (8013140 <tcp_receive+0x72c>)
 8013036:	f240 523d 	movw	r2, #1341	; 0x53d
 801303a:	4944      	ldr	r1, [pc, #272]	; (801314c <tcp_receive+0x738>)
 801303c:	4842      	ldr	r0, [pc, #264]	; (8013148 <tcp_receive+0x734>)
 801303e:	f004 fc71 	bl	8017924 <iprintf>
      if (inseg.p->len < off) {
 8013042:	4b3e      	ldr	r3, [pc, #248]	; (801313c <tcp_receive+0x728>)
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	895b      	ldrh	r3, [r3, #10]
 8013048:	461a      	mov	r2, r3
 801304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304c:	4293      	cmp	r3, r2
 801304e:	dd3e      	ble.n	80130ce <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013050:	4b3a      	ldr	r3, [pc, #232]	; (801313c <tcp_receive+0x728>)
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	891b      	ldrh	r3, [r3, #8]
 8013056:	461a      	mov	r2, r3
 8013058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305a:	4293      	cmp	r3, r2
 801305c:	dd06      	ble.n	801306c <tcp_receive+0x658>
 801305e:	4b38      	ldr	r3, [pc, #224]	; (8013140 <tcp_receive+0x72c>)
 8013060:	f240 523f 	movw	r2, #1343	; 0x53f
 8013064:	493a      	ldr	r1, [pc, #232]	; (8013150 <tcp_receive+0x73c>)
 8013066:	4838      	ldr	r0, [pc, #224]	; (8013148 <tcp_receive+0x734>)
 8013068:	f004 fc5c 	bl	8017924 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801306c:	4b33      	ldr	r3, [pc, #204]	; (801313c <tcp_receive+0x728>)
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	891a      	ldrh	r2, [r3, #8]
 8013072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013074:	b29b      	uxth	r3, r3
 8013076:	1ad3      	subs	r3, r2, r3
 8013078:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 801307a:	e00e      	b.n	801309a <tcp_receive+0x686>
          off -= p->len;
 801307c:	69bb      	ldr	r3, [r7, #24]
 801307e:	895b      	ldrh	r3, [r3, #10]
 8013080:	461a      	mov	r2, r3
 8013082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013084:	1a9b      	subs	r3, r3, r2
 8013086:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	8a3a      	ldrh	r2, [r7, #16]
 801308c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	2200      	movs	r2, #0
 8013092:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8013094:	69bb      	ldr	r3, [r7, #24]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	895b      	ldrh	r3, [r3, #10]
 801309e:	461a      	mov	r2, r3
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	4293      	cmp	r3, r2
 80130a4:	dcea      	bgt.n	801307c <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80130a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	425b      	negs	r3, r3
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	b21b      	sxth	r3, r3
 80130b0:	4619      	mov	r1, r3
 80130b2:	69b8      	ldr	r0, [r7, #24]
 80130b4:	f7fc fed6 	bl	800fe64 <pbuf_header>
 80130b8:	4603      	mov	r3, r0
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d01c      	beq.n	80130f8 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80130be:	4b20      	ldr	r3, [pc, #128]	; (8013140 <tcp_receive+0x72c>)
 80130c0:	f240 524c 	movw	r2, #1356	; 0x54c
 80130c4:	4923      	ldr	r1, [pc, #140]	; (8013154 <tcp_receive+0x740>)
 80130c6:	4820      	ldr	r0, [pc, #128]	; (8013148 <tcp_receive+0x734>)
 80130c8:	f004 fc2c 	bl	8017924 <iprintf>
 80130cc:	e014      	b.n	80130f8 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80130ce:	4b1b      	ldr	r3, [pc, #108]	; (801313c <tcp_receive+0x728>)
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130d4:	b292      	uxth	r2, r2
 80130d6:	4252      	negs	r2, r2
 80130d8:	b292      	uxth	r2, r2
 80130da:	b212      	sxth	r2, r2
 80130dc:	4611      	mov	r1, r2
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fc fec0 	bl	800fe64 <pbuf_header>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d006      	beq.n	80130f8 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80130ea:	4b15      	ldr	r3, [pc, #84]	; (8013140 <tcp_receive+0x72c>)
 80130ec:	f240 5251 	movw	r2, #1361	; 0x551
 80130f0:	4918      	ldr	r1, [pc, #96]	; (8013154 <tcp_receive+0x740>)
 80130f2:	4815      	ldr	r0, [pc, #84]	; (8013148 <tcp_receive+0x734>)
 80130f4:	f004 fc16 	bl	8017924 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80130f8:	4b10      	ldr	r3, [pc, #64]	; (801313c <tcp_receive+0x728>)
 80130fa:	891a      	ldrh	r2, [r3, #8]
 80130fc:	4b0e      	ldr	r3, [pc, #56]	; (8013138 <tcp_receive+0x724>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	b299      	uxth	r1, r3
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013106:	b29b      	uxth	r3, r3
 8013108:	1acb      	subs	r3, r1, r3
 801310a:	b29b      	uxth	r3, r3
 801310c:	4413      	add	r3, r2
 801310e:	b29a      	uxth	r2, r3
 8013110:	4b0a      	ldr	r3, [pc, #40]	; (801313c <tcp_receive+0x728>)
 8013112:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013118:	4a07      	ldr	r2, [pc, #28]	; (8013138 <tcp_receive+0x724>)
 801311a:	6013      	str	r3, [r2, #0]
 801311c:	4b07      	ldr	r3, [pc, #28]	; (801313c <tcp_receive+0x728>)
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	4a05      	ldr	r2, [pc, #20]	; (8013138 <tcp_receive+0x724>)
 8013122:	6812      	ldr	r2, [r2, #0]
 8013124:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013126:	e025      	b.n	8013174 <tcp_receive+0x760>
 8013128:	2400a424 	.word	0x2400a424
 801312c:	2400a428 	.word	0x2400a428
 8013130:	2400da24 	.word	0x2400da24
 8013134:	2400a42a 	.word	0x2400a42a
 8013138:	2400a420 	.word	0x2400a420
 801313c:	2400a400 	.word	0x2400a400
 8013140:	0801985c 	.word	0x0801985c
 8013144:	08019ae4 	.word	0x08019ae4
 8013148:	080198a0 	.word	0x080198a0
 801314c:	08019af4 	.word	0x08019af4
 8013150:	08019b04 	.word	0x08019b04
 8013154:	08019b14 	.word	0x08019b14
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013158:	4b87      	ldr	r3, [pc, #540]	; (8013378 <tcp_receive+0x964>)
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013160:	1ad3      	subs	r3, r2, r3
 8013162:	2b00      	cmp	r3, #0
 8013164:	da06      	bge.n	8013174 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	7e9b      	ldrb	r3, [r3, #26]
 801316a:	f043 0302 	orr.w	r3, r3, #2
 801316e:	b2da      	uxtb	r2, r3
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013174:	4b80      	ldr	r3, [pc, #512]	; (8013378 <tcp_receive+0x964>)
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801317c:	1ad3      	subs	r3, r2, r3
 801317e:	2b00      	cmp	r3, #0
 8013180:	f2c0 8410 	blt.w	80139a4 <tcp_receive+0xf90>
 8013184:	4b7c      	ldr	r3, [pc, #496]	; (8013378 <tcp_receive+0x964>)
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801318c:	6879      	ldr	r1, [r7, #4]
 801318e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013190:	440b      	add	r3, r1
 8013192:	1ad3      	subs	r3, r2, r3
 8013194:	3301      	adds	r3, #1
 8013196:	2b00      	cmp	r3, #0
 8013198:	f300 8404 	bgt.w	80139a4 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131a0:	4b75      	ldr	r3, [pc, #468]	; (8013378 <tcp_receive+0x964>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	f040 8287 	bne.w	80136b8 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80131aa:	4b74      	ldr	r3, [pc, #464]	; (801337c <tcp_receive+0x968>)
 80131ac:	891c      	ldrh	r4, [r3, #8]
 80131ae:	4b73      	ldr	r3, [pc, #460]	; (801337c <tcp_receive+0x968>)
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	899b      	ldrh	r3, [r3, #12]
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fb fb68 	bl	800e88c <lwip_htons>
 80131bc:	4603      	mov	r3, r0
 80131be:	f003 0303 	and.w	r3, r3, #3
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d001      	beq.n	80131ca <tcp_receive+0x7b6>
 80131c6:	2301      	movs	r3, #1
 80131c8:	e000      	b.n	80131cc <tcp_receive+0x7b8>
 80131ca:	2300      	movs	r3, #0
 80131cc:	4423      	add	r3, r4
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	4b6b      	ldr	r3, [pc, #428]	; (8013380 <tcp_receive+0x96c>)
 80131d2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80131d8:	4b69      	ldr	r3, [pc, #420]	; (8013380 <tcp_receive+0x96c>)
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d26e      	bcs.n	80132be <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80131e0:	4b66      	ldr	r3, [pc, #408]	; (801337c <tcp_receive+0x968>)
 80131e2:	68db      	ldr	r3, [r3, #12]
 80131e4:	899b      	ldrh	r3, [r3, #12]
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7fb fb4f 	bl	800e88c <lwip_htons>
 80131ee:	4603      	mov	r3, r0
 80131f0:	f003 0301 	and.w	r3, r3, #1
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d01b      	beq.n	8013230 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80131f8:	4b60      	ldr	r3, [pc, #384]	; (801337c <tcp_receive+0x968>)
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	899b      	ldrh	r3, [r3, #12]
 80131fe:	b29b      	uxth	r3, r3
 8013200:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013204:	b29c      	uxth	r4, r3
 8013206:	4b5d      	ldr	r3, [pc, #372]	; (801337c <tcp_receive+0x968>)
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	899b      	ldrh	r3, [r3, #12]
 801320c:	b29b      	uxth	r3, r3
 801320e:	4618      	mov	r0, r3
 8013210:	f7fb fb3c 	bl	800e88c <lwip_htons>
 8013214:	4603      	mov	r3, r0
 8013216:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801321a:	b29b      	uxth	r3, r3
 801321c:	4618      	mov	r0, r3
 801321e:	f7fb fb35 	bl	800e88c <lwip_htons>
 8013222:	4603      	mov	r3, r0
 8013224:	461a      	mov	r2, r3
 8013226:	4b55      	ldr	r3, [pc, #340]	; (801337c <tcp_receive+0x968>)
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	4322      	orrs	r2, r4
 801322c:	b292      	uxth	r2, r2
 801322e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013234:	4b51      	ldr	r3, [pc, #324]	; (801337c <tcp_receive+0x968>)
 8013236:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013238:	4b50      	ldr	r3, [pc, #320]	; (801337c <tcp_receive+0x968>)
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	899b      	ldrh	r3, [r3, #12]
 801323e:	b29b      	uxth	r3, r3
 8013240:	4618      	mov	r0, r3
 8013242:	f7fb fb23 	bl	800e88c <lwip_htons>
 8013246:	4603      	mov	r3, r0
 8013248:	f003 0302 	and.w	r3, r3, #2
 801324c:	2b00      	cmp	r3, #0
 801324e:	d005      	beq.n	801325c <tcp_receive+0x848>
            inseg.len -= 1;
 8013250:	4b4a      	ldr	r3, [pc, #296]	; (801337c <tcp_receive+0x968>)
 8013252:	891b      	ldrh	r3, [r3, #8]
 8013254:	3b01      	subs	r3, #1
 8013256:	b29a      	uxth	r2, r3
 8013258:	4b48      	ldr	r3, [pc, #288]	; (801337c <tcp_receive+0x968>)
 801325a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801325c:	4b47      	ldr	r3, [pc, #284]	; (801337c <tcp_receive+0x968>)
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	4b46      	ldr	r3, [pc, #280]	; (801337c <tcp_receive+0x968>)
 8013262:	891b      	ldrh	r3, [r3, #8]
 8013264:	4619      	mov	r1, r3
 8013266:	4610      	mov	r0, r2
 8013268:	f7fc fcac 	bl	800fbc4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801326c:	4b43      	ldr	r3, [pc, #268]	; (801337c <tcp_receive+0x968>)
 801326e:	891c      	ldrh	r4, [r3, #8]
 8013270:	4b42      	ldr	r3, [pc, #264]	; (801337c <tcp_receive+0x968>)
 8013272:	68db      	ldr	r3, [r3, #12]
 8013274:	899b      	ldrh	r3, [r3, #12]
 8013276:	b29b      	uxth	r3, r3
 8013278:	4618      	mov	r0, r3
 801327a:	f7fb fb07 	bl	800e88c <lwip_htons>
 801327e:	4603      	mov	r3, r0
 8013280:	f003 0303 	and.w	r3, r3, #3
 8013284:	2b00      	cmp	r3, #0
 8013286:	d001      	beq.n	801328c <tcp_receive+0x878>
 8013288:	2301      	movs	r3, #1
 801328a:	e000      	b.n	801328e <tcp_receive+0x87a>
 801328c:	2300      	movs	r3, #0
 801328e:	4423      	add	r3, r4
 8013290:	b29a      	uxth	r2, r3
 8013292:	4b3b      	ldr	r3, [pc, #236]	; (8013380 <tcp_receive+0x96c>)
 8013294:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013296:	4b3a      	ldr	r3, [pc, #232]	; (8013380 <tcp_receive+0x96c>)
 8013298:	881b      	ldrh	r3, [r3, #0]
 801329a:	461a      	mov	r2, r3
 801329c:	4b36      	ldr	r3, [pc, #216]	; (8013378 <tcp_receive+0x964>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	441a      	add	r2, r3
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a6:	6879      	ldr	r1, [r7, #4]
 80132a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80132aa:	440b      	add	r3, r1
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d006      	beq.n	80132be <tcp_receive+0x8aa>
 80132b0:	4b34      	ldr	r3, [pc, #208]	; (8013384 <tcp_receive+0x970>)
 80132b2:	f240 527f 	movw	r2, #1407	; 0x57f
 80132b6:	4934      	ldr	r1, [pc, #208]	; (8013388 <tcp_receive+0x974>)
 80132b8:	4834      	ldr	r0, [pc, #208]	; (801338c <tcp_receive+0x978>)
 80132ba:	f004 fb33 	bl	8017924 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	f000 80e1 	beq.w	801348a <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80132c8:	4b2c      	ldr	r3, [pc, #176]	; (801337c <tcp_receive+0x968>)
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	899b      	ldrh	r3, [r3, #12]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fb fadb 	bl	800e88c <lwip_htons>
 80132d6:	4603      	mov	r3, r0
 80132d8:	f003 0301 	and.w	r3, r3, #1
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d010      	beq.n	8013302 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80132e0:	e00a      	b.n	80132f8 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132e6:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80132f2:	68b8      	ldr	r0, [r7, #8]
 80132f4:	f7fd ff2d 	bl	8011152 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d1f0      	bne.n	80132e2 <tcp_receive+0x8ce>
 8013300:	e0c3      	b.n	801348a <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013306:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013308:	e04f      	b.n	80133aa <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330c:	68db      	ldr	r3, [r3, #12]
 801330e:	899b      	ldrh	r3, [r3, #12]
 8013310:	b29b      	uxth	r3, r3
 8013312:	4618      	mov	r0, r3
 8013314:	f7fb faba 	bl	800e88c <lwip_htons>
 8013318:	4603      	mov	r3, r0
 801331a:	f003 0301 	and.w	r3, r3, #1
 801331e:	2b00      	cmp	r3, #0
 8013320:	d03b      	beq.n	801339a <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013322:	4b16      	ldr	r3, [pc, #88]	; (801337c <tcp_receive+0x968>)
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	899b      	ldrh	r3, [r3, #12]
 8013328:	b29b      	uxth	r3, r3
 801332a:	4618      	mov	r0, r3
 801332c:	f7fb faae 	bl	800e88c <lwip_htons>
 8013330:	4603      	mov	r3, r0
 8013332:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013336:	2b00      	cmp	r3, #0
 8013338:	d12f      	bne.n	801339a <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801333a:	4b10      	ldr	r3, [pc, #64]	; (801337c <tcp_receive+0x968>)
 801333c:	68db      	ldr	r3, [r3, #12]
 801333e:	899b      	ldrh	r3, [r3, #12]
 8013340:	b29c      	uxth	r4, r3
 8013342:	2001      	movs	r0, #1
 8013344:	f7fb faa2 	bl	800e88c <lwip_htons>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	4b0b      	ldr	r3, [pc, #44]	; (801337c <tcp_receive+0x968>)
 801334e:	68db      	ldr	r3, [r3, #12]
 8013350:	4322      	orrs	r2, r4
 8013352:	b292      	uxth	r2, r2
 8013354:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013356:	4b09      	ldr	r3, [pc, #36]	; (801337c <tcp_receive+0x968>)
 8013358:	891c      	ldrh	r4, [r3, #8]
 801335a:	4b08      	ldr	r3, [pc, #32]	; (801337c <tcp_receive+0x968>)
 801335c:	68db      	ldr	r3, [r3, #12]
 801335e:	899b      	ldrh	r3, [r3, #12]
 8013360:	b29b      	uxth	r3, r3
 8013362:	4618      	mov	r0, r3
 8013364:	f7fb fa92 	bl	800e88c <lwip_htons>
 8013368:	4603      	mov	r3, r0
 801336a:	f003 0303 	and.w	r3, r3, #3
 801336e:	2b00      	cmp	r3, #0
 8013370:	d00e      	beq.n	8013390 <tcp_receive+0x97c>
 8013372:	2301      	movs	r3, #1
 8013374:	e00d      	b.n	8013392 <tcp_receive+0x97e>
 8013376:	bf00      	nop
 8013378:	2400a420 	.word	0x2400a420
 801337c:	2400a400 	.word	0x2400a400
 8013380:	2400a42a 	.word	0x2400a42a
 8013384:	0801985c 	.word	0x0801985c
 8013388:	08019b28 	.word	0x08019b28
 801338c:	080198a0 	.word	0x080198a0
 8013390:	2300      	movs	r3, #0
 8013392:	4423      	add	r3, r4
 8013394:	b29a      	uxth	r2, r3
 8013396:	4b95      	ldr	r3, [pc, #596]	; (80135ec <tcp_receive+0xbd8>)
 8013398:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 801339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80133a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a6:	f7fd fed4 	bl	8011152 <tcp_seg_free>
            while (next &&
 80133aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d00e      	beq.n	80133ce <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80133b0:	4b8e      	ldr	r3, [pc, #568]	; (80135ec <tcp_receive+0xbd8>)
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	461a      	mov	r2, r3
 80133b6:	4b8e      	ldr	r3, [pc, #568]	; (80135f0 <tcp_receive+0xbdc>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	441a      	add	r2, r3
 80133bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133c4:	8909      	ldrh	r1, [r1, #8]
 80133c6:	440b      	add	r3, r1
 80133c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	da9d      	bge.n	801330a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80133ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d057      	beq.n	8013484 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80133d4:	4b85      	ldr	r3, [pc, #532]	; (80135ec <tcp_receive+0xbd8>)
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	461a      	mov	r2, r3
 80133da:	4b85      	ldr	r3, [pc, #532]	; (80135f0 <tcp_receive+0xbdc>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	441a      	add	r2, r3
 80133e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e2:	68db      	ldr	r3, [r3, #12]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	dd4b      	ble.n	8013484 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80133ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	4b7e      	ldr	r3, [pc, #504]	; (80135f0 <tcp_receive+0xbdc>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	b29a      	uxth	r2, r3
 80133fe:	4b7d      	ldr	r3, [pc, #500]	; (80135f4 <tcp_receive+0xbe0>)
 8013400:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013402:	4b7c      	ldr	r3, [pc, #496]	; (80135f4 <tcp_receive+0xbe0>)
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	899b      	ldrh	r3, [r3, #12]
 8013408:	b29b      	uxth	r3, r3
 801340a:	4618      	mov	r0, r3
 801340c:	f7fb fa3e 	bl	800e88c <lwip_htons>
 8013410:	4603      	mov	r3, r0
 8013412:	f003 0302 	and.w	r3, r3, #2
 8013416:	2b00      	cmp	r3, #0
 8013418:	d005      	beq.n	8013426 <tcp_receive+0xa12>
                inseg.len -= 1;
 801341a:	4b76      	ldr	r3, [pc, #472]	; (80135f4 <tcp_receive+0xbe0>)
 801341c:	891b      	ldrh	r3, [r3, #8]
 801341e:	3b01      	subs	r3, #1
 8013420:	b29a      	uxth	r2, r3
 8013422:	4b74      	ldr	r3, [pc, #464]	; (80135f4 <tcp_receive+0xbe0>)
 8013424:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013426:	4b73      	ldr	r3, [pc, #460]	; (80135f4 <tcp_receive+0xbe0>)
 8013428:	685a      	ldr	r2, [r3, #4]
 801342a:	4b72      	ldr	r3, [pc, #456]	; (80135f4 <tcp_receive+0xbe0>)
 801342c:	891b      	ldrh	r3, [r3, #8]
 801342e:	4619      	mov	r1, r3
 8013430:	4610      	mov	r0, r2
 8013432:	f7fc fbc7 	bl	800fbc4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013436:	4b6f      	ldr	r3, [pc, #444]	; (80135f4 <tcp_receive+0xbe0>)
 8013438:	891c      	ldrh	r4, [r3, #8]
 801343a:	4b6e      	ldr	r3, [pc, #440]	; (80135f4 <tcp_receive+0xbe0>)
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	899b      	ldrh	r3, [r3, #12]
 8013440:	b29b      	uxth	r3, r3
 8013442:	4618      	mov	r0, r3
 8013444:	f7fb fa22 	bl	800e88c <lwip_htons>
 8013448:	4603      	mov	r3, r0
 801344a:	f003 0303 	and.w	r3, r3, #3
 801344e:	2b00      	cmp	r3, #0
 8013450:	d001      	beq.n	8013456 <tcp_receive+0xa42>
 8013452:	2301      	movs	r3, #1
 8013454:	e000      	b.n	8013458 <tcp_receive+0xa44>
 8013456:	2300      	movs	r3, #0
 8013458:	4423      	add	r3, r4
 801345a:	b29a      	uxth	r2, r3
 801345c:	4b63      	ldr	r3, [pc, #396]	; (80135ec <tcp_receive+0xbd8>)
 801345e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013460:	4b62      	ldr	r3, [pc, #392]	; (80135ec <tcp_receive+0xbd8>)
 8013462:	881b      	ldrh	r3, [r3, #0]
 8013464:	461a      	mov	r2, r3
 8013466:	4b62      	ldr	r3, [pc, #392]	; (80135f0 <tcp_receive+0xbdc>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	441a      	add	r2, r3
 801346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346e:	68db      	ldr	r3, [r3, #12]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	429a      	cmp	r2, r3
 8013474:	d006      	beq.n	8013484 <tcp_receive+0xa70>
 8013476:	4b60      	ldr	r3, [pc, #384]	; (80135f8 <tcp_receive+0xbe4>)
 8013478:	f240 52af 	movw	r2, #1455	; 0x5af
 801347c:	495f      	ldr	r1, [pc, #380]	; (80135fc <tcp_receive+0xbe8>)
 801347e:	4860      	ldr	r0, [pc, #384]	; (8013600 <tcp_receive+0xbec>)
 8013480:	f004 fa50 	bl	8017924 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013488:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801348a:	4b58      	ldr	r3, [pc, #352]	; (80135ec <tcp_receive+0xbd8>)
 801348c:	881b      	ldrh	r3, [r3, #0]
 801348e:	461a      	mov	r2, r3
 8013490:	4b57      	ldr	r3, [pc, #348]	; (80135f0 <tcp_receive+0xbdc>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	441a      	add	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801349e:	4b53      	ldr	r3, [pc, #332]	; (80135ec <tcp_receive+0xbd8>)
 80134a0:	881b      	ldrh	r3, [r3, #0]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d206      	bcs.n	80134b4 <tcp_receive+0xaa0>
 80134a6:	4b54      	ldr	r3, [pc, #336]	; (80135f8 <tcp_receive+0xbe4>)
 80134a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80134ac:	4955      	ldr	r1, [pc, #340]	; (8013604 <tcp_receive+0xbf0>)
 80134ae:	4854      	ldr	r0, [pc, #336]	; (8013600 <tcp_receive+0xbec>)
 80134b0:	f004 fa38 	bl	8017924 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80134b8:	4b4c      	ldr	r3, [pc, #304]	; (80135ec <tcp_receive+0xbd8>)
 80134ba:	881b      	ldrh	r3, [r3, #0]
 80134bc:	1ad3      	subs	r3, r2, r3
 80134be:	b29a      	uxth	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f7fd f9fb 	bl	80108c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80134ca:	4b4a      	ldr	r3, [pc, #296]	; (80135f4 <tcp_receive+0xbe0>)
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	891b      	ldrh	r3, [r3, #8]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d006      	beq.n	80134e2 <tcp_receive+0xace>
          recv_data = inseg.p;
 80134d4:	4b47      	ldr	r3, [pc, #284]	; (80135f4 <tcp_receive+0xbe0>)
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	4a4b      	ldr	r2, [pc, #300]	; (8013608 <tcp_receive+0xbf4>)
 80134da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80134dc:	4b45      	ldr	r3, [pc, #276]	; (80135f4 <tcp_receive+0xbe0>)
 80134de:	2200      	movs	r2, #0
 80134e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80134e2:	4b44      	ldr	r3, [pc, #272]	; (80135f4 <tcp_receive+0xbe0>)
 80134e4:	68db      	ldr	r3, [r3, #12]
 80134e6:	899b      	ldrh	r3, [r3, #12]
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fb f9ce 	bl	800e88c <lwip_htons>
 80134f0:	4603      	mov	r3, r0
 80134f2:	f003 0301 	and.w	r3, r3, #1
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	f000 80b4 	beq.w	8013664 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80134fc:	4b43      	ldr	r3, [pc, #268]	; (801360c <tcp_receive+0xbf8>)
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	f043 0320 	orr.w	r3, r3, #32
 8013504:	b2da      	uxtb	r2, r3
 8013506:	4b41      	ldr	r3, [pc, #260]	; (801360c <tcp_receive+0xbf8>)
 8013508:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801350a:	e0ab      	b.n	8013664 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013510:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	685b      	ldr	r3, [r3, #4]
 801351a:	4a35      	ldr	r2, [pc, #212]	; (80135f0 <tcp_receive+0xbdc>)
 801351c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	891b      	ldrh	r3, [r3, #8]
 8013522:	461c      	mov	r4, r3
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	899b      	ldrh	r3, [r3, #12]
 801352a:	b29b      	uxth	r3, r3
 801352c:	4618      	mov	r0, r3
 801352e:	f7fb f9ad 	bl	800e88c <lwip_htons>
 8013532:	4603      	mov	r3, r0
 8013534:	f003 0303 	and.w	r3, r3, #3
 8013538:	2b00      	cmp	r3, #0
 801353a:	d001      	beq.n	8013540 <tcp_receive+0xb2c>
 801353c:	2301      	movs	r3, #1
 801353e:	e000      	b.n	8013542 <tcp_receive+0xb2e>
 8013540:	2300      	movs	r3, #0
 8013542:	191a      	adds	r2, r3, r4
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013548:	441a      	add	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013552:	461c      	mov	r4, r3
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	891b      	ldrh	r3, [r3, #8]
 8013558:	461d      	mov	r5, r3
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	b29b      	uxth	r3, r3
 8013562:	4618      	mov	r0, r3
 8013564:	f7fb f992 	bl	800e88c <lwip_htons>
 8013568:	4603      	mov	r3, r0
 801356a:	f003 0303 	and.w	r3, r3, #3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d001      	beq.n	8013576 <tcp_receive+0xb62>
 8013572:	2301      	movs	r3, #1
 8013574:	e000      	b.n	8013578 <tcp_receive+0xb64>
 8013576:	2300      	movs	r3, #0
 8013578:	442b      	add	r3, r5
 801357a:	429c      	cmp	r4, r3
 801357c:	d206      	bcs.n	801358c <tcp_receive+0xb78>
 801357e:	4b1e      	ldr	r3, [pc, #120]	; (80135f8 <tcp_receive+0xbe4>)
 8013580:	f240 52de 	movw	r2, #1502	; 0x5de
 8013584:	4922      	ldr	r1, [pc, #136]	; (8013610 <tcp_receive+0xbfc>)
 8013586:	481e      	ldr	r0, [pc, #120]	; (8013600 <tcp_receive+0xbec>)
 8013588:	f004 f9cc 	bl	8017924 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	891b      	ldrh	r3, [r3, #8]
 8013590:	461c      	mov	r4, r3
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	68db      	ldr	r3, [r3, #12]
 8013596:	899b      	ldrh	r3, [r3, #12]
 8013598:	b29b      	uxth	r3, r3
 801359a:	4618      	mov	r0, r3
 801359c:	f7fb f976 	bl	800e88c <lwip_htons>
 80135a0:	4603      	mov	r3, r0
 80135a2:	f003 0303 	and.w	r3, r3, #3
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d001      	beq.n	80135ae <tcp_receive+0xb9a>
 80135aa:	2301      	movs	r3, #1
 80135ac:	e000      	b.n	80135b0 <tcp_receive+0xb9c>
 80135ae:	2300      	movs	r3, #0
 80135b0:	1919      	adds	r1, r3, r4
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80135b6:	b28b      	uxth	r3, r1
 80135b8:	1ad3      	subs	r3, r2, r3
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f7fd f97d 	bl	80108c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	891b      	ldrh	r3, [r3, #8]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d028      	beq.n	8013622 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80135d0:	4b0d      	ldr	r3, [pc, #52]	; (8013608 <tcp_receive+0xbf4>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d01d      	beq.n	8013614 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80135d8:	4b0b      	ldr	r3, [pc, #44]	; (8013608 <tcp_receive+0xbf4>)
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	4619      	mov	r1, r3
 80135e2:	4610      	mov	r0, r2
 80135e4:	f7fc fd3c 	bl	8010060 <pbuf_cat>
 80135e8:	e018      	b.n	801361c <tcp_receive+0xc08>
 80135ea:	bf00      	nop
 80135ec:	2400a42a 	.word	0x2400a42a
 80135f0:	2400a420 	.word	0x2400a420
 80135f4:	2400a400 	.word	0x2400a400
 80135f8:	0801985c 	.word	0x0801985c
 80135fc:	08019b60 	.word	0x08019b60
 8013600:	080198a0 	.word	0x080198a0
 8013604:	08019b9c 	.word	0x08019b9c
 8013608:	2400a430 	.word	0x2400a430
 801360c:	2400a42d 	.word	0x2400a42d
 8013610:	08019bbc 	.word	0x08019bbc
            } else {
              recv_data = cseg->p;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	4a71      	ldr	r2, [pc, #452]	; (80137e0 <tcp_receive+0xdcc>)
 801361a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2200      	movs	r2, #0
 8013620:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	68db      	ldr	r3, [r3, #12]
 8013626:	899b      	ldrh	r3, [r3, #12]
 8013628:	b29b      	uxth	r3, r3
 801362a:	4618      	mov	r0, r3
 801362c:	f7fb f92e 	bl	800e88c <lwip_htons>
 8013630:	4603      	mov	r3, r0
 8013632:	f003 0301 	and.w	r3, r3, #1
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00d      	beq.n	8013656 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801363a:	4b6a      	ldr	r3, [pc, #424]	; (80137e4 <tcp_receive+0xdd0>)
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	f043 0320 	orr.w	r3, r3, #32
 8013642:	b2da      	uxtb	r2, r3
 8013644:	4b67      	ldr	r3, [pc, #412]	; (80137e4 <tcp_receive+0xdd0>)
 8013646:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	7d1b      	ldrb	r3, [r3, #20]
 801364c:	2b04      	cmp	r3, #4
 801364e:	d102      	bne.n	8013656 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2207      	movs	r2, #7
 8013654:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 801365e:	68f8      	ldr	r0, [r7, #12]
 8013660:	f7fd fd77 	bl	8011152 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013668:	2b00      	cmp	r3, #0
 801366a:	d008      	beq.n	801367e <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013670:	68db      	ldr	r3, [r3, #12]
 8013672:	685a      	ldr	r2, [r3, #4]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013678:	429a      	cmp	r2, r3
 801367a:	f43f af47 	beq.w	801350c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	7e9b      	ldrb	r3, [r3, #26]
 8013682:	f003 0301 	and.w	r3, r3, #1
 8013686:	2b00      	cmp	r3, #0
 8013688:	d00e      	beq.n	80136a8 <tcp_receive+0xc94>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	7e9b      	ldrb	r3, [r3, #26]
 801368e:	f023 0301 	bic.w	r3, r3, #1
 8013692:	b2da      	uxtb	r2, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	769a      	strb	r2, [r3, #26]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	7e9b      	ldrb	r3, [r3, #26]
 801369c:	f043 0302 	orr.w	r3, r3, #2
 80136a0:	b2da      	uxtb	r2, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80136a6:	e181      	b.n	80139ac <tcp_receive+0xf98>
        tcp_ack(pcb);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	7e9b      	ldrb	r3, [r3, #26]
 80136ac:	f043 0301 	orr.w	r3, r3, #1
 80136b0:	b2da      	uxtb	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80136b6:	e179      	b.n	80139ac <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f000 fc93 	bl	8013fe4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d106      	bne.n	80136d4 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80136c6:	4848      	ldr	r0, [pc, #288]	; (80137e8 <tcp_receive+0xdd4>)
 80136c8:	f7fd fd5b 	bl	8011182 <tcp_seg_copy>
 80136cc:	4602      	mov	r2, r0
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80136d2:	e16b      	b.n	80139ac <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80136d4:	2300      	movs	r3, #0
 80136d6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136de:	e150      	b.n	8013982 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	685a      	ldr	r2, [r3, #4]
 80136e6:	4b41      	ldr	r3, [pc, #260]	; (80137ec <tcp_receive+0xdd8>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d11d      	bne.n	801372a <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80136ee:	4b3e      	ldr	r3, [pc, #248]	; (80137e8 <tcp_receive+0xdd4>)
 80136f0:	891a      	ldrh	r2, [r3, #8]
 80136f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f4:	891b      	ldrh	r3, [r3, #8]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	f240 8148 	bls.w	801398c <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80136fc:	483a      	ldr	r0, [pc, #232]	; (80137e8 <tcp_receive+0xdd4>)
 80136fe:	f7fd fd40 	bl	8011182 <tcp_seg_copy>
 8013702:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	f000 8142 	beq.w	8013990 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 801370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370e:	2b00      	cmp	r3, #0
 8013710:	d003      	beq.n	801371a <tcp_receive+0xd06>
                    prev->next = cseg;
 8013712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	601a      	str	r2, [r3, #0]
 8013718:	e002      	b.n	8013720 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	f7ff f900 	bl	8012928 <tcp_oos_insert_segment>
                }
                break;
 8013728:	e132      	b.n	8013990 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372c:	2b00      	cmp	r3, #0
 801372e:	d117      	bne.n	8013760 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013730:	4b2e      	ldr	r3, [pc, #184]	; (80137ec <tcp_receive+0xdd8>)
 8013732:	681a      	ldr	r2, [r3, #0]
 8013734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013736:	68db      	ldr	r3, [r3, #12]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	1ad3      	subs	r3, r2, r3
 801373c:	2b00      	cmp	r3, #0
 801373e:	da57      	bge.n	80137f0 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8013740:	4829      	ldr	r0, [pc, #164]	; (80137e8 <tcp_receive+0xdd4>)
 8013742:	f7fd fd1e 	bl	8011182 <tcp_seg_copy>
 8013746:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2b00      	cmp	r3, #0
 801374c:	f000 8122 	beq.w	8013994 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8013756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013758:	68f8      	ldr	r0, [r7, #12]
 801375a:	f7ff f8e5 	bl	8012928 <tcp_oos_insert_segment>
                  }
                  break;
 801375e:	e119      	b.n	8013994 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8013760:	4b22      	ldr	r3, [pc, #136]	; (80137ec <tcp_receive+0xdd8>)
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	1ad3      	subs	r3, r2, r3
 801376c:	3b01      	subs	r3, #1
 801376e:	2b00      	cmp	r3, #0
 8013770:	db3e      	blt.n	80137f0 <tcp_receive+0xddc>
 8013772:	4b1e      	ldr	r3, [pc, #120]	; (80137ec <tcp_receive+0xdd8>)
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	1ad3      	subs	r3, r2, r3
 801377e:	3301      	adds	r3, #1
 8013780:	2b00      	cmp	r3, #0
 8013782:	dc35      	bgt.n	80137f0 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8013784:	4818      	ldr	r0, [pc, #96]	; (80137e8 <tcp_receive+0xdd4>)
 8013786:	f7fd fcfc 	bl	8011182 <tcp_seg_copy>
 801378a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2b00      	cmp	r3, #0
 8013790:	f000 8102 	beq.w	8013998 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801379c:	8912      	ldrh	r2, [r2, #8]
 801379e:	441a      	add	r2, r3
 80137a0:	4b12      	ldr	r3, [pc, #72]	; (80137ec <tcp_receive+0xdd8>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	1ad3      	subs	r3, r2, r3
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	dd12      	ble.n	80137d0 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80137aa:	4b10      	ldr	r3, [pc, #64]	; (80137ec <tcp_receive+0xdd8>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	1ad3      	subs	r3, r2, r3
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80137c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c2:	685a      	ldr	r2, [r3, #4]
 80137c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c6:	891b      	ldrh	r3, [r3, #8]
 80137c8:	4619      	mov	r1, r3
 80137ca:	4610      	mov	r0, r2
 80137cc:	f7fc f9fa 	bl	800fbc4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80137d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d2:	68fa      	ldr	r2, [r7, #12]
 80137d4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80137d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f7ff f8a5 	bl	8012928 <tcp_oos_insert_segment>
                  }
                  break;
 80137de:	e0db      	b.n	8013998 <tcp_receive+0xf84>
 80137e0:	2400a430 	.word	0x2400a430
 80137e4:	2400a42d 	.word	0x2400a42d
 80137e8:	2400a400 	.word	0x2400a400
 80137ec:	2400a420 	.word	0x2400a420
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80137f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f040 80bf 	bne.w	8013978 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80137fa:	4b7c      	ldr	r3, [pc, #496]	; (80139ec <tcp_receive+0xfd8>)
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013800:	68db      	ldr	r3, [r3, #12]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013806:	2b00      	cmp	r3, #0
 8013808:	f340 80b6 	ble.w	8013978 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	899b      	ldrh	r3, [r3, #12]
 8013812:	b29b      	uxth	r3, r3
 8013814:	4618      	mov	r0, r3
 8013816:	f7fb f839 	bl	800e88c <lwip_htons>
 801381a:	4603      	mov	r3, r0
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	2b00      	cmp	r3, #0
 8013822:	f040 80bb 	bne.w	801399c <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013826:	4872      	ldr	r0, [pc, #456]	; (80139f0 <tcp_receive+0xfdc>)
 8013828:	f7fd fcab 	bl	8011182 <tcp_seg_copy>
 801382c:	4602      	mov	r2, r0
 801382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013830:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	f000 80b2 	beq.w	80139a0 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013844:	8912      	ldrh	r2, [r2, #8]
 8013846:	441a      	add	r2, r3
 8013848:	4b68      	ldr	r3, [pc, #416]	; (80139ec <tcp_receive+0xfd8>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	1ad3      	subs	r3, r2, r3
 801384e:	2b00      	cmp	r3, #0
 8013850:	dd12      	ble.n	8013878 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013852:	4b66      	ldr	r3, [pc, #408]	; (80139ec <tcp_receive+0xfd8>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	b29a      	uxth	r2, r3
 8013858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385a:	68db      	ldr	r3, [r3, #12]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	b29b      	uxth	r3, r3
 8013860:	1ad3      	subs	r3, r2, r3
 8013862:	b29a      	uxth	r2, r3
 8013864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013866:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801386a:	685a      	ldr	r2, [r3, #4]
 801386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801386e:	891b      	ldrh	r3, [r3, #8]
 8013870:	4619      	mov	r1, r3
 8013872:	4610      	mov	r0, r2
 8013874:	f7fc f9a6 	bl	800fbc4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013878:	4b5e      	ldr	r3, [pc, #376]	; (80139f4 <tcp_receive+0xfe0>)
 801387a:	881b      	ldrh	r3, [r3, #0]
 801387c:	461a      	mov	r2, r3
 801387e:	4b5b      	ldr	r3, [pc, #364]	; (80139ec <tcp_receive+0xfd8>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	441a      	add	r2, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013888:	6879      	ldr	r1, [r7, #4]
 801388a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801388c:	440b      	add	r3, r1
 801388e:	1ad3      	subs	r3, r2, r3
 8013890:	2b00      	cmp	r3, #0
 8013892:	f340 8085 	ble.w	80139a0 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	899b      	ldrh	r3, [r3, #12]
 801389e:	b29b      	uxth	r3, r3
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7fa fff3 	bl	800e88c <lwip_htons>
 80138a6:	4603      	mov	r3, r0
 80138a8:	f003 0301 	and.w	r3, r3, #1
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d01e      	beq.n	80138ee <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80138b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	68db      	ldr	r3, [r3, #12]
 80138b6:	899b      	ldrh	r3, [r3, #12]
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80138be:	b29c      	uxth	r4, r3
 80138c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	899b      	ldrh	r3, [r3, #12]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fa ffde 	bl	800e88c <lwip_htons>
 80138d0:	4603      	mov	r3, r0
 80138d2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	4618      	mov	r0, r3
 80138da:	f7fa ffd7 	bl	800e88c <lwip_htons>
 80138de:	4603      	mov	r3, r0
 80138e0:	461a      	mov	r2, r3
 80138e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	4322      	orrs	r2, r4
 80138ea:	b292      	uxth	r2, r2
 80138ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138f8:	4413      	add	r3, r2
 80138fa:	b299      	uxth	r1, r3
 80138fc:	4b3b      	ldr	r3, [pc, #236]	; (80139ec <tcp_receive+0xfd8>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	b29a      	uxth	r2, r3
 8013902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	1a8a      	subs	r2, r1, r2
 8013908:	b292      	uxth	r2, r2
 801390a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	685a      	ldr	r2, [r3, #4]
 8013912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	891b      	ldrh	r3, [r3, #8]
 8013918:	4619      	mov	r1, r3
 801391a:	4610      	mov	r0, r2
 801391c:	f7fc f952 	bl	800fbc4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	891c      	ldrh	r4, [r3, #8]
 8013926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	899b      	ldrh	r3, [r3, #12]
 801392e:	b29b      	uxth	r3, r3
 8013930:	4618      	mov	r0, r3
 8013932:	f7fa ffab 	bl	800e88c <lwip_htons>
 8013936:	4603      	mov	r3, r0
 8013938:	f003 0303 	and.w	r3, r3, #3
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <tcp_receive+0xf30>
 8013940:	2301      	movs	r3, #1
 8013942:	e000      	b.n	8013946 <tcp_receive+0xf32>
 8013944:	2300      	movs	r3, #0
 8013946:	4423      	add	r3, r4
 8013948:	b29a      	uxth	r2, r3
 801394a:	4b2a      	ldr	r3, [pc, #168]	; (80139f4 <tcp_receive+0xfe0>)
 801394c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801394e:	4b29      	ldr	r3, [pc, #164]	; (80139f4 <tcp_receive+0xfe0>)
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	461a      	mov	r2, r3
 8013954:	4b25      	ldr	r3, [pc, #148]	; (80139ec <tcp_receive+0xfd8>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	441a      	add	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801395e:	6879      	ldr	r1, [r7, #4]
 8013960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013962:	440b      	add	r3, r1
 8013964:	429a      	cmp	r2, r3
 8013966:	d01b      	beq.n	80139a0 <tcp_receive+0xf8c>
 8013968:	4b23      	ldr	r3, [pc, #140]	; (80139f8 <tcp_receive+0xfe4>)
 801396a:	f240 627b 	movw	r2, #1659	; 0x67b
 801396e:	4923      	ldr	r1, [pc, #140]	; (80139fc <tcp_receive+0xfe8>)
 8013970:	4823      	ldr	r0, [pc, #140]	; (8013a00 <tcp_receive+0xfec>)
 8013972:	f003 ffd7 	bl	8017924 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013976:	e013      	b.n	80139a0 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8013978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013984:	2b00      	cmp	r3, #0
 8013986:	f47f aeab 	bne.w	80136e0 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 801398a:	e00f      	b.n	80139ac <tcp_receive+0xf98>
                break;
 801398c:	bf00      	nop
 801398e:	e00d      	b.n	80139ac <tcp_receive+0xf98>
                break;
 8013990:	bf00      	nop
 8013992:	e00b      	b.n	80139ac <tcp_receive+0xf98>
                  break;
 8013994:	bf00      	nop
 8013996:	e009      	b.n	80139ac <tcp_receive+0xf98>
                  break;
 8013998:	bf00      	nop
 801399a:	e007      	b.n	80139ac <tcp_receive+0xf98>
                  break;
 801399c:	bf00      	nop
 801399e:	e005      	b.n	80139ac <tcp_receive+0xf98>
                break;
 80139a0:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80139a2:	e003      	b.n	80139ac <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f000 fb1d 	bl	8013fe4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80139aa:	e01a      	b.n	80139e2 <tcp_receive+0xfce>
 80139ac:	e019      	b.n	80139e2 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80139ae:	4b0f      	ldr	r3, [pc, #60]	; (80139ec <tcp_receive+0xfd8>)
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b6:	1ad3      	subs	r3, r2, r3
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	db0a      	blt.n	80139d2 <tcp_receive+0xfbe>
 80139bc:	4b0b      	ldr	r3, [pc, #44]	; (80139ec <tcp_receive+0xfd8>)
 80139be:	681a      	ldr	r2, [r3, #0]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80139c8:	440b      	add	r3, r1
 80139ca:	1ad3      	subs	r3, r2, r3
 80139cc:	3301      	adds	r3, #1
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	dd07      	ble.n	80139e2 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	7e9b      	ldrb	r3, [r3, #26]
 80139d6:	f043 0302 	orr.w	r3, r3, #2
 80139da:	b2da      	uxtb	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80139e0:	e7ff      	b.n	80139e2 <tcp_receive+0xfce>
 80139e2:	bf00      	nop
 80139e4:	3734      	adds	r7, #52	; 0x34
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ea:	bf00      	nop
 80139ec:	2400a420 	.word	0x2400a420
 80139f0:	2400a400 	.word	0x2400a400
 80139f4:	2400a42a 	.word	0x2400a42a
 80139f8:	0801985c 	.word	0x0801985c
 80139fc:	08019b28 	.word	0x08019b28
 8013a00:	080198a0 	.word	0x080198a0

08013a04 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8013a0a:	4b18      	ldr	r3, [pc, #96]	; (8013a6c <tcp_getoptbyte+0x68>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d005      	beq.n	8013a1e <tcp_getoptbyte+0x1a>
 8013a12:	4b17      	ldr	r3, [pc, #92]	; (8013a70 <tcp_getoptbyte+0x6c>)
 8013a14:	881a      	ldrh	r2, [r3, #0]
 8013a16:	4b17      	ldr	r3, [pc, #92]	; (8013a74 <tcp_getoptbyte+0x70>)
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d20e      	bcs.n	8013a3c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8013a1e:	4b16      	ldr	r3, [pc, #88]	; (8013a78 <tcp_getoptbyte+0x74>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	3314      	adds	r3, #20
 8013a24:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8013a26:	4b12      	ldr	r3, [pc, #72]	; (8013a70 <tcp_getoptbyte+0x6c>)
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	1c5a      	adds	r2, r3, #1
 8013a2c:	b291      	uxth	r1, r2
 8013a2e:	4a10      	ldr	r2, [pc, #64]	; (8013a70 <tcp_getoptbyte+0x6c>)
 8013a30:	8011      	strh	r1, [r2, #0]
 8013a32:	461a      	mov	r2, r3
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	4413      	add	r3, r2
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	e010      	b.n	8013a5e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8013a3c:	4b0c      	ldr	r3, [pc, #48]	; (8013a70 <tcp_getoptbyte+0x6c>)
 8013a3e:	881b      	ldrh	r3, [r3, #0]
 8013a40:	1c5a      	adds	r2, r3, #1
 8013a42:	b291      	uxth	r1, r2
 8013a44:	4a0a      	ldr	r2, [pc, #40]	; (8013a70 <tcp_getoptbyte+0x6c>)
 8013a46:	8011      	strh	r1, [r2, #0]
 8013a48:	b2da      	uxtb	r2, r3
 8013a4a:	4b0a      	ldr	r3, [pc, #40]	; (8013a74 <tcp_getoptbyte+0x70>)
 8013a4c:	881b      	ldrh	r3, [r3, #0]
 8013a4e:	b2db      	uxtb	r3, r3
 8013a50:	1ad3      	subs	r3, r2, r3
 8013a52:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8013a54:	4b05      	ldr	r3, [pc, #20]	; (8013a6c <tcp_getoptbyte+0x68>)
 8013a56:	681a      	ldr	r2, [r3, #0]
 8013a58:	79fb      	ldrb	r3, [r7, #7]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	370c      	adds	r7, #12
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr
 8013a6a:	bf00      	nop
 8013a6c:	2400a418 	.word	0x2400a418
 8013a70:	2400a41c 	.word	0x2400a41c
 8013a74:	2400a416 	.word	0x2400a416
 8013a78:	2400a410 	.word	0x2400a410

08013a7c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013a84:	4b2d      	ldr	r3, [pc, #180]	; (8013b3c <tcp_parseopt+0xc0>)
 8013a86:	881b      	ldrh	r3, [r3, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d053      	beq.n	8013b34 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013a8c:	4b2c      	ldr	r3, [pc, #176]	; (8013b40 <tcp_parseopt+0xc4>)
 8013a8e:	2200      	movs	r2, #0
 8013a90:	801a      	strh	r2, [r3, #0]
 8013a92:	e043      	b.n	8013b1c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8013a94:	f7ff ffb6 	bl	8013a04 <tcp_getoptbyte>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013a9c:	7bfb      	ldrb	r3, [r7, #15]
 8013a9e:	2b01      	cmp	r3, #1
 8013aa0:	d03c      	beq.n	8013b1c <tcp_parseopt+0xa0>
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	d002      	beq.n	8013aac <tcp_parseopt+0x30>
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d03f      	beq.n	8013b2a <tcp_parseopt+0xae>
 8013aaa:	e026      	b.n	8013afa <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013aac:	f7ff ffaa 	bl	8013a04 <tcp_getoptbyte>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	2b04      	cmp	r3, #4
 8013ab4:	d13b      	bne.n	8013b2e <tcp_parseopt+0xb2>
 8013ab6:	4b22      	ldr	r3, [pc, #136]	; (8013b40 <tcp_parseopt+0xc4>)
 8013ab8:	881b      	ldrh	r3, [r3, #0]
 8013aba:	3302      	adds	r3, #2
 8013abc:	4a1f      	ldr	r2, [pc, #124]	; (8013b3c <tcp_parseopt+0xc0>)
 8013abe:	8812      	ldrh	r2, [r2, #0]
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	dc34      	bgt.n	8013b2e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8013ac4:	f7ff ff9e 	bl	8013a04 <tcp_getoptbyte>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	021b      	lsls	r3, r3, #8
 8013ace:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8013ad0:	f7ff ff98 	bl	8013a04 <tcp_getoptbyte>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	b29a      	uxth	r2, r3
 8013ad8:	89bb      	ldrh	r3, [r7, #12]
 8013ada:	4313      	orrs	r3, r2
 8013adc:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013ade:	89bb      	ldrh	r3, [r7, #12]
 8013ae0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013ae4:	d804      	bhi.n	8013af0 <tcp_parseopt+0x74>
 8013ae6:	89bb      	ldrh	r3, [r7, #12]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d001      	beq.n	8013af0 <tcp_parseopt+0x74>
 8013aec:	89ba      	ldrh	r2, [r7, #12]
 8013aee:	e001      	b.n	8013af4 <tcp_parseopt+0x78>
 8013af0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8013af8:	e010      	b.n	8013b1c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8013afa:	f7ff ff83 	bl	8013a04 <tcp_getoptbyte>
 8013afe:	4603      	mov	r3, r0
 8013b00:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8013b02:	7afb      	ldrb	r3, [r7, #11]
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d914      	bls.n	8013b32 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8013b08:	7afb      	ldrb	r3, [r7, #11]
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	4b0c      	ldr	r3, [pc, #48]	; (8013b40 <tcp_parseopt+0xc4>)
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	4413      	add	r3, r2
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	3b02      	subs	r3, #2
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	4b09      	ldr	r3, [pc, #36]	; (8013b40 <tcp_parseopt+0xc4>)
 8013b1a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013b1c:	4b08      	ldr	r3, [pc, #32]	; (8013b40 <tcp_parseopt+0xc4>)
 8013b1e:	881a      	ldrh	r2, [r3, #0]
 8013b20:	4b06      	ldr	r3, [pc, #24]	; (8013b3c <tcp_parseopt+0xc0>)
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d3b5      	bcc.n	8013a94 <tcp_parseopt+0x18>
 8013b28:	e004      	b.n	8013b34 <tcp_parseopt+0xb8>
        return;
 8013b2a:	bf00      	nop
 8013b2c:	e002      	b.n	8013b34 <tcp_parseopt+0xb8>
          return;
 8013b2e:	bf00      	nop
 8013b30:	e000      	b.n	8013b34 <tcp_parseopt+0xb8>
          return;
 8013b32:	bf00      	nop
      }
    }
  }
}
 8013b34:	3710      	adds	r7, #16
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
 8013b3a:	bf00      	nop
 8013b3c:	2400a414 	.word	0x2400a414
 8013b40:	2400a41c 	.word	0x2400a41c

08013b44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013b44:	b480      	push	{r7}
 8013b46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013b48:	4b05      	ldr	r3, [pc, #20]	; (8013b60 <tcp_trigger_input_pcb_close+0x1c>)
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	f043 0310 	orr.w	r3, r3, #16
 8013b50:	b2da      	uxtb	r2, r3
 8013b52:	4b03      	ldr	r3, [pc, #12]	; (8013b60 <tcp_trigger_input_pcb_close+0x1c>)
 8013b54:	701a      	strb	r2, [r3, #0]
}
 8013b56:	bf00      	nop
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr
 8013b60:	2400a42d 	.word	0x2400a42d

08013b64 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b086      	sub	sp, #24
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	607b      	str	r3, [r7, #4]
 8013b6e:	460b      	mov	r3, r1
 8013b70:	817b      	strh	r3, [r7, #10]
 8013b72:	4613      	mov	r3, r2
 8013b74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013b76:	897a      	ldrh	r2, [r7, #10]
 8013b78:	893b      	ldrh	r3, [r7, #8]
 8013b7a:	4413      	add	r3, r2
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	3314      	adds	r3, #20
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	2200      	movs	r2, #0
 8013b84:	4619      	mov	r1, r3
 8013b86:	2001      	movs	r0, #1
 8013b88:	f7fb fe1e 	bl	800f7c8 <pbuf_alloc>
 8013b8c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d057      	beq.n	8013c44 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	895b      	ldrh	r3, [r3, #10]
 8013b98:	461a      	mov	r2, r3
 8013b9a:	897b      	ldrh	r3, [r7, #10]
 8013b9c:	3314      	adds	r3, #20
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	da05      	bge.n	8013bae <tcp_output_alloc_header+0x4a>
 8013ba2:	4b2b      	ldr	r3, [pc, #172]	; (8013c50 <tcp_output_alloc_header+0xec>)
 8013ba4:	2273      	movs	r2, #115	; 0x73
 8013ba6:	492b      	ldr	r1, [pc, #172]	; (8013c54 <tcp_output_alloc_header+0xf0>)
 8013ba8:	482b      	ldr	r0, [pc, #172]	; (8013c58 <tcp_output_alloc_header+0xf4>)
 8013baa:	f003 febb 	bl	8017924 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	8adb      	ldrh	r3, [r3, #22]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fa fe67 	bl	800e88c <lwip_htons>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	8b1b      	ldrh	r3, [r3, #24]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7fa fe5e 	bl	800e88c <lwip_htons>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fa fe60 	bl	800e8a8 <lwip_htonl>
 8013be8:	4602      	mov	r2, r0
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8013bee:	897b      	ldrh	r3, [r7, #10]
 8013bf0:	089b      	lsrs	r3, r3, #2
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	3305      	adds	r3, #5
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	031b      	lsls	r3, r3, #12
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	f043 0310 	orr.w	r3, r3, #16
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fa fe42 	bl	800e88c <lwip_htons>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fa fe39 	bl	800e88c <lwip_htons>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	2200      	movs	r2, #0
 8013c26:	741a      	strb	r2, [r3, #16]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	749a      	strb	r2, [r3, #18]
 8013c32:	2200      	movs	r2, #0
 8013c34:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c3a:	68fa      	ldr	r2, [r7, #12]
 8013c3c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013c3e:	441a      	add	r2, r3
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013c44:	697b      	ldr	r3, [r7, #20]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3718      	adds	r7, #24
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	08019be4 	.word	0x08019be4
 8013c54:	08019c18 	.word	0x08019c18
 8013c58:	08019c48 	.word	0x08019c48

08013c5c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013c5c:	b590      	push	{r4, r7, lr}
 8013c5e:	b085      	sub	sp, #20
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d02d      	beq.n	8013cc8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c70:	60fb      	str	r3, [r7, #12]
 8013c72:	e002      	b.n	8013c7a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d1f8      	bne.n	8013c74 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	68db      	ldr	r3, [r3, #12]
 8013c86:	899b      	ldrh	r3, [r3, #12]
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fa fdfe 	bl	800e88c <lwip_htons>
 8013c90:	4603      	mov	r3, r0
 8013c92:	f003 0307 	and.w	r3, r3, #7
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d116      	bne.n	8013cc8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	68db      	ldr	r3, [r3, #12]
 8013c9e:	899b      	ldrh	r3, [r3, #12]
 8013ca0:	b29c      	uxth	r4, r3
 8013ca2:	2001      	movs	r0, #1
 8013ca4:	f7fa fdf2 	bl	800e88c <lwip_htons>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	461a      	mov	r2, r3
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	4322      	orrs	r2, r4
 8013cb2:	b292      	uxth	r2, r2
 8013cb4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	7e9b      	ldrb	r3, [r3, #26]
 8013cba:	f043 0320 	orr.w	r3, r3, #32
 8013cbe:	b2da      	uxtb	r2, r3
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	e004      	b.n	8013cd2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013cc8:	2101      	movs	r1, #1
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f000 f88e 	bl	8013dec <tcp_enqueue_flags>
 8013cd0:	4603      	mov	r3, r0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3714      	adds	r7, #20
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd90      	pop	{r4, r7, pc}
	...

08013cdc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8013cdc:	b590      	push	{r4, r7, lr}
 8013cde:	b087      	sub	sp, #28
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	603b      	str	r3, [r7, #0]
 8013ce8:	4613      	mov	r3, r2
 8013cea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013cec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013cf0:	009b      	lsls	r3, r3, #2
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	f003 0304 	and.w	r3, r3, #4
 8013cf8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013cfa:	2003      	movs	r0, #3
 8013cfc:	f7fb fa8c 	bl	800f218 <memp_malloc>
 8013d00:	6138      	str	r0, [r7, #16]
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d104      	bne.n	8013d12 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013d08:	68b8      	ldr	r0, [r7, #8]
 8013d0a:	f7fc f8cf 	bl	800feac <pbuf_free>
    return NULL;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	e061      	b.n	8013dd6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013d18:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	68ba      	ldr	r2, [r7, #8]
 8013d24:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	891a      	ldrh	r2, [r3, #8]
 8013d2a:	7dfb      	ldrb	r3, [r7, #23]
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d205      	bcs.n	8013d3e <tcp_create_segment+0x62>
 8013d32:	4b2b      	ldr	r3, [pc, #172]	; (8013de0 <tcp_create_segment+0x104>)
 8013d34:	22ba      	movs	r2, #186	; 0xba
 8013d36:	492b      	ldr	r1, [pc, #172]	; (8013de4 <tcp_create_segment+0x108>)
 8013d38:	482b      	ldr	r0, [pc, #172]	; (8013de8 <tcp_create_segment+0x10c>)
 8013d3a:	f003 fdf3 	bl	8017924 <iprintf>
  seg->len = p->tot_len - optlen;
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	891a      	ldrh	r2, [r3, #8]
 8013d42:	7dfb      	ldrb	r3, [r7, #23]
 8013d44:	b29b      	uxth	r3, r3
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	b29a      	uxth	r2, r3
 8013d4a:	693b      	ldr	r3, [r7, #16]
 8013d4c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8013d4e:	2114      	movs	r1, #20
 8013d50:	68b8      	ldr	r0, [r7, #8]
 8013d52:	f7fc f887 	bl	800fe64 <pbuf_header>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d004      	beq.n	8013d66 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013d5c:	6938      	ldr	r0, [r7, #16]
 8013d5e:	f7fd f9f8 	bl	8011152 <tcp_seg_free>
    return NULL;
 8013d62:	2300      	movs	r3, #0
 8013d64:	e037      	b.n	8013dd6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	685a      	ldr	r2, [r3, #4]
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	8ada      	ldrh	r2, [r3, #22]
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	68dc      	ldr	r4, [r3, #12]
 8013d78:	4610      	mov	r0, r2
 8013d7a:	f7fa fd87 	bl	800e88c <lwip_htons>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	8b1a      	ldrh	r2, [r3, #24]
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	68dc      	ldr	r4, [r3, #12]
 8013d8a:	4610      	mov	r0, r2
 8013d8c:	f7fa fd7e 	bl	800e88c <lwip_htons>
 8013d90:	4603      	mov	r3, r0
 8013d92:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013d94:	693b      	ldr	r3, [r7, #16]
 8013d96:	68dc      	ldr	r4, [r3, #12]
 8013d98:	6838      	ldr	r0, [r7, #0]
 8013d9a:	f7fa fd85 	bl	800e8a8 <lwip_htonl>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8013da2:	7dfb      	ldrb	r3, [r7, #23]
 8013da4:	089b      	lsrs	r3, r3, #2
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	3305      	adds	r3, #5
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	031b      	lsls	r3, r3, #12
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	b29b      	uxth	r3, r3
 8013db6:	4313      	orrs	r3, r2
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	68dc      	ldr	r4, [r3, #12]
 8013dbe:	4610      	mov	r0, r2
 8013dc0:	f7fa fd64 	bl	800e88c <lwip_htons>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	749a      	strb	r2, [r3, #18]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	74da      	strb	r2, [r3, #19]
  return seg;
 8013dd4:	693b      	ldr	r3, [r7, #16]
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	371c      	adds	r7, #28
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd90      	pop	{r4, r7, pc}
 8013dde:	bf00      	nop
 8013de0:	08019be4 	.word	0x08019be4
 8013de4:	08019c70 	.word	0x08019c70
 8013de8:	08019c48 	.word	0x08019c48

08013dec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b08a      	sub	sp, #40	; 0x28
 8013df0:	af02      	add	r7, sp, #8
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	460b      	mov	r3, r1
 8013df6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013e00:	78fb      	ldrb	r3, [r7, #3]
 8013e02:	f003 0303 	and.w	r3, r3, #3
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <tcp_enqueue_flags+0x2c>
 8013e0a:	4b6f      	ldr	r3, [pc, #444]	; (8013fc8 <tcp_enqueue_flags+0x1dc>)
 8013e0c:	f240 321b 	movw	r2, #795	; 0x31b
 8013e10:	496e      	ldr	r1, [pc, #440]	; (8013fcc <tcp_enqueue_flags+0x1e0>)
 8013e12:	486f      	ldr	r0, [pc, #444]	; (8013fd0 <tcp_enqueue_flags+0x1e4>)
 8013e14:	f003 fd86 	bl	8017924 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013e1e:	2b08      	cmp	r3, #8
 8013e20:	d806      	bhi.n	8013e30 <tcp_enqueue_flags+0x44>
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013e28:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d90e      	bls.n	8013e4e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8013e30:	78fb      	ldrb	r3, [r7, #3]
 8013e32:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d109      	bne.n	8013e4e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7e9b      	ldrb	r3, [r3, #26]
 8013e3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e42:	b2da      	uxtb	r2, r3
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8013e48:	f04f 33ff 	mov.w	r3, #4294967295
 8013e4c:	e0b7      	b.n	8013fbe <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8013e4e:	78fb      	ldrb	r3, [r7, #3]
 8013e50:	f003 0302 	and.w	r3, r3, #2
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d001      	beq.n	8013e5c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8013e58:	2301      	movs	r3, #1
 8013e5a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013e5c:	7ffb      	ldrb	r3, [r7, #31]
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	f003 0304 	and.w	r3, r3, #4
 8013e66:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e68:	7dfb      	ldrb	r3, [r7, #23]
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	4619      	mov	r1, r3
 8013e70:	2000      	movs	r0, #0
 8013e72:	f7fb fca9 	bl	800f7c8 <pbuf_alloc>
 8013e76:	6138      	str	r0, [r7, #16]
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d109      	bne.n	8013e92 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	7e9b      	ldrb	r3, [r3, #26]
 8013e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e86:	b2da      	uxtb	r2, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e90:	e095      	b.n	8013fbe <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	895a      	ldrh	r2, [r3, #10]
 8013e96:	7dfb      	ldrb	r3, [r7, #23]
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d206      	bcs.n	8013eac <tcp_enqueue_flags+0xc0>
 8013e9e:	4b4a      	ldr	r3, [pc, #296]	; (8013fc8 <tcp_enqueue_flags+0x1dc>)
 8013ea0:	f240 3241 	movw	r2, #833	; 0x341
 8013ea4:	494b      	ldr	r1, [pc, #300]	; (8013fd4 <tcp_enqueue_flags+0x1e8>)
 8013ea6:	484a      	ldr	r0, [pc, #296]	; (8013fd0 <tcp_enqueue_flags+0x1e4>)
 8013ea8:	f003 fd3c 	bl	8017924 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013eb0:	78fa      	ldrb	r2, [r7, #3]
 8013eb2:	7ffb      	ldrb	r3, [r7, #31]
 8013eb4:	9300      	str	r3, [sp, #0]
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	6939      	ldr	r1, [r7, #16]
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7ff ff0e 	bl	8013cdc <tcp_create_segment>
 8013ec0:	60f8      	str	r0, [r7, #12]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d109      	bne.n	8013edc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	7e9b      	ldrb	r3, [r3, #26]
 8013ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013ed0:	b2da      	uxtb	r2, r3
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8013eda:	e070      	b.n	8013fbe <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	f003 0303 	and.w	r3, r3, #3
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d006      	beq.n	8013ef6 <tcp_enqueue_flags+0x10a>
 8013ee8:	4b37      	ldr	r3, [pc, #220]	; (8013fc8 <tcp_enqueue_flags+0x1dc>)
 8013eea:	f240 3249 	movw	r2, #841	; 0x349
 8013eee:	493a      	ldr	r1, [pc, #232]	; (8013fd8 <tcp_enqueue_flags+0x1ec>)
 8013ef0:	4837      	ldr	r0, [pc, #220]	; (8013fd0 <tcp_enqueue_flags+0x1e4>)
 8013ef2:	f003 fd17 	bl	8017924 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	891b      	ldrh	r3, [r3, #8]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d006      	beq.n	8013f0c <tcp_enqueue_flags+0x120>
 8013efe:	4b32      	ldr	r3, [pc, #200]	; (8013fc8 <tcp_enqueue_flags+0x1dc>)
 8013f00:	f240 324a 	movw	r2, #842	; 0x34a
 8013f04:	4935      	ldr	r1, [pc, #212]	; (8013fdc <tcp_enqueue_flags+0x1f0>)
 8013f06:	4832      	ldr	r0, [pc, #200]	; (8013fd0 <tcp_enqueue_flags+0x1e4>)
 8013f08:	f003 fd0c 	bl	8017924 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d103      	bne.n	8013f1c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	669a      	str	r2, [r3, #104]	; 0x68
 8013f1a:	e00d      	b.n	8013f38 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f20:	61bb      	str	r3, [r7, #24]
 8013f22:	e002      	b.n	8013f2a <tcp_enqueue_flags+0x13e>
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	61bb      	str	r3, [r7, #24]
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d1f8      	bne.n	8013f24 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8013f32:	69bb      	ldr	r3, [r7, #24]
 8013f34:	68fa      	ldr	r2, [r7, #12]
 8013f36:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f40:	78fb      	ldrb	r3, [r7, #3]
 8013f42:	f003 0302 	and.w	r3, r3, #2
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d104      	bne.n	8013f54 <tcp_enqueue_flags+0x168>
 8013f4a:	78fb      	ldrb	r3, [r7, #3]
 8013f4c:	f003 0301 	and.w	r3, r3, #1
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d004      	beq.n	8013f5e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f58:	1c5a      	adds	r2, r3, #1
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f5e:	78fb      	ldrb	r3, [r7, #3]
 8013f60:	f003 0301 	and.w	r3, r3, #1
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d006      	beq.n	8013f76 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	7e9b      	ldrb	r3, [r3, #26]
 8013f6c:	f043 0320 	orr.w	r3, r3, #32
 8013f70:	b2da      	uxtb	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fc f830 	bl	800ffe0 <pbuf_clen>
 8013f80:	4603      	mov	r3, r0
 8013f82:	461a      	mov	r2, r3
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013f8a:	4413      	add	r3, r2
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00e      	beq.n	8013fbc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d10a      	bne.n	8013fbc <tcp_enqueue_flags+0x1d0>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d106      	bne.n	8013fbc <tcp_enqueue_flags+0x1d0>
 8013fae:	4b06      	ldr	r3, [pc, #24]	; (8013fc8 <tcp_enqueue_flags+0x1dc>)
 8013fb0:	f240 326d 	movw	r2, #877	; 0x36d
 8013fb4:	490a      	ldr	r1, [pc, #40]	; (8013fe0 <tcp_enqueue_flags+0x1f4>)
 8013fb6:	4806      	ldr	r0, [pc, #24]	; (8013fd0 <tcp_enqueue_flags+0x1e4>)
 8013fb8:	f003 fcb4 	bl	8017924 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3720      	adds	r7, #32
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	08019be4 	.word	0x08019be4
 8013fcc:	08019ee8 	.word	0x08019ee8
 8013fd0:	08019c48 	.word	0x08019c48
 8013fd4:	08019f40 	.word	0x08019f40
 8013fd8:	08019f7c 	.word	0x08019f7c
 8013fdc:	08019f94 	.word	0x08019f94
 8013fe0:	08019fc0 	.word	0x08019fc0

08013fe4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013fe4:	b590      	push	{r4, r7, lr}
 8013fe6:	b08b      	sub	sp, #44	; 0x2c
 8013fe8:	af04      	add	r7, sp, #16
 8013fea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8013fec:	2300      	movs	r3, #0
 8013fee:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013ff0:	7dbb      	ldrb	r3, [r7, #22]
 8013ff2:	b29c      	uxth	r4, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fa fc55 	bl	800e8a8 <lwip_htonl>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2200      	movs	r2, #0
 8014002:	4621      	mov	r1, r4
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f7ff fdad 	bl	8013b64 <tcp_output_alloc_header>
 801400a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d109      	bne.n	8014026 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	7e9b      	ldrb	r3, [r3, #26]
 8014016:	f043 0303 	orr.w	r3, r3, #3
 801401a:	b2da      	uxtb	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014020:	f06f 0301 	mvn.w	r3, #1
 8014024:	e036      	b.n	8014094 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	3304      	adds	r3, #4
 801402a:	4618      	mov	r0, r3
 801402c:	f002 f994 	bl	8016358 <ip4_route>
 8014030:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d102      	bne.n	801403e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8014038:	23fc      	movs	r3, #252	; 0xfc
 801403a:	75fb      	strb	r3, [r7, #23]
 801403c:	e012      	b.n	8014064 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801403e:	6879      	ldr	r1, [r7, #4]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	1d18      	adds	r0, r3, #4
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	7a9c      	ldrb	r4, [r3, #10]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	7a5b      	ldrb	r3, [r3, #9]
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	9202      	str	r2, [sp, #8]
 8014050:	2206      	movs	r2, #6
 8014052:	9201      	str	r2, [sp, #4]
 8014054:	9300      	str	r3, [sp, #0]
 8014056:	4623      	mov	r3, r4
 8014058:	4602      	mov	r2, r0
 801405a:	6938      	ldr	r0, [r7, #16]
 801405c:	f002 fb34 	bl	80166c8 <ip4_output_if>
 8014060:	4603      	mov	r3, r0
 8014062:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8014064:	6938      	ldr	r0, [r7, #16]
 8014066:	f7fb ff21 	bl	800feac <pbuf_free>

  if (err != ERR_OK) {
 801406a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d007      	beq.n	8014082 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	7e9b      	ldrb	r3, [r3, #26]
 8014076:	f043 0303 	orr.w	r3, r3, #3
 801407a:	b2da      	uxtb	r2, r3
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	769a      	strb	r2, [r3, #26]
 8014080:	e006      	b.n	8014090 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	7e9b      	ldrb	r3, [r3, #26]
 8014086:	f023 0303 	bic.w	r3, r3, #3
 801408a:	b2da      	uxtb	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8014090:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014094:	4618      	mov	r0, r3
 8014096:	371c      	adds	r7, #28
 8014098:	46bd      	mov	sp, r7
 801409a:	bd90      	pop	{r4, r7, pc}

0801409c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801409c:	b5b0      	push	{r4, r5, r7, lr}
 801409e:	b08a      	sub	sp, #40	; 0x28
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	7d1b      	ldrb	r3, [r3, #20]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d106      	bne.n	80140ba <tcp_output+0x1e>
 80140ac:	4b9b      	ldr	r3, [pc, #620]	; (801431c <tcp_output+0x280>)
 80140ae:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80140b2:	499b      	ldr	r1, [pc, #620]	; (8014320 <tcp_output+0x284>)
 80140b4:	489b      	ldr	r0, [pc, #620]	; (8014324 <tcp_output+0x288>)
 80140b6:	f003 fc35 	bl	8017924 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80140ba:	4b9b      	ldr	r3, [pc, #620]	; (8014328 <tcp_output+0x28c>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	687a      	ldr	r2, [r7, #4]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d101      	bne.n	80140c8 <tcp_output+0x2c>
    return ERR_OK;
 80140c4:	2300      	movs	r3, #0
 80140c6:	e1cf      	b.n	8014468 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d203      	bcs.n	80140e0 <tcp_output+0x44>
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80140de:	e002      	b.n	80140e6 <tcp_output+0x4a>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140e6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80140ec:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	7e9b      	ldrb	r3, [r3, #26]
 80140f2:	f003 0302 	and.w	r3, r3, #2
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d017      	beq.n	801412a <tcp_output+0x8e>
 80140fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d00f      	beq.n	8014120 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8014100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	4618      	mov	r0, r3
 8014108:	f7fa fbce 	bl	800e8a8 <lwip_htonl>
 801410c:	4602      	mov	r2, r0
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014112:	1ad3      	subs	r3, r2, r3
 8014114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014116:	8912      	ldrh	r2, [r2, #8]
 8014118:	4413      	add	r3, r2
     (seg == NULL ||
 801411a:	69ba      	ldr	r2, [r7, #24]
 801411c:	429a      	cmp	r2, r3
 801411e:	d204      	bcs.n	801412a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f7ff ff5f 	bl	8013fe4 <tcp_send_empty_ack>
 8014126:	4603      	mov	r3, r0
 8014128:	e19e      	b.n	8014468 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801412e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014130:	6a3b      	ldr	r3, [r7, #32]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d007      	beq.n	8014146 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8014136:	e002      	b.n	801413e <tcp_output+0xa2>
 8014138:	6a3b      	ldr	r3, [r7, #32]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	623b      	str	r3, [r7, #32]
 801413e:	6a3b      	ldr	r3, [r7, #32]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d1f8      	bne.n	8014138 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	3304      	adds	r3, #4
 801414a:	4618      	mov	r0, r3
 801414c:	f002 f904 	bl	8016358 <ip4_route>
 8014150:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d102      	bne.n	801415e <tcp_output+0xc2>
    return ERR_RTE;
 8014158:	f06f 0303 	mvn.w	r3, #3
 801415c:	e184      	b.n	8014468 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d003      	beq.n	801416c <tcp_output+0xd0>
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d111      	bne.n	8014190 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d002      	beq.n	8014178 <tcp_output+0xdc>
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	3304      	adds	r3, #4
 8014176:	e000      	b.n	801417a <tcp_output+0xde>
 8014178:	2300      	movs	r3, #0
 801417a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d102      	bne.n	8014188 <tcp_output+0xec>
      return ERR_RTE;
 8014182:	f06f 0303 	mvn.w	r3, #3
 8014186:	e16f      	b.n	8014468 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	681a      	ldr	r2, [r3, #0]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8014190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014192:	2b00      	cmp	r3, #0
 8014194:	f000 813e 	beq.w	8014414 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8014198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fa fb82 	bl	800e8a8 <lwip_htonl>
 80141a4:	4602      	mov	r2, r0
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141aa:	1ad3      	subs	r3, r2, r3
 80141ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ae:	8912      	ldrh	r2, [r2, #8]
 80141b0:	4413      	add	r3, r2
  if (seg != NULL &&
 80141b2:	69ba      	ldr	r2, [r7, #24]
 80141b4:	429a      	cmp	r2, r3
 80141b6:	f080 812d 	bcs.w	8014414 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80141ba:	69bb      	ldr	r3, [r7, #24]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	f000 8129 	beq.w	8014414 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80141c8:	461a      	mov	r2, r3
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	4293      	cmp	r3, r2
 80141ce:	f040 8121 	bne.w	8014414 <tcp_output+0x378>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	f040 811c 	bne.w	8014414 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f040 812b 	bne.w	801443e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2200      	movs	r2, #0
 80141ec:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2201      	movs	r2, #1
 80141f4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80141f8:	e121      	b.n	801443e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80141fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fc:	68db      	ldr	r3, [r3, #12]
 80141fe:	899b      	ldrh	r3, [r3, #12]
 8014200:	b29b      	uxth	r3, r3
 8014202:	4618      	mov	r0, r3
 8014204:	f7fa fb42 	bl	800e88c <lwip_htons>
 8014208:	4603      	mov	r3, r0
 801420a:	f003 0304 	and.w	r3, r3, #4
 801420e:	2b00      	cmp	r3, #0
 8014210:	d006      	beq.n	8014220 <tcp_output+0x184>
 8014212:	4b42      	ldr	r3, [pc, #264]	; (801431c <tcp_output+0x280>)
 8014214:	f240 4246 	movw	r2, #1094	; 0x446
 8014218:	4944      	ldr	r1, [pc, #272]	; (801432c <tcp_output+0x290>)
 801421a:	4842      	ldr	r0, [pc, #264]	; (8014324 <tcp_output+0x288>)
 801421c:	f003 fb82 	bl	8017924 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014224:	2b00      	cmp	r3, #0
 8014226:	d01f      	beq.n	8014268 <tcp_output+0x1cc>
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	7e9b      	ldrb	r3, [r3, #26]
 801422c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014230:	2b00      	cmp	r3, #0
 8014232:	d119      	bne.n	8014268 <tcp_output+0x1cc>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014238:	2b00      	cmp	r3, #0
 801423a:	d00b      	beq.n	8014254 <tcp_output+0x1b8>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d110      	bne.n	8014268 <tcp_output+0x1cc>
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801424a:	891a      	ldrh	r2, [r3, #8]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014250:	429a      	cmp	r2, r3
 8014252:	d209      	bcs.n	8014268 <tcp_output+0x1cc>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801425a:	2b00      	cmp	r3, #0
 801425c:	d004      	beq.n	8014268 <tcp_output+0x1cc>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014264:	2b08      	cmp	r3, #8
 8014266:	d901      	bls.n	801426c <tcp_output+0x1d0>
 8014268:	2301      	movs	r3, #1
 801426a:	e000      	b.n	801426e <tcp_output+0x1d2>
 801426c:	2300      	movs	r3, #0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d106      	bne.n	8014280 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	7e9b      	ldrb	r3, [r3, #26]
 8014276:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801427a:	2b00      	cmp	r3, #0
 801427c:	f000 80e1 	beq.w	8014442 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	7d1b      	ldrb	r3, [r3, #20]
 8014284:	2b02      	cmp	r3, #2
 8014286:	d00d      	beq.n	80142a4 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	899b      	ldrh	r3, [r3, #12]
 801428e:	b29c      	uxth	r4, r3
 8014290:	2010      	movs	r0, #16
 8014292:	f7fa fafb 	bl	800e88c <lwip_htons>
 8014296:	4603      	mov	r3, r0
 8014298:	461a      	mov	r2, r3
 801429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429c:	68db      	ldr	r3, [r3, #12]
 801429e:	4322      	orrs	r2, r4
 80142a0:	b292      	uxth	r2, r2
 80142a2:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80142a4:	697a      	ldr	r2, [r7, #20]
 80142a6:	6879      	ldr	r1, [r7, #4]
 80142a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142aa:	f000 f8e1 	bl	8014470 <tcp_output_segment>
 80142ae:	4603      	mov	r3, r0
 80142b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80142b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d009      	beq.n	80142ce <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	7e9b      	ldrb	r3, [r3, #26]
 80142be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80142c2:	b2da      	uxtb	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	769a      	strb	r2, [r3, #26]
      return err;
 80142c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142cc:	e0cc      	b.n	8014468 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80142ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	7d1b      	ldrb	r3, [r3, #20]
 80142da:	2b02      	cmp	r3, #2
 80142dc:	d006      	beq.n	80142ec <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	7e9b      	ldrb	r3, [r3, #26]
 80142e2:	f023 0303 	bic.w	r3, r3, #3
 80142e6:	b2da      	uxtb	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80142ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ee:	68db      	ldr	r3, [r3, #12]
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fa fad8 	bl	800e8a8 <lwip_htonl>
 80142f8:	4604      	mov	r4, r0
 80142fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fc:	891b      	ldrh	r3, [r3, #8]
 80142fe:	461d      	mov	r5, r3
 8014300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	899b      	ldrh	r3, [r3, #12]
 8014306:	b29b      	uxth	r3, r3
 8014308:	4618      	mov	r0, r3
 801430a:	f7fa fabf 	bl	800e88c <lwip_htons>
 801430e:	4603      	mov	r3, r0
 8014310:	f003 0303 	and.w	r3, r3, #3
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00b      	beq.n	8014330 <tcp_output+0x294>
 8014318:	2301      	movs	r3, #1
 801431a:	e00a      	b.n	8014332 <tcp_output+0x296>
 801431c:	08019be4 	.word	0x08019be4
 8014320:	08019fe8 	.word	0x08019fe8
 8014324:	08019c48 	.word	0x08019c48
 8014328:	2400da34 	.word	0x2400da34
 801432c:	0801a010 	.word	0x0801a010
 8014330:	2300      	movs	r3, #0
 8014332:	442b      	add	r3, r5
 8014334:	4423      	add	r3, r4
 8014336:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	1ad3      	subs	r3, r2, r3
 8014340:	2b00      	cmp	r3, #0
 8014342:	da02      	bge.n	801434a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	68ba      	ldr	r2, [r7, #8]
 8014348:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434c:	891b      	ldrh	r3, [r3, #8]
 801434e:	461c      	mov	r4, r3
 8014350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	899b      	ldrh	r3, [r3, #12]
 8014356:	b29b      	uxth	r3, r3
 8014358:	4618      	mov	r0, r3
 801435a:	f7fa fa97 	bl	800e88c <lwip_htons>
 801435e:	4603      	mov	r3, r0
 8014360:	f003 0303 	and.w	r3, r3, #3
 8014364:	2b00      	cmp	r3, #0
 8014366:	d001      	beq.n	801436c <tcp_output+0x2d0>
 8014368:	2301      	movs	r3, #1
 801436a:	e000      	b.n	801436e <tcp_output+0x2d2>
 801436c:	2300      	movs	r3, #0
 801436e:	4423      	add	r3, r4
 8014370:	2b00      	cmp	r3, #0
 8014372:	d049      	beq.n	8014408 <tcp_output+0x36c>
      seg->next = NULL;
 8014374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014376:	2200      	movs	r2, #0
 8014378:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801437e:	2b00      	cmp	r3, #0
 8014380:	d105      	bne.n	801438e <tcp_output+0x2f2>
        pcb->unacked = seg;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014386:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8014388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438a:	623b      	str	r3, [r7, #32]
 801438c:	e03f      	b.n	801440e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014390:	68db      	ldr	r3, [r3, #12]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	4618      	mov	r0, r3
 8014396:	f7fa fa87 	bl	800e8a8 <lwip_htonl>
 801439a:	4604      	mov	r4, r0
 801439c:	6a3b      	ldr	r3, [r7, #32]
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7fa fa80 	bl	800e8a8 <lwip_htonl>
 80143a8:	4603      	mov	r3, r0
 80143aa:	1ae3      	subs	r3, r4, r3
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	da24      	bge.n	80143fa <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	336c      	adds	r3, #108	; 0x6c
 80143b4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80143b6:	e002      	b.n	80143be <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80143be:	69fb      	ldr	r3, [r7, #28]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d011      	beq.n	80143ea <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	685b      	ldr	r3, [r3, #4]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7fa fa6a 	bl	800e8a8 <lwip_htonl>
 80143d4:	4604      	mov	r4, r0
 80143d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d8:	68db      	ldr	r3, [r3, #12]
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	4618      	mov	r0, r3
 80143de:	f7fa fa63 	bl	800e8a8 <lwip_htonl>
 80143e2:	4603      	mov	r3, r0
 80143e4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	dbe6      	blt.n	80143b8 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80143ea:	69fb      	ldr	r3, [r7, #28]
 80143ec:	681a      	ldr	r2, [r3, #0]
 80143ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80143f2:	69fb      	ldr	r3, [r7, #28]
 80143f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143f6:	601a      	str	r2, [r3, #0]
 80143f8:	e009      	b.n	801440e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80143fa:	6a3b      	ldr	r3, [r7, #32]
 80143fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143fe:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014400:	6a3b      	ldr	r3, [r7, #32]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	623b      	str	r3, [r7, #32]
 8014406:	e002      	b.n	801440e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801440a:	f7fc fea2 	bl	8011152 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014412:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014416:	2b00      	cmp	r3, #0
 8014418:	d015      	beq.n	8014446 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	4618      	mov	r0, r3
 8014422:	f7fa fa41 	bl	800e8a8 <lwip_htonl>
 8014426:	4602      	mov	r2, r0
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801442c:	1ad3      	subs	r3, r2, r3
 801442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014430:	8912      	ldrh	r2, [r2, #8]
 8014432:	4413      	add	r3, r2
  while (seg != NULL &&
 8014434:	69ba      	ldr	r2, [r7, #24]
 8014436:	429a      	cmp	r2, r3
 8014438:	f4bf aedf 	bcs.w	80141fa <tcp_output+0x15e>
  }
output_done:
 801443c:	e003      	b.n	8014446 <tcp_output+0x3aa>
    goto output_done;
 801443e:	bf00      	nop
 8014440:	e002      	b.n	8014448 <tcp_output+0x3ac>
      break;
 8014442:	bf00      	nop
 8014444:	e000      	b.n	8014448 <tcp_output+0x3ac>
output_done:
 8014446:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801444c:	2b00      	cmp	r3, #0
 801444e:	d103      	bne.n	8014458 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	7e9b      	ldrb	r3, [r3, #26]
 801445c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014460:	b2da      	uxtb	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8014466:	2300      	movs	r3, #0
}
 8014468:	4618      	mov	r0, r3
 801446a:	3728      	adds	r7, #40	; 0x28
 801446c:	46bd      	mov	sp, r7
 801446e:	bdb0      	pop	{r4, r5, r7, pc}

08014470 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014470:	b5b0      	push	{r4, r5, r7, lr}
 8014472:	b08c      	sub	sp, #48	; 0x30
 8014474:	af04      	add	r7, sp, #16
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	60b9      	str	r1, [r7, #8]
 801447a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	89db      	ldrh	r3, [r3, #14]
 8014482:	2b01      	cmp	r3, #1
 8014484:	d001      	beq.n	801448a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8014486:	2300      	movs	r3, #0
 8014488:	e08b      	b.n	80145a2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	68dc      	ldr	r4, [r3, #12]
 8014492:	4610      	mov	r0, r2
 8014494:	f7fa fa08 	bl	800e8a8 <lwip_htonl>
 8014498:	4603      	mov	r3, r0
 801449a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	68dc      	ldr	r4, [r3, #12]
 80144a4:	4610      	mov	r0, r2
 80144a6:	f7fa f9f1 	bl	800e88c <lwip_htons>
 80144aa:	4603      	mov	r3, r0
 80144ac:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b2:	68ba      	ldr	r2, [r7, #8]
 80144b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80144b6:	441a      	add	r2, r3
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	3314      	adds	r3, #20
 80144c2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	7a9b      	ldrb	r3, [r3, #10]
 80144c8:	f003 0301 	and.w	r3, r3, #1
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d014      	beq.n	80144fa <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	3304      	adds	r3, #4
 80144d4:	4619      	mov	r1, r3
 80144d6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80144da:	f7fd f8a5 	bl	8011628 <tcp_eff_send_mss_impl>
 80144de:	4603      	mov	r3, r0
 80144e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80144e2:	8b7b      	ldrh	r3, [r7, #26]
 80144e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fa f9dd 	bl	800e8a8 <lwip_htonl>
 80144ee:	4602      	mov	r2, r0
 80144f0:	69fb      	ldr	r3, [r7, #28]
 80144f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	3304      	adds	r3, #4
 80144f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014500:	2b00      	cmp	r3, #0
 8014502:	da02      	bge.n	801450a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	2200      	movs	r2, #0
 8014508:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801450e:	2b00      	cmp	r3, #0
 8014510:	d10c      	bne.n	801452c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8014512:	4b26      	ldr	r3, [pc, #152]	; (80145ac <tcp_output_segment+0x13c>)
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	68db      	ldr	r3, [r3, #12]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	4618      	mov	r0, r3
 8014522:	f7fa f9c1 	bl	800e8a8 <lwip_htonl>
 8014526:	4602      	mov	r2, r0
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	68db      	ldr	r3, [r3, #12]
 8014530:	461a      	mov	r2, r3
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	1ad3      	subs	r3, r2, r3
 801453a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	8959      	ldrh	r1, [r3, #10]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	8b3a      	ldrh	r2, [r7, #24]
 8014548:	1a8a      	subs	r2, r1, r2
 801454a:	b292      	uxth	r2, r2
 801454c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	8919      	ldrh	r1, [r3, #8]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	8b3a      	ldrh	r2, [r7, #24]
 801455a:	1a8a      	subs	r2, r1, r2
 801455c:	b292      	uxth	r2, r2
 801455e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	68fa      	ldr	r2, [r7, #12]
 8014566:	68d2      	ldr	r2, [r2, #12]
 8014568:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	2200      	movs	r2, #0
 8014570:	741a      	strb	r2, [r3, #16]
 8014572:	2200      	movs	r2, #0
 8014574:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	6858      	ldr	r0, [r3, #4]
 801457a:	68b9      	ldr	r1, [r7, #8]
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	1d1c      	adds	r4, r3, #4
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	7a9d      	ldrb	r5, [r3, #10]
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	7a5b      	ldrb	r3, [r3, #9]
 8014588:	687a      	ldr	r2, [r7, #4]
 801458a:	9202      	str	r2, [sp, #8]
 801458c:	2206      	movs	r2, #6
 801458e:	9201      	str	r2, [sp, #4]
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	462b      	mov	r3, r5
 8014594:	4622      	mov	r2, r4
 8014596:	f002 f897 	bl	80166c8 <ip4_output_if>
 801459a:	4603      	mov	r3, r0
 801459c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801459e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3720      	adds	r7, #32
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bdb0      	pop	{r4, r5, r7, pc}
 80145aa:	bf00      	nop
 80145ac:	2400da24 	.word	0x2400da24

080145b0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b08c      	sub	sp, #48	; 0x30
 80145b4:	af04      	add	r7, sp, #16
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	607a      	str	r2, [r7, #4]
 80145bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80145be:	2200      	movs	r2, #0
 80145c0:	2114      	movs	r1, #20
 80145c2:	2001      	movs	r0, #1
 80145c4:	f7fb f900 	bl	800f7c8 <pbuf_alloc>
 80145c8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d05b      	beq.n	8014688 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	895b      	ldrh	r3, [r3, #10]
 80145d4:	2b13      	cmp	r3, #19
 80145d6:	d806      	bhi.n	80145e6 <tcp_rst+0x36>
 80145d8:	4b2d      	ldr	r3, [pc, #180]	; (8014690 <tcp_rst+0xe0>)
 80145da:	f240 524d 	movw	r2, #1357	; 0x54d
 80145de:	492d      	ldr	r1, [pc, #180]	; (8014694 <tcp_rst+0xe4>)
 80145e0:	482d      	ldr	r0, [pc, #180]	; (8014698 <tcp_rst+0xe8>)
 80145e2:	f003 f99f 	bl	8017924 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80145ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fa f94c 	bl	800e88c <lwip_htons>
 80145f4:	4603      	mov	r3, r0
 80145f6:	461a      	mov	r2, r3
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80145fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80145fe:	4618      	mov	r0, r3
 8014600:	f7fa f944 	bl	800e88c <lwip_htons>
 8014604:	4603      	mov	r3, r0
 8014606:	461a      	mov	r2, r3
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801460c:	68f8      	ldr	r0, [r7, #12]
 801460e:	f7fa f94b 	bl	800e8a8 <lwip_htonl>
 8014612:	4602      	mov	r2, r0
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8014618:	68b8      	ldr	r0, [r7, #8]
 801461a:	f7fa f945 	bl	800e8a8 <lwip_htonl>
 801461e:	4602      	mov	r2, r0
 8014620:	69bb      	ldr	r3, [r7, #24]
 8014622:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8014624:	f245 0014 	movw	r0, #20500	; 0x5014
 8014628:	f7fa f930 	bl	800e88c <lwip_htons>
 801462c:	4603      	mov	r3, r0
 801462e:	461a      	mov	r2, r3
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8014634:	69bb      	ldr	r3, [r7, #24]
 8014636:	2200      	movs	r2, #0
 8014638:	f042 0208 	orr.w	r2, r2, #8
 801463c:	739a      	strb	r2, [r3, #14]
 801463e:	2200      	movs	r2, #0
 8014640:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8014644:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	2200      	movs	r2, #0
 801464a:	741a      	strb	r2, [r3, #16]
 801464c:	2200      	movs	r2, #0
 801464e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	2200      	movs	r2, #0
 8014654:	749a      	strb	r2, [r3, #18]
 8014656:	2200      	movs	r2, #0
 8014658:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801465a:	6838      	ldr	r0, [r7, #0]
 801465c:	f001 fe7c 	bl	8016358 <ip4_route>
 8014660:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d00b      	beq.n	8014680 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	9302      	str	r3, [sp, #8]
 801466c:	2306      	movs	r3, #6
 801466e:	9301      	str	r3, [sp, #4]
 8014670:	2300      	movs	r3, #0
 8014672:	9300      	str	r3, [sp, #0]
 8014674:	23ff      	movs	r3, #255	; 0xff
 8014676:	683a      	ldr	r2, [r7, #0]
 8014678:	6879      	ldr	r1, [r7, #4]
 801467a:	69f8      	ldr	r0, [r7, #28]
 801467c:	f002 f824 	bl	80166c8 <ip4_output_if>
  }
  pbuf_free(p);
 8014680:	69f8      	ldr	r0, [r7, #28]
 8014682:	f7fb fc13 	bl	800feac <pbuf_free>
 8014686:	e000      	b.n	801468a <tcp_rst+0xda>
    return;
 8014688:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801468a:	3720      	adds	r7, #32
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	08019be4 	.word	0x08019be4
 8014694:	08019c18 	.word	0x08019c18
 8014698:	08019c48 	.word	0x08019c48

0801469c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d029      	beq.n	8014700 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146b0:	60fb      	str	r3, [r7, #12]
 80146b2:	e002      	b.n	80146ba <tcp_rexmit_rto+0x1e>
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	60fb      	str	r3, [r7, #12]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d1f8      	bne.n	80146b4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2200      	movs	r2, #0
 80146d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146de:	2bff      	cmp	r3, #255	; 0xff
 80146e0:	d007      	beq.n	80146f2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146e8:	3301      	adds	r3, #1
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	2200      	movs	r2, #0
 80146f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7ff fccf 	bl	801409c <tcp_output>
 80146fe:	e000      	b.n	8014702 <tcp_rexmit_rto+0x66>
    return;
 8014700:	bf00      	nop
}
 8014702:	3710      	adds	r7, #16
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014708:	b590      	push	{r4, r7, lr}
 801470a:	b085      	sub	sp, #20
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014714:	2b00      	cmp	r3, #0
 8014716:	d043      	beq.n	80147a0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801471c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	681a      	ldr	r2, [r3, #0]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	3368      	adds	r3, #104	; 0x68
 801472a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801472c:	e002      	b.n	8014734 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d011      	beq.n	8014760 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	685b      	ldr	r3, [r3, #4]
 8014744:	4618      	mov	r0, r3
 8014746:	f7fa f8af 	bl	800e8a8 <lwip_htonl>
 801474a:	4604      	mov	r4, r0
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	68db      	ldr	r3, [r3, #12]
 8014750:	685b      	ldr	r3, [r3, #4]
 8014752:	4618      	mov	r0, r3
 8014754:	f7fa f8a8 	bl	800e8a8 <lwip_htonl>
 8014758:	4603      	mov	r3, r0
 801475a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801475c:	2b00      	cmp	r3, #0
 801475e:	dbe6      	blt.n	801472e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681a      	ldr	r2, [r3, #0]
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d103      	bne.n	801477e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2200      	movs	r2, #0
 801477a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014784:	2bff      	cmp	r3, #255	; 0xff
 8014786:	d007      	beq.n	8014798 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801478e:	3301      	adds	r3, #1
 8014790:	b2da      	uxtb	r2, r3
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2200      	movs	r2, #0
 801479c:	635a      	str	r2, [r3, #52]	; 0x34
 801479e:	e000      	b.n	80147a2 <tcp_rexmit+0x9a>
    return;
 80147a0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80147a2:	3714      	adds	r7, #20
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd90      	pop	{r4, r7, pc}

080147a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d04c      	beq.n	8014852 <tcp_rexmit_fast+0xaa>
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	7e9b      	ldrb	r3, [r3, #26]
 80147bc:	f003 0304 	and.w	r3, r3, #4
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d146      	bne.n	8014852 <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f7ff ff9f 	bl	8014708 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d208      	bcs.n	80147ec <tcp_rexmit_fast+0x44>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	da00      	bge.n	80147e6 <tcp_rexmit_fast+0x3e>
 80147e4:	3301      	adds	r3, #1
 80147e6:	105b      	asrs	r3, r3, #1
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	e007      	b.n	80147fc <tcp_rexmit_fast+0x54>
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	da00      	bge.n	80147f8 <tcp_rexmit_fast+0x50>
 80147f6:	3301      	adds	r3, #1
 80147f8:	105b      	asrs	r3, r3, #1
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014808:	461a      	mov	r2, r3
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801480e:	005b      	lsls	r3, r3, #1
 8014810:	429a      	cmp	r2, r3
 8014812:	d206      	bcs.n	8014822 <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	b29a      	uxth	r2, r3
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801482c:	4619      	mov	r1, r3
 801482e:	0049      	lsls	r1, r1, #1
 8014830:	440b      	add	r3, r1
 8014832:	b29b      	uxth	r3, r3
 8014834:	4413      	add	r3, r2
 8014836:	b29a      	uxth	r2, r3
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	7e9b      	ldrb	r3, [r3, #26]
 8014842:	f043 0304 	orr.w	r3, r3, #4
 8014846:	b2da      	uxtb	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2200      	movs	r2, #0
 8014850:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8014852:	bf00      	nop
 8014854:	3708      	adds	r7, #8
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801485a:	b580      	push	{r7, lr}
 801485c:	b08a      	sub	sp, #40	; 0x28
 801485e:	af04      	add	r7, sp, #16
 8014860:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014866:	3b01      	subs	r3, #1
 8014868:	4618      	mov	r0, r3
 801486a:	f7fa f81d 	bl	800e8a8 <lwip_htonl>
 801486e:	4603      	mov	r3, r0
 8014870:	2200      	movs	r2, #0
 8014872:	2100      	movs	r1, #0
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f7ff f975 	bl	8013b64 <tcp_output_alloc_header>
 801487a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d102      	bne.n	8014888 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014882:	f04f 33ff 	mov.w	r3, #4294967295
 8014886:	e021      	b.n	80148cc <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	3304      	adds	r3, #4
 801488c:	4618      	mov	r0, r3
 801488e:	f001 fd63 	bl	8016358 <ip4_route>
 8014892:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d102      	bne.n	80148a0 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801489a:	23fc      	movs	r3, #252	; 0xfc
 801489c:	75fb      	strb	r3, [r7, #23]
 801489e:	e010      	b.n	80148c2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	1d1a      	adds	r2, r3, #4
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	7a98      	ldrb	r0, [r3, #10]
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	9302      	str	r3, [sp, #8]
 80148ae:	2306      	movs	r3, #6
 80148b0:	9301      	str	r3, [sp, #4]
 80148b2:	2300      	movs	r3, #0
 80148b4:	9300      	str	r3, [sp, #0]
 80148b6:	4603      	mov	r3, r0
 80148b8:	6938      	ldr	r0, [r7, #16]
 80148ba:	f001 ff05 	bl	80166c8 <ip4_output_if>
 80148be:	4603      	mov	r3, r0
 80148c0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80148c2:	6938      	ldr	r0, [r7, #16]
 80148c4:	f7fb faf2 	bl	800feac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80148c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	3718      	adds	r7, #24
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80148d4:	b590      	push	{r4, r7, lr}
 80148d6:	b08f      	sub	sp, #60	; 0x3c
 80148d8:	af04      	add	r7, sp, #16
 80148da:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148e0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80148e2:	6a3b      	ldr	r3, [r7, #32]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d102      	bne.n	80148ee <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80148ec:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80148ee:	6a3b      	ldr	r3, [r7, #32]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d101      	bne.n	80148f8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80148f4:	2300      	movs	r3, #0
 80148f6:	e085      	b.n	8014a04 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80148f8:	6a3b      	ldr	r3, [r7, #32]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	899b      	ldrh	r3, [r3, #12]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	4618      	mov	r0, r3
 8014902:	f7f9 ffc3 	bl	800e88c <lwip_htons>
 8014906:	4603      	mov	r3, r0
 8014908:	f003 0301 	and.w	r3, r3, #1
 801490c:	2b00      	cmp	r3, #0
 801490e:	d005      	beq.n	801491c <tcp_zero_window_probe+0x48>
 8014910:	6a3b      	ldr	r3, [r7, #32]
 8014912:	891b      	ldrh	r3, [r3, #8]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d101      	bne.n	801491c <tcp_zero_window_probe+0x48>
 8014918:	2301      	movs	r3, #1
 801491a:	e000      	b.n	801491e <tcp_zero_window_probe+0x4a>
 801491c:	2300      	movs	r3, #0
 801491e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014920:	7ffb      	ldrb	r3, [r7, #31]
 8014922:	2b00      	cmp	r3, #0
 8014924:	bf0c      	ite	eq
 8014926:	2301      	moveq	r3, #1
 8014928:	2300      	movne	r3, #0
 801492a:	b2db      	uxtb	r3, r3
 801492c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801492e:	6a3b      	ldr	r3, [r7, #32]
 8014930:	68db      	ldr	r3, [r3, #12]
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	8bba      	ldrh	r2, [r7, #28]
 8014936:	2100      	movs	r1, #0
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7ff f913 	bl	8013b64 <tcp_output_alloc_header>
 801493e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014940:	69bb      	ldr	r3, [r7, #24]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d102      	bne.n	801494c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014946:	f04f 33ff 	mov.w	r3, #4294967295
 801494a:	e05b      	b.n	8014a04 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	685b      	ldr	r3, [r3, #4]
 8014950:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014952:	7ffb      	ldrb	r3, [r7, #31]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d00e      	beq.n	8014976 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	899b      	ldrh	r3, [r3, #12]
 801495c:	b29b      	uxth	r3, r3
 801495e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014962:	b29c      	uxth	r4, r3
 8014964:	2011      	movs	r0, #17
 8014966:	f7f9 ff91 	bl	800e88c <lwip_htons>
 801496a:	4603      	mov	r3, r0
 801496c:	4323      	orrs	r3, r4
 801496e:	b29a      	uxth	r2, r3
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	819a      	strh	r2, [r3, #12]
 8014974:	e010      	b.n	8014998 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	3314      	adds	r3, #20
 801497c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801497e:	6a3b      	ldr	r3, [r7, #32]
 8014980:	6858      	ldr	r0, [r3, #4]
 8014982:	6a3b      	ldr	r3, [r7, #32]
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	891a      	ldrh	r2, [r3, #8]
 8014988:	6a3b      	ldr	r3, [r7, #32]
 801498a:	891b      	ldrh	r3, [r3, #8]
 801498c:	1ad3      	subs	r3, r2, r3
 801498e:	b29b      	uxth	r3, r3
 8014990:	2201      	movs	r2, #1
 8014992:	6939      	ldr	r1, [r7, #16]
 8014994:	f7fb fc86 	bl	80102a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	4618      	mov	r0, r3
 80149a0:	f7f9 ff82 	bl	800e8a8 <lwip_htonl>
 80149a4:	4603      	mov	r3, r0
 80149a6:	3301      	adds	r3, #1
 80149a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	1ad3      	subs	r3, r2, r3
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	da02      	bge.n	80149bc <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	68fa      	ldr	r2, [r7, #12]
 80149ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	3304      	adds	r3, #4
 80149c0:	4618      	mov	r0, r3
 80149c2:	f001 fcc9 	bl	8016358 <ip4_route>
 80149c6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d103      	bne.n	80149d6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80149ce:	23fc      	movs	r3, #252	; 0xfc
 80149d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80149d4:	e011      	b.n	80149fa <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80149d6:	6879      	ldr	r1, [r7, #4]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	1d1a      	adds	r2, r3, #4
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	7a98      	ldrb	r0, [r3, #10]
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	9302      	str	r3, [sp, #8]
 80149e4:	2306      	movs	r3, #6
 80149e6:	9301      	str	r3, [sp, #4]
 80149e8:	2300      	movs	r3, #0
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	4603      	mov	r3, r0
 80149ee:	69b8      	ldr	r0, [r7, #24]
 80149f0:	f001 fe6a 	bl	80166c8 <ip4_output_if>
 80149f4:	4603      	mov	r3, r0
 80149f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80149fa:	69b8      	ldr	r0, [r7, #24]
 80149fc:	f7fb fa56 	bl	800feac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	372c      	adds	r7, #44	; 0x2c
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd90      	pop	{r4, r7, pc}

08014a0c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014a14:	f7fb fcc8 	bl	80103a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014a18:	4b0a      	ldr	r3, [pc, #40]	; (8014a44 <tcpip_tcp_timer+0x38>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d103      	bne.n	8014a28 <tcpip_tcp_timer+0x1c>
 8014a20:	4b09      	ldr	r3, [pc, #36]	; (8014a48 <tcpip_tcp_timer+0x3c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d005      	beq.n	8014a34 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a28:	2200      	movs	r2, #0
 8014a2a:	4908      	ldr	r1, [pc, #32]	; (8014a4c <tcpip_tcp_timer+0x40>)
 8014a2c:	20fa      	movs	r0, #250	; 0xfa
 8014a2e:	f000 f86f 	bl	8014b10 <sys_timeout>
 8014a32:	e002      	b.n	8014a3a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014a34:	4b06      	ldr	r3, [pc, #24]	; (8014a50 <tcpip_tcp_timer+0x44>)
 8014a36:	2200      	movs	r2, #0
 8014a38:	601a      	str	r2, [r3, #0]
  }
}
 8014a3a:	bf00      	nop
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	2400da20 	.word	0x2400da20
 8014a48:	2400da30 	.word	0x2400da30
 8014a4c:	08014a0d 	.word	0x08014a0d
 8014a50:	2400a43c 	.word	0x2400a43c

08014a54 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014a58:	4b0a      	ldr	r3, [pc, #40]	; (8014a84 <tcp_timer_needed+0x30>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d10f      	bne.n	8014a80 <tcp_timer_needed+0x2c>
 8014a60:	4b09      	ldr	r3, [pc, #36]	; (8014a88 <tcp_timer_needed+0x34>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d103      	bne.n	8014a70 <tcp_timer_needed+0x1c>
 8014a68:	4b08      	ldr	r3, [pc, #32]	; (8014a8c <tcp_timer_needed+0x38>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d007      	beq.n	8014a80 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014a70:	4b04      	ldr	r3, [pc, #16]	; (8014a84 <tcp_timer_needed+0x30>)
 8014a72:	2201      	movs	r2, #1
 8014a74:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a76:	2200      	movs	r2, #0
 8014a78:	4905      	ldr	r1, [pc, #20]	; (8014a90 <tcp_timer_needed+0x3c>)
 8014a7a:	20fa      	movs	r0, #250	; 0xfa
 8014a7c:	f000 f848 	bl	8014b10 <sys_timeout>
  }
}
 8014a80:	bf00      	nop
 8014a82:	bd80      	pop	{r7, pc}
 8014a84:	2400a43c 	.word	0x2400a43c
 8014a88:	2400da20 	.word	0x2400da20
 8014a8c:	2400da30 	.word	0x2400da30
 8014a90:	08014a0d 	.word	0x08014a0d

08014a94 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b084      	sub	sp, #16
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	4903      	ldr	r1, [pc, #12]	; (8014abc <cyclic_timer+0x28>)
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f000 f82e 	bl	8014b10 <sys_timeout>
}
 8014ab4:	bf00      	nop
 8014ab6:	3710      	adds	r7, #16
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	08014a95 	.word	0x08014a95

08014ac0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	607b      	str	r3, [r7, #4]
 8014aca:	e00e      	b.n	8014aea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8014acc:	4a0d      	ldr	r2, [pc, #52]	; (8014b04 <sys_timeouts_init+0x44>)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	00db      	lsls	r3, r3, #3
 8014ad8:	4a0a      	ldr	r2, [pc, #40]	; (8014b04 <sys_timeouts_init+0x44>)
 8014ada:	4413      	add	r3, r2
 8014adc:	461a      	mov	r2, r3
 8014ade:	490a      	ldr	r1, [pc, #40]	; (8014b08 <sys_timeouts_init+0x48>)
 8014ae0:	f000 f816 	bl	8014b10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	607b      	str	r3, [r7, #4]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2b02      	cmp	r3, #2
 8014aee:	d9ed      	bls.n	8014acc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8014af0:	f7f6 f92a 	bl	800ad48 <sys_now>
 8014af4:	4602      	mov	r2, r0
 8014af6:	4b05      	ldr	r3, [pc, #20]	; (8014b0c <sys_timeouts_init+0x4c>)
 8014af8:	601a      	str	r2, [r3, #0]
}
 8014afa:	bf00      	nop
 8014afc:	3708      	adds	r7, #8
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}
 8014b02:	bf00      	nop
 8014b04:	0801a920 	.word	0x0801a920
 8014b08:	08014a95 	.word	0x08014a95
 8014b0c:	2400a438 	.word	0x2400a438

08014b10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b088      	sub	sp, #32
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014b1c:	200b      	movs	r0, #11
 8014b1e:	f7fa fb7b 	bl	800f218 <memp_malloc>
 8014b22:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d10a      	bne.n	8014b40 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f040 8084 	bne.w	8014c3a <sys_timeout+0x12a>
 8014b32:	4b44      	ldr	r3, [pc, #272]	; (8014c44 <sys_timeout+0x134>)
 8014b34:	22d4      	movs	r2, #212	; 0xd4
 8014b36:	4944      	ldr	r1, [pc, #272]	; (8014c48 <sys_timeout+0x138>)
 8014b38:	4844      	ldr	r0, [pc, #272]	; (8014c4c <sys_timeout+0x13c>)
 8014b3a:	f002 fef3 	bl	8017924 <iprintf>
    return;
 8014b3e:	e07c      	b.n	8014c3a <sys_timeout+0x12a>
  }

  now = sys_now();
 8014b40:	f7f6 f902 	bl	800ad48 <sys_now>
 8014b44:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8014b46:	4b42      	ldr	r3, [pc, #264]	; (8014c50 <sys_timeout+0x140>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d105      	bne.n	8014b5a <sys_timeout+0x4a>
    diff = 0;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8014b52:	4a40      	ldr	r2, [pc, #256]	; (8014c54 <sys_timeout+0x144>)
 8014b54:	693b      	ldr	r3, [r7, #16]
 8014b56:	6013      	str	r3, [r2, #0]
 8014b58:	e004      	b.n	8014b64 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8014b5a:	4b3e      	ldr	r3, [pc, #248]	; (8014c54 <sys_timeout+0x144>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	693a      	ldr	r2, [r7, #16]
 8014b60:	1ad3      	subs	r3, r2, r3
 8014b62:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	2200      	movs	r2, #0
 8014b68:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	68ba      	ldr	r2, [r7, #8]
 8014b6e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8014b76:	68fa      	ldr	r2, [r7, #12]
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	441a      	add	r2, r3
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014b80:	4b33      	ldr	r3, [pc, #204]	; (8014c50 <sys_timeout+0x140>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d103      	bne.n	8014b90 <sys_timeout+0x80>
    next_timeout = timeout;
 8014b88:	4a31      	ldr	r2, [pc, #196]	; (8014c50 <sys_timeout+0x140>)
 8014b8a:	697b      	ldr	r3, [r7, #20]
 8014b8c:	6013      	str	r3, [r2, #0]
    return;
 8014b8e:	e055      	b.n	8014c3c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8014b90:	4b2f      	ldr	r3, [pc, #188]	; (8014c50 <sys_timeout+0x140>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	68fa      	ldr	r2, [r7, #12]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d20f      	bcs.n	8014bbc <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8014b9c:	4b2c      	ldr	r3, [pc, #176]	; (8014c50 <sys_timeout+0x140>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	6859      	ldr	r1, [r3, #4]
 8014ba2:	4b2b      	ldr	r3, [pc, #172]	; (8014c50 <sys_timeout+0x140>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	68fa      	ldr	r2, [r7, #12]
 8014ba8:	1a8a      	subs	r2, r1, r2
 8014baa:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8014bac:	4b28      	ldr	r3, [pc, #160]	; (8014c50 <sys_timeout+0x140>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014bb4:	4a26      	ldr	r2, [pc, #152]	; (8014c50 <sys_timeout+0x140>)
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	e03f      	b.n	8014c3c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014bbc:	4b24      	ldr	r3, [pc, #144]	; (8014c50 <sys_timeout+0x140>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	61fb      	str	r3, [r7, #28]
 8014bc2:	e036      	b.n	8014c32 <sys_timeout+0x122>
      timeout->time -= t->time;
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	685a      	ldr	r2, [r3, #4]
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	1ad2      	subs	r2, r2, r3
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8014bd2:	69fb      	ldr	r3, [r7, #28]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d006      	beq.n	8014be8 <sys_timeout+0xd8>
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	685a      	ldr	r2, [r3, #4]
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d921      	bls.n	8014c2c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d009      	beq.n	8014c04 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8014bf0:	69fb      	ldr	r3, [r7, #28]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	6859      	ldr	r1, [r3, #4]
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	685a      	ldr	r2, [r3, #4]
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	1a8a      	subs	r2, r1, r2
 8014c00:	605a      	str	r2, [r3, #4]
 8014c02:	e00b      	b.n	8014c1c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	685b      	ldr	r3, [r3, #4]
 8014c08:	68fa      	ldr	r2, [r7, #12]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d206      	bcs.n	8014c1c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8014c0e:	4b10      	ldr	r3, [pc, #64]	; (8014c50 <sys_timeout+0x140>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	685a      	ldr	r2, [r3, #4]
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	441a      	add	r2, r3
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	697a      	ldr	r2, [r7, #20]
 8014c28:	601a      	str	r2, [r3, #0]
        break;
 8014c2a:	e007      	b.n	8014c3c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	61fb      	str	r3, [r7, #28]
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d1c5      	bne.n	8014bc4 <sys_timeout+0xb4>
 8014c38:	e000      	b.n	8014c3c <sys_timeout+0x12c>
    return;
 8014c3a:	bf00      	nop
      }
    }
  }
}
 8014c3c:	3720      	adds	r7, #32
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	0801a028 	.word	0x0801a028
 8014c48:	0801a05c 	.word	0x0801a05c
 8014c4c:	0801a09c 	.word	0x0801a09c
 8014c50:	2400a434 	.word	0x2400a434
 8014c54:	2400a438 	.word	0x2400a438

08014c58 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8014c5e:	4b24      	ldr	r3, [pc, #144]	; (8014cf0 <sys_check_timeouts+0x98>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d03f      	beq.n	8014ce6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8014c66:	f7f6 f86f 	bl	800ad48 <sys_now>
 8014c6a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8014c6c:	4b21      	ldr	r3, [pc, #132]	; (8014cf4 <sys_check_timeouts+0x9c>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	1ad3      	subs	r3, r2, r3
 8014c74:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8014c76:	2300      	movs	r3, #0
 8014c78:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8014c7a:	4b1d      	ldr	r3, [pc, #116]	; (8014cf0 <sys_check_timeouts+0x98>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d02c      	beq.n	8014ce0 <sys_check_timeouts+0x88>
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	697a      	ldr	r2, [r7, #20]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d327      	bcc.n	8014ce0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8014c90:	2301      	movs	r3, #1
 8014c92:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	685a      	ldr	r2, [r3, #4]
 8014c98:	4b16      	ldr	r3, [pc, #88]	; (8014cf4 <sys_check_timeouts+0x9c>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	4413      	add	r3, r2
 8014c9e:	4a15      	ldr	r2, [pc, #84]	; (8014cf4 <sys_check_timeouts+0x9c>)
 8014ca0:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	697a      	ldr	r2, [r7, #20]
 8014ca8:	1ad3      	subs	r3, r2, r3
 8014caa:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a0f      	ldr	r2, [pc, #60]	; (8014cf0 <sys_check_timeouts+0x98>)
 8014cb2:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	689b      	ldr	r3, [r3, #8]
 8014cb8:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014cc0:	68b9      	ldr	r1, [r7, #8]
 8014cc2:	200b      	movs	r0, #11
 8014cc4:	f7fa fb1e 	bl	800f304 <memp_free>
        if (handler != NULL) {
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d008      	beq.n	8014ce0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8014cce:	480a      	ldr	r0, [pc, #40]	; (8014cf8 <sys_check_timeouts+0xa0>)
 8014cd0:	f002 fd82 	bl	80177d8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6838      	ldr	r0, [r7, #0]
 8014cd8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8014cda:	4807      	ldr	r0, [pc, #28]	; (8014cf8 <sys_check_timeouts+0xa0>)
 8014cdc:	f002 fd8b 	bl	80177f6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8014ce0:	7cfb      	ldrb	r3, [r7, #19]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d1c7      	bne.n	8014c76 <sys_check_timeouts+0x1e>
  }
}
 8014ce6:	bf00      	nop
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	2400a434 	.word	0x2400a434
 8014cf4:	2400a438 	.word	0x2400a438
 8014cf8:	2400a84c 	.word	0x2400a84c

08014cfc <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b082      	sub	sp, #8
 8014d00:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8014d02:	4b0f      	ldr	r3, [pc, #60]	; (8014d40 <sys_timeouts_sleeptime+0x44>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d102      	bne.n	8014d10 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8014d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d0e:	e013      	b.n	8014d38 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8014d10:	f7f6 f81a 	bl	800ad48 <sys_now>
 8014d14:	4602      	mov	r2, r0
 8014d16:	4b0b      	ldr	r3, [pc, #44]	; (8014d44 <sys_timeouts_sleeptime+0x48>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8014d1e:	4b08      	ldr	r3, [pc, #32]	; (8014d40 <sys_timeouts_sleeptime+0x44>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	685b      	ldr	r3, [r3, #4]
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d901      	bls.n	8014d2e <sys_timeouts_sleeptime+0x32>
    return 0;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	e004      	b.n	8014d38 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8014d2e:	4b04      	ldr	r3, [pc, #16]	; (8014d40 <sys_timeouts_sleeptime+0x44>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	685a      	ldr	r2, [r3, #4]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	1ad3      	subs	r3, r2, r3
  }
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3708      	adds	r7, #8
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}
 8014d40:	2400a434 	.word	0x2400a434
 8014d44:	2400a438 	.word	0x2400a438

08014d48 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8014d52:	4b0f      	ldr	r3, [pc, #60]	; (8014d90 <sys_timeouts_mbox_fetch+0x48>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d105      	bne.n	8014d66 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	6839      	ldr	r1, [r7, #0]
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f002 fcbf 	bl	80176e2 <sys_arch_mbox_fetch>
    return;
 8014d64:	e011      	b.n	8014d8a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8014d66:	f7ff ffc9 	bl	8014cfc <sys_timeouts_sleeptime>
 8014d6a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d008      	beq.n	8014d84 <sys_timeouts_mbox_fetch+0x3c>
 8014d72:	68fa      	ldr	r2, [r7, #12]
 8014d74:	6839      	ldr	r1, [r7, #0]
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f002 fcb3 	bl	80176e2 <sys_arch_mbox_fetch>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d82:	d102      	bne.n	8014d8a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014d84:	f7ff ff68 	bl	8014c58 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014d88:	e7e3      	b.n	8014d52 <sys_timeouts_mbox_fetch+0xa>
  }
}
 8014d8a:	3710      	adds	r7, #16
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}
 8014d90:	2400a434 	.word	0x2400a434

08014d94 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014d94:	b480      	push	{r7}
 8014d96:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8014d98:	bf00      	nop
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da0:	4770      	bx	lr
	...

08014da4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b085      	sub	sp, #20
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	4613      	mov	r3, r2
 8014db0:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014db2:	79fb      	ldrb	r3, [r7, #7]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d018      	beq.n	8014dea <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d013      	beq.n	8014de6 <udp_input_local_match+0x42>
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00f      	beq.n	8014de6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014dc6:	4b14      	ldr	r3, [pc, #80]	; (8014e18 <udp_input_local_match+0x74>)
 8014dc8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dce:	d00a      	beq.n	8014de6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	4b10      	ldr	r3, [pc, #64]	; (8014e18 <udp_input_local_match+0x74>)
 8014dd6:	695b      	ldr	r3, [r3, #20]
 8014dd8:	405a      	eors	r2, r3
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	3308      	adds	r3, #8
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d110      	bne.n	8014e08 <udp_input_local_match+0x64>
          return 1;
 8014de6:	2301      	movs	r3, #1
 8014de8:	e00f      	b.n	8014e0a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d009      	beq.n	8014e04 <udp_input_local_match+0x60>
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d005      	beq.n	8014e04 <udp_input_local_match+0x60>
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	4b06      	ldr	r3, [pc, #24]	; (8014e18 <udp_input_local_match+0x74>)
 8014dfe:	695b      	ldr	r3, [r3, #20]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d101      	bne.n	8014e08 <udp_input_local_match+0x64>
      return 1;
 8014e04:	2301      	movs	r3, #1
 8014e06:	e000      	b.n	8014e0a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8014e08:	2300      	movs	r3, #0
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3714      	adds	r7, #20
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e14:	4770      	bx	lr
 8014e16:	bf00      	nop
 8014e18:	2400a850 	.word	0x2400a850

08014e1c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014e1c:	b590      	push	{r4, r7, lr}
 8014e1e:	b08d      	sub	sp, #52	; 0x34
 8014e20:	af02      	add	r7, sp, #8
 8014e22:	6078      	str	r0, [r7, #4]
 8014e24:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014e26:	2300      	movs	r3, #0
 8014e28:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	895b      	ldrh	r3, [r3, #10]
 8014e2e:	2b07      	cmp	r3, #7
 8014e30:	d803      	bhi.n	8014e3a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7fb f83a 	bl	800feac <pbuf_free>
    goto end;
 8014e38:	e0c6      	b.n	8014fc8 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014e40:	4b63      	ldr	r3, [pc, #396]	; (8014fd0 <udp_input+0x1b4>)
 8014e42:	695a      	ldr	r2, [r3, #20]
 8014e44:	4b62      	ldr	r3, [pc, #392]	; (8014fd0 <udp_input+0x1b4>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	4619      	mov	r1, r3
 8014e4a:	4610      	mov	r0, r2
 8014e4c:	f001 fd0e 	bl	801686c <ip4_addr_isbroadcast_u32>
 8014e50:	4603      	mov	r3, r0
 8014e52:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	881b      	ldrh	r3, [r3, #0]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7f9 fd16 	bl	800e88c <lwip_htons>
 8014e60:	4603      	mov	r3, r0
 8014e62:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	885b      	ldrh	r3, [r3, #2]
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7f9 fd0e 	bl	800e88c <lwip_htons>
 8014e70:	4603      	mov	r3, r0
 8014e72:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014e74:	2300      	movs	r3, #0
 8014e76:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014e80:	4b54      	ldr	r3, [pc, #336]	; (8014fd4 <udp_input+0x1b8>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	627b      	str	r3, [r7, #36]	; 0x24
 8014e86:	e03b      	b.n	8014f00 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8a:	8a5b      	ldrh	r3, [r3, #18]
 8014e8c:	89fa      	ldrh	r2, [r7, #14]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d131      	bne.n	8014ef6 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014e92:	7cfb      	ldrb	r3, [r7, #19]
 8014e94:	461a      	mov	r2, r3
 8014e96:	6839      	ldr	r1, [r7, #0]
 8014e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e9a:	f7ff ff83 	bl	8014da4 <udp_input_local_match>
 8014e9e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d028      	beq.n	8014ef6 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8014ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea6:	7c1b      	ldrb	r3, [r3, #16]
 8014ea8:	f003 0304 	and.w	r3, r3, #4
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d104      	bne.n	8014eba <udp_input+0x9e>
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d101      	bne.n	8014eba <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8014eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb8:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebc:	8a9b      	ldrh	r3, [r3, #20]
 8014ebe:	8a3a      	ldrh	r2, [r7, #16]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d118      	bne.n	8014ef6 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d005      	beq.n	8014ed8 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ece:	685a      	ldr	r2, [r3, #4]
 8014ed0:	4b3f      	ldr	r3, [pc, #252]	; (8014fd0 <udp_input+0x1b4>)
 8014ed2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d10e      	bne.n	8014ef6 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014ed8:	6a3b      	ldr	r3, [r7, #32]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d014      	beq.n	8014f08 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee0:	68da      	ldr	r2, [r3, #12]
 8014ee2:	6a3b      	ldr	r3, [r7, #32]
 8014ee4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014ee6:	4b3b      	ldr	r3, [pc, #236]	; (8014fd4 <udp_input+0x1b8>)
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eec:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014eee:	4a39      	ldr	r2, [pc, #228]	; (8014fd4 <udp_input+0x1b8>)
 8014ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014ef4:	e008      	b.n	8014f08 <udp_input+0xec>
      }
    }

    prev = pcb;
 8014ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efc:	68db      	ldr	r3, [r3, #12]
 8014efe:	627b      	str	r3, [r7, #36]	; 0x24
 8014f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d1c0      	bne.n	8014e88 <udp_input+0x6c>
 8014f06:	e000      	b.n	8014f0a <udp_input+0xee>
        break;
 8014f08:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d101      	bne.n	8014f14 <udp_input+0xf8>
    pcb = uncon_pcb;
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d002      	beq.n	8014f20 <udp_input+0x104>
    for_us = 1;
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	76fb      	strb	r3, [r7, #27]
 8014f1e:	e00a      	b.n	8014f36 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	3304      	adds	r3, #4
 8014f24:	681a      	ldr	r2, [r3, #0]
 8014f26:	4b2a      	ldr	r3, [pc, #168]	; (8014fd0 <udp_input+0x1b4>)
 8014f28:	695b      	ldr	r3, [r3, #20]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	bf0c      	ite	eq
 8014f2e:	2301      	moveq	r3, #1
 8014f30:	2300      	movne	r3, #0
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014f36:	7efb      	ldrb	r3, [r7, #27]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d042      	beq.n	8014fc2 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8014f3c:	f06f 0107 	mvn.w	r1, #7
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f7fa ff8f 	bl	800fe64 <pbuf_header>
 8014f46:	4603      	mov	r3, r0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d00a      	beq.n	8014f62 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8014f4c:	4b22      	ldr	r3, [pc, #136]	; (8014fd8 <udp_input+0x1bc>)
 8014f4e:	f240 1255 	movw	r2, #341	; 0x155
 8014f52:	4922      	ldr	r1, [pc, #136]	; (8014fdc <udp_input+0x1c0>)
 8014f54:	4822      	ldr	r0, [pc, #136]	; (8014fe0 <udp_input+0x1c4>)
 8014f56:	f002 fce5 	bl	8017924 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7fa ffa6 	bl	800feac <pbuf_free>
      goto end;
 8014f60:	e032      	b.n	8014fc8 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8014f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d012      	beq.n	8014f8e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6a:	6a1b      	ldr	r3, [r3, #32]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d00a      	beq.n	8014f86 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f72:	6a1c      	ldr	r4, [r3, #32]
 8014f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014f78:	8a3b      	ldrh	r3, [r7, #16]
 8014f7a:	9300      	str	r3, [sp, #0]
 8014f7c:	4b19      	ldr	r3, [pc, #100]	; (8014fe4 <udp_input+0x1c8>)
 8014f7e:	687a      	ldr	r2, [r7, #4]
 8014f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f82:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014f84:	e021      	b.n	8014fca <udp_input+0x1ae>
        pbuf_free(p);
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f7fa ff90 	bl	800feac <pbuf_free>
        goto end;
 8014f8c:	e01c      	b.n	8014fc8 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014f8e:	7cfb      	ldrb	r3, [r7, #19]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d112      	bne.n	8014fba <udp_input+0x19e>
 8014f94:	4b0e      	ldr	r3, [pc, #56]	; (8014fd0 <udp_input+0x1b4>)
 8014f96:	695b      	ldr	r3, [r3, #20]
 8014f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f9c:	2be0      	cmp	r3, #224	; 0xe0
 8014f9e:	d00c      	beq.n	8014fba <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014fa0:	4b0b      	ldr	r3, [pc, #44]	; (8014fd0 <udp_input+0x1b4>)
 8014fa2:	899b      	ldrh	r3, [r3, #12]
 8014fa4:	3308      	adds	r3, #8
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	b21b      	sxth	r3, r3
 8014faa:	4619      	mov	r1, r3
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f7fa ff6b 	bl	800fe88 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014fb2:	2103      	movs	r1, #3
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f001 f93d 	bl	8016234 <icmp_dest_unreach>
      pbuf_free(p);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f7fa ff76 	bl	800feac <pbuf_free>
  return;
 8014fc0:	e003      	b.n	8014fca <udp_input+0x1ae>
    pbuf_free(p);
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f7fa ff72 	bl	800feac <pbuf_free>
  return;
 8014fc8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014fca:	372c      	adds	r7, #44	; 0x2c
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd90      	pop	{r4, r7, pc}
 8014fd0:	2400a850 	.word	0x2400a850
 8014fd4:	2400da38 	.word	0x2400da38
 8014fd8:	0801a0c4 	.word	0x0801a0c4
 8014fdc:	0801a0f4 	.word	0x0801a0f4
 8014fe0:	0801a108 	.word	0x0801a108
 8014fe4:	2400a860 	.word	0x2400a860

08014fe8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b085      	sub	sp, #20
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d01e      	beq.n	8015036 <udp_netif_ip_addr_changed+0x4e>
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d01a      	beq.n	8015036 <udp_netif_ip_addr_changed+0x4e>
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d017      	beq.n	8015036 <udp_netif_ip_addr_changed+0x4e>
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d013      	beq.n	8015036 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801500e:	4b0d      	ldr	r3, [pc, #52]	; (8015044 <udp_netif_ip_addr_changed+0x5c>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	60fb      	str	r3, [r7, #12]
 8015014:	e00c      	b.n	8015030 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	429a      	cmp	r2, r3
 8015020:	d103      	bne.n	801502a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	68db      	ldr	r3, [r3, #12]
 801502e:	60fb      	str	r3, [r7, #12]
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d1ef      	bne.n	8015016 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015036:	bf00      	nop
 8015038:	3714      	adds	r7, #20
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop
 8015044:	2400da38 	.word	0x2400da38

08015048 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b084      	sub	sp, #16
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d105      	bne.n	8015062 <free_etharp_q+0x1a>
 8015056:	4b18      	ldr	r3, [pc, #96]	; (80150b8 <free_etharp_q+0x70>)
 8015058:	2297      	movs	r2, #151	; 0x97
 801505a:	4918      	ldr	r1, [pc, #96]	; (80150bc <free_etharp_q+0x74>)
 801505c:	4818      	ldr	r0, [pc, #96]	; (80150c0 <free_etharp_q+0x78>)
 801505e:	f002 fc61 	bl	8017924 <iprintf>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d11e      	bne.n	80150a8 <free_etharp_q+0x60>
 801506a:	4b13      	ldr	r3, [pc, #76]	; (80150b8 <free_etharp_q+0x70>)
 801506c:	2298      	movs	r2, #152	; 0x98
 801506e:	4915      	ldr	r1, [pc, #84]	; (80150c4 <free_etharp_q+0x7c>)
 8015070:	4813      	ldr	r0, [pc, #76]	; (80150c0 <free_etharp_q+0x78>)
 8015072:	f002 fc57 	bl	8017924 <iprintf>
  while (q) {
 8015076:	e017      	b.n	80150a8 <free_etharp_q+0x60>
    r = q;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	60fb      	str	r3, [r7, #12]
    q = q->next;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d105      	bne.n	8015096 <free_etharp_q+0x4e>
 801508a:	4b0b      	ldr	r3, [pc, #44]	; (80150b8 <free_etharp_q+0x70>)
 801508c:	229c      	movs	r2, #156	; 0x9c
 801508e:	490e      	ldr	r1, [pc, #56]	; (80150c8 <free_etharp_q+0x80>)
 8015090:	480b      	ldr	r0, [pc, #44]	; (80150c0 <free_etharp_q+0x78>)
 8015092:	f002 fc47 	bl	8017924 <iprintf>
    pbuf_free(r->p);
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	4618      	mov	r0, r3
 801509c:	f7fa ff06 	bl	800feac <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 80150a0:	68f9      	ldr	r1, [r7, #12]
 80150a2:	200a      	movs	r0, #10
 80150a4:	f7fa f92e 	bl	800f304 <memp_free>
  while (q) {
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d1e4      	bne.n	8015078 <free_etharp_q+0x30>
  }
}
 80150ae:	bf00      	nop
 80150b0:	3710      	adds	r7, #16
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	0801a160 	.word	0x0801a160
 80150bc:	0801a198 	.word	0x0801a198
 80150c0:	0801a1a4 	.word	0x0801a1a4
 80150c4:	0801a1cc 	.word	0x0801a1cc
 80150c8:	0801a1dc 	.word	0x0801a1dc

080150cc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80150d4:	4915      	ldr	r1, [pc, #84]	; (801512c <etharp_free_entry+0x60>)
 80150d6:	687a      	ldr	r2, [r7, #4]
 80150d8:	4613      	mov	r3, r2
 80150da:	005b      	lsls	r3, r3, #1
 80150dc:	4413      	add	r3, r2
 80150de:	00db      	lsls	r3, r3, #3
 80150e0:	440b      	add	r3, r1
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d013      	beq.n	8015110 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80150e8:	4910      	ldr	r1, [pc, #64]	; (801512c <etharp_free_entry+0x60>)
 80150ea:	687a      	ldr	r2, [r7, #4]
 80150ec:	4613      	mov	r3, r2
 80150ee:	005b      	lsls	r3, r3, #1
 80150f0:	4413      	add	r3, r2
 80150f2:	00db      	lsls	r3, r3, #3
 80150f4:	440b      	add	r3, r1
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7ff ffa5 	bl	8015048 <free_etharp_q>
    arp_table[i].q = NULL;
 80150fe:	490b      	ldr	r1, [pc, #44]	; (801512c <etharp_free_entry+0x60>)
 8015100:	687a      	ldr	r2, [r7, #4]
 8015102:	4613      	mov	r3, r2
 8015104:	005b      	lsls	r3, r3, #1
 8015106:	4413      	add	r3, r2
 8015108:	00db      	lsls	r3, r3, #3
 801510a:	440b      	add	r3, r1
 801510c:	2200      	movs	r2, #0
 801510e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015110:	4906      	ldr	r1, [pc, #24]	; (801512c <etharp_free_entry+0x60>)
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	4613      	mov	r3, r2
 8015116:	005b      	lsls	r3, r3, #1
 8015118:	4413      	add	r3, r2
 801511a:	00db      	lsls	r3, r3, #3
 801511c:	440b      	add	r3, r1
 801511e:	3314      	adds	r3, #20
 8015120:	2200      	movs	r2, #0
 8015122:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015124:	bf00      	nop
 8015126:	3708      	adds	r7, #8
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	2400a440 	.word	0x2400a440

08015130 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015136:	2300      	movs	r3, #0
 8015138:	71fb      	strb	r3, [r7, #7]
 801513a:	e09a      	b.n	8015272 <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 801513c:	79fa      	ldrb	r2, [r7, #7]
 801513e:	4951      	ldr	r1, [pc, #324]	; (8015284 <etharp_tmr+0x154>)
 8015140:	4613      	mov	r3, r2
 8015142:	005b      	lsls	r3, r3, #1
 8015144:	4413      	add	r3, r2
 8015146:	00db      	lsls	r3, r3, #3
 8015148:	440b      	add	r3, r1
 801514a:	3314      	adds	r3, #20
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8015150:	79bb      	ldrb	r3, [r7, #6]
 8015152:	2b00      	cmp	r3, #0
 8015154:	f000 808a 	beq.w	801526c <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
 8015158:	79bb      	ldrb	r3, [r7, #6]
 801515a:	2b05      	cmp	r3, #5
 801515c:	f000 8086 	beq.w	801526c <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8015160:	79fa      	ldrb	r2, [r7, #7]
 8015162:	4948      	ldr	r1, [pc, #288]	; (8015284 <etharp_tmr+0x154>)
 8015164:	4613      	mov	r3, r2
 8015166:	005b      	lsls	r3, r3, #1
 8015168:	4413      	add	r3, r2
 801516a:	00db      	lsls	r3, r3, #3
 801516c:	440b      	add	r3, r1
 801516e:	3312      	adds	r3, #18
 8015170:	881b      	ldrh	r3, [r3, #0]
 8015172:	3301      	adds	r3, #1
 8015174:	b298      	uxth	r0, r3
 8015176:	4943      	ldr	r1, [pc, #268]	; (8015284 <etharp_tmr+0x154>)
 8015178:	4613      	mov	r3, r2
 801517a:	005b      	lsls	r3, r3, #1
 801517c:	4413      	add	r3, r2
 801517e:	00db      	lsls	r3, r3, #3
 8015180:	440b      	add	r3, r1
 8015182:	3312      	adds	r3, #18
 8015184:	4602      	mov	r2, r0
 8015186:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015188:	79fa      	ldrb	r2, [r7, #7]
 801518a:	493e      	ldr	r1, [pc, #248]	; (8015284 <etharp_tmr+0x154>)
 801518c:	4613      	mov	r3, r2
 801518e:	005b      	lsls	r3, r3, #1
 8015190:	4413      	add	r3, r2
 8015192:	00db      	lsls	r3, r3, #3
 8015194:	440b      	add	r3, r1
 8015196:	3312      	adds	r3, #18
 8015198:	881b      	ldrh	r3, [r3, #0]
 801519a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801519e:	d215      	bcs.n	80151cc <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80151a0:	79fa      	ldrb	r2, [r7, #7]
 80151a2:	4938      	ldr	r1, [pc, #224]	; (8015284 <etharp_tmr+0x154>)
 80151a4:	4613      	mov	r3, r2
 80151a6:	005b      	lsls	r3, r3, #1
 80151a8:	4413      	add	r3, r2
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	440b      	add	r3, r1
 80151ae:	3314      	adds	r3, #20
 80151b0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80151b2:	2b01      	cmp	r3, #1
 80151b4:	d10f      	bne.n	80151d6 <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80151b6:	79fa      	ldrb	r2, [r7, #7]
 80151b8:	4932      	ldr	r1, [pc, #200]	; (8015284 <etharp_tmr+0x154>)
 80151ba:	4613      	mov	r3, r2
 80151bc:	005b      	lsls	r3, r3, #1
 80151be:	4413      	add	r3, r2
 80151c0:	00db      	lsls	r3, r3, #3
 80151c2:	440b      	add	r3, r1
 80151c4:	3312      	adds	r3, #18
 80151c6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80151c8:	2b04      	cmp	r3, #4
 80151ca:	d904      	bls.n	80151d6 <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80151cc:	79fb      	ldrb	r3, [r7, #7]
 80151ce:	4618      	mov	r0, r3
 80151d0:	f7ff ff7c 	bl	80150cc <etharp_free_entry>
 80151d4:	e04a      	b.n	801526c <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80151d6:	79fa      	ldrb	r2, [r7, #7]
 80151d8:	492a      	ldr	r1, [pc, #168]	; (8015284 <etharp_tmr+0x154>)
 80151da:	4613      	mov	r3, r2
 80151dc:	005b      	lsls	r3, r3, #1
 80151de:	4413      	add	r3, r2
 80151e0:	00db      	lsls	r3, r3, #3
 80151e2:	440b      	add	r3, r1
 80151e4:	3314      	adds	r3, #20
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	2b03      	cmp	r3, #3
 80151ea:	d10a      	bne.n	8015202 <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80151ec:	79fa      	ldrb	r2, [r7, #7]
 80151ee:	4925      	ldr	r1, [pc, #148]	; (8015284 <etharp_tmr+0x154>)
 80151f0:	4613      	mov	r3, r2
 80151f2:	005b      	lsls	r3, r3, #1
 80151f4:	4413      	add	r3, r2
 80151f6:	00db      	lsls	r3, r3, #3
 80151f8:	440b      	add	r3, r1
 80151fa:	3314      	adds	r3, #20
 80151fc:	2204      	movs	r2, #4
 80151fe:	701a      	strb	r2, [r3, #0]
 8015200:	e034      	b.n	801526c <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015202:	79fa      	ldrb	r2, [r7, #7]
 8015204:	491f      	ldr	r1, [pc, #124]	; (8015284 <etharp_tmr+0x154>)
 8015206:	4613      	mov	r3, r2
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	4413      	add	r3, r2
 801520c:	00db      	lsls	r3, r3, #3
 801520e:	440b      	add	r3, r1
 8015210:	3314      	adds	r3, #20
 8015212:	781b      	ldrb	r3, [r3, #0]
 8015214:	2b04      	cmp	r3, #4
 8015216:	d10a      	bne.n	801522e <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015218:	79fa      	ldrb	r2, [r7, #7]
 801521a:	491a      	ldr	r1, [pc, #104]	; (8015284 <etharp_tmr+0x154>)
 801521c:	4613      	mov	r3, r2
 801521e:	005b      	lsls	r3, r3, #1
 8015220:	4413      	add	r3, r2
 8015222:	00db      	lsls	r3, r3, #3
 8015224:	440b      	add	r3, r1
 8015226:	3314      	adds	r3, #20
 8015228:	2202      	movs	r2, #2
 801522a:	701a      	strb	r2, [r3, #0]
 801522c:	e01e      	b.n	801526c <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801522e:	79fa      	ldrb	r2, [r7, #7]
 8015230:	4914      	ldr	r1, [pc, #80]	; (8015284 <etharp_tmr+0x154>)
 8015232:	4613      	mov	r3, r2
 8015234:	005b      	lsls	r3, r3, #1
 8015236:	4413      	add	r3, r2
 8015238:	00db      	lsls	r3, r3, #3
 801523a:	440b      	add	r3, r1
 801523c:	3314      	adds	r3, #20
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	2b01      	cmp	r3, #1
 8015242:	d113      	bne.n	801526c <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015244:	79fa      	ldrb	r2, [r7, #7]
 8015246:	490f      	ldr	r1, [pc, #60]	; (8015284 <etharp_tmr+0x154>)
 8015248:	4613      	mov	r3, r2
 801524a:	005b      	lsls	r3, r3, #1
 801524c:	4413      	add	r3, r2
 801524e:	00db      	lsls	r3, r3, #3
 8015250:	440b      	add	r3, r1
 8015252:	3308      	adds	r3, #8
 8015254:	6818      	ldr	r0, [r3, #0]
 8015256:	79fa      	ldrb	r2, [r7, #7]
 8015258:	4613      	mov	r3, r2
 801525a:	005b      	lsls	r3, r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	00db      	lsls	r3, r3, #3
 8015260:	4a08      	ldr	r2, [pc, #32]	; (8015284 <etharp_tmr+0x154>)
 8015262:	4413      	add	r3, r2
 8015264:	3304      	adds	r3, #4
 8015266:	4619      	mov	r1, r3
 8015268:	f000 feb2 	bl	8015fd0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801526c:	79fb      	ldrb	r3, [r7, #7]
 801526e:	3301      	adds	r3, #1
 8015270:	71fb      	strb	r3, [r7, #7]
 8015272:	79fb      	ldrb	r3, [r7, #7]
 8015274:	2b09      	cmp	r3, #9
 8015276:	f67f af61 	bls.w	801513c <etharp_tmr+0xc>
      }
    }
  }
}
 801527a:	bf00      	nop
 801527c:	3708      	adds	r7, #8
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	2400a440 	.word	0x2400a440

08015288 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b088      	sub	sp, #32
 801528c:	af00      	add	r7, sp, #0
 801528e:	60f8      	str	r0, [r7, #12]
 8015290:	460b      	mov	r3, r1
 8015292:	607a      	str	r2, [r7, #4]
 8015294:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015296:	230a      	movs	r3, #10
 8015298:	77fb      	strb	r3, [r7, #31]
 801529a:	230a      	movs	r3, #10
 801529c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801529e:	230a      	movs	r3, #10
 80152a0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80152a2:	2300      	movs	r3, #0
 80152a4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80152a6:	230a      	movs	r3, #10
 80152a8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	833b      	strh	r3, [r7, #24]
 80152ae:	2300      	movs	r3, #0
 80152b0:	82fb      	strh	r3, [r7, #22]
 80152b2:	2300      	movs	r3, #0
 80152b4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152b6:	2300      	movs	r3, #0
 80152b8:	773b      	strb	r3, [r7, #28]
 80152ba:	e096      	b.n	80153ea <etharp_find_entry+0x162>
    u8_t state = arp_table[i].state;
 80152bc:	7f3a      	ldrb	r2, [r7, #28]
 80152be:	4991      	ldr	r1, [pc, #580]	; (8015504 <etharp_find_entry+0x27c>)
 80152c0:	4613      	mov	r3, r2
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	4413      	add	r3, r2
 80152c6:	00db      	lsls	r3, r3, #3
 80152c8:	440b      	add	r3, r1
 80152ca:	3314      	adds	r3, #20
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80152d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80152d4:	2b0a      	cmp	r3, #10
 80152d6:	d105      	bne.n	80152e4 <etharp_find_entry+0x5c>
 80152d8:	7cfb      	ldrb	r3, [r7, #19]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d102      	bne.n	80152e4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80152de:	7f3b      	ldrb	r3, [r7, #28]
 80152e0:	777b      	strb	r3, [r7, #29]
 80152e2:	e07f      	b.n	80153e4 <etharp_find_entry+0x15c>
    } else if (state != ETHARP_STATE_EMPTY) {
 80152e4:	7cfb      	ldrb	r3, [r7, #19]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d07c      	beq.n	80153e4 <etharp_find_entry+0x15c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80152ea:	7cfb      	ldrb	r3, [r7, #19]
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d009      	beq.n	8015304 <etharp_find_entry+0x7c>
 80152f0:	7cfb      	ldrb	r3, [r7, #19]
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d806      	bhi.n	8015304 <etharp_find_entry+0x7c>
 80152f6:	4b84      	ldr	r3, [pc, #528]	; (8015508 <etharp_find_entry+0x280>)
 80152f8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80152fc:	4983      	ldr	r1, [pc, #524]	; (801550c <etharp_find_entry+0x284>)
 80152fe:	4884      	ldr	r0, [pc, #528]	; (8015510 <etharp_find_entry+0x288>)
 8015300:	f002 fb10 	bl	8017924 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d00f      	beq.n	801532a <etharp_find_entry+0xa2>
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	6819      	ldr	r1, [r3, #0]
 801530e:	7f3a      	ldrb	r2, [r7, #28]
 8015310:	487c      	ldr	r0, [pc, #496]	; (8015504 <etharp_find_entry+0x27c>)
 8015312:	4613      	mov	r3, r2
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	4403      	add	r3, r0
 801531c:	3304      	adds	r3, #4
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4299      	cmp	r1, r3
 8015322:	d102      	bne.n	801532a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015324:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015328:	e0e8      	b.n	80154fc <etharp_find_entry+0x274>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801532a:	7cfb      	ldrb	r3, [r7, #19]
 801532c:	2b01      	cmp	r3, #1
 801532e:	d13b      	bne.n	80153a8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015330:	7f3a      	ldrb	r2, [r7, #28]
 8015332:	4974      	ldr	r1, [pc, #464]	; (8015504 <etharp_find_entry+0x27c>)
 8015334:	4613      	mov	r3, r2
 8015336:	005b      	lsls	r3, r3, #1
 8015338:	4413      	add	r3, r2
 801533a:	00db      	lsls	r3, r3, #3
 801533c:	440b      	add	r3, r1
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d018      	beq.n	8015376 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8015344:	7f3a      	ldrb	r2, [r7, #28]
 8015346:	496f      	ldr	r1, [pc, #444]	; (8015504 <etharp_find_entry+0x27c>)
 8015348:	4613      	mov	r3, r2
 801534a:	005b      	lsls	r3, r3, #1
 801534c:	4413      	add	r3, r2
 801534e:	00db      	lsls	r3, r3, #3
 8015350:	440b      	add	r3, r1
 8015352:	3312      	adds	r3, #18
 8015354:	881b      	ldrh	r3, [r3, #0]
 8015356:	8b3a      	ldrh	r2, [r7, #24]
 8015358:	429a      	cmp	r2, r3
 801535a:	d843      	bhi.n	80153e4 <etharp_find_entry+0x15c>
            old_queue = i;
 801535c:	7f3b      	ldrb	r3, [r7, #28]
 801535e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8015360:	7f3a      	ldrb	r2, [r7, #28]
 8015362:	4968      	ldr	r1, [pc, #416]	; (8015504 <etharp_find_entry+0x27c>)
 8015364:	4613      	mov	r3, r2
 8015366:	005b      	lsls	r3, r3, #1
 8015368:	4413      	add	r3, r2
 801536a:	00db      	lsls	r3, r3, #3
 801536c:	440b      	add	r3, r1
 801536e:	3312      	adds	r3, #18
 8015370:	881b      	ldrh	r3, [r3, #0]
 8015372:	833b      	strh	r3, [r7, #24]
 8015374:	e036      	b.n	80153e4 <etharp_find_entry+0x15c>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015376:	7f3a      	ldrb	r2, [r7, #28]
 8015378:	4962      	ldr	r1, [pc, #392]	; (8015504 <etharp_find_entry+0x27c>)
 801537a:	4613      	mov	r3, r2
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	4413      	add	r3, r2
 8015380:	00db      	lsls	r3, r3, #3
 8015382:	440b      	add	r3, r1
 8015384:	3312      	adds	r3, #18
 8015386:	881b      	ldrh	r3, [r3, #0]
 8015388:	8afa      	ldrh	r2, [r7, #22]
 801538a:	429a      	cmp	r2, r3
 801538c:	d82a      	bhi.n	80153e4 <etharp_find_entry+0x15c>
            old_pending = i;
 801538e:	7f3b      	ldrb	r3, [r7, #28]
 8015390:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8015392:	7f3a      	ldrb	r2, [r7, #28]
 8015394:	495b      	ldr	r1, [pc, #364]	; (8015504 <etharp_find_entry+0x27c>)
 8015396:	4613      	mov	r3, r2
 8015398:	005b      	lsls	r3, r3, #1
 801539a:	4413      	add	r3, r2
 801539c:	00db      	lsls	r3, r3, #3
 801539e:	440b      	add	r3, r1
 80153a0:	3312      	adds	r3, #18
 80153a2:	881b      	ldrh	r3, [r3, #0]
 80153a4:	82fb      	strh	r3, [r7, #22]
 80153a6:	e01d      	b.n	80153e4 <etharp_find_entry+0x15c>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80153a8:	7cfb      	ldrb	r3, [r7, #19]
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	d91a      	bls.n	80153e4 <etharp_find_entry+0x15c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 80153ae:	7cfb      	ldrb	r3, [r7, #19]
 80153b0:	2b04      	cmp	r3, #4
 80153b2:	d817      	bhi.n	80153e4 <etharp_find_entry+0x15c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80153b4:	7f3a      	ldrb	r2, [r7, #28]
 80153b6:	4953      	ldr	r1, [pc, #332]	; (8015504 <etharp_find_entry+0x27c>)
 80153b8:	4613      	mov	r3, r2
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	4413      	add	r3, r2
 80153be:	00db      	lsls	r3, r3, #3
 80153c0:	440b      	add	r3, r1
 80153c2:	3312      	adds	r3, #18
 80153c4:	881b      	ldrh	r3, [r3, #0]
 80153c6:	8aba      	ldrh	r2, [r7, #20]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d80b      	bhi.n	80153e4 <etharp_find_entry+0x15c>
            old_stable = i;
 80153cc:	7f3b      	ldrb	r3, [r7, #28]
 80153ce:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80153d0:	7f3a      	ldrb	r2, [r7, #28]
 80153d2:	494c      	ldr	r1, [pc, #304]	; (8015504 <etharp_find_entry+0x27c>)
 80153d4:	4613      	mov	r3, r2
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	4413      	add	r3, r2
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	440b      	add	r3, r1
 80153de:	3312      	adds	r3, #18
 80153e0:	881b      	ldrh	r3, [r3, #0]
 80153e2:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153e4:	7f3b      	ldrb	r3, [r7, #28]
 80153e6:	3301      	adds	r3, #1
 80153e8:	773b      	strb	r3, [r7, #28]
 80153ea:	7f3b      	ldrb	r3, [r7, #28]
 80153ec:	2b09      	cmp	r3, #9
 80153ee:	f67f af65 	bls.w	80152bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80153f2:	7afb      	ldrb	r3, [r7, #11]
 80153f4:	f003 0302 	and.w	r3, r3, #2
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d108      	bne.n	801540e <etharp_find_entry+0x186>
 80153fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015400:	2b0a      	cmp	r3, #10
 8015402:	d107      	bne.n	8015414 <etharp_find_entry+0x18c>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015404:	7afb      	ldrb	r3, [r7, #11]
 8015406:	f003 0301 	and.w	r3, r3, #1
 801540a:	2b00      	cmp	r3, #0
 801540c:	d102      	bne.n	8015414 <etharp_find_entry+0x18c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801540e:	f04f 33ff 	mov.w	r3, #4294967295
 8015412:	e073      	b.n	80154fc <etharp_find_entry+0x274>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015414:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015418:	2b09      	cmp	r3, #9
 801541a:	dc02      	bgt.n	8015422 <etharp_find_entry+0x19a>
    i = empty;
 801541c:	7f7b      	ldrb	r3, [r7, #29]
 801541e:	773b      	strb	r3, [r7, #28]
 8015420:	e036      	b.n	8015490 <etharp_find_entry+0x208>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015422:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015426:	2b09      	cmp	r3, #9
 8015428:	dc13      	bgt.n	8015452 <etharp_find_entry+0x1ca>
      /* recycle oldest stable*/
      i = old_stable;
 801542a:	7fbb      	ldrb	r3, [r7, #30]
 801542c:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801542e:	7f3a      	ldrb	r2, [r7, #28]
 8015430:	4934      	ldr	r1, [pc, #208]	; (8015504 <etharp_find_entry+0x27c>)
 8015432:	4613      	mov	r3, r2
 8015434:	005b      	lsls	r3, r3, #1
 8015436:	4413      	add	r3, r2
 8015438:	00db      	lsls	r3, r3, #3
 801543a:	440b      	add	r3, r1
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d018      	beq.n	8015474 <etharp_find_entry+0x1ec>
 8015442:	4b31      	ldr	r3, [pc, #196]	; (8015508 <etharp_find_entry+0x280>)
 8015444:	f240 126f 	movw	r2, #367	; 0x16f
 8015448:	4932      	ldr	r1, [pc, #200]	; (8015514 <etharp_find_entry+0x28c>)
 801544a:	4831      	ldr	r0, [pc, #196]	; (8015510 <etharp_find_entry+0x288>)
 801544c:	f002 fa6a 	bl	8017924 <iprintf>
 8015450:	e010      	b.n	8015474 <etharp_find_entry+0x1ec>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015452:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015456:	2b09      	cmp	r3, #9
 8015458:	dc02      	bgt.n	8015460 <etharp_find_entry+0x1d8>
      /* recycle oldest pending */
      i = old_pending;
 801545a:	7ffb      	ldrb	r3, [r7, #31]
 801545c:	773b      	strb	r3, [r7, #28]
 801545e:	e009      	b.n	8015474 <etharp_find_entry+0x1ec>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015460:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015464:	2b09      	cmp	r3, #9
 8015466:	dc02      	bgt.n	801546e <etharp_find_entry+0x1e6>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015468:	7efb      	ldrb	r3, [r7, #27]
 801546a:	773b      	strb	r3, [r7, #28]
 801546c:	e002      	b.n	8015474 <etharp_find_entry+0x1ec>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801546e:	f04f 33ff 	mov.w	r3, #4294967295
 8015472:	e043      	b.n	80154fc <etharp_find_entry+0x274>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015474:	7f3b      	ldrb	r3, [r7, #28]
 8015476:	2b09      	cmp	r3, #9
 8015478:	d906      	bls.n	8015488 <etharp_find_entry+0x200>
 801547a:	4b23      	ldr	r3, [pc, #140]	; (8015508 <etharp_find_entry+0x280>)
 801547c:	f240 1281 	movw	r2, #385	; 0x181
 8015480:	4925      	ldr	r1, [pc, #148]	; (8015518 <etharp_find_entry+0x290>)
 8015482:	4823      	ldr	r0, [pc, #140]	; (8015510 <etharp_find_entry+0x288>)
 8015484:	f002 fa4e 	bl	8017924 <iprintf>
    etharp_free_entry(i);
 8015488:	7f3b      	ldrb	r3, [r7, #28]
 801548a:	4618      	mov	r0, r3
 801548c:	f7ff fe1e 	bl	80150cc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015490:	7f3b      	ldrb	r3, [r7, #28]
 8015492:	2b09      	cmp	r3, #9
 8015494:	d906      	bls.n	80154a4 <etharp_find_entry+0x21c>
 8015496:	4b1c      	ldr	r3, [pc, #112]	; (8015508 <etharp_find_entry+0x280>)
 8015498:	f240 1285 	movw	r2, #389	; 0x185
 801549c:	491e      	ldr	r1, [pc, #120]	; (8015518 <etharp_find_entry+0x290>)
 801549e:	481c      	ldr	r0, [pc, #112]	; (8015510 <etharp_find_entry+0x288>)
 80154a0:	f002 fa40 	bl	8017924 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80154a4:	7f3a      	ldrb	r2, [r7, #28]
 80154a6:	4917      	ldr	r1, [pc, #92]	; (8015504 <etharp_find_entry+0x27c>)
 80154a8:	4613      	mov	r3, r2
 80154aa:	005b      	lsls	r3, r3, #1
 80154ac:	4413      	add	r3, r2
 80154ae:	00db      	lsls	r3, r3, #3
 80154b0:	440b      	add	r3, r1
 80154b2:	3314      	adds	r3, #20
 80154b4:	781b      	ldrb	r3, [r3, #0]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d006      	beq.n	80154c8 <etharp_find_entry+0x240>
 80154ba:	4b13      	ldr	r3, [pc, #76]	; (8015508 <etharp_find_entry+0x280>)
 80154bc:	f240 1287 	movw	r2, #391	; 0x187
 80154c0:	4916      	ldr	r1, [pc, #88]	; (801551c <etharp_find_entry+0x294>)
 80154c2:	4813      	ldr	r0, [pc, #76]	; (8015510 <etharp_find_entry+0x288>)
 80154c4:	f002 fa2e 	bl	8017924 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d00a      	beq.n	80154e4 <etharp_find_entry+0x25c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80154ce:	7f3a      	ldrb	r2, [r7, #28]
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	6819      	ldr	r1, [r3, #0]
 80154d4:	480b      	ldr	r0, [pc, #44]	; (8015504 <etharp_find_entry+0x27c>)
 80154d6:	4613      	mov	r3, r2
 80154d8:	005b      	lsls	r3, r3, #1
 80154da:	4413      	add	r3, r2
 80154dc:	00db      	lsls	r3, r3, #3
 80154de:	4403      	add	r3, r0
 80154e0:	3304      	adds	r3, #4
 80154e2:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80154e4:	7f3a      	ldrb	r2, [r7, #28]
 80154e6:	4907      	ldr	r1, [pc, #28]	; (8015504 <etharp_find_entry+0x27c>)
 80154e8:	4613      	mov	r3, r2
 80154ea:	005b      	lsls	r3, r3, #1
 80154ec:	4413      	add	r3, r2
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	440b      	add	r3, r1
 80154f2:	3312      	adds	r3, #18
 80154f4:	2200      	movs	r2, #0
 80154f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80154f8:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3720      	adds	r7, #32
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}
 8015504:	2400a440 	.word	0x2400a440
 8015508:	0801a160 	.word	0x0801a160
 801550c:	0801a1ec 	.word	0x0801a1ec
 8015510:	0801a1a4 	.word	0x0801a1a4
 8015514:	0801a22c 	.word	0x0801a22c
 8015518:	0801a244 	.word	0x0801a244
 801551c:	0801a258 	.word	0x0801a258

08015520 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b08a      	sub	sp, #40	; 0x28
 8015524:	af02      	add	r7, sp, #8
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	60b9      	str	r1, [r7, #8]
 801552a:	607a      	str	r2, [r7, #4]
 801552c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015534:	2b06      	cmp	r3, #6
 8015536:	d006      	beq.n	8015546 <etharp_update_arp_entry+0x26>
 8015538:	4b5c      	ldr	r3, [pc, #368]	; (80156ac <etharp_update_arp_entry+0x18c>)
 801553a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801553e:	495c      	ldr	r1, [pc, #368]	; (80156b0 <etharp_update_arp_entry+0x190>)
 8015540:	485c      	ldr	r0, [pc, #368]	; (80156b4 <etharp_update_arp_entry+0x194>)
 8015542:	f002 f9ef 	bl	8017924 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d012      	beq.n	8015572 <etharp_update_arp_entry+0x52>
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d00e      	beq.n	8015572 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	68f9      	ldr	r1, [r7, #12]
 801555a:	4618      	mov	r0, r3
 801555c:	f001 f986 	bl	801686c <ip4_addr_isbroadcast_u32>
 8015560:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015562:	2b00      	cmp	r3, #0
 8015564:	d105      	bne.n	8015572 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801556e:	2be0      	cmp	r3, #224	; 0xe0
 8015570:	d102      	bne.n	8015578 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015572:	f06f 030f 	mvn.w	r3, #15
 8015576:	e095      	b.n	80156a4 <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015578:	78fb      	ldrb	r3, [r7, #3]
 801557a:	68fa      	ldr	r2, [r7, #12]
 801557c:	4619      	mov	r1, r3
 801557e:	68b8      	ldr	r0, [r7, #8]
 8015580:	f7ff fe82 	bl	8015288 <etharp_find_entry>
 8015584:	4603      	mov	r3, r0
 8015586:	77fb      	strb	r3, [r7, #31]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015588:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801558c:	2b00      	cmp	r3, #0
 801558e:	da02      	bge.n	8015596 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015590:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015594:	e086      	b.n	80156a4 <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8015596:	78fb      	ldrb	r3, [r7, #3]
 8015598:	f003 0304 	and.w	r3, r3, #4
 801559c:	2b00      	cmp	r3, #0
 801559e:	d00b      	beq.n	80155b8 <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 80155a0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80155a4:	4944      	ldr	r1, [pc, #272]	; (80156b8 <etharp_update_arp_entry+0x198>)
 80155a6:	4613      	mov	r3, r2
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	4413      	add	r3, r2
 80155ac:	00db      	lsls	r3, r3, #3
 80155ae:	440b      	add	r3, r1
 80155b0:	3314      	adds	r3, #20
 80155b2:	2205      	movs	r2, #5
 80155b4:	701a      	strb	r2, [r3, #0]
 80155b6:	e019      	b.n	80155ec <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 80155b8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80155bc:	493e      	ldr	r1, [pc, #248]	; (80156b8 <etharp_update_arp_entry+0x198>)
 80155be:	4613      	mov	r3, r2
 80155c0:	005b      	lsls	r3, r3, #1
 80155c2:	4413      	add	r3, r2
 80155c4:	00db      	lsls	r3, r3, #3
 80155c6:	440b      	add	r3, r1
 80155c8:	3314      	adds	r3, #20
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	2b05      	cmp	r3, #5
 80155ce:	d102      	bne.n	80155d6 <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 80155d0:	f06f 0305 	mvn.w	r3, #5
 80155d4:	e066      	b.n	80156a4 <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80155d6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80155da:	4937      	ldr	r1, [pc, #220]	; (80156b8 <etharp_update_arp_entry+0x198>)
 80155dc:	4613      	mov	r3, r2
 80155de:	005b      	lsls	r3, r3, #1
 80155e0:	4413      	add	r3, r2
 80155e2:	00db      	lsls	r3, r3, #3
 80155e4:	440b      	add	r3, r1
 80155e6:	3314      	adds	r3, #20
 80155e8:	2202      	movs	r2, #2
 80155ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80155ec:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80155f0:	4931      	ldr	r1, [pc, #196]	; (80156b8 <etharp_update_arp_entry+0x198>)
 80155f2:	4613      	mov	r3, r2
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	4413      	add	r3, r2
 80155f8:	00db      	lsls	r3, r3, #3
 80155fa:	440b      	add	r3, r1
 80155fc:	3308      	adds	r3, #8
 80155fe:	68fa      	ldr	r2, [r7, #12]
 8015600:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8015602:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015606:	4613      	mov	r3, r2
 8015608:	005b      	lsls	r3, r3, #1
 801560a:	4413      	add	r3, r2
 801560c:	00db      	lsls	r3, r3, #3
 801560e:	3308      	adds	r3, #8
 8015610:	4a29      	ldr	r2, [pc, #164]	; (80156b8 <etharp_update_arp_entry+0x198>)
 8015612:	4413      	add	r3, r2
 8015614:	3304      	adds	r3, #4
 8015616:	2206      	movs	r2, #6
 8015618:	6879      	ldr	r1, [r7, #4]
 801561a:	4618      	mov	r0, r3
 801561c:	f002 f96f 	bl	80178fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015620:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015624:	4924      	ldr	r1, [pc, #144]	; (80156b8 <etharp_update_arp_entry+0x198>)
 8015626:	4613      	mov	r3, r2
 8015628:	005b      	lsls	r3, r3, #1
 801562a:	4413      	add	r3, r2
 801562c:	00db      	lsls	r3, r3, #3
 801562e:	440b      	add	r3, r1
 8015630:	3312      	adds	r3, #18
 8015632:	2200      	movs	r2, #0
 8015634:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 8015636:	e029      	b.n	801568c <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 8015638:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801563c:	491e      	ldr	r1, [pc, #120]	; (80156b8 <etharp_update_arp_entry+0x198>)
 801563e:	4613      	mov	r3, r2
 8015640:	005b      	lsls	r3, r3, #1
 8015642:	4413      	add	r3, r2
 8015644:	00db      	lsls	r3, r3, #3
 8015646:	440b      	add	r3, r1
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 801564c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015650:	69bb      	ldr	r3, [r7, #24]
 8015652:	6819      	ldr	r1, [r3, #0]
 8015654:	4818      	ldr	r0, [pc, #96]	; (80156b8 <etharp_update_arp_entry+0x198>)
 8015656:	4613      	mov	r3, r2
 8015658:	005b      	lsls	r3, r3, #1
 801565a:	4413      	add	r3, r2
 801565c:	00db      	lsls	r3, r3, #3
 801565e:	4403      	add	r3, r0
 8015660:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 8015668:	69b9      	ldr	r1, [r7, #24]
 801566a:	200a      	movs	r0, #10
 801566c:	f7f9 fe4a 	bl	800f304 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8015676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6979      	ldr	r1, [r7, #20]
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f001 ff95 	bl	80175b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015686:	6978      	ldr	r0, [r7, #20]
 8015688:	f7fa fc10 	bl	800feac <pbuf_free>
  while (arp_table[i].q != NULL) {
 801568c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015690:	4909      	ldr	r1, [pc, #36]	; (80156b8 <etharp_update_arp_entry+0x198>)
 8015692:	4613      	mov	r3, r2
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	4413      	add	r3, r2
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	440b      	add	r3, r1
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1ca      	bne.n	8015638 <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 80156a2:	2300      	movs	r3, #0
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	3720      	adds	r7, #32
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	0801a160 	.word	0x0801a160
 80156b0:	0801a284 	.word	0x0801a284
 80156b4:	0801a1a4 	.word	0x0801a1a4
 80156b8:	2400a440 	.word	0x2400a440

080156bc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80156c4:	2300      	movs	r3, #0
 80156c6:	73fb      	strb	r3, [r7, #15]
 80156c8:	e01f      	b.n	801570a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80156ca:	7bfa      	ldrb	r2, [r7, #15]
 80156cc:	4912      	ldr	r1, [pc, #72]	; (8015718 <etharp_cleanup_netif+0x5c>)
 80156ce:	4613      	mov	r3, r2
 80156d0:	005b      	lsls	r3, r3, #1
 80156d2:	4413      	add	r3, r2
 80156d4:	00db      	lsls	r3, r3, #3
 80156d6:	440b      	add	r3, r1
 80156d8:	3314      	adds	r3, #20
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80156de:	7bbb      	ldrb	r3, [r7, #14]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d00f      	beq.n	8015704 <etharp_cleanup_netif+0x48>
 80156e4:	7bfa      	ldrb	r2, [r7, #15]
 80156e6:	490c      	ldr	r1, [pc, #48]	; (8015718 <etharp_cleanup_netif+0x5c>)
 80156e8:	4613      	mov	r3, r2
 80156ea:	005b      	lsls	r3, r3, #1
 80156ec:	4413      	add	r3, r2
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	440b      	add	r3, r1
 80156f2:	3308      	adds	r3, #8
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d103      	bne.n	8015704 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80156fc:	7bfb      	ldrb	r3, [r7, #15]
 80156fe:	4618      	mov	r0, r3
 8015700:	f7ff fce4 	bl	80150cc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015704:	7bfb      	ldrb	r3, [r7, #15]
 8015706:	3301      	adds	r3, #1
 8015708:	73fb      	strb	r3, [r7, #15]
 801570a:	7bfb      	ldrb	r3, [r7, #15]
 801570c:	2b09      	cmp	r3, #9
 801570e:	d9dc      	bls.n	80156ca <etharp_cleanup_netif+0xe>
    }
  }
}
 8015710:	bf00      	nop
 8015712:	3710      	adds	r7, #16
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}
 8015718:	2400a440 	.word	0x2400a440

0801571c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801571c:	b5b0      	push	{r4, r5, r7, lr}
 801571e:	b08a      	sub	sp, #40	; 0x28
 8015720:	af04      	add	r7, sp, #16
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d107      	bne.n	801573c <etharp_input+0x20>
 801572c:	4b3d      	ldr	r3, [pc, #244]	; (8015824 <etharp_input+0x108>)
 801572e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8015732:	493d      	ldr	r1, [pc, #244]	; (8015828 <etharp_input+0x10c>)
 8015734:	483d      	ldr	r0, [pc, #244]	; (801582c <etharp_input+0x110>)
 8015736:	f002 f8f5 	bl	8017924 <iprintf>
 801573a:	e06f      	b.n	801581c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015742:	693b      	ldr	r3, [r7, #16]
 8015744:	881b      	ldrh	r3, [r3, #0]
 8015746:	b29b      	uxth	r3, r3
 8015748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801574c:	d10c      	bne.n	8015768 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015752:	2b06      	cmp	r3, #6
 8015754:	d108      	bne.n	8015768 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801575a:	2b04      	cmp	r3, #4
 801575c:	d104      	bne.n	8015768 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	885b      	ldrh	r3, [r3, #2]
 8015762:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015764:	2b08      	cmp	r3, #8
 8015766:	d003      	beq.n	8015770 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f7fa fb9f 	bl	800feac <pbuf_free>
    return;
 801576e:	e055      	b.n	801581c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	330e      	adds	r3, #14
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	3318      	adds	r3, #24
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	3304      	adds	r3, #4
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d102      	bne.n	8015790 <etharp_input+0x74>
    for_us = 0;
 801578a:	2300      	movs	r3, #0
 801578c:	75fb      	strb	r3, [r7, #23]
 801578e:	e009      	b.n	80157a4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015790:	68ba      	ldr	r2, [r7, #8]
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	3304      	adds	r3, #4
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	429a      	cmp	r2, r3
 801579a:	bf0c      	ite	eq
 801579c:	2301      	moveq	r3, #1
 801579e:	2300      	movne	r3, #0
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	f103 0208 	add.w	r2, r3, #8
 80157aa:	7dfb      	ldrb	r3, [r7, #23]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d001      	beq.n	80157b4 <etharp_input+0x98>
 80157b0:	2301      	movs	r3, #1
 80157b2:	e000      	b.n	80157b6 <etharp_input+0x9a>
 80157b4:	2302      	movs	r3, #2
 80157b6:	f107 010c 	add.w	r1, r7, #12
 80157ba:	6838      	ldr	r0, [r7, #0]
 80157bc:	f7ff feb0 	bl	8015520 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	88db      	ldrh	r3, [r3, #6]
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157ca:	d003      	beq.n	80157d4 <etharp_input+0xb8>
 80157cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157d0:	d01e      	beq.n	8015810 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80157d2:	e020      	b.n	8015816 <etharp_input+0xfa>
    if (for_us) {
 80157d4:	7dfb      	ldrb	r3, [r7, #23]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d01c      	beq.n	8015814 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 80157ec:	683b      	ldr	r3, [r7, #0]
 80157ee:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80157f0:	693a      	ldr	r2, [r7, #16]
 80157f2:	3208      	adds	r2, #8
      etharp_raw(netif,
 80157f4:	2102      	movs	r1, #2
 80157f6:	9103      	str	r1, [sp, #12]
 80157f8:	f107 010c 	add.w	r1, r7, #12
 80157fc:	9102      	str	r1, [sp, #8]
 80157fe:	9201      	str	r2, [sp, #4]
 8015800:	9300      	str	r3, [sp, #0]
 8015802:	462b      	mov	r3, r5
 8015804:	4622      	mov	r2, r4
 8015806:	4601      	mov	r1, r0
 8015808:	6838      	ldr	r0, [r7, #0]
 801580a:	f000 fb33 	bl	8015e74 <etharp_raw>
    break;
 801580e:	e001      	b.n	8015814 <etharp_input+0xf8>
    break;
 8015810:	bf00      	nop
 8015812:	e000      	b.n	8015816 <etharp_input+0xfa>
    break;
 8015814:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f7fa fb48 	bl	800feac <pbuf_free>
}
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bdb0      	pop	{r4, r5, r7, pc}
 8015822:	bf00      	nop
 8015824:	0801a160 	.word	0x0801a160
 8015828:	0801a2dc 	.word	0x0801a2dc
 801582c:	0801a1a4 	.word	0x0801a1a4

08015830 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b086      	sub	sp, #24
 8015834:	af02      	add	r7, sp, #8
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	4613      	mov	r3, r2
 801583c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801583e:	79fa      	ldrb	r2, [r7, #7]
 8015840:	4944      	ldr	r1, [pc, #272]	; (8015954 <etharp_output_to_arp_index+0x124>)
 8015842:	4613      	mov	r3, r2
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	4413      	add	r3, r2
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	440b      	add	r3, r1
 801584c:	3314      	adds	r3, #20
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	2b01      	cmp	r3, #1
 8015852:	d806      	bhi.n	8015862 <etharp_output_to_arp_index+0x32>
 8015854:	4b40      	ldr	r3, [pc, #256]	; (8015958 <etharp_output_to_arp_index+0x128>)
 8015856:	f240 22ed 	movw	r2, #749	; 0x2ed
 801585a:	4940      	ldr	r1, [pc, #256]	; (801595c <etharp_output_to_arp_index+0x12c>)
 801585c:	4840      	ldr	r0, [pc, #256]	; (8015960 <etharp_output_to_arp_index+0x130>)
 801585e:	f002 f861 	bl	8017924 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015862:	79fa      	ldrb	r2, [r7, #7]
 8015864:	493b      	ldr	r1, [pc, #236]	; (8015954 <etharp_output_to_arp_index+0x124>)
 8015866:	4613      	mov	r3, r2
 8015868:	005b      	lsls	r3, r3, #1
 801586a:	4413      	add	r3, r2
 801586c:	00db      	lsls	r3, r3, #3
 801586e:	440b      	add	r3, r1
 8015870:	3314      	adds	r3, #20
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	2b02      	cmp	r3, #2
 8015876:	d153      	bne.n	8015920 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015878:	79fa      	ldrb	r2, [r7, #7]
 801587a:	4936      	ldr	r1, [pc, #216]	; (8015954 <etharp_output_to_arp_index+0x124>)
 801587c:	4613      	mov	r3, r2
 801587e:	005b      	lsls	r3, r3, #1
 8015880:	4413      	add	r3, r2
 8015882:	00db      	lsls	r3, r3, #3
 8015884:	440b      	add	r3, r1
 8015886:	3312      	adds	r3, #18
 8015888:	881b      	ldrh	r3, [r3, #0]
 801588a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801588e:	d919      	bls.n	80158c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015890:	79fa      	ldrb	r2, [r7, #7]
 8015892:	4613      	mov	r3, r2
 8015894:	005b      	lsls	r3, r3, #1
 8015896:	4413      	add	r3, r2
 8015898:	00db      	lsls	r3, r3, #3
 801589a:	4a2e      	ldr	r2, [pc, #184]	; (8015954 <etharp_output_to_arp_index+0x124>)
 801589c:	4413      	add	r3, r2
 801589e:	3304      	adds	r3, #4
 80158a0:	4619      	mov	r1, r3
 80158a2:	68f8      	ldr	r0, [r7, #12]
 80158a4:	f000 fb94 	bl	8015fd0 <etharp_request>
 80158a8:	4603      	mov	r3, r0
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d138      	bne.n	8015920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80158ae:	79fa      	ldrb	r2, [r7, #7]
 80158b0:	4928      	ldr	r1, [pc, #160]	; (8015954 <etharp_output_to_arp_index+0x124>)
 80158b2:	4613      	mov	r3, r2
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	4413      	add	r3, r2
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	440b      	add	r3, r1
 80158bc:	3314      	adds	r3, #20
 80158be:	2203      	movs	r2, #3
 80158c0:	701a      	strb	r2, [r3, #0]
 80158c2:	e02d      	b.n	8015920 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80158c4:	79fa      	ldrb	r2, [r7, #7]
 80158c6:	4923      	ldr	r1, [pc, #140]	; (8015954 <etharp_output_to_arp_index+0x124>)
 80158c8:	4613      	mov	r3, r2
 80158ca:	005b      	lsls	r3, r3, #1
 80158cc:	4413      	add	r3, r2
 80158ce:	00db      	lsls	r3, r3, #3
 80158d0:	440b      	add	r3, r1
 80158d2:	3312      	adds	r3, #18
 80158d4:	881b      	ldrh	r3, [r3, #0]
 80158d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80158da:	d321      	bcc.n	8015920 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80158dc:	79fa      	ldrb	r2, [r7, #7]
 80158de:	4613      	mov	r3, r2
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	4413      	add	r3, r2
 80158e4:	00db      	lsls	r3, r3, #3
 80158e6:	4a1b      	ldr	r2, [pc, #108]	; (8015954 <etharp_output_to_arp_index+0x124>)
 80158e8:	4413      	add	r3, r2
 80158ea:	1d19      	adds	r1, r3, #4
 80158ec:	79fa      	ldrb	r2, [r7, #7]
 80158ee:	4613      	mov	r3, r2
 80158f0:	005b      	lsls	r3, r3, #1
 80158f2:	4413      	add	r3, r2
 80158f4:	00db      	lsls	r3, r3, #3
 80158f6:	3308      	adds	r3, #8
 80158f8:	4a16      	ldr	r2, [pc, #88]	; (8015954 <etharp_output_to_arp_index+0x124>)
 80158fa:	4413      	add	r3, r2
 80158fc:	3304      	adds	r3, #4
 80158fe:	461a      	mov	r2, r3
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f000 fb43 	bl	8015f8c <etharp_request_dst>
 8015906:	4603      	mov	r3, r0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d109      	bne.n	8015920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801590c:	79fa      	ldrb	r2, [r7, #7]
 801590e:	4911      	ldr	r1, [pc, #68]	; (8015954 <etharp_output_to_arp_index+0x124>)
 8015910:	4613      	mov	r3, r2
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	4413      	add	r3, r2
 8015916:	00db      	lsls	r3, r3, #3
 8015918:	440b      	add	r3, r1
 801591a:	3314      	adds	r3, #20
 801591c:	2203      	movs	r2, #3
 801591e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8015926:	79fa      	ldrb	r2, [r7, #7]
 8015928:	4613      	mov	r3, r2
 801592a:	005b      	lsls	r3, r3, #1
 801592c:	4413      	add	r3, r2
 801592e:	00db      	lsls	r3, r3, #3
 8015930:	3308      	adds	r3, #8
 8015932:	4a08      	ldr	r2, [pc, #32]	; (8015954 <etharp_output_to_arp_index+0x124>)
 8015934:	4413      	add	r3, r2
 8015936:	1d1a      	adds	r2, r3, #4
 8015938:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801593c:	9300      	str	r3, [sp, #0]
 801593e:	4613      	mov	r3, r2
 8015940:	460a      	mov	r2, r1
 8015942:	68b9      	ldr	r1, [r7, #8]
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f001 fe33 	bl	80175b0 <ethernet_output>
 801594a:	4603      	mov	r3, r0
}
 801594c:	4618      	mov	r0, r3
 801594e:	3710      	adds	r7, #16
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}
 8015954:	2400a440 	.word	0x2400a440
 8015958:	0801a160 	.word	0x0801a160
 801595c:	0801a2fc 	.word	0x0801a2fc
 8015960:	0801a1a4 	.word	0x0801a1a4

08015964 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b08a      	sub	sp, #40	; 0x28
 8015968:	af02      	add	r7, sp, #8
 801596a:	60f8      	str	r0, [r7, #12]
 801596c:	60b9      	str	r1, [r7, #8]
 801596e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d106      	bne.n	8015988 <etharp_output+0x24>
 801597a:	4b69      	ldr	r3, [pc, #420]	; (8015b20 <etharp_output+0x1bc>)
 801597c:	f240 321b 	movw	r2, #795	; 0x31b
 8015980:	4968      	ldr	r1, [pc, #416]	; (8015b24 <etharp_output+0x1c0>)
 8015982:	4869      	ldr	r0, [pc, #420]	; (8015b28 <etharp_output+0x1c4>)
 8015984:	f001 ffce 	bl	8017924 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d106      	bne.n	801599c <etharp_output+0x38>
 801598e:	4b64      	ldr	r3, [pc, #400]	; (8015b20 <etharp_output+0x1bc>)
 8015990:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015994:	4965      	ldr	r1, [pc, #404]	; (8015b2c <etharp_output+0x1c8>)
 8015996:	4864      	ldr	r0, [pc, #400]	; (8015b28 <etharp_output+0x1c4>)
 8015998:	f001 ffc4 	bl	8017924 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d106      	bne.n	80159b0 <etharp_output+0x4c>
 80159a2:	4b5f      	ldr	r3, [pc, #380]	; (8015b20 <etharp_output+0x1bc>)
 80159a4:	f240 321d 	movw	r2, #797	; 0x31d
 80159a8:	4961      	ldr	r1, [pc, #388]	; (8015b30 <etharp_output+0x1cc>)
 80159aa:	485f      	ldr	r0, [pc, #380]	; (8015b28 <etharp_output+0x1c4>)
 80159ac:	f001 ffba 	bl	8017924 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	68f9      	ldr	r1, [r7, #12]
 80159b6:	4618      	mov	r0, r3
 80159b8:	f000 ff58 	bl	801686c <ip4_addr_isbroadcast_u32>
 80159bc:	4603      	mov	r3, r0
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d002      	beq.n	80159c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80159c2:	4b5c      	ldr	r3, [pc, #368]	; (8015b34 <etharp_output+0x1d0>)
 80159c4:	61fb      	str	r3, [r7, #28]
 80159c6:	e09b      	b.n	8015b00 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159d0:	2be0      	cmp	r3, #224	; 0xe0
 80159d2:	d118      	bne.n	8015a06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80159d4:	2301      	movs	r3, #1
 80159d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80159d8:	2300      	movs	r3, #0
 80159da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80159dc:	235e      	movs	r3, #94	; 0x5e
 80159de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	3301      	adds	r3, #1
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159ea:	b2db      	uxtb	r3, r3
 80159ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	3302      	adds	r3, #2
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	3303      	adds	r3, #3
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80159fe:	f107 0310 	add.w	r3, r7, #16
 8015a02:	61fb      	str	r3, [r7, #28]
 8015a04:	e07c      	b.n	8015b00 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	3304      	adds	r3, #4
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	405a      	eors	r2, r3
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	3308      	adds	r3, #8
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	4013      	ands	r3, r2
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d012      	beq.n	8015a44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a24:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d00b      	beq.n	8015a44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	330c      	adds	r3, #12
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d003      	beq.n	8015a3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	330c      	adds	r3, #12
 8015a3a:	61bb      	str	r3, [r7, #24]
 8015a3c:	e002      	b.n	8015a44 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015a3e:	f06f 0303 	mvn.w	r3, #3
 8015a42:	e069      	b.n	8015b18 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a44:	4b3c      	ldr	r3, [pc, #240]	; (8015b38 <etharp_output+0x1d4>)
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	4619      	mov	r1, r3
 8015a4a:	4a3c      	ldr	r2, [pc, #240]	; (8015b3c <etharp_output+0x1d8>)
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	005b      	lsls	r3, r3, #1
 8015a50:	440b      	add	r3, r1
 8015a52:	00db      	lsls	r3, r3, #3
 8015a54:	4413      	add	r3, r2
 8015a56:	3314      	adds	r3, #20
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	2b01      	cmp	r3, #1
 8015a5c:	d917      	bls.n	8015a8e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	681a      	ldr	r2, [r3, #0]
 8015a62:	4b35      	ldr	r3, [pc, #212]	; (8015b38 <etharp_output+0x1d4>)
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	4618      	mov	r0, r3
 8015a68:	4934      	ldr	r1, [pc, #208]	; (8015b3c <etharp_output+0x1d8>)
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	005b      	lsls	r3, r3, #1
 8015a6e:	4403      	add	r3, r0
 8015a70:	00db      	lsls	r3, r3, #3
 8015a72:	440b      	add	r3, r1
 8015a74:	3304      	adds	r3, #4
 8015a76:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d108      	bne.n	8015a8e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015a7c:	4b2e      	ldr	r3, [pc, #184]	; (8015b38 <etharp_output+0x1d4>)
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	461a      	mov	r2, r3
 8015a82:	68b9      	ldr	r1, [r7, #8]
 8015a84:	68f8      	ldr	r0, [r7, #12]
 8015a86:	f7ff fed3 	bl	8015830 <etharp_output_to_arp_index>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	e044      	b.n	8015b18 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a8e:	2300      	movs	r3, #0
 8015a90:	75fb      	strb	r3, [r7, #23]
 8015a92:	e02a      	b.n	8015aea <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015a98:	4928      	ldr	r1, [pc, #160]	; (8015b3c <etharp_output+0x1d8>)
 8015a9a:	4613      	mov	r3, r2
 8015a9c:	005b      	lsls	r3, r3, #1
 8015a9e:	4413      	add	r3, r2
 8015aa0:	00db      	lsls	r3, r3, #3
 8015aa2:	440b      	add	r3, r1
 8015aa4:	3314      	adds	r3, #20
 8015aa6:	781b      	ldrb	r3, [r3, #0]
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d918      	bls.n	8015ade <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015aac:	69bb      	ldr	r3, [r7, #24]
 8015aae:	6819      	ldr	r1, [r3, #0]
 8015ab0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015ab4:	4821      	ldr	r0, [pc, #132]	; (8015b3c <etharp_output+0x1d8>)
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	4413      	add	r3, r2
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	4403      	add	r3, r0
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015ac4:	4299      	cmp	r1, r3
 8015ac6:	d10a      	bne.n	8015ade <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8015ac8:	7dfa      	ldrb	r2, [r7, #23]
 8015aca:	4b1b      	ldr	r3, [pc, #108]	; (8015b38 <etharp_output+0x1d4>)
 8015acc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015ace:	7dfb      	ldrb	r3, [r7, #23]
 8015ad0:	461a      	mov	r2, r3
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f7ff feab 	bl	8015830 <etharp_output_to_arp_index>
 8015ada:	4603      	mov	r3, r0
 8015adc:	e01c      	b.n	8015b18 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ae2:	b2db      	uxtb	r3, r3
 8015ae4:	3301      	adds	r3, #1
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	75fb      	strb	r3, [r7, #23]
 8015aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015aee:	2b09      	cmp	r3, #9
 8015af0:	ddd0      	ble.n	8015a94 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015af2:	68ba      	ldr	r2, [r7, #8]
 8015af4:	69b9      	ldr	r1, [r7, #24]
 8015af6:	68f8      	ldr	r0, [r7, #12]
 8015af8:	f000 f822 	bl	8015b40 <etharp_query>
 8015afc:	4603      	mov	r3, r0
 8015afe:	e00b      	b.n	8015b18 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8015b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015b0a:	9300      	str	r3, [sp, #0]
 8015b0c:	69fb      	ldr	r3, [r7, #28]
 8015b0e:	68b9      	ldr	r1, [r7, #8]
 8015b10:	68f8      	ldr	r0, [r7, #12]
 8015b12:	f001 fd4d 	bl	80175b0 <ethernet_output>
 8015b16:	4603      	mov	r3, r0
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3720      	adds	r7, #32
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}
 8015b20:	0801a160 	.word	0x0801a160
 8015b24:	0801a2dc 	.word	0x0801a2dc
 8015b28:	0801a1a4 	.word	0x0801a1a4
 8015b2c:	0801a198 	.word	0x0801a198
 8015b30:	0801a2cc 	.word	0x0801a2cc
 8015b34:	0801a93c 	.word	0x0801a93c
 8015b38:	2400a530 	.word	0x2400a530
 8015b3c:	2400a440 	.word	0x2400a440

08015b40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b090      	sub	sp, #64	; 0x40
 8015b44:	af02      	add	r7, sp, #8
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	332d      	adds	r3, #45	; 0x2d
 8015b50:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8015b52:	23ff      	movs	r3, #255	; 0xff
 8015b54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	633b      	str	r3, [r7, #48]	; 0x30
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	68f9      	ldr	r1, [r7, #12]
 8015b62:	4618      	mov	r0, r3
 8015b64:	f000 fe82 	bl	801686c <ip4_addr_isbroadcast_u32>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d10c      	bne.n	8015b88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b6e:	68bb      	ldr	r3, [r7, #8]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b76:	2be0      	cmp	r3, #224	; 0xe0
 8015b78:	d006      	beq.n	8015b88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d003      	beq.n	8015b88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d102      	bne.n	8015b8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015b88:	f06f 030f 	mvn.w	r3, #15
 8015b8c:	e15f      	b.n	8015e4e <etharp_query+0x30e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015b8e:	68fa      	ldr	r2, [r7, #12]
 8015b90:	2101      	movs	r1, #1
 8015b92:	68b8      	ldr	r0, [r7, #8]
 8015b94:	f7ff fb78 	bl	8015288 <etharp_find_entry>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	76fb      	strb	r3, [r7, #27]

  /* could not find or create entry? */
  if (i < 0) {
 8015b9c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	da02      	bge.n	8015baa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8015ba4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015ba8:	e151      	b.n	8015e4e <etharp_query+0x30e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015baa:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015bae:	49aa      	ldr	r1, [pc, #680]	; (8015e58 <etharp_query+0x318>)
 8015bb0:	4613      	mov	r3, r2
 8015bb2:	005b      	lsls	r3, r3, #1
 8015bb4:	4413      	add	r3, r2
 8015bb6:	00db      	lsls	r3, r3, #3
 8015bb8:	440b      	add	r3, r1
 8015bba:	3314      	adds	r3, #20
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d117      	bne.n	8015bf2 <etharp_query+0xb2>
    is_new_entry = 1;
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015bc6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015bca:	49a3      	ldr	r1, [pc, #652]	; (8015e58 <etharp_query+0x318>)
 8015bcc:	4613      	mov	r3, r2
 8015bce:	005b      	lsls	r3, r3, #1
 8015bd0:	4413      	add	r3, r2
 8015bd2:	00db      	lsls	r3, r3, #3
 8015bd4:	440b      	add	r3, r1
 8015bd6:	3314      	adds	r3, #20
 8015bd8:	2201      	movs	r2, #1
 8015bda:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015bdc:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015be0:	499d      	ldr	r1, [pc, #628]	; (8015e58 <etharp_query+0x318>)
 8015be2:	4613      	mov	r3, r2
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	4413      	add	r3, r2
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	440b      	add	r3, r1
 8015bec:	3308      	adds	r3, #8
 8015bee:	68fa      	ldr	r2, [r7, #12]
 8015bf0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015bf2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015bf6:	4998      	ldr	r1, [pc, #608]	; (8015e58 <etharp_query+0x318>)
 8015bf8:	4613      	mov	r3, r2
 8015bfa:	005b      	lsls	r3, r3, #1
 8015bfc:	4413      	add	r3, r2
 8015bfe:	00db      	lsls	r3, r3, #3
 8015c00:	440b      	add	r3, r1
 8015c02:	3314      	adds	r3, #20
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	d012      	beq.n	8015c30 <etharp_query+0xf0>
 8015c0a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c0e:	4992      	ldr	r1, [pc, #584]	; (8015e58 <etharp_query+0x318>)
 8015c10:	4613      	mov	r3, r2
 8015c12:	005b      	lsls	r3, r3, #1
 8015c14:	4413      	add	r3, r2
 8015c16:	00db      	lsls	r3, r3, #3
 8015c18:	440b      	add	r3, r1
 8015c1a:	3314      	adds	r3, #20
 8015c1c:	781b      	ldrb	r3, [r3, #0]
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d806      	bhi.n	8015c30 <etharp_query+0xf0>
 8015c22:	4b8e      	ldr	r3, [pc, #568]	; (8015e5c <etharp_query+0x31c>)
 8015c24:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015c28:	498d      	ldr	r1, [pc, #564]	; (8015e60 <etharp_query+0x320>)
 8015c2a:	488e      	ldr	r0, [pc, #568]	; (8015e64 <etharp_query+0x324>)
 8015c2c:	f001 fe7a 	bl	8017924 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d102      	bne.n	8015c3c <etharp_query+0xfc>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d10c      	bne.n	8015c56 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015c3c:	68b9      	ldr	r1, [r7, #8]
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f000 f9c6 	bl	8015fd0 <etharp_request>
 8015c44:	4603      	mov	r3, r0
 8015c46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d102      	bne.n	8015c56 <etharp_query+0x116>
      return result;
 8015c50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8015c54:	e0fb      	b.n	8015e4e <etharp_query+0x30e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d106      	bne.n	8015c6a <etharp_query+0x12a>
 8015c5c:	4b7f      	ldr	r3, [pc, #508]	; (8015e5c <etharp_query+0x31c>)
 8015c5e:	f240 32db 	movw	r2, #987	; 0x3db
 8015c62:	4981      	ldr	r1, [pc, #516]	; (8015e68 <etharp_query+0x328>)
 8015c64:	487f      	ldr	r0, [pc, #508]	; (8015e64 <etharp_query+0x324>)
 8015c66:	f001 fe5d 	bl	8017924 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015c6a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c6e:	497a      	ldr	r1, [pc, #488]	; (8015e58 <etharp_query+0x318>)
 8015c70:	4613      	mov	r3, r2
 8015c72:	005b      	lsls	r3, r3, #1
 8015c74:	4413      	add	r3, r2
 8015c76:	00db      	lsls	r3, r3, #3
 8015c78:	440b      	add	r3, r1
 8015c7a:	3314      	adds	r3, #20
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	d919      	bls.n	8015cb6 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8015c82:	7efa      	ldrb	r2, [r7, #27]
 8015c84:	4b79      	ldr	r3, [pc, #484]	; (8015e6c <etharp_query+0x32c>)
 8015c86:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015c88:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	005b      	lsls	r3, r3, #1
 8015c90:	4413      	add	r3, r2
 8015c92:	00db      	lsls	r3, r3, #3
 8015c94:	3308      	adds	r3, #8
 8015c96:	4a70      	ldr	r2, [pc, #448]	; (8015e58 <etharp_query+0x318>)
 8015c98:	4413      	add	r3, r2
 8015c9a:	1d1a      	adds	r2, r3, #4
 8015c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015ca0:	9300      	str	r3, [sp, #0]
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	69fa      	ldr	r2, [r7, #28]
 8015ca6:	6879      	ldr	r1, [r7, #4]
 8015ca8:	68f8      	ldr	r0, [r7, #12]
 8015caa:	f001 fc81 	bl	80175b0 <ethernet_output>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015cb4:	e0c9      	b.n	8015e4a <etharp_query+0x30a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015cb6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015cba:	4967      	ldr	r1, [pc, #412]	; (8015e58 <etharp_query+0x318>)
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	005b      	lsls	r3, r3, #1
 8015cc0:	4413      	add	r3, r2
 8015cc2:	00db      	lsls	r3, r3, #3
 8015cc4:	440b      	add	r3, r1
 8015cc6:	3314      	adds	r3, #20
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	2b01      	cmp	r3, #1
 8015ccc:	f040 80bd 	bne.w	8015e4a <etharp_query+0x30a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 8015cd8:	e01a      	b.n	8015d10 <etharp_query+0x1d0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cdc:	895a      	ldrh	r2, [r3, #10]
 8015cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce0:	891b      	ldrh	r3, [r3, #8]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d10a      	bne.n	8015cfc <etharp_query+0x1bc>
 8015ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d006      	beq.n	8015cfc <etharp_query+0x1bc>
 8015cee:	4b5b      	ldr	r3, [pc, #364]	; (8015e5c <etharp_query+0x31c>)
 8015cf0:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8015cf4:	495e      	ldr	r1, [pc, #376]	; (8015e70 <etharp_query+0x330>)
 8015cf6:	485b      	ldr	r0, [pc, #364]	; (8015e64 <etharp_query+0x324>)
 8015cf8:	f001 fe14 	bl	8017924 <iprintf>
      if (p->type != PBUF_ROM) {
 8015cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cfe:	7b1b      	ldrb	r3, [r3, #12]
 8015d00:	2b01      	cmp	r3, #1
 8015d02:	d002      	beq.n	8015d0a <etharp_query+0x1ca>
        copy_needed = 1;
 8015d04:	2301      	movs	r3, #1
 8015d06:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8015d08:	e005      	b.n	8015d16 <etharp_query+0x1d6>
      }
      p = p->next;
 8015d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 8015d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d1e1      	bne.n	8015cda <etharp_query+0x19a>
    }
    if (copy_needed) {
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d017      	beq.n	8015d4c <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8015d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1e:	891b      	ldrh	r3, [r3, #8]
 8015d20:	2200      	movs	r2, #0
 8015d22:	4619      	mov	r1, r3
 8015d24:	2002      	movs	r0, #2
 8015d26:	f7f9 fd4f 	bl	800f7c8 <pbuf_alloc>
 8015d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (p != NULL) {
 8015d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d011      	beq.n	8015d56 <etharp_query+0x216>
        if (pbuf_copy(p, q) != ERR_OK) {
 8015d32:	6879      	ldr	r1, [r7, #4]
 8015d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d36:	f7fa f9e9 	bl	801010c <pbuf_copy>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d00a      	beq.n	8015d56 <etharp_query+0x216>
          pbuf_free(p);
 8015d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d42:	f7fa f8b3 	bl	800feac <pbuf_free>
          p = NULL;
 8015d46:	2300      	movs	r3, #0
 8015d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d4a:	e004      	b.n	8015d56 <etharp_query+0x216>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 8015d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d52:	f7fa f95d 	bl	8010010 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d073      	beq.n	8015e44 <etharp_query+0x304>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8015d5c:	200a      	movs	r0, #10
 8015d5e:	f7f9 fa5b 	bl	800f218 <memp_malloc>
 8015d62:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d065      	beq.n	8015e36 <etharp_query+0x2f6>
        unsigned int qlen = 0;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	2200      	movs	r2, #0
 8015d72:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d78:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8015d7a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015d7e:	4936      	ldr	r1, [pc, #216]	; (8015e58 <etharp_query+0x318>)
 8015d80:	4613      	mov	r3, r2
 8015d82:	005b      	lsls	r3, r3, #1
 8015d84:	4413      	add	r3, r2
 8015d86:	00db      	lsls	r3, r3, #3
 8015d88:	440b      	add	r3, r1
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d01b      	beq.n	8015dc8 <etharp_query+0x288>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8015d90:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015d94:	4930      	ldr	r1, [pc, #192]	; (8015e58 <etharp_query+0x318>)
 8015d96:	4613      	mov	r3, r2
 8015d98:	005b      	lsls	r3, r3, #1
 8015d9a:	4413      	add	r3, r2
 8015d9c:	00db      	lsls	r3, r3, #3
 8015d9e:	440b      	add	r3, r1
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	623b      	str	r3, [r7, #32]
          qlen++;
 8015da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da6:	3301      	adds	r3, #1
 8015da8:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 8015daa:	e005      	b.n	8015db8 <etharp_query+0x278>
            r = r->next;
 8015dac:	6a3b      	ldr	r3, [r7, #32]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	623b      	str	r3, [r7, #32]
            qlen++;
 8015db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db4:	3301      	adds	r3, #1
 8015db6:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 8015db8:	6a3b      	ldr	r3, [r7, #32]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d1f5      	bne.n	8015dac <etharp_query+0x26c>
          }
          r->next = new_entry;
 8015dc0:	6a3b      	ldr	r3, [r7, #32]
 8015dc2:	697a      	ldr	r2, [r7, #20]
 8015dc4:	601a      	str	r2, [r3, #0]
 8015dc6:	e009      	b.n	8015ddc <etharp_query+0x29c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 8015dc8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015dcc:	4922      	ldr	r1, [pc, #136]	; (8015e58 <etharp_query+0x318>)
 8015dce:	4613      	mov	r3, r2
 8015dd0:	005b      	lsls	r3, r3, #1
 8015dd2:	4413      	add	r3, r2
 8015dd4:	00db      	lsls	r3, r3, #3
 8015dd6:	440b      	add	r3, r1
 8015dd8:	697a      	ldr	r2, [r7, #20]
 8015dda:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 8015ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dde:	2b02      	cmp	r3, #2
 8015de0:	d925      	bls.n	8015e2e <etharp_query+0x2ee>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8015de2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015de6:	491c      	ldr	r1, [pc, #112]	; (8015e58 <etharp_query+0x318>)
 8015de8:	4613      	mov	r3, r2
 8015dea:	005b      	lsls	r3, r3, #1
 8015dec:	4413      	add	r3, r2
 8015dee:	00db      	lsls	r3, r3, #3
 8015df0:	440b      	add	r3, r1
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8015df6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015dfa:	4917      	ldr	r1, [pc, #92]	; (8015e58 <etharp_query+0x318>)
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	005b      	lsls	r3, r3, #1
 8015e00:	4413      	add	r3, r2
 8015e02:	00db      	lsls	r3, r3, #3
 8015e04:	440b      	add	r3, r1
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015e0c:	6819      	ldr	r1, [r3, #0]
 8015e0e:	4812      	ldr	r0, [pc, #72]	; (8015e58 <etharp_query+0x318>)
 8015e10:	4613      	mov	r3, r2
 8015e12:	005b      	lsls	r3, r3, #1
 8015e14:	4413      	add	r3, r2
 8015e16:	00db      	lsls	r3, r3, #3
 8015e18:	4403      	add	r3, r0
 8015e1a:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	685b      	ldr	r3, [r3, #4]
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7fa f843 	bl	800feac <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8015e26:	6939      	ldr	r1, [r7, #16]
 8015e28:	200a      	movs	r0, #10
 8015e2a:	f7f9 fa6b 	bl	800f304 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015e34:	e009      	b.n	8015e4a <etharp_query+0x30a>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8015e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e38:	f7fa f838 	bl	800feac <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 8015e3c:	23ff      	movs	r3, #255	; 0xff
 8015e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015e42:	e002      	b.n	8015e4a <etharp_query+0x30a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015e44:	23ff      	movs	r3, #255	; 0xff
 8015e46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 8015e4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3738      	adds	r7, #56	; 0x38
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
 8015e56:	bf00      	nop
 8015e58:	2400a440 	.word	0x2400a440
 8015e5c:	0801a160 	.word	0x0801a160
 8015e60:	0801a32c 	.word	0x0801a32c
 8015e64:	0801a1a4 	.word	0x0801a1a4
 8015e68:	0801a198 	.word	0x0801a198
 8015e6c:	2400a530 	.word	0x2400a530
 8015e70:	0801a354 	.word	0x0801a354

08015e74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b08a      	sub	sp, #40	; 0x28
 8015e78:	af02      	add	r7, sp, #8
 8015e7a:	60f8      	str	r0, [r7, #12]
 8015e7c:	60b9      	str	r1, [r7, #8]
 8015e7e:	607a      	str	r2, [r7, #4]
 8015e80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015e82:	2300      	movs	r3, #0
 8015e84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d106      	bne.n	8015e9a <etharp_raw+0x26>
 8015e8c:	4b3a      	ldr	r3, [pc, #232]	; (8015f78 <etharp_raw+0x104>)
 8015e8e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8015e92:	493a      	ldr	r1, [pc, #232]	; (8015f7c <etharp_raw+0x108>)
 8015e94:	483a      	ldr	r0, [pc, #232]	; (8015f80 <etharp_raw+0x10c>)
 8015e96:	f001 fd45 	bl	8017924 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	211c      	movs	r1, #28
 8015e9e:	2002      	movs	r0, #2
 8015ea0:	f7f9 fc92 	bl	800f7c8 <pbuf_alloc>
 8015ea4:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015ea6:	69bb      	ldr	r3, [r7, #24]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d102      	bne.n	8015eb2 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015eac:	f04f 33ff 	mov.w	r3, #4294967295
 8015eb0:	e05d      	b.n	8015f6e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015eb2:	69bb      	ldr	r3, [r7, #24]
 8015eb4:	895b      	ldrh	r3, [r3, #10]
 8015eb6:	2b1b      	cmp	r3, #27
 8015eb8:	d806      	bhi.n	8015ec8 <etharp_raw+0x54>
 8015eba:	4b2f      	ldr	r3, [pc, #188]	; (8015f78 <etharp_raw+0x104>)
 8015ebc:	f240 4264 	movw	r2, #1124	; 0x464
 8015ec0:	4930      	ldr	r1, [pc, #192]	; (8015f84 <etharp_raw+0x110>)
 8015ec2:	482f      	ldr	r0, [pc, #188]	; (8015f80 <etharp_raw+0x10c>)
 8015ec4:	f001 fd2e 	bl	8017924 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015ece:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f8 fcdb 	bl	800e88c <lwip_htons>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	461a      	mov	r2, r3
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015ee4:	2b06      	cmp	r3, #6
 8015ee6:	d006      	beq.n	8015ef6 <etharp_raw+0x82>
 8015ee8:	4b23      	ldr	r3, [pc, #140]	; (8015f78 <etharp_raw+0x104>)
 8015eea:	f240 426b 	movw	r2, #1131	; 0x46b
 8015eee:	4926      	ldr	r1, [pc, #152]	; (8015f88 <etharp_raw+0x114>)
 8015ef0:	4823      	ldr	r0, [pc, #140]	; (8015f80 <etharp_raw+0x10c>)
 8015ef2:	f001 fd17 	bl	8017924 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8015ef6:	697b      	ldr	r3, [r7, #20]
 8015ef8:	3308      	adds	r3, #8
 8015efa:	2206      	movs	r2, #6
 8015efc:	6839      	ldr	r1, [r7, #0]
 8015efe:	4618      	mov	r0, r3
 8015f00:	f001 fcfd 	bl	80178fe <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	3312      	adds	r3, #18
 8015f08:	2206      	movs	r2, #6
 8015f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f001 fcf6 	bl	80178fe <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8015f12:	697b      	ldr	r3, [r7, #20]
 8015f14:	330e      	adds	r3, #14
 8015f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f18:	6812      	ldr	r2, [r2, #0]
 8015f1a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	3318      	adds	r3, #24
 8015f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f22:	6812      	ldr	r2, [r2, #0]
 8015f24:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	2200      	movs	r2, #0
 8015f2a:	701a      	strb	r2, [r3, #0]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	f042 0201 	orr.w	r2, r2, #1
 8015f32:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	2200      	movs	r2, #0
 8015f38:	f042 0208 	orr.w	r2, r2, #8
 8015f3c:	709a      	strb	r2, [r3, #2]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	2206      	movs	r2, #6
 8015f46:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	2204      	movs	r2, #4
 8015f4c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015f4e:	f640 0306 	movw	r3, #2054	; 0x806
 8015f52:	9300      	str	r3, [sp, #0]
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	68ba      	ldr	r2, [r7, #8]
 8015f58:	69b9      	ldr	r1, [r7, #24]
 8015f5a:	68f8      	ldr	r0, [r7, #12]
 8015f5c:	f001 fb28 	bl	80175b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015f60:	69b8      	ldr	r0, [r7, #24]
 8015f62:	f7f9 ffa3 	bl	800feac <pbuf_free>
  p = NULL;
 8015f66:	2300      	movs	r3, #0
 8015f68:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015f6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3720      	adds	r7, #32
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	0801a160 	.word	0x0801a160
 8015f7c:	0801a2dc 	.word	0x0801a2dc
 8015f80:	0801a1a4 	.word	0x0801a1a4
 8015f84:	0801a370 	.word	0x0801a370
 8015f88:	0801a3a4 	.word	0x0801a3a4

08015f8c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b088      	sub	sp, #32
 8015f90:	af04      	add	r7, sp, #16
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015fa8:	2201      	movs	r2, #1
 8015faa:	9203      	str	r2, [sp, #12]
 8015fac:	68ba      	ldr	r2, [r7, #8]
 8015fae:	9202      	str	r2, [sp, #8]
 8015fb0:	4a06      	ldr	r2, [pc, #24]	; (8015fcc <etharp_request_dst+0x40>)
 8015fb2:	9201      	str	r2, [sp, #4]
 8015fb4:	9300      	str	r3, [sp, #0]
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	68f8      	ldr	r0, [r7, #12]
 8015fbc:	f7ff ff5a 	bl	8015e74 <etharp_raw>
 8015fc0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	3710      	adds	r7, #16
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	bd80      	pop	{r7, pc}
 8015fca:	bf00      	nop
 8015fcc:	0801a944 	.word	0x0801a944

08015fd0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b082      	sub	sp, #8
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015fda:	4a05      	ldr	r2, [pc, #20]	; (8015ff0 <etharp_request+0x20>)
 8015fdc:	6839      	ldr	r1, [r7, #0]
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f7ff ffd4 	bl	8015f8c <etharp_request_dst>
 8015fe4:	4603      	mov	r3, r0
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3708      	adds	r7, #8
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	0801a93c 	.word	0x0801a93c

08015ff4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b08e      	sub	sp, #56	; 0x38
 8015ff8:	af04      	add	r7, sp, #16
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015ffe:	4b87      	ldr	r3, [pc, #540]	; (801621c <icmp_input+0x228>)
 8016000:	689b      	ldr	r3, [r3, #8]
 8016002:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL(iphdr_in) * 4;
 8016004:	6a3b      	ldr	r3, [r7, #32]
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	b29b      	uxth	r3, r3
 801600a:	f003 030f 	and.w	r3, r3, #15
 801600e:	b29b      	uxth	r3, r3
 8016010:	009b      	lsls	r3, r3, #2
 8016012:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8016014:	8bfb      	ldrh	r3, [r7, #30]
 8016016:	2b13      	cmp	r3, #19
 8016018:	f240 80ee 	bls.w	80161f8 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	895b      	ldrh	r3, [r3, #10]
 8016020:	2b03      	cmp	r3, #3
 8016022:	f240 80eb 	bls.w	80161fc <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801602e:	7f7b      	ldrb	r3, [r7, #29]
 8016030:	2b00      	cmp	r3, #0
 8016032:	f000 80da 	beq.w	80161ea <icmp_input+0x1f6>
 8016036:	2b08      	cmp	r3, #8
 8016038:	f040 80da 	bne.w	80161f0 <icmp_input+0x1fc>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801603c:	4b78      	ldr	r3, [pc, #480]	; (8016220 <icmp_input+0x22c>)
 801603e:	627b      	str	r3, [r7, #36]	; 0x24
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016040:	4b76      	ldr	r3, [pc, #472]	; (801621c <icmp_input+0x228>)
 8016042:	695b      	ldr	r3, [r3, #20]
 8016044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016048:	2be0      	cmp	r3, #224	; 0xe0
 801604a:	d102      	bne.n	8016052 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
      /* For multicast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	3304      	adds	r3, #4
 8016050:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016052:	4b72      	ldr	r3, [pc, #456]	; (801621c <icmp_input+0x228>)
 8016054:	695a      	ldr	r2, [r3, #20]
 8016056:	4b71      	ldr	r3, [pc, #452]	; (801621c <icmp_input+0x228>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	4619      	mov	r1, r3
 801605c:	4610      	mov	r0, r2
 801605e:	f000 fc05 	bl	801686c <ip4_addr_isbroadcast_u32>
 8016062:	4603      	mov	r3, r0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d002      	beq.n	801606e <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
      /* For broadcast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	3304      	adds	r3, #4
 801606c:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	891b      	ldrh	r3, [r3, #8]
 8016072:	2b07      	cmp	r3, #7
 8016074:	f240 80c4 	bls.w	8016200 <icmp_input+0x20c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7f8 fc9d 	bl	800e9b8 <inet_chksum_pbuf>
 801607e:	4603      	mov	r3, r0
 8016080:	2b00      	cmp	r3, #0
 8016082:	d003      	beq.n	801608c <icmp_input+0x98>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f7f9 ff11 	bl	800feac <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
        MIB2_STATS_INC(mib2.icmpinerrors);
        return;
 801608a:	e0c3      	b.n	8016214 <icmp_input+0x220>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801608c:	8bfb      	ldrh	r3, [r7, #30]
 801608e:	330e      	adds	r3, #14
 8016090:	b29b      	uxth	r3, r3
 8016092:	b21b      	sxth	r3, r3
 8016094:	4619      	mov	r1, r3
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f7f9 fee4 	bl	800fe64 <pbuf_header>
 801609c:	4603      	mov	r3, r0
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d046      	beq.n	8016130 <icmp_input+0x13c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	891a      	ldrh	r2, [r3, #8]
 80160a6:	8bfb      	ldrh	r3, [r7, #30]
 80160a8:	4413      	add	r3, r2
 80160aa:	b29b      	uxth	r3, r3
 80160ac:	2200      	movs	r2, #0
 80160ae:	4619      	mov	r1, r3
 80160b0:	2002      	movs	r0, #2
 80160b2:	f7f9 fb89 	bl	800f7c8 <pbuf_alloc>
 80160b6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80160b8:	69bb      	ldr	r3, [r7, #24]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	f000 80a5 	beq.w	801620a <icmp_input+0x216>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	895b      	ldrh	r3, [r3, #10]
 80160c4:	461a      	mov	r2, r3
 80160c6:	8bfb      	ldrh	r3, [r7, #30]
 80160c8:	3308      	adds	r3, #8
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d203      	bcs.n	80160d6 <icmp_input+0xe2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80160ce:	69b8      	ldr	r0, [r7, #24]
 80160d0:	f7f9 feec 	bl	800feac <pbuf_free>
        goto icmperr;
 80160d4:	e09a      	b.n	801620c <icmp_input+0x218>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	8bfa      	ldrh	r2, [r7, #30]
 80160dc:	6a39      	ldr	r1, [r7, #32]
 80160de:	4618      	mov	r0, r3
 80160e0:	f001 fc0d 	bl	80178fe <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80160e4:	8bfb      	ldrh	r3, [r7, #30]
 80160e6:	425b      	negs	r3, r3
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	b21b      	sxth	r3, r3
 80160ec:	4619      	mov	r1, r3
 80160ee:	69b8      	ldr	r0, [r7, #24]
 80160f0:	f7f9 feb8 	bl	800fe64 <pbuf_header>
 80160f4:	4603      	mov	r3, r0
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d009      	beq.n	801610e <icmp_input+0x11a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80160fa:	4b4a      	ldr	r3, [pc, #296]	; (8016224 <icmp_input+0x230>)
 80160fc:	22af      	movs	r2, #175	; 0xaf
 80160fe:	494a      	ldr	r1, [pc, #296]	; (8016228 <icmp_input+0x234>)
 8016100:	484a      	ldr	r0, [pc, #296]	; (801622c <icmp_input+0x238>)
 8016102:	f001 fc0f 	bl	8017924 <iprintf>
        pbuf_free(r);
 8016106:	69b8      	ldr	r0, [r7, #24]
 8016108:	f7f9 fed0 	bl	800feac <pbuf_free>
        goto icmperr;
 801610c:	e07e      	b.n	801620c <icmp_input+0x218>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801610e:	6879      	ldr	r1, [r7, #4]
 8016110:	69b8      	ldr	r0, [r7, #24]
 8016112:	f7f9 fffb 	bl	801010c <pbuf_copy>
 8016116:	4603      	mov	r3, r0
 8016118:	2b00      	cmp	r3, #0
 801611a:	d003      	beq.n	8016124 <icmp_input+0x130>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801611c:	69b8      	ldr	r0, [r7, #24]
 801611e:	f7f9 fec5 	bl	800feac <pbuf_free>
        goto icmperr;
 8016122:	e073      	b.n	801620c <icmp_input+0x218>
      }
      /* free the original p */
      pbuf_free(p);
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f7f9 fec1 	bl	800feac <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	607b      	str	r3, [r7, #4]
 801612e:	e015      	b.n	801615c <icmp_input+0x168>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016130:	8bfb      	ldrh	r3, [r7, #30]
 8016132:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8016136:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801613a:	33f2      	adds	r3, #242	; 0xf2
 801613c:	b29b      	uxth	r3, r3
 801613e:	b21b      	sxth	r3, r3
 8016140:	4619      	mov	r1, r3
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f7f9 fe8e 	bl	800fe64 <pbuf_header>
 8016148:	4603      	mov	r3, r0
 801614a:	2b00      	cmp	r3, #0
 801614c:	d006      	beq.n	801615c <icmp_input+0x168>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801614e:	4b35      	ldr	r3, [pc, #212]	; (8016224 <icmp_input+0x230>)
 8016150:	22c0      	movs	r2, #192	; 0xc0
 8016152:	4937      	ldr	r1, [pc, #220]	; (8016230 <icmp_input+0x23c>)
 8016154:	4835      	ldr	r0, [pc, #212]	; (801622c <icmp_input+0x238>)
 8016156:	f001 fbe5 	bl	8017924 <iprintf>
        goto icmperr;
 801615a:	e057      	b.n	801620c <icmp_input+0x218>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016162:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016166:	4619      	mov	r1, r3
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f7f9 fe7b 	bl	800fe64 <pbuf_header>
 801616e:	4603      	mov	r3, r0
 8016170:	2b00      	cmp	r3, #0
 8016172:	d13c      	bne.n	80161ee <icmp_input+0x1fa>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617c:	681a      	ldr	r2, [r3, #0]
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016182:	4b26      	ldr	r3, [pc, #152]	; (801621c <icmp_input+0x228>)
 8016184:	691a      	ldr	r2, [r3, #16]
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	2200      	movs	r2, #0
 801618e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	885b      	ldrh	r3, [r3, #2]
 8016194:	b29b      	uxth	r3, r3
 8016196:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801619a:	4293      	cmp	r3, r2
 801619c:	d907      	bls.n	80161ae <icmp_input+0x1ba>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 801619e:	697b      	ldr	r3, [r7, #20]
 80161a0:	885b      	ldrh	r3, [r3, #2]
 80161a2:	b29b      	uxth	r3, r3
 80161a4:	3309      	adds	r3, #9
 80161a6:	b29a      	uxth	r2, r3
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	805a      	strh	r2, [r3, #2]
 80161ac:	e006      	b.n	80161bc <icmp_input+0x1c8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	885b      	ldrh	r3, [r3, #2]
 80161b2:	b29b      	uxth	r3, r3
 80161b4:	3308      	adds	r3, #8
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	22ff      	movs	r2, #255	; 0xff
 80161c0:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	2200      	movs	r2, #0
 80161c6:	729a      	strb	r2, [r3, #10]
 80161c8:	2200      	movs	r2, #0
 80161ca:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	9302      	str	r3, [sp, #8]
 80161d0:	2301      	movs	r3, #1
 80161d2:	9301      	str	r3, [sp, #4]
 80161d4:	2300      	movs	r3, #0
 80161d6:	9300      	str	r3, [sp, #0]
 80161d8:	23ff      	movs	r3, #255	; 0xff
 80161da:	2200      	movs	r2, #0
 80161dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f000 fa72 	bl	80166c8 <ip4_output_if>
 80161e4:	4603      	mov	r3, r0
 80161e6:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80161e8:	e001      	b.n	80161ee <icmp_input+0x1fa>
    break;
 80161ea:	bf00      	nop
 80161ec:	e000      	b.n	80161f0 <icmp_input+0x1fc>
    break;
 80161ee:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f7f9 fe5b 	bl	800feac <pbuf_free>
  return;
 80161f6:	e00d      	b.n	8016214 <icmp_input+0x220>
    goto lenerr;
 80161f8:	bf00      	nop
 80161fa:	e002      	b.n	8016202 <icmp_input+0x20e>
    goto lenerr;
 80161fc:	bf00      	nop
 80161fe:	e000      	b.n	8016202 <icmp_input+0x20e>
      goto lenerr;
 8016200:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f7f9 fe52 	bl	800feac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016208:	e004      	b.n	8016214 <icmp_input+0x220>
        goto icmperr;
 801620a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f7f9 fe4d 	bl	800feac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016212:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016214:	3728      	adds	r7, #40	; 0x28
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
 801621a:	bf00      	nop
 801621c:	2400a850 	.word	0x2400a850
 8016220:	2400a864 	.word	0x2400a864
 8016224:	0801a3e8 	.word	0x0801a3e8
 8016228:	0801a420 	.word	0x0801a420
 801622c:	0801a458 	.word	0x0801a458
 8016230:	0801a480 	.word	0x0801a480

08016234 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b082      	sub	sp, #8
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	460b      	mov	r3, r1
 801623e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016240:	78fb      	ldrb	r3, [r7, #3]
 8016242:	461a      	mov	r2, r3
 8016244:	2103      	movs	r1, #3
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f000 f814 	bl	8016274 <icmp_send_response>
}
 801624c:	bf00      	nop
 801624e:	3708      	adds	r7, #8
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}

08016254 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b082      	sub	sp, #8
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	460b      	mov	r3, r1
 801625e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016260:	78fb      	ldrb	r3, [r7, #3]
 8016262:	461a      	mov	r2, r3
 8016264:	210b      	movs	r1, #11
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f000 f804 	bl	8016274 <icmp_send_response>
}
 801626c:	bf00      	nop
 801626e:	3708      	adds	r7, #8
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b08c      	sub	sp, #48	; 0x30
 8016278:	af04      	add	r7, sp, #16
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	460b      	mov	r3, r1
 801627e:	70fb      	strb	r3, [r7, #3]
 8016280:	4613      	mov	r3, r2
 8016282:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016284:	2200      	movs	r2, #0
 8016286:	2124      	movs	r1, #36	; 0x24
 8016288:	2001      	movs	r0, #1
 801628a:	f7f9 fa9d 	bl	800f7c8 <pbuf_alloc>
 801628e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d056      	beq.n	8016344 <icmp_send_response+0xd0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016296:	69fb      	ldr	r3, [r7, #28]
 8016298:	895b      	ldrh	r3, [r3, #10]
 801629a:	2b23      	cmp	r3, #35	; 0x23
 801629c:	d806      	bhi.n	80162ac <icmp_send_response+0x38>
 801629e:	4b2b      	ldr	r3, [pc, #172]	; (801634c <icmp_send_response+0xd8>)
 80162a0:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80162a4:	492a      	ldr	r1, [pc, #168]	; (8016350 <icmp_send_response+0xdc>)
 80162a6:	482b      	ldr	r0, [pc, #172]	; (8016354 <icmp_send_response+0xe0>)
 80162a8:	f001 fb3c 	bl	8017924 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	78fa      	ldrb	r2, [r7, #3]
 80162bc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	78ba      	ldrb	r2, [r7, #2]
 80162c2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80162c4:	697b      	ldr	r3, [r7, #20]
 80162c6:	2200      	movs	r2, #0
 80162c8:	711a      	strb	r2, [r3, #4]
 80162ca:	2200      	movs	r2, #0
 80162cc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80162ce:	697b      	ldr	r3, [r7, #20]
 80162d0:	2200      	movs	r2, #0
 80162d2:	719a      	strb	r2, [r3, #6]
 80162d4:	2200      	movs	r2, #0
 80162d6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80162d8:	69fb      	ldr	r3, [r7, #28]
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	f103 0008 	add.w	r0, r3, #8
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	221c      	movs	r2, #28
 80162e6:	4619      	mov	r1, r3
 80162e8:	f001 fb09 	bl	80178fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80162ec:	69bb      	ldr	r3, [r7, #24]
 80162ee:	68db      	ldr	r3, [r3, #12]
 80162f0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80162f2:	f107 030c 	add.w	r3, r7, #12
 80162f6:	4618      	mov	r0, r3
 80162f8:	f000 f82e 	bl	8016358 <ip4_route>
 80162fc:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80162fe:	693b      	ldr	r3, [r7, #16]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d01b      	beq.n	801633c <icmp_send_response+0xc8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	2200      	movs	r2, #0
 8016308:	709a      	strb	r2, [r3, #2]
 801630a:	2200      	movs	r2, #0
 801630c:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801630e:	69fb      	ldr	r3, [r7, #28]
 8016310:	895b      	ldrh	r3, [r3, #10]
 8016312:	4619      	mov	r1, r3
 8016314:	6978      	ldr	r0, [r7, #20]
 8016316:	f7f8 fb3d 	bl	800e994 <inet_chksum>
 801631a:	4603      	mov	r3, r0
 801631c:	461a      	mov	r2, r3
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016322:	f107 020c 	add.w	r2, r7, #12
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	9302      	str	r3, [sp, #8]
 801632a:	2301      	movs	r3, #1
 801632c:	9301      	str	r3, [sp, #4]
 801632e:	2300      	movs	r3, #0
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	23ff      	movs	r3, #255	; 0xff
 8016334:	2100      	movs	r1, #0
 8016336:	69f8      	ldr	r0, [r7, #28]
 8016338:	f000 f9c6 	bl	80166c8 <ip4_output_if>
  }
  pbuf_free(q);
 801633c:	69f8      	ldr	r0, [r7, #28]
 801633e:	f7f9 fdb5 	bl	800feac <pbuf_free>
 8016342:	e000      	b.n	8016346 <icmp_send_response+0xd2>
    return;
 8016344:	bf00      	nop
}
 8016346:	3720      	adds	r7, #32
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}
 801634c:	0801a3e8 	.word	0x0801a3e8
 8016350:	0801a4b4 	.word	0x0801a4b4
 8016354:	0801a458 	.word	0x0801a458

08016358 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016358:	b480      	push	{r7}
 801635a:	b085      	sub	sp, #20
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016368:	2be0      	cmp	r3, #224	; 0xe0
 801636a:	d106      	bne.n	801637a <ip4_route+0x22>
 801636c:	4b34      	ldr	r3, [pc, #208]	; (8016440 <ip4_route+0xe8>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d002      	beq.n	801637a <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8016374:	4b32      	ldr	r3, [pc, #200]	; (8016440 <ip4_route+0xe8>)
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	e05b      	b.n	8016432 <ip4_route+0xda>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801637a:	4b32      	ldr	r3, [pc, #200]	; (8016444 <ip4_route+0xec>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	60fb      	str	r3, [r7, #12]
 8016380:	e036      	b.n	80163f0 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016388:	f003 0301 	and.w	r3, r3, #1
 801638c:	b2db      	uxtb	r3, r3
 801638e:	2b00      	cmp	r3, #0
 8016390:	d02b      	beq.n	80163ea <ip4_route+0x92>
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016398:	089b      	lsrs	r3, r3, #2
 801639a:	f003 0301 	and.w	r3, r3, #1
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d022      	beq.n	80163ea <ip4_route+0x92>
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	3304      	adds	r3, #4
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d01d      	beq.n	80163ea <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	3304      	adds	r3, #4
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	405a      	eors	r2, r3
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	3308      	adds	r3, #8
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	4013      	ands	r3, r2
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d101      	bne.n	80163ca <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	e033      	b.n	8016432 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80163d0:	f003 0302 	and.w	r3, r3, #2
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d108      	bne.n	80163ea <ip4_route+0x92>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681a      	ldr	r2, [r3, #0]
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	330c      	adds	r3, #12
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d101      	bne.n	80163ea <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	e023      	b.n	8016432 <ip4_route+0xda>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	60fb      	str	r3, [r7, #12]
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d1c5      	bne.n	8016382 <ip4_route+0x2a>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80163f6:	4b14      	ldr	r3, [pc, #80]	; (8016448 <ip4_route+0xf0>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d015      	beq.n	801642a <ip4_route+0xd2>
 80163fe:	4b12      	ldr	r3, [pc, #72]	; (8016448 <ip4_route+0xf0>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016406:	f003 0301 	and.w	r3, r3, #1
 801640a:	2b00      	cmp	r3, #0
 801640c:	d00d      	beq.n	801642a <ip4_route+0xd2>
 801640e:	4b0e      	ldr	r3, [pc, #56]	; (8016448 <ip4_route+0xf0>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016416:	f003 0304 	and.w	r3, r3, #4
 801641a:	2b00      	cmp	r3, #0
 801641c:	d005      	beq.n	801642a <ip4_route+0xd2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801641e:	4b0a      	ldr	r3, [pc, #40]	; (8016448 <ip4_route+0xf0>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	3304      	adds	r3, #4
 8016424:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016426:	2b00      	cmp	r3, #0
 8016428:	d101      	bne.n	801642e <ip4_route+0xd6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801642a:	2300      	movs	r3, #0
 801642c:	e001      	b.n	8016432 <ip4_route+0xda>
  }

  return netif_default;
 801642e:	4b06      	ldr	r3, [pc, #24]	; (8016448 <ip4_route+0xf0>)
 8016430:	681b      	ldr	r3, [r3, #0]
}
 8016432:	4618      	mov	r0, r3
 8016434:	3714      	adds	r7, #20
 8016436:	46bd      	mov	sp, r7
 8016438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643c:	4770      	bx	lr
 801643e:	bf00      	nop
 8016440:	2400a534 	.word	0x2400a534
 8016444:	2400da10 	.word	0x2400da10
 8016448:	2400da14 	.word	0x2400da14

0801644c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b086      	sub	sp, #24
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801645c:	697b      	ldr	r3, [r7, #20]
 801645e:	781b      	ldrb	r3, [r3, #0]
 8016460:	091b      	lsrs	r3, r3, #4
 8016462:	b2db      	uxtb	r3, r3
 8016464:	2b04      	cmp	r3, #4
 8016466:	d004      	beq.n	8016472 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f7f9 fd1f 	bl	800feac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801646e:	2300      	movs	r3, #0
 8016470:	e122      	b.n	80166b8 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	b29b      	uxth	r3, r3
 8016478:	f003 030f 	and.w	r3, r3, #15
 801647c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801647e:	897b      	ldrh	r3, [r7, #10]
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	885b      	ldrh	r3, [r3, #2]
 8016488:	b29b      	uxth	r3, r3
 801648a:	4618      	mov	r0, r3
 801648c:	f7f8 f9fe 	bl	800e88c <lwip_htons>
 8016490:	4603      	mov	r3, r0
 8016492:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	891b      	ldrh	r3, [r3, #8]
 8016498:	893a      	ldrh	r2, [r7, #8]
 801649a:	429a      	cmp	r2, r3
 801649c:	d204      	bcs.n	80164a8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801649e:	893b      	ldrh	r3, [r7, #8]
 80164a0:	4619      	mov	r1, r3
 80164a2:	6878      	ldr	r0, [r7, #4]
 80164a4:	f7f9 fb8e 	bl	800fbc4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	895b      	ldrh	r3, [r3, #10]
 80164ac:	897a      	ldrh	r2, [r7, #10]
 80164ae:	429a      	cmp	r2, r3
 80164b0:	d807      	bhi.n	80164c2 <ip4_input+0x76>
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	891b      	ldrh	r3, [r3, #8]
 80164b6:	893a      	ldrh	r2, [r7, #8]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	d802      	bhi.n	80164c2 <ip4_input+0x76>
 80164bc:	897b      	ldrh	r3, [r7, #10]
 80164be:	2b13      	cmp	r3, #19
 80164c0:	d804      	bhi.n	80164cc <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7f9 fcf2 	bl	800feac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80164c8:	2300      	movs	r3, #0
 80164ca:	e0f5      	b.n	80166b8 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	691b      	ldr	r3, [r3, #16]
 80164d0:	4a7b      	ldr	r2, [pc, #492]	; (80166c0 <ip4_input+0x274>)
 80164d2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	68db      	ldr	r3, [r3, #12]
 80164d8:	4a79      	ldr	r2, [pc, #484]	; (80166c0 <ip4_input+0x274>)
 80164da:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164dc:	4b78      	ldr	r3, [pc, #480]	; (80166c0 <ip4_input+0x274>)
 80164de:	695b      	ldr	r3, [r3, #20]
 80164e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164e4:	2be0      	cmp	r3, #224	; 0xe0
 80164e6:	d112      	bne.n	801650e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80164ee:	f003 0301 	and.w	r3, r3, #1
 80164f2:	b2db      	uxtb	r3, r3
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d007      	beq.n	8016508 <ip4_input+0xbc>
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	3304      	adds	r3, #4
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d002      	beq.n	8016508 <ip4_input+0xbc>
      netif = inp;
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	613b      	str	r3, [r7, #16]
 8016506:	e041      	b.n	801658c <ip4_input+0x140>
    } else {
      netif = NULL;
 8016508:	2300      	movs	r3, #0
 801650a:	613b      	str	r3, [r7, #16]
 801650c:	e03e      	b.n	801658c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801650e:	2301      	movs	r3, #1
 8016510:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801651c:	f003 0301 	and.w	r3, r3, #1
 8016520:	b2db      	uxtb	r3, r3
 8016522:	2b00      	cmp	r3, #0
 8016524:	d014      	beq.n	8016550 <ip4_input+0x104>
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	3304      	adds	r3, #4
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d00f      	beq.n	8016550 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016530:	4b63      	ldr	r3, [pc, #396]	; (80166c0 <ip4_input+0x274>)
 8016532:	695a      	ldr	r2, [r3, #20]
 8016534:	693b      	ldr	r3, [r7, #16]
 8016536:	3304      	adds	r3, #4
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	429a      	cmp	r2, r3
 801653c:	d026      	beq.n	801658c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801653e:	4b60      	ldr	r3, [pc, #384]	; (80166c0 <ip4_input+0x274>)
 8016540:	695b      	ldr	r3, [r3, #20]
 8016542:	6939      	ldr	r1, [r7, #16]
 8016544:	4618      	mov	r0, r3
 8016546:	f000 f991 	bl	801686c <ip4_addr_isbroadcast_u32>
 801654a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801654c:	2b00      	cmp	r3, #0
 801654e:	d11d      	bne.n	801658c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d00d      	beq.n	8016572 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8016556:	4b5a      	ldr	r3, [pc, #360]	; (80166c0 <ip4_input+0x274>)
 8016558:	695b      	ldr	r3, [r3, #20]
 801655a:	b2db      	uxtb	r3, r3
 801655c:	2b7f      	cmp	r3, #127	; 0x7f
 801655e:	d102      	bne.n	8016566 <ip4_input+0x11a>
          netif = NULL;
 8016560:	2300      	movs	r3, #0
 8016562:	613b      	str	r3, [r7, #16]
          break;
 8016564:	e012      	b.n	801658c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801656a:	4b56      	ldr	r3, [pc, #344]	; (80166c4 <ip4_input+0x278>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	613b      	str	r3, [r7, #16]
 8016570:	e002      	b.n	8016578 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8016578:	693a      	ldr	r2, [r7, #16]
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	429a      	cmp	r2, r3
 801657e:	d102      	bne.n	8016586 <ip4_input+0x13a>
        netif = netif->next;
 8016580:	693b      	ldr	r3, [r7, #16]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d1c4      	bne.n	8016516 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801658c:	4b4c      	ldr	r3, [pc, #304]	; (80166c0 <ip4_input+0x274>)
 801658e:	691b      	ldr	r3, [r3, #16]
 8016590:	6839      	ldr	r1, [r7, #0]
 8016592:	4618      	mov	r0, r3
 8016594:	f000 f96a 	bl	801686c <ip4_addr_isbroadcast_u32>
 8016598:	4603      	mov	r3, r0
 801659a:	2b00      	cmp	r3, #0
 801659c:	d105      	bne.n	80165aa <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801659e:	4b48      	ldr	r3, [pc, #288]	; (80166c0 <ip4_input+0x274>)
 80165a0:	691b      	ldr	r3, [r3, #16]
 80165a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80165a6:	2be0      	cmp	r3, #224	; 0xe0
 80165a8:	d104      	bne.n	80165b4 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f7f9 fc7e 	bl	800feac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80165b0:	2300      	movs	r3, #0
 80165b2:	e081      	b.n	80166b8 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d104      	bne.n	80165c4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f7f9 fc76 	bl	800feac <pbuf_free>
    return ERR_OK;
 80165c0:	2300      	movs	r3, #0
 80165c2:	e079      	b.n	80166b8 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80165c4:	697b      	ldr	r3, [r7, #20]
 80165c6:	88db      	ldrh	r3, [r3, #6]
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	461a      	mov	r2, r3
 80165cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80165d0:	4013      	ands	r3, r2
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d00b      	beq.n	80165ee <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f000 fc8e 	bl	8016ef8 <ip4_reass>
 80165dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d101      	bne.n	80165e8 <ip4_input+0x19c>
      return ERR_OK;
 80165e4:	2300      	movs	r3, #0
 80165e6:	e067      	b.n	80166b8 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80165ee:	4a34      	ldr	r2, [pc, #208]	; (80166c0 <ip4_input+0x274>)
 80165f0:	693b      	ldr	r3, [r7, #16]
 80165f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80165f4:	4a32      	ldr	r2, [pc, #200]	; (80166c0 <ip4_input+0x274>)
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80165fa:	4a31      	ldr	r2, [pc, #196]	; (80166c0 <ip4_input+0x274>)
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	b29b      	uxth	r3, r3
 8016606:	f003 030f 	and.w	r3, r3, #15
 801660a:	b29b      	uxth	r3, r3
 801660c:	009b      	lsls	r3, r3, #2
 801660e:	b29a      	uxth	r2, r3
 8016610:	4b2b      	ldr	r3, [pc, #172]	; (80166c0 <ip4_input+0x274>)
 8016612:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8016614:	897b      	ldrh	r3, [r7, #10]
 8016616:	425b      	negs	r3, r3
 8016618:	b29b      	uxth	r3, r3
 801661a:	b21b      	sxth	r3, r3
 801661c:	4619      	mov	r1, r3
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7f9 fc20 	bl	800fe64 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	7a5b      	ldrb	r3, [r3, #9]
 8016628:	2b06      	cmp	r3, #6
 801662a:	d009      	beq.n	8016640 <ip4_input+0x1f4>
 801662c:	2b11      	cmp	r3, #17
 801662e:	d002      	beq.n	8016636 <ip4_input+0x1ea>
 8016630:	2b01      	cmp	r3, #1
 8016632:	d00a      	beq.n	801664a <ip4_input+0x1fe>
 8016634:	e00e      	b.n	8016654 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8016636:	6839      	ldr	r1, [r7, #0]
 8016638:	6878      	ldr	r0, [r7, #4]
 801663a:	f7fe fbef 	bl	8014e1c <udp_input>
      break;
 801663e:	e028      	b.n	8016692 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8016640:	6839      	ldr	r1, [r7, #0]
 8016642:	6878      	ldr	r0, [r7, #4]
 8016644:	f7fb f876 	bl	8011734 <tcp_input>
      break;
 8016648:	e023      	b.n	8016692 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801664a:	6839      	ldr	r1, [r7, #0]
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f7ff fcd1 	bl	8015ff4 <icmp_input>
      break;
 8016652:	e01e      	b.n	8016692 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016654:	4b1a      	ldr	r3, [pc, #104]	; (80166c0 <ip4_input+0x274>)
 8016656:	695b      	ldr	r3, [r3, #20]
 8016658:	6939      	ldr	r1, [r7, #16]
 801665a:	4618      	mov	r0, r3
 801665c:	f000 f906 	bl	801686c <ip4_addr_isbroadcast_u32>
 8016660:	4603      	mov	r3, r0
 8016662:	2b00      	cmp	r3, #0
 8016664:	d112      	bne.n	801668c <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016666:	4b16      	ldr	r3, [pc, #88]	; (80166c0 <ip4_input+0x274>)
 8016668:	695b      	ldr	r3, [r3, #20]
 801666a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801666e:	2be0      	cmp	r3, #224	; 0xe0
 8016670:	d00c      	beq.n	801668c <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016672:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016676:	4619      	mov	r1, r3
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f7f9 fc05 	bl	800fe88 <pbuf_header_force>
        p->payload = iphdr;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	697a      	ldr	r2, [r7, #20]
 8016682:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016684:	2102      	movs	r1, #2
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7ff fdd4 	bl	8016234 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f7f9 fc0d 	bl	800feac <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016692:	4b0b      	ldr	r3, [pc, #44]	; (80166c0 <ip4_input+0x274>)
 8016694:	2200      	movs	r2, #0
 8016696:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016698:	4b09      	ldr	r3, [pc, #36]	; (80166c0 <ip4_input+0x274>)
 801669a:	2200      	movs	r2, #0
 801669c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801669e:	4b08      	ldr	r3, [pc, #32]	; (80166c0 <ip4_input+0x274>)
 80166a0:	2200      	movs	r2, #0
 80166a2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80166a4:	4b06      	ldr	r3, [pc, #24]	; (80166c0 <ip4_input+0x274>)
 80166a6:	2200      	movs	r2, #0
 80166a8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80166aa:	4b05      	ldr	r3, [pc, #20]	; (80166c0 <ip4_input+0x274>)
 80166ac:	2200      	movs	r2, #0
 80166ae:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80166b0:	4b03      	ldr	r3, [pc, #12]	; (80166c0 <ip4_input+0x274>)
 80166b2:	2200      	movs	r2, #0
 80166b4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80166b6:	2300      	movs	r3, #0
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3718      	adds	r7, #24
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}
 80166c0:	2400a850 	.word	0x2400a850
 80166c4:	2400da10 	.word	0x2400da10

080166c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b08a      	sub	sp, #40	; 0x28
 80166cc:	af04      	add	r7, sp, #16
 80166ce:	60f8      	str	r0, [r7, #12]
 80166d0:	60b9      	str	r1, [r7, #8]
 80166d2:	607a      	str	r2, [r7, #4]
 80166d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d009      	beq.n	80166f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80166e0:	68bb      	ldr	r3, [r7, #8]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d003      	beq.n	80166ee <ip4_output_if+0x26>
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d102      	bne.n	80166f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80166ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f0:	3304      	adds	r3, #4
 80166f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80166f4:	78fa      	ldrb	r2, [r7, #3]
 80166f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f8:	9302      	str	r3, [sp, #8]
 80166fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80166fe:	9301      	str	r3, [sp, #4]
 8016700:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016704:	9300      	str	r3, [sp, #0]
 8016706:	4613      	mov	r3, r2
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	6979      	ldr	r1, [r7, #20]
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	f000 f805 	bl	801671c <ip4_output_if_src>
 8016712:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016714:	4618      	mov	r0, r3
 8016716:	3718      	adds	r7, #24
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b088      	sub	sp, #32
 8016720:	af00      	add	r7, sp, #0
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	607a      	str	r2, [r7, #4]
 8016728:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	89db      	ldrh	r3, [r3, #14]
 801672e:	2b01      	cmp	r3, #1
 8016730:	d006      	beq.n	8016740 <ip4_output_if_src+0x24>
 8016732:	4b48      	ldr	r3, [pc, #288]	; (8016854 <ip4_output_if_src+0x138>)
 8016734:	f240 3233 	movw	r2, #819	; 0x333
 8016738:	4947      	ldr	r1, [pc, #284]	; (8016858 <ip4_output_if_src+0x13c>)
 801673a:	4848      	ldr	r0, [pc, #288]	; (801685c <ip4_output_if_src+0x140>)
 801673c:	f001 f8f2 	bl	8017924 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d060      	beq.n	8016808 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016746:	2314      	movs	r3, #20
 8016748:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801674a:	2114      	movs	r1, #20
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f7f9 fb89 	bl	800fe64 <pbuf_header>
 8016752:	4603      	mov	r3, r0
 8016754:	2b00      	cmp	r3, #0
 8016756:	d002      	beq.n	801675e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016758:	f06f 0301 	mvn.w	r3, #1
 801675c:	e075      	b.n	801684a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	895b      	ldrh	r3, [r3, #10]
 8016768:	2b13      	cmp	r3, #19
 801676a:	d806      	bhi.n	801677a <ip4_output_if_src+0x5e>
 801676c:	4b39      	ldr	r3, [pc, #228]	; (8016854 <ip4_output_if_src+0x138>)
 801676e:	f240 3261 	movw	r2, #865	; 0x361
 8016772:	493b      	ldr	r1, [pc, #236]	; (8016860 <ip4_output_if_src+0x144>)
 8016774:	4839      	ldr	r0, [pc, #228]	; (801685c <ip4_output_if_src+0x140>)
 8016776:	f001 f8d5 	bl	8017924 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	78fa      	ldrb	r2, [r7, #3]
 801677e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016780:	69fb      	ldr	r3, [r7, #28]
 8016782:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016786:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681a      	ldr	r2, [r3, #0]
 801678c:	69fb      	ldr	r3, [r7, #28]
 801678e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016790:	8b7b      	ldrh	r3, [r7, #26]
 8016792:	089b      	lsrs	r3, r3, #2
 8016794:	b29b      	uxth	r3, r3
 8016796:	b2db      	uxtb	r3, r3
 8016798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801679c:	b2da      	uxtb	r2, r3
 801679e:	69fb      	ldr	r3, [r7, #28]
 80167a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80167a2:	69fb      	ldr	r3, [r7, #28]
 80167a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80167a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	891b      	ldrh	r3, [r3, #8]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7f8 f86c 	bl	800e88c <lwip_htons>
 80167b4:	4603      	mov	r3, r0
 80167b6:	461a      	mov	r2, r3
 80167b8:	69fb      	ldr	r3, [r7, #28]
 80167ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	2200      	movs	r2, #0
 80167c0:	719a      	strb	r2, [r3, #6]
 80167c2:	2200      	movs	r2, #0
 80167c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80167c6:	4b27      	ldr	r3, [pc, #156]	; (8016864 <ip4_output_if_src+0x148>)
 80167c8:	881b      	ldrh	r3, [r3, #0]
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7f8 f85e 	bl	800e88c <lwip_htons>
 80167d0:	4603      	mov	r3, r0
 80167d2:	461a      	mov	r2, r3
 80167d4:	69fb      	ldr	r3, [r7, #28]
 80167d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80167d8:	4b22      	ldr	r3, [pc, #136]	; (8016864 <ip4_output_if_src+0x148>)
 80167da:	881b      	ldrh	r3, [r3, #0]
 80167dc:	3301      	adds	r3, #1
 80167de:	b29a      	uxth	r2, r3
 80167e0:	4b20      	ldr	r3, [pc, #128]	; (8016864 <ip4_output_if_src+0x148>)
 80167e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d104      	bne.n	80167f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80167ea:	4b1f      	ldr	r3, [pc, #124]	; (8016868 <ip4_output_if_src+0x14c>)
 80167ec:	681a      	ldr	r2, [r3, #0]
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	60da      	str	r2, [r3, #12]
 80167f2:	e003      	b.n	80167fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	2200      	movs	r2, #0
 8016800:	729a      	strb	r2, [r3, #10]
 8016802:	2200      	movs	r2, #0
 8016804:	72da      	strb	r2, [r3, #11]
 8016806:	e008      	b.n	801681a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	691b      	ldr	r3, [r3, #16]
 8016812:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016814:	f107 0314 	add.w	r3, r7, #20
 8016818:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801681e:	2b00      	cmp	r3, #0
 8016820:	d00c      	beq.n	801683c <ip4_output_if_src+0x120>
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	891a      	ldrh	r2, [r3, #8]
 8016826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801682a:	429a      	cmp	r2, r3
 801682c:	d906      	bls.n	801683c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801682e:	687a      	ldr	r2, [r7, #4]
 8016830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016832:	68f8      	ldr	r0, [r7, #12]
 8016834:	f000 fd0a 	bl	801724c <ip4_frag>
 8016838:	4603      	mov	r3, r0
 801683a:	e006      	b.n	801684a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801683e:	695b      	ldr	r3, [r3, #20]
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	68f9      	ldr	r1, [r7, #12]
 8016844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016846:	4798      	blx	r3
 8016848:	4603      	mov	r3, r0
}
 801684a:	4618      	mov	r0, r3
 801684c:	3720      	adds	r7, #32
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
 8016852:	bf00      	nop
 8016854:	0801a4e0 	.word	0x0801a4e0
 8016858:	0801a514 	.word	0x0801a514
 801685c:	0801a520 	.word	0x0801a520
 8016860:	0801a548 	.word	0x0801a548
 8016864:	2400a532 	.word	0x2400a532
 8016868:	0801a938 	.word	0x0801a938

0801686c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801686c:	b480      	push	{r7}
 801686e:	b085      	sub	sp, #20
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016880:	d002      	beq.n	8016888 <ip4_addr_isbroadcast_u32+0x1c>
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d101      	bne.n	801688c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016888:	2301      	movs	r3, #1
 801688a:	e02a      	b.n	80168e2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016892:	f003 0302 	and.w	r3, r3, #2
 8016896:	2b00      	cmp	r3, #0
 8016898:	d101      	bne.n	801689e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801689a:	2300      	movs	r3, #0
 801689c:	e021      	b.n	80168e2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	3304      	adds	r3, #4
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	687a      	ldr	r2, [r7, #4]
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d101      	bne.n	80168ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80168aa:	2300      	movs	r3, #0
 80168ac:	e019      	b.n	80168e2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80168ae:	68fa      	ldr	r2, [r7, #12]
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	3304      	adds	r3, #4
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	405a      	eors	r2, r3
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	3308      	adds	r3, #8
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	4013      	ands	r3, r2
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d10d      	bne.n	80168e0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	3308      	adds	r3, #8
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	43da      	mvns	r2, r3
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	3308      	adds	r3, #8
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80168d8:	429a      	cmp	r2, r3
 80168da:	d101      	bne.n	80168e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80168dc:	2301      	movs	r3, #1
 80168de:	e000      	b.n	80168e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80168e0:	2300      	movs	r3, #0
  }
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3714      	adds	r7, #20
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr
	...

080168f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b084      	sub	sp, #16
 80168f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80168f6:	2300      	movs	r3, #0
 80168f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80168fa:	4b12      	ldr	r3, [pc, #72]	; (8016944 <ip_reass_tmr+0x54>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016900:	e018      	b.n	8016934 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	7fdb      	ldrb	r3, [r3, #31]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00b      	beq.n	8016922 <ip_reass_tmr+0x32>
      r->timer--;
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	7fdb      	ldrb	r3, [r3, #31]
 801690e:	3b01      	subs	r3, #1
 8016910:	b2da      	uxtb	r2, r3
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	60fb      	str	r3, [r7, #12]
 8016920:	e008      	b.n	8016934 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801692c:	68b9      	ldr	r1, [r7, #8]
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f000 f80a 	bl	8016948 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d1e3      	bne.n	8016902 <ip_reass_tmr+0x12>
     }
   }
}
 801693a:	bf00      	nop
 801693c:	3710      	adds	r7, #16
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
 8016942:	bf00      	nop
 8016944:	2400a538 	.word	0x2400a538

08016948 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b088      	sub	sp, #32
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016952:	2300      	movs	r3, #0
 8016954:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016956:	683a      	ldr	r2, [r7, #0]
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	429a      	cmp	r2, r3
 801695c:	d105      	bne.n	801696a <ip_reass_free_complete_datagram+0x22>
 801695e:	4b45      	ldr	r3, [pc, #276]	; (8016a74 <ip_reass_free_complete_datagram+0x12c>)
 8016960:	22ab      	movs	r2, #171	; 0xab
 8016962:	4945      	ldr	r1, [pc, #276]	; (8016a78 <ip_reass_free_complete_datagram+0x130>)
 8016964:	4845      	ldr	r0, [pc, #276]	; (8016a7c <ip_reass_free_complete_datagram+0x134>)
 8016966:	f000 ffdd 	bl	8017924 <iprintf>
  if (prev != NULL) {
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d00a      	beq.n	8016986 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	687a      	ldr	r2, [r7, #4]
 8016976:	429a      	cmp	r2, r3
 8016978:	d005      	beq.n	8016986 <ip_reass_free_complete_datagram+0x3e>
 801697a:	4b3e      	ldr	r3, [pc, #248]	; (8016a74 <ip_reass_free_complete_datagram+0x12c>)
 801697c:	22ad      	movs	r2, #173	; 0xad
 801697e:	4940      	ldr	r1, [pc, #256]	; (8016a80 <ip_reass_free_complete_datagram+0x138>)
 8016980:	483e      	ldr	r0, [pc, #248]	; (8016a7c <ip_reass_free_complete_datagram+0x134>)
 8016982:	f000 ffcf 	bl	8017924 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	685b      	ldr	r3, [r3, #4]
 801698a:	685b      	ldr	r3, [r3, #4]
 801698c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	889b      	ldrh	r3, [r3, #4]
 8016992:	b29b      	uxth	r3, r3
 8016994:	2b00      	cmp	r3, #0
 8016996:	d12a      	bne.n	80169ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	685b      	ldr	r3, [r3, #4]
 801699c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801699e:	697b      	ldr	r3, [r7, #20]
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80169a6:	69bb      	ldr	r3, [r7, #24]
 80169a8:	6858      	ldr	r0, [r3, #4]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	3308      	adds	r3, #8
 80169ae:	2214      	movs	r2, #20
 80169b0:	4619      	mov	r1, r3
 80169b2:	f000 ffa4 	bl	80178fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80169b6:	2101      	movs	r1, #1
 80169b8:	69b8      	ldr	r0, [r7, #24]
 80169ba:	f7ff fc4b 	bl	8016254 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80169be:	69b8      	ldr	r0, [r7, #24]
 80169c0:	f7f9 fb0e 	bl	800ffe0 <pbuf_clen>
 80169c4:	4603      	mov	r3, r0
 80169c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80169c8:	8bfa      	ldrh	r2, [r7, #30]
 80169ca:	8a7b      	ldrh	r3, [r7, #18]
 80169cc:	4413      	add	r3, r2
 80169ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169d2:	db05      	blt.n	80169e0 <ip_reass_free_complete_datagram+0x98>
 80169d4:	4b27      	ldr	r3, [pc, #156]	; (8016a74 <ip_reass_free_complete_datagram+0x12c>)
 80169d6:	22bc      	movs	r2, #188	; 0xbc
 80169d8:	492a      	ldr	r1, [pc, #168]	; (8016a84 <ip_reass_free_complete_datagram+0x13c>)
 80169da:	4828      	ldr	r0, [pc, #160]	; (8016a7c <ip_reass_free_complete_datagram+0x134>)
 80169dc:	f000 ffa2 	bl	8017924 <iprintf>
    pbufs_freed += clen;
 80169e0:	8bfa      	ldrh	r2, [r7, #30]
 80169e2:	8a7b      	ldrh	r3, [r7, #18]
 80169e4:	4413      	add	r3, r2
 80169e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80169e8:	69b8      	ldr	r0, [r7, #24]
 80169ea:	f7f9 fa5f 	bl	800feac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	685b      	ldr	r3, [r3, #4]
 80169f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80169f4:	e01f      	b.n	8016a36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80169fc:	69bb      	ldr	r3, [r7, #24]
 80169fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016a06:	68f8      	ldr	r0, [r7, #12]
 8016a08:	f7f9 faea 	bl	800ffe0 <pbuf_clen>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a10:	8bfa      	ldrh	r2, [r7, #30]
 8016a12:	8a7b      	ldrh	r3, [r7, #18]
 8016a14:	4413      	add	r3, r2
 8016a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a1a:	db05      	blt.n	8016a28 <ip_reass_free_complete_datagram+0xe0>
 8016a1c:	4b15      	ldr	r3, [pc, #84]	; (8016a74 <ip_reass_free_complete_datagram+0x12c>)
 8016a1e:	22cc      	movs	r2, #204	; 0xcc
 8016a20:	4918      	ldr	r1, [pc, #96]	; (8016a84 <ip_reass_free_complete_datagram+0x13c>)
 8016a22:	4816      	ldr	r0, [pc, #88]	; (8016a7c <ip_reass_free_complete_datagram+0x134>)
 8016a24:	f000 ff7e 	bl	8017924 <iprintf>
    pbufs_freed += clen;
 8016a28:	8bfa      	ldrh	r2, [r7, #30]
 8016a2a:	8a7b      	ldrh	r3, [r7, #18]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	f7f9 fa3b 	bl	800feac <pbuf_free>
  while (p != NULL) {
 8016a36:	69bb      	ldr	r3, [r7, #24]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d1dc      	bne.n	80169f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016a3c:	6839      	ldr	r1, [r7, #0]
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f000 f8c2 	bl	8016bc8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016a44:	4b10      	ldr	r3, [pc, #64]	; (8016a88 <ip_reass_free_complete_datagram+0x140>)
 8016a46:	881b      	ldrh	r3, [r3, #0]
 8016a48:	8bfa      	ldrh	r2, [r7, #30]
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d905      	bls.n	8016a5a <ip_reass_free_complete_datagram+0x112>
 8016a4e:	4b09      	ldr	r3, [pc, #36]	; (8016a74 <ip_reass_free_complete_datagram+0x12c>)
 8016a50:	22d2      	movs	r2, #210	; 0xd2
 8016a52:	490e      	ldr	r1, [pc, #56]	; (8016a8c <ip_reass_free_complete_datagram+0x144>)
 8016a54:	4809      	ldr	r0, [pc, #36]	; (8016a7c <ip_reass_free_complete_datagram+0x134>)
 8016a56:	f000 ff65 	bl	8017924 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8016a5a:	4b0b      	ldr	r3, [pc, #44]	; (8016a88 <ip_reass_free_complete_datagram+0x140>)
 8016a5c:	881a      	ldrh	r2, [r3, #0]
 8016a5e:	8bfb      	ldrh	r3, [r7, #30]
 8016a60:	1ad3      	subs	r3, r2, r3
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	4b08      	ldr	r3, [pc, #32]	; (8016a88 <ip_reass_free_complete_datagram+0x140>)
 8016a66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016a68:	8bfb      	ldrh	r3, [r7, #30]
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3720      	adds	r7, #32
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}
 8016a72:	bf00      	nop
 8016a74:	0801a578 	.word	0x0801a578
 8016a78:	0801a5b4 	.word	0x0801a5b4
 8016a7c:	0801a5c0 	.word	0x0801a5c0
 8016a80:	0801a5e8 	.word	0x0801a5e8
 8016a84:	0801a5fc 	.word	0x0801a5fc
 8016a88:	2400a53c 	.word	0x2400a53c
 8016a8c:	0801a61c 	.word	0x0801a61c

08016a90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b08a      	sub	sp, #40	; 0x28
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016aae:	4b28      	ldr	r3, [pc, #160]	; (8016b50 <ip_reass_remove_oldest_datagram+0xc0>)
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016ab4:	e030      	b.n	8016b18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab8:	695a      	ldr	r2, [r3, #20]
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d10c      	bne.n	8016adc <ip_reass_remove_oldest_datagram+0x4c>
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	699a      	ldr	r2, [r3, #24]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	691b      	ldr	r3, [r3, #16]
 8016aca:	429a      	cmp	r2, r3
 8016acc:	d106      	bne.n	8016adc <ip_reass_remove_oldest_datagram+0x4c>
 8016ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad0:	899a      	ldrh	r2, [r3, #12]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	889b      	ldrh	r3, [r3, #4]
 8016ad6:	b29b      	uxth	r3, r3
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	d014      	beq.n	8016b06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	3301      	adds	r3, #1
 8016ae0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016ae2:	6a3b      	ldr	r3, [r7, #32]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d104      	bne.n	8016af2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016aec:	69fb      	ldr	r3, [r7, #28]
 8016aee:	61bb      	str	r3, [r7, #24]
 8016af0:	e009      	b.n	8016b06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	7fda      	ldrb	r2, [r3, #31]
 8016af6:	6a3b      	ldr	r3, [r7, #32]
 8016af8:	7fdb      	ldrb	r3, [r3, #31]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d803      	bhi.n	8016b06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d001      	beq.n	8016b12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d1cb      	bne.n	8016ab6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016b1e:	6a3b      	ldr	r3, [r7, #32]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d008      	beq.n	8016b36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016b24:	69b9      	ldr	r1, [r7, #24]
 8016b26:	6a38      	ldr	r0, [r7, #32]
 8016b28:	f7ff ff0e 	bl	8016948 <ip_reass_free_complete_datagram>
 8016b2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016b2e:	697a      	ldr	r2, [r7, #20]
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	4413      	add	r3, r2
 8016b34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016b36:	697a      	ldr	r2, [r7, #20]
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	da02      	bge.n	8016b44 <ip_reass_remove_oldest_datagram+0xb4>
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	2b01      	cmp	r3, #1
 8016b42:	dcac      	bgt.n	8016a9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016b44:	697b      	ldr	r3, [r7, #20]
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3728      	adds	r7, #40	; 0x28
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
 8016b4e:	bf00      	nop
 8016b50:	2400a538 	.word	0x2400a538

08016b54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b084      	sub	sp, #16
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b5e:	2004      	movs	r0, #4
 8016b60:	f7f8 fb5a 	bl	800f218 <memp_malloc>
 8016b64:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d110      	bne.n	8016b8e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016b6c:	6839      	ldr	r1, [r7, #0]
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f7ff ff8e 	bl	8016a90 <ip_reass_remove_oldest_datagram>
 8016b74:	4602      	mov	r2, r0
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	4293      	cmp	r3, r2
 8016b7a:	dc03      	bgt.n	8016b84 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b7c:	2004      	movs	r0, #4
 8016b7e:	f7f8 fb4b 	bl	800f218 <memp_malloc>
 8016b82:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d101      	bne.n	8016b8e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	e016      	b.n	8016bbc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016b8e:	2220      	movs	r2, #32
 8016b90:	2100      	movs	r1, #0
 8016b92:	68f8      	ldr	r0, [r7, #12]
 8016b94:	f000 febe 	bl	8017914 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	2203      	movs	r2, #3
 8016b9c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016b9e:	4b09      	ldr	r3, [pc, #36]	; (8016bc4 <ip_reass_enqueue_new_datagram+0x70>)
 8016ba0:	681a      	ldr	r2, [r3, #0]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016ba6:	4a07      	ldr	r2, [pc, #28]	; (8016bc4 <ip_reass_enqueue_new_datagram+0x70>)
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	3308      	adds	r3, #8
 8016bb0:	2214      	movs	r2, #20
 8016bb2:	6879      	ldr	r1, [r7, #4]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f000 fea2 	bl	80178fe <memcpy>
  return ipr;
 8016bba:	68fb      	ldr	r3, [r7, #12]
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}
 8016bc4:	2400a538 	.word	0x2400a538

08016bc8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b082      	sub	sp, #8
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016bd2:	4b10      	ldr	r3, [pc, #64]	; (8016c14 <ip_reass_dequeue_datagram+0x4c>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d104      	bne.n	8016be6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	4a0c      	ldr	r2, [pc, #48]	; (8016c14 <ip_reass_dequeue_datagram+0x4c>)
 8016be2:	6013      	str	r3, [r2, #0]
 8016be4:	e00d      	b.n	8016c02 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d106      	bne.n	8016bfa <ip_reass_dequeue_datagram+0x32>
 8016bec:	4b0a      	ldr	r3, [pc, #40]	; (8016c18 <ip_reass_dequeue_datagram+0x50>)
 8016bee:	f240 1245 	movw	r2, #325	; 0x145
 8016bf2:	490a      	ldr	r1, [pc, #40]	; (8016c1c <ip_reass_dequeue_datagram+0x54>)
 8016bf4:	480a      	ldr	r0, [pc, #40]	; (8016c20 <ip_reass_dequeue_datagram+0x58>)
 8016bf6:	f000 fe95 	bl	8017924 <iprintf>
    prev->next = ipr->next;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016c02:	6879      	ldr	r1, [r7, #4]
 8016c04:	2004      	movs	r0, #4
 8016c06:	f7f8 fb7d 	bl	800f304 <memp_free>
}
 8016c0a:	bf00      	nop
 8016c0c:	3708      	adds	r7, #8
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	bf00      	nop
 8016c14:	2400a538 	.word	0x2400a538
 8016c18:	0801a578 	.word	0x0801a578
 8016c1c:	0801a638 	.word	0x0801a638
 8016c20:	0801a5c0 	.word	0x0801a5c0

08016c24 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b08c      	sub	sp, #48	; 0x30
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	60f8      	str	r0, [r7, #12]
 8016c2c:	60b9      	str	r1, [r7, #8]
 8016c2e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8016c30:	2300      	movs	r3, #0
 8016c32:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016c34:	2301      	movs	r3, #1
 8016c36:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	685b      	ldr	r3, [r3, #4]
 8016c3c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016c3e:	69fb      	ldr	r3, [r7, #28]
 8016c40:	885b      	ldrh	r3, [r3, #2]
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	4618      	mov	r0, r3
 8016c46:	f7f7 fe21 	bl	800e88c <lwip_htons>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	69fb      	ldr	r3, [r7, #28]
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	f003 030f 	and.w	r3, r3, #15
 8016c58:	b29b      	uxth	r3, r3
 8016c5a:	009b      	lsls	r3, r3, #2
 8016c5c:	b29b      	uxth	r3, r3
 8016c5e:	1ad3      	subs	r3, r2, r3
 8016c60:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016c62:	69fb      	ldr	r3, [r7, #28]
 8016c64:	88db      	ldrh	r3, [r3, #6]
 8016c66:	b29b      	uxth	r3, r3
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7f7 fe0f 	bl	800e88c <lwip_htons>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	00db      	lsls	r3, r3, #3
 8016c78:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016c7a:	68bb      	ldr	r3, [r7, #8]
 8016c7c:	685b      	ldr	r3, [r3, #4]
 8016c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c82:	2200      	movs	r2, #0
 8016c84:	701a      	strb	r2, [r3, #0]
 8016c86:	2200      	movs	r2, #0
 8016c88:	705a      	strb	r2, [r3, #1]
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	709a      	strb	r2, [r3, #2]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c94:	8b3a      	ldrh	r2, [r7, #24]
 8016c96:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8016c98:	8b3a      	ldrh	r2, [r7, #24]
 8016c9a:	8b7b      	ldrh	r3, [r7, #26]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	b29a      	uxth	r2, r3
 8016ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8016caa:	e061      	b.n	8016d70 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8016cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8016cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb4:	889b      	ldrh	r3, [r3, #4]
 8016cb6:	b29a      	uxth	r2, r3
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	889b      	ldrh	r3, [r3, #4]
 8016cbc:	b29b      	uxth	r3, r3
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d232      	bcs.n	8016d28 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cc6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d01f      	beq.n	8016d0e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cd0:	889b      	ldrh	r3, [r3, #4]
 8016cd2:	b29a      	uxth	r2, r3
 8016cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd6:	88db      	ldrh	r3, [r3, #6]
 8016cd8:	b29b      	uxth	r3, r3
 8016cda:	429a      	cmp	r2, r3
 8016cdc:	f0c0 80e3 	bcc.w	8016ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8016ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce2:	88db      	ldrh	r3, [r3, #6]
 8016ce4:	b29a      	uxth	r2, r3
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	889b      	ldrh	r3, [r3, #4]
 8016cea:	b29b      	uxth	r3, r3
 8016cec:	429a      	cmp	r2, r3
 8016cee:	f200 80da 	bhi.w	8016ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf4:	68ba      	ldr	r2, [r7, #8]
 8016cf6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cfa:	88db      	ldrh	r3, [r3, #6]
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d00:	889b      	ldrh	r3, [r3, #4]
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d037      	beq.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016d0c:	e034      	b.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8016d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d10:	88db      	ldrh	r3, [r3, #6]
 8016d12:	b29a      	uxth	r2, r3
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	889b      	ldrh	r3, [r3, #4]
 8016d18:	b29b      	uxth	r3, r3
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	f200 80c5 	bhi.w	8016eaa <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	68ba      	ldr	r2, [r7, #8]
 8016d24:	605a      	str	r2, [r3, #4]
      break;
 8016d26:	e027      	b.n	8016d78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8016d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2a:	889b      	ldrh	r3, [r3, #4]
 8016d2c:	b29a      	uxth	r2, r3
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	889b      	ldrh	r3, [r3, #4]
 8016d32:	b29b      	uxth	r3, r3
 8016d34:	429a      	cmp	r2, r3
 8016d36:	f000 80ba 	beq.w	8016eae <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3c:	889b      	ldrh	r3, [r3, #4]
 8016d3e:	b29a      	uxth	r2, r3
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	88db      	ldrh	r3, [r3, #6]
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	429a      	cmp	r2, r3
 8016d48:	f0c0 80b3 	bcc.w	8016eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d009      	beq.n	8016d66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8016d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d54:	88db      	ldrh	r3, [r3, #6]
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	889b      	ldrh	r3, [r3, #4]
 8016d5c:	b29b      	uxth	r3, r3
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d001      	beq.n	8016d66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d62:	2300      	movs	r3, #0
 8016d64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d19a      	bne.n	8016cac <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8016d76:	e000      	b.n	8016d7a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8016d78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d12d      	bne.n	8016ddc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8016d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d01c      	beq.n	8016dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d88:	88db      	ldrh	r3, [r3, #6]
 8016d8a:	b29a      	uxth	r2, r3
 8016d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8e:	889b      	ldrh	r3, [r3, #4]
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d906      	bls.n	8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8016d96:	4b51      	ldr	r3, [pc, #324]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016d98:	f240 12ab 	movw	r2, #427	; 0x1ab
 8016d9c:	4950      	ldr	r1, [pc, #320]	; (8016ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d9e:	4851      	ldr	r0, [pc, #324]	; (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016da0:	f000 fdc0 	bl	8017924 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da6:	68ba      	ldr	r2, [r7, #8]
 8016da8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dac:	88db      	ldrh	r3, [r3, #6]
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db2:	889b      	ldrh	r3, [r3, #4]
 8016db4:	b29b      	uxth	r3, r3
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d010      	beq.n	8016ddc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	623b      	str	r3, [r7, #32]
 8016dbe:	e00d      	b.n	8016ddc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d006      	beq.n	8016dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8016dc8:	4b44      	ldr	r3, [pc, #272]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016dca:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8016dce:	4946      	ldr	r1, [pc, #280]	; (8016ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016dd0:	4844      	ldr	r0, [pc, #272]	; (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016dd2:	f000 fda7 	bl	8017924 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	68ba      	ldr	r2, [r7, #8]
 8016dda:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d105      	bne.n	8016dee <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	7f9b      	ldrb	r3, [r3, #30]
 8016de6:	f003 0301 	and.w	r3, r3, #1
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d059      	beq.n	8016ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8016dee:	6a3b      	ldr	r3, [r7, #32]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d04f      	beq.n	8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d006      	beq.n	8016e0a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	685b      	ldr	r3, [r3, #4]
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	889b      	ldrh	r3, [r3, #4]
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d002      	beq.n	8016e10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	623b      	str	r3, [r7, #32]
 8016e0e:	e041      	b.n	8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e12:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016e1a:	e012      	b.n	8016e42 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8016e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e24:	88db      	ldrh	r3, [r3, #6]
 8016e26:	b29a      	uxth	r2, r3
 8016e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2a:	889b      	ldrh	r3, [r3, #4]
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	429a      	cmp	r2, r3
 8016e30:	d002      	beq.n	8016e38 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	623b      	str	r3, [r7, #32]
            break;
 8016e36:	e007      	b.n	8016e48 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8016e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d1e9      	bne.n	8016e1c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016e48:	6a3b      	ldr	r3, [r7, #32]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d022      	beq.n	8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	685b      	ldr	r3, [r3, #4]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d106      	bne.n	8016e64 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8016e56:	4b21      	ldr	r3, [pc, #132]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016e58:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8016e5c:	4923      	ldr	r1, [pc, #140]	; (8016eec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016e5e:	4821      	ldr	r0, [pc, #132]	; (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e60:	f000 fd60 	bl	8017924 <iprintf>
          LWIP_ASSERT("sanity check",
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	685b      	ldr	r3, [r3, #4]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d106      	bne.n	8016e7e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8016e70:	4b1a      	ldr	r3, [pc, #104]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016e72:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016e76:	491d      	ldr	r1, [pc, #116]	; (8016eec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016e78:	481a      	ldr	r0, [pc, #104]	; (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e7a:	f000 fd53 	bl	8017924 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d006      	beq.n	8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8016e86:	4b15      	ldr	r3, [pc, #84]	; (8016edc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016e88:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8016e8c:	4918      	ldr	r1, [pc, #96]	; (8016ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e8e:	4815      	ldr	r0, [pc, #84]	; (8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e90:	f000 fd48 	bl	8017924 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016e94:	6a3b      	ldr	r3, [r7, #32]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	bf14      	ite	ne
 8016e9a:	2301      	movne	r3, #1
 8016e9c:	2300      	moveq	r3, #0
 8016e9e:	b2db      	uxtb	r3, r3
 8016ea0:	e018      	b.n	8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	e016      	b.n	8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8016ea6:	bf00      	nop
 8016ea8:	e004      	b.n	8016eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8016eaa:	bf00      	nop
 8016eac:	e002      	b.n	8016eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016eae:	bf00      	nop
 8016eb0:	e000      	b.n	8016eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016eb2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8016eb4:	68b8      	ldr	r0, [r7, #8]
 8016eb6:	f7f9 f893 	bl	800ffe0 <pbuf_clen>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	461a      	mov	r2, r3
 8016ebe:	4b0d      	ldr	r3, [pc, #52]	; (8016ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016ec0:	881b      	ldrh	r3, [r3, #0]
 8016ec2:	1a9b      	subs	r3, r3, r2
 8016ec4:	b29a      	uxth	r2, r3
 8016ec6:	4b0b      	ldr	r3, [pc, #44]	; (8016ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016ec8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8016eca:	68b8      	ldr	r0, [r7, #8]
 8016ecc:	f7f8 ffee 	bl	800feac <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ed0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3730      	adds	r7, #48	; 0x30
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}
 8016edc:	0801a578 	.word	0x0801a578
 8016ee0:	0801a654 	.word	0x0801a654
 8016ee4:	0801a5c0 	.word	0x0801a5c0
 8016ee8:	0801a674 	.word	0x0801a674
 8016eec:	0801a6ac 	.word	0x0801a6ac
 8016ef0:	0801a6bc 	.word	0x0801a6bc
 8016ef4:	2400a53c 	.word	0x2400a53c

08016ef8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b08e      	sub	sp, #56	; 0x38
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8016f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	f003 030f 	and.w	r3, r3, #15
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	2b14      	cmp	r3, #20
 8016f12:	f040 8131 	bne.w	8017178 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f18:	88db      	ldrh	r3, [r3, #6]
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7f7 fcb5 	bl	800e88c <lwip_htons>
 8016f22:	4603      	mov	r3, r0
 8016f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f28:	b29b      	uxth	r3, r3
 8016f2a:	00db      	lsls	r3, r3, #3
 8016f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f30:	885b      	ldrh	r3, [r3, #2]
 8016f32:	b29b      	uxth	r3, r3
 8016f34:	4618      	mov	r0, r3
 8016f36:	f7f7 fca9 	bl	800e88c <lwip_htons>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	461a      	mov	r2, r3
 8016f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	b29b      	uxth	r3, r3
 8016f44:	f003 030f 	and.w	r3, r3, #15
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	009b      	lsls	r3, r3, #2
 8016f4c:	b29b      	uxth	r3, r3
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016f52:	6878      	ldr	r0, [r7, #4]
 8016f54:	f7f9 f844 	bl	800ffe0 <pbuf_clen>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016f5c:	4b8d      	ldr	r3, [pc, #564]	; (8017194 <ip4_reass+0x29c>)
 8016f5e:	881b      	ldrh	r3, [r3, #0]
 8016f60:	461a      	mov	r2, r3
 8016f62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f64:	4413      	add	r3, r2
 8016f66:	2b0a      	cmp	r3, #10
 8016f68:	dd10      	ble.n	8016f8c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f70:	f7ff fd8e 	bl	8016a90 <ip_reass_remove_oldest_datagram>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	f000 8100 	beq.w	801717c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016f7c:	4b85      	ldr	r3, [pc, #532]	; (8017194 <ip4_reass+0x29c>)
 8016f7e:	881b      	ldrh	r3, [r3, #0]
 8016f80:	461a      	mov	r2, r3
 8016f82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f84:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f86:	2b0a      	cmp	r3, #10
 8016f88:	f300 80f8 	bgt.w	801717c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f8c:	4b82      	ldr	r3, [pc, #520]	; (8017198 <ip4_reass+0x2a0>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	633b      	str	r3, [r7, #48]	; 0x30
 8016f92:	e015      	b.n	8016fc0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f96:	695a      	ldr	r2, [r3, #20]
 8016f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f9a:	68db      	ldr	r3, [r3, #12]
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d10c      	bne.n	8016fba <ip4_reass+0xc2>
 8016fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa2:	699a      	ldr	r2, [r3, #24]
 8016fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa6:	691b      	ldr	r3, [r3, #16]
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	d106      	bne.n	8016fba <ip4_reass+0xc2>
 8016fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fae:	899a      	ldrh	r2, [r3, #12]
 8016fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb2:	889b      	ldrh	r3, [r3, #4]
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d006      	beq.n	8016fc8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8016fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d1e6      	bne.n	8016f94 <ip4_reass+0x9c>
 8016fc6:	e000      	b.n	8016fca <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016fc8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d109      	bne.n	8016fe4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016fd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fd6:	f7ff fdbd 	bl	8016b54 <ip_reass_enqueue_new_datagram>
 8016fda:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d11c      	bne.n	801701c <ip4_reass+0x124>
      goto nullreturn;
 8016fe2:	e0ce      	b.n	8017182 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe6:	88db      	ldrh	r3, [r3, #6]
 8016fe8:	b29b      	uxth	r3, r3
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7f7 fc4e 	bl	800e88c <lwip_htons>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d110      	bne.n	801701c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ffc:	89db      	ldrh	r3, [r3, #14]
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7f7 fc44 	bl	800e88c <lwip_htons>
 8017004:	4603      	mov	r3, r0
 8017006:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801700a:	2b00      	cmp	r3, #0
 801700c:	d006      	beq.n	801701c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017010:	3308      	adds	r3, #8
 8017012:	2214      	movs	r2, #20
 8017014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017016:	4618      	mov	r0, r3
 8017018:	f000 fc71 	bl	80178fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701e:	88db      	ldrh	r3, [r3, #6]
 8017020:	b29b      	uxth	r3, r3
 8017022:	f003 0320 	and.w	r3, r3, #32
 8017026:	2b00      	cmp	r3, #0
 8017028:	bf0c      	ite	eq
 801702a:	2301      	moveq	r3, #1
 801702c:	2300      	movne	r3, #0
 801702e:	b2db      	uxtb	r3, r3
 8017030:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d00e      	beq.n	8017056 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8017038:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801703a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801703c:	4413      	add	r3, r2
 801703e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017040:	8b7a      	ldrh	r2, [r7, #26]
 8017042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017044:	429a      	cmp	r2, r3
 8017046:	f0c0 8099 	bcc.w	801717c <ip4_reass+0x284>
 801704a:	8b7b      	ldrh	r3, [r7, #26]
 801704c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017050:	4293      	cmp	r3, r2
 8017052:	f200 8093 	bhi.w	801717c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017056:	69fa      	ldr	r2, [r7, #28]
 8017058:	6879      	ldr	r1, [r7, #4]
 801705a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801705c:	f7ff fde2 	bl	8016c24 <ip_reass_chain_frag_into_datagram_and_validate>
 8017060:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017062:	697b      	ldr	r3, [r7, #20]
 8017064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017068:	f000 808a 	beq.w	8017180 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801706c:	4b49      	ldr	r3, [pc, #292]	; (8017194 <ip4_reass+0x29c>)
 801706e:	881a      	ldrh	r2, [r3, #0]
 8017070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017072:	4413      	add	r3, r2
 8017074:	b29a      	uxth	r2, r3
 8017076:	4b47      	ldr	r3, [pc, #284]	; (8017194 <ip4_reass+0x29c>)
 8017078:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801707a:	69fb      	ldr	r3, [r7, #28]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d00d      	beq.n	801709c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8017080:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017084:	4413      	add	r3, r2
 8017086:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801708a:	8a7a      	ldrh	r2, [r7, #18]
 801708c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017090:	7f9b      	ldrb	r3, [r3, #30]
 8017092:	f043 0301 	orr.w	r3, r3, #1
 8017096:	b2da      	uxtb	r2, r3
 8017098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	2b01      	cmp	r3, #1
 80170a0:	d168      	bne.n	8017174 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80170a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a4:	8b9b      	ldrh	r3, [r3, #28]
 80170a6:	3314      	adds	r3, #20
 80170a8:	b29a      	uxth	r2, r3
 80170aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ac:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80170ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b0:	685b      	ldr	r3, [r3, #4]
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80170b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80170c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c2:	3308      	adds	r3, #8
 80170c4:	2214      	movs	r2, #20
 80170c6:	4619      	mov	r1, r3
 80170c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170ca:	f000 fc18 	bl	80178fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80170ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170d0:	8b9b      	ldrh	r3, [r3, #28]
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7f7 fbda 	bl	800e88c <lwip_htons>
 80170d8:	4603      	mov	r3, r0
 80170da:	461a      	mov	r2, r3
 80170dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80170e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e2:	2200      	movs	r2, #0
 80170e4:	719a      	strb	r2, [r3, #6]
 80170e6:	2200      	movs	r2, #0
 80170e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80170ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ec:	2200      	movs	r2, #0
 80170ee:	729a      	strb	r2, [r3, #10]
 80170f0:	2200      	movs	r2, #0
 80170f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80170f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f6:	685b      	ldr	r3, [r3, #4]
 80170f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80170fa:	e00e      	b.n	801711a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80170fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170fe:	685b      	ldr	r3, [r3, #4]
 8017100:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8017102:	f06f 0113 	mvn.w	r1, #19
 8017106:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017108:	f7f8 feac 	bl	800fe64 <pbuf_header>
      pbuf_cat(p, r);
 801710c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f7f8 ffa6 	bl	8010060 <pbuf_cat>
      r = iprh->next_pbuf;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801711a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801711c:	2b00      	cmp	r3, #0
 801711e:	d1ed      	bne.n	80170fc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017120:	4b1d      	ldr	r3, [pc, #116]	; (8017198 <ip4_reass+0x2a0>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017126:	429a      	cmp	r2, r3
 8017128:	d102      	bne.n	8017130 <ip4_reass+0x238>
      ipr_prev = NULL;
 801712a:	2300      	movs	r3, #0
 801712c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801712e:	e010      	b.n	8017152 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017130:	4b19      	ldr	r3, [pc, #100]	; (8017198 <ip4_reass+0x2a0>)
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017136:	e007      	b.n	8017148 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8017138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801713e:	429a      	cmp	r2, r3
 8017140:	d006      	beq.n	8017150 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714a:	2b00      	cmp	r3, #0
 801714c:	d1f4      	bne.n	8017138 <ip4_reass+0x240>
 801714e:	e000      	b.n	8017152 <ip4_reass+0x25a>
          break;
 8017150:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017156:	f7ff fd37 	bl	8016bc8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f7f8 ff40 	bl	800ffe0 <pbuf_clen>
 8017160:	4603      	mov	r3, r0
 8017162:	461a      	mov	r2, r3
 8017164:	4b0b      	ldr	r3, [pc, #44]	; (8017194 <ip4_reass+0x29c>)
 8017166:	881b      	ldrh	r3, [r3, #0]
 8017168:	1a9b      	subs	r3, r3, r2
 801716a:	b29a      	uxth	r2, r3
 801716c:	4b09      	ldr	r3, [pc, #36]	; (8017194 <ip4_reass+0x29c>)
 801716e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	e00a      	b.n	801718a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017174:	2300      	movs	r3, #0
 8017176:	e008      	b.n	801718a <ip4_reass+0x292>
    goto nullreturn;
 8017178:	bf00      	nop
 801717a:	e002      	b.n	8017182 <ip4_reass+0x28a>

nullreturn:
 801717c:	bf00      	nop
 801717e:	e000      	b.n	8017182 <ip4_reass+0x28a>
    goto nullreturn;
 8017180:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f7f8 fe92 	bl	800feac <pbuf_free>
  return NULL;
 8017188:	2300      	movs	r3, #0
}
 801718a:	4618      	mov	r0, r3
 801718c:	3738      	adds	r7, #56	; 0x38
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	2400a53c 	.word	0x2400a53c
 8017198:	2400a538 	.word	0x2400a538

0801719c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80171a0:	2005      	movs	r0, #5
 80171a2:	f7f8 f839 	bl	800f218 <memp_malloc>
 80171a6:	4603      	mov	r3, r0
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	bd80      	pop	{r7, pc}

080171ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b082      	sub	sp, #8
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d106      	bne.n	80171c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80171ba:	4b07      	ldr	r3, [pc, #28]	; (80171d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80171bc:	f240 22ae 	movw	r2, #686	; 0x2ae
 80171c0:	4906      	ldr	r1, [pc, #24]	; (80171dc <ip_frag_free_pbuf_custom_ref+0x30>)
 80171c2:	4807      	ldr	r0, [pc, #28]	; (80171e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80171c4:	f000 fbae 	bl	8017924 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80171c8:	6879      	ldr	r1, [r7, #4]
 80171ca:	2005      	movs	r0, #5
 80171cc:	f7f8 f89a 	bl	800f304 <memp_free>
}
 80171d0:	bf00      	nop
 80171d2:	3708      	adds	r7, #8
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	0801a578 	.word	0x0801a578
 80171dc:	0801a6e0 	.word	0x0801a6e0
 80171e0:	0801a5c0 	.word	0x0801a5c0

080171e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d106      	bne.n	8017204 <ipfrag_free_pbuf_custom+0x20>
 80171f6:	4b11      	ldr	r3, [pc, #68]	; (801723c <ipfrag_free_pbuf_custom+0x58>)
 80171f8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80171fc:	4910      	ldr	r1, [pc, #64]	; (8017240 <ipfrag_free_pbuf_custom+0x5c>)
 80171fe:	4811      	ldr	r0, [pc, #68]	; (8017244 <ipfrag_free_pbuf_custom+0x60>)
 8017200:	f000 fb90 	bl	8017924 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8017204:	68fa      	ldr	r2, [r7, #12]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	429a      	cmp	r2, r3
 801720a:	d006      	beq.n	801721a <ipfrag_free_pbuf_custom+0x36>
 801720c:	4b0b      	ldr	r3, [pc, #44]	; (801723c <ipfrag_free_pbuf_custom+0x58>)
 801720e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8017212:	490d      	ldr	r1, [pc, #52]	; (8017248 <ipfrag_free_pbuf_custom+0x64>)
 8017214:	480b      	ldr	r0, [pc, #44]	; (8017244 <ipfrag_free_pbuf_custom+0x60>)
 8017216:	f000 fb85 	bl	8017924 <iprintf>
  if (pcr->original != NULL) {
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	695b      	ldr	r3, [r3, #20]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d004      	beq.n	801722c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	695b      	ldr	r3, [r3, #20]
 8017226:	4618      	mov	r0, r3
 8017228:	f7f8 fe40 	bl	800feac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801722c:	68f8      	ldr	r0, [r7, #12]
 801722e:	f7ff ffbd 	bl	80171ac <ip_frag_free_pbuf_custom_ref>
}
 8017232:	bf00      	nop
 8017234:	3710      	adds	r7, #16
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	0801a578 	.word	0x0801a578
 8017240:	0801a6ec 	.word	0x0801a6ec
 8017244:	0801a5c0 	.word	0x0801a5c0
 8017248:	0801a6f8 	.word	0x0801a6f8

0801724c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b092      	sub	sp, #72	; 0x48
 8017250:	af02      	add	r7, sp, #8
 8017252:	60f8      	str	r0, [r7, #12]
 8017254:	60b9      	str	r1, [r7, #8]
 8017256:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017258:	2300      	movs	r3, #0
 801725a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017260:	3b14      	subs	r3, #20
 8017262:	2b00      	cmp	r3, #0
 8017264:	da00      	bge.n	8017268 <ip4_frag+0x1c>
 8017266:	3307      	adds	r3, #7
 8017268:	10db      	asrs	r3, r3, #3
 801726a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801726c:	2314      	movs	r3, #20
 801726e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	685b      	ldr	r3, [r3, #4]
 8017274:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8017276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017278:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801727c:	781b      	ldrb	r3, [r3, #0]
 801727e:	f003 030f 	and.w	r3, r3, #15
 8017282:	009b      	lsls	r3, r3, #2
 8017284:	2b14      	cmp	r3, #20
 8017286:	d009      	beq.n	801729c <ip4_frag+0x50>
 8017288:	4b79      	ldr	r3, [pc, #484]	; (8017470 <ip4_frag+0x224>)
 801728a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801728e:	4979      	ldr	r1, [pc, #484]	; (8017474 <ip4_frag+0x228>)
 8017290:	4879      	ldr	r0, [pc, #484]	; (8017478 <ip4_frag+0x22c>)
 8017292:	f000 fb47 	bl	8017924 <iprintf>
 8017296:	f06f 0305 	mvn.w	r3, #5
 801729a:	e0e5      	b.n	8017468 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729e:	88db      	ldrh	r3, [r3, #6]
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7f7 faf2 	bl	800e88c <lwip_htons>
 80172a8:	4603      	mov	r3, r0
 80172aa:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80172ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80172ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80172b2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80172b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80172b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d009      	beq.n	80172d2 <ip4_frag+0x86>
 80172be:	4b6c      	ldr	r3, [pc, #432]	; (8017470 <ip4_frag+0x224>)
 80172c0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80172c4:	496d      	ldr	r1, [pc, #436]	; (801747c <ip4_frag+0x230>)
 80172c6:	486c      	ldr	r0, [pc, #432]	; (8017478 <ip4_frag+0x22c>)
 80172c8:	f000 fb2c 	bl	8017924 <iprintf>
 80172cc:	f06f 0305 	mvn.w	r3, #5
 80172d0:	e0ca      	b.n	8017468 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	891b      	ldrh	r3, [r3, #8]
 80172d6:	3b14      	subs	r3, #20
 80172d8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80172da:	e0bc      	b.n	8017456 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80172dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80172de:	00da      	lsls	r2, r3, #3
 80172e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80172e2:	4293      	cmp	r3, r2
 80172e4:	bfa8      	it	ge
 80172e6:	4613      	movge	r3, r2
 80172e8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80172ea:	2200      	movs	r2, #0
 80172ec:	2114      	movs	r1, #20
 80172ee:	2002      	movs	r0, #2
 80172f0:	f7f8 fa6a 	bl	800f7c8 <pbuf_alloc>
 80172f4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80172f6:	6a3b      	ldr	r3, [r7, #32]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	f000 80b2 	beq.w	8017462 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	895b      	ldrh	r3, [r3, #10]
 8017302:	2b13      	cmp	r3, #19
 8017304:	d806      	bhi.n	8017314 <ip4_frag+0xc8>
 8017306:	4b5a      	ldr	r3, [pc, #360]	; (8017470 <ip4_frag+0x224>)
 8017308:	f240 3209 	movw	r2, #777	; 0x309
 801730c:	495c      	ldr	r1, [pc, #368]	; (8017480 <ip4_frag+0x234>)
 801730e:	485a      	ldr	r0, [pc, #360]	; (8017478 <ip4_frag+0x22c>)
 8017310:	f000 fb08 	bl	8017924 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017314:	6a3b      	ldr	r3, [r7, #32]
 8017316:	685b      	ldr	r3, [r3, #4]
 8017318:	2214      	movs	r2, #20
 801731a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801731c:	4618      	mov	r0, r3
 801731e:	f000 faee 	bl	80178fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017322:	6a3b      	ldr	r3, [r7, #32]
 8017324:	685b      	ldr	r3, [r3, #4]
 8017326:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8017328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801732a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801732c:	e04f      	b.n	80173ce <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	895a      	ldrh	r2, [r3, #10]
 8017332:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017334:	1ad3      	subs	r3, r2, r3
 8017336:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017338:	8b7a      	ldrh	r2, [r7, #26]
 801733a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801733c:	4293      	cmp	r3, r2
 801733e:	bf28      	it	cs
 8017340:	4613      	movcs	r3, r2
 8017342:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017346:	2b00      	cmp	r3, #0
 8017348:	d105      	bne.n	8017356 <ip4_frag+0x10a>
        poff = 0;
 801734a:	2300      	movs	r3, #0
 801734c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	60fb      	str	r3, [r7, #12]
        continue;
 8017354:	e03b      	b.n	80173ce <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017356:	f7ff ff21 	bl	801719c <ip_frag_alloc_pbuf_custom_ref>
 801735a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d103      	bne.n	801736a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8017362:	6a38      	ldr	r0, [r7, #32]
 8017364:	f7f8 fda2 	bl	800feac <pbuf_free>
        goto memerr;
 8017368:	e07c      	b.n	8017464 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801736a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017370:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017372:	4413      	add	r3, r2
 8017374:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8017376:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017378:	9201      	str	r2, [sp, #4]
 801737a:	9300      	str	r3, [sp, #0]
 801737c:	4603      	mov	r3, r0
 801737e:	2202      	movs	r2, #2
 8017380:	2004      	movs	r0, #4
 8017382:	f7f8 fbb5 	bl	800faf0 <pbuf_alloced_custom>
 8017386:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d106      	bne.n	801739c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801738e:	6978      	ldr	r0, [r7, #20]
 8017390:	f7ff ff0c 	bl	80171ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017394:	6a38      	ldr	r0, [r7, #32]
 8017396:	f7f8 fd89 	bl	800feac <pbuf_free>
        goto memerr;
 801739a:	e063      	b.n	8017464 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801739c:	68f8      	ldr	r0, [r7, #12]
 801739e:	f7f8 fe37 	bl	8010010 <pbuf_ref>
      pcr->original = p;
 80173a2:	697b      	ldr	r3, [r7, #20]
 80173a4:	68fa      	ldr	r2, [r7, #12]
 80173a6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	4a36      	ldr	r2, [pc, #216]	; (8017484 <ip4_frag+0x238>)
 80173ac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80173ae:	6939      	ldr	r1, [r7, #16]
 80173b0:	6a38      	ldr	r0, [r7, #32]
 80173b2:	f7f8 fe55 	bl	8010060 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80173b6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80173b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80173ba:	1ad3      	subs	r3, r2, r3
 80173bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80173be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d004      	beq.n	80173ce <ip4_frag+0x182>
        poff = 0;
 80173c4:	2300      	movs	r3, #0
 80173c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80173ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d1ac      	bne.n	801732e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80173d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80173d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80173d8:	4413      	add	r3, r2
 80173da:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80173dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173e2:	3b14      	subs	r3, #20
 80173e4:	429a      	cmp	r2, r3
 80173e6:	bfd4      	ite	le
 80173e8:	2301      	movle	r3, #1
 80173ea:	2300      	movgt	r3, #0
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80173f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80173f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d103      	bne.n	8017406 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80173fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017400:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017404:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017406:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017408:	4618      	mov	r0, r3
 801740a:	f7f7 fa3f 	bl	800e88c <lwip_htons>
 801740e:	4603      	mov	r3, r0
 8017410:	461a      	mov	r2, r3
 8017412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017414:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8017416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017418:	3314      	adds	r3, #20
 801741a:	b29b      	uxth	r3, r3
 801741c:	4618      	mov	r0, r3
 801741e:	f7f7 fa35 	bl	800e88c <lwip_htons>
 8017422:	4603      	mov	r3, r0
 8017424:	461a      	mov	r2, r3
 8017426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017428:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742c:	2200      	movs	r2, #0
 801742e:	729a      	strb	r2, [r3, #10]
 8017430:	2200      	movs	r2, #0
 8017432:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	695b      	ldr	r3, [r3, #20]
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	6a39      	ldr	r1, [r7, #32]
 801743c:	68b8      	ldr	r0, [r7, #8]
 801743e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017440:	6a38      	ldr	r0, [r7, #32]
 8017442:	f7f8 fd33 	bl	800feac <pbuf_free>
    left -= fragsize;
 8017446:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801744a:	1ad3      	subs	r3, r2, r3
 801744c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801744e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017450:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8017452:	4413      	add	r3, r2
 8017454:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8017456:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017458:	2b00      	cmp	r3, #0
 801745a:	f47f af3f 	bne.w	80172dc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801745e:	2300      	movs	r3, #0
 8017460:	e002      	b.n	8017468 <ip4_frag+0x21c>
      goto memerr;
 8017462:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017468:	4618      	mov	r0, r3
 801746a:	3740      	adds	r7, #64	; 0x40
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}
 8017470:	0801a578 	.word	0x0801a578
 8017474:	0801a704 	.word	0x0801a704
 8017478:	0801a5c0 	.word	0x0801a5c0
 801747c:	0801a72c 	.word	0x0801a72c
 8017480:	0801a748 	.word	0x0801a748
 8017484:	080171e5 	.word	0x080171e5

08017488 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b086      	sub	sp, #24
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
 8017490:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8017492:	230e      	movs	r3, #14
 8017494:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	895b      	ldrh	r3, [r3, #10]
 801749a:	2b0e      	cmp	r3, #14
 801749c:	d977      	bls.n	801758e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80174a4:	693b      	ldr	r3, [r7, #16]
 80174a6:	7b1a      	ldrb	r2, [r3, #12]
 80174a8:	7b5b      	ldrb	r3, [r3, #13]
 80174aa:	021b      	lsls	r3, r3, #8
 80174ac:	4313      	orrs	r3, r2
 80174ae:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	781b      	ldrb	r3, [r3, #0]
 80174b4:	f003 0301 	and.w	r3, r3, #1
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d023      	beq.n	8017504 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	d10f      	bne.n	80174e4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	785b      	ldrb	r3, [r3, #1]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d11b      	bne.n	8017504 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80174d0:	2b5e      	cmp	r3, #94	; 0x5e
 80174d2:	d117      	bne.n	8017504 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	7b5b      	ldrb	r3, [r3, #13]
 80174d8:	f043 0310 	orr.w	r3, r3, #16
 80174dc:	b2da      	uxtb	r2, r3
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	735a      	strb	r2, [r3, #13]
 80174e2:	e00f      	b.n	8017504 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80174e4:	693b      	ldr	r3, [r7, #16]
 80174e6:	2206      	movs	r2, #6
 80174e8:	4930      	ldr	r1, [pc, #192]	; (80175ac <ethernet_input+0x124>)
 80174ea:	4618      	mov	r0, r3
 80174ec:	f000 f9f8 	bl	80178e0 <memcmp>
 80174f0:	4603      	mov	r3, r0
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d106      	bne.n	8017504 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	7b5b      	ldrb	r3, [r3, #13]
 80174fa:	f043 0308 	orr.w	r3, r3, #8
 80174fe:	b2da      	uxtb	r2, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017504:	89fb      	ldrh	r3, [r7, #14]
 8017506:	2b08      	cmp	r3, #8
 8017508:	d003      	beq.n	8017512 <ethernet_input+0x8a>
 801750a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801750e:	d01e      	beq.n	801754e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017510:	e044      	b.n	801759c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017518:	f003 0308 	and.w	r3, r3, #8
 801751c:	2b00      	cmp	r3, #0
 801751e:	d038      	beq.n	8017592 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	895b      	ldrh	r3, [r3, #10]
 8017524:	461a      	mov	r2, r3
 8017526:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801752a:	429a      	cmp	r2, r3
 801752c:	db33      	blt.n	8017596 <ethernet_input+0x10e>
 801752e:	8afb      	ldrh	r3, [r7, #22]
 8017530:	425b      	negs	r3, r3
 8017532:	b29b      	uxth	r3, r3
 8017534:	b21b      	sxth	r3, r3
 8017536:	4619      	mov	r1, r3
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f7f8 fc93 	bl	800fe64 <pbuf_header>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	d128      	bne.n	8017596 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8017544:	6839      	ldr	r1, [r7, #0]
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f7fe ff80 	bl	801644c <ip4_input>
      break;
 801754c:	e01d      	b.n	801758a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017554:	f003 0308 	and.w	r3, r3, #8
 8017558:	2b00      	cmp	r3, #0
 801755a:	d01e      	beq.n	801759a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	895b      	ldrh	r3, [r3, #10]
 8017560:	461a      	mov	r2, r3
 8017562:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017566:	429a      	cmp	r2, r3
 8017568:	db15      	blt.n	8017596 <ethernet_input+0x10e>
 801756a:	8afb      	ldrh	r3, [r7, #22]
 801756c:	425b      	negs	r3, r3
 801756e:	b29b      	uxth	r3, r3
 8017570:	b21b      	sxth	r3, r3
 8017572:	4619      	mov	r1, r3
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f7f8 fc75 	bl	800fe64 <pbuf_header>
 801757a:	4603      	mov	r3, r0
 801757c:	2b00      	cmp	r3, #0
 801757e:	d10a      	bne.n	8017596 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8017580:	6839      	ldr	r1, [r7, #0]
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	f7fe f8ca 	bl	801571c <etharp_input>
      break;
 8017588:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801758a:	2300      	movs	r3, #0
 801758c:	e00a      	b.n	80175a4 <ethernet_input+0x11c>
    goto free_and_return;
 801758e:	bf00      	nop
 8017590:	e004      	b.n	801759c <ethernet_input+0x114>
        goto free_and_return;
 8017592:	bf00      	nop
 8017594:	e002      	b.n	801759c <ethernet_input+0x114>

free_and_return:
 8017596:	bf00      	nop
 8017598:	e000      	b.n	801759c <ethernet_input+0x114>
        goto free_and_return;
 801759a:	bf00      	nop
  pbuf_free(p);
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	f7f8 fc85 	bl	800feac <pbuf_free>
  return ERR_OK;
 80175a2:	2300      	movs	r3, #0
}
 80175a4:	4618      	mov	r0, r3
 80175a6:	3718      	adds	r7, #24
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}
 80175ac:	0801a93c 	.word	0x0801a93c

080175b0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b086      	sub	sp, #24
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	60f8      	str	r0, [r7, #12]
 80175b8:	60b9      	str	r1, [r7, #8]
 80175ba:	607a      	str	r2, [r7, #4]
 80175bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80175be:	8c3b      	ldrh	r3, [r7, #32]
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7f7 f963 	bl	800e88c <lwip_htons>
 80175c6:	4603      	mov	r3, r0
 80175c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80175ca:	210e      	movs	r1, #14
 80175cc:	68b8      	ldr	r0, [r7, #8]
 80175ce:	f7f8 fc49 	bl	800fe64 <pbuf_header>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d125      	bne.n	8017624 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	8afa      	ldrh	r2, [r7, #22]
 80175e2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	2206      	movs	r2, #6
 80175e8:	6839      	ldr	r1, [r7, #0]
 80175ea:	4618      	mov	r0, r3
 80175ec:	f000 f987 	bl	80178fe <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80175f0:	693b      	ldr	r3, [r7, #16]
 80175f2:	3306      	adds	r3, #6
 80175f4:	2206      	movs	r2, #6
 80175f6:	6879      	ldr	r1, [r7, #4]
 80175f8:	4618      	mov	r0, r3
 80175fa:	f000 f980 	bl	80178fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017604:	2b06      	cmp	r3, #6
 8017606:	d006      	beq.n	8017616 <ethernet_output+0x66>
 8017608:	4b0a      	ldr	r3, [pc, #40]	; (8017634 <ethernet_output+0x84>)
 801760a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801760e:	490a      	ldr	r1, [pc, #40]	; (8017638 <ethernet_output+0x88>)
 8017610:	480a      	ldr	r0, [pc, #40]	; (801763c <ethernet_output+0x8c>)
 8017612:	f000 f987 	bl	8017924 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	699b      	ldr	r3, [r3, #24]
 801761a:	68b9      	ldr	r1, [r7, #8]
 801761c:	68f8      	ldr	r0, [r7, #12]
 801761e:	4798      	blx	r3
 8017620:	4603      	mov	r3, r0
 8017622:	e002      	b.n	801762a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017624:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017626:	f06f 0301 	mvn.w	r3, #1
}
 801762a:	4618      	mov	r0, r3
 801762c:	3718      	adds	r7, #24
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}
 8017632:	bf00      	nop
 8017634:	0801a768 	.word	0x0801a768
 8017638:	0801a7a0 	.word	0x0801a7a0
 801763c:	0801a7d4 	.word	0x0801a7d4

08017640 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b086      	sub	sp, #24
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	60bb      	str	r3, [r7, #8]
 801764e:	2304      	movs	r3, #4
 8017650:	60fb      	str	r3, [r7, #12]
 8017652:	2300      	movs	r3, #0
 8017654:	613b      	str	r3, [r7, #16]
 8017656:	2300      	movs	r3, #0
 8017658:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801765a:	f107 0308 	add.w	r3, r7, #8
 801765e:	2100      	movs	r1, #0
 8017660:	4618      	mov	r0, r3
 8017662:	f7f3 fe25 	bl	800b2b0 <osMessageCreate>
 8017666:	4602      	mov	r2, r0
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d102      	bne.n	801767a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017674:	f04f 33ff 	mov.w	r3, #4294967295
 8017678:	e000      	b.n	801767c <sys_mbox_new+0x3c>

  return ERR_OK;
 801767a:	2300      	movs	r3, #0
}
 801767c:	4618      	mov	r0, r3
 801767e:	3718      	adds	r7, #24
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}

08017684 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b082      	sub	sp, #8
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
 801768c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801768e:	bf00      	nop
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	6839      	ldr	r1, [r7, #0]
 8017696:	f04f 32ff 	mov.w	r2, #4294967295
 801769a:	4618      	mov	r0, r3
 801769c:	f7f3 fe32 	bl	800b304 <osMessagePut>
 80176a0:	4603      	mov	r3, r0
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d1f4      	bne.n	8017690 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80176a6:	bf00      	nop
 80176a8:	3708      	adds	r7, #8
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}

080176ae <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80176ae:	b580      	push	{r7, lr}
 80176b0:	b084      	sub	sp, #16
 80176b2:	af00      	add	r7, sp, #0
 80176b4:	6078      	str	r0, [r7, #4]
 80176b6:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	6839      	ldr	r1, [r7, #0]
 80176be:	2200      	movs	r2, #0
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7f3 fe1f 	bl	800b304 <osMessagePut>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d102      	bne.n	80176d2 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80176cc:	2300      	movs	r3, #0
 80176ce:	73fb      	strb	r3, [r7, #15]
 80176d0:	e001      	b.n	80176d6 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80176d2:	23ff      	movs	r3, #255	; 0xff
 80176d4:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80176d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176da:	4618      	mov	r0, r3
 80176dc:	3710      	adds	r7, #16
 80176de:	46bd      	mov	sp, r7
 80176e0:	bd80      	pop	{r7, pc}

080176e2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80176e2:	b580      	push	{r7, lr}
 80176e4:	b08c      	sub	sp, #48	; 0x30
 80176e6:	af00      	add	r7, sp, #0
 80176e8:	61f8      	str	r0, [r7, #28]
 80176ea:	61b9      	str	r1, [r7, #24]
 80176ec:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80176ee:	f7f3 fc38 	bl	800af62 <osKernelSysTick>
 80176f2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d017      	beq.n	801772a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	6819      	ldr	r1, [r3, #0]
 80176fe:	f107 0320 	add.w	r3, r7, #32
 8017702:	697a      	ldr	r2, [r7, #20]
 8017704:	4618      	mov	r0, r3
 8017706:	f7f3 fe3d 	bl	800b384 <osMessageGet>

    if(event.status == osEventMessage)
 801770a:	6a3b      	ldr	r3, [r7, #32]
 801770c:	2b10      	cmp	r3, #16
 801770e:	d109      	bne.n	8017724 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017712:	461a      	mov	r2, r3
 8017714:	69bb      	ldr	r3, [r7, #24]
 8017716:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017718:	f7f3 fc23 	bl	800af62 <osKernelSysTick>
 801771c:	4602      	mov	r2, r0
 801771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017720:	1ad3      	subs	r3, r2, r3
 8017722:	e019      	b.n	8017758 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017724:	f04f 33ff 	mov.w	r3, #4294967295
 8017728:	e016      	b.n	8017758 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801772a:	69fb      	ldr	r3, [r7, #28]
 801772c:	6819      	ldr	r1, [r3, #0]
 801772e:	463b      	mov	r3, r7
 8017730:	f04f 32ff 	mov.w	r2, #4294967295
 8017734:	4618      	mov	r0, r3
 8017736:	f7f3 fe25 	bl	800b384 <osMessageGet>
 801773a:	f107 0320 	add.w	r3, r7, #32
 801773e:	463a      	mov	r2, r7
 8017740:	ca07      	ldmia	r2, {r0, r1, r2}
 8017742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017748:	461a      	mov	r2, r3
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801774e:	f7f3 fc08 	bl	800af62 <osKernelSysTick>
 8017752:	4602      	mov	r2, r0
 8017754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017756:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017758:	4618      	mov	r0, r3
 801775a:	3730      	adds	r7, #48	; 0x30
 801775c:	46bd      	mov	sp, r7
 801775e:	bd80      	pop	{r7, pc}

08017760 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017760:	b480      	push	{r7}
 8017762:	b083      	sub	sp, #12
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d101      	bne.n	8017774 <sys_mbox_valid+0x14>
    return 0;
 8017770:	2300      	movs	r3, #0
 8017772:	e000      	b.n	8017776 <sys_mbox_valid+0x16>
  else
    return 1;
 8017774:	2301      	movs	r3, #1
}
 8017776:	4618      	mov	r0, r3
 8017778:	370c      	adds	r7, #12
 801777a:	46bd      	mov	sp, r7
 801777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017780:	4770      	bx	lr
	...

08017784 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017788:	4803      	ldr	r0, [pc, #12]	; (8017798 <sys_init+0x14>)
 801778a:	f7f3 fc66 	bl	800b05a <osMutexCreate>
 801778e:	4602      	mov	r2, r0
 8017790:	4b02      	ldr	r3, [pc, #8]	; (801779c <sys_init+0x18>)
 8017792:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017794:	bf00      	nop
 8017796:	bd80      	pop	{r7, pc}
 8017798:	0801a94c 	.word	0x0801a94c
 801779c:	2400da40 	.word	0x2400da40

080177a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b084      	sub	sp, #16
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80177a8:	2300      	movs	r3, #0
 80177aa:	60bb      	str	r3, [r7, #8]
 80177ac:	2300      	movs	r3, #0
 80177ae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80177b0:	f107 0308 	add.w	r3, r7, #8
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7f3 fc50 	bl	800b05a <osMutexCreate>
 80177ba:	4602      	mov	r2, r0
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d102      	bne.n	80177ce <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80177c8:	f04f 33ff 	mov.w	r3, #4294967295
 80177cc:	e000      	b.n	80177d0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80177ce:	2300      	movs	r3, #0
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3710      	adds	r7, #16
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f04f 31ff 	mov.w	r1, #4294967295
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f3 fc4f 	bl	800b08c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80177ee:	bf00      	nop
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}

080177f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80177f6:	b580      	push	{r7, lr}
 80177f8:	b082      	sub	sp, #8
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	4618      	mov	r0, r3
 8017804:	f7f3 fc90 	bl	800b128 <osMutexRelease>
}
 8017808:	bf00      	nop
 801780a:	3708      	adds	r7, #8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}

08017810 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b08c      	sub	sp, #48	; 0x30
 8017814:	af00      	add	r7, sp, #0
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	60b9      	str	r1, [r7, #8]
 801781a:	607a      	str	r2, [r7, #4]
 801781c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801781e:	f107 0314 	add.w	r3, r7, #20
 8017822:	2200      	movs	r2, #0
 8017824:	601a      	str	r2, [r3, #0]
 8017826:	605a      	str	r2, [r3, #4]
 8017828:	609a      	str	r2, [r3, #8]
 801782a:	60da      	str	r2, [r3, #12]
 801782c:	611a      	str	r2, [r3, #16]
 801782e:	615a      	str	r2, [r3, #20]
 8017830:	619a      	str	r2, [r3, #24]
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	617b      	str	r3, [r7, #20]
 8017836:	68bb      	ldr	r3, [r7, #8]
 8017838:	61bb      	str	r3, [r7, #24]
 801783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801783c:	b21b      	sxth	r3, r3
 801783e:	83bb      	strh	r3, [r7, #28]
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017844:	f107 0314 	add.w	r3, r7, #20
 8017848:	6879      	ldr	r1, [r7, #4]
 801784a:	4618      	mov	r0, r3
 801784c:	f7f3 fb99 	bl	800af82 <osThreadCreate>
 8017850:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017852:	4618      	mov	r0, r3
 8017854:	3730      	adds	r7, #48	; 0x30
 8017856:	46bd      	mov	sp, r7
 8017858:	bd80      	pop	{r7, pc}
	...

0801785c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017860:	4b04      	ldr	r3, [pc, #16]	; (8017874 <sys_arch_protect+0x18>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f04f 31ff 	mov.w	r1, #4294967295
 8017868:	4618      	mov	r0, r3
 801786a:	f7f3 fc0f 	bl	800b08c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801786e:	2301      	movs	r3, #1
}
 8017870:	4618      	mov	r0, r3
 8017872:	bd80      	pop	{r7, pc}
 8017874:	2400da40 	.word	0x2400da40

08017878 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017880:	4b04      	ldr	r3, [pc, #16]	; (8017894 <sys_arch_unprotect+0x1c>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	4618      	mov	r0, r3
 8017886:	f7f3 fc4f 	bl	800b128 <osMutexRelease>
}
 801788a:	bf00      	nop
 801788c:	3708      	adds	r7, #8
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}
 8017892:	bf00      	nop
 8017894:	2400da40 	.word	0x2400da40

08017898 <__libc_init_array>:
 8017898:	b570      	push	{r4, r5, r6, lr}
 801789a:	4e0d      	ldr	r6, [pc, #52]	; (80178d0 <__libc_init_array+0x38>)
 801789c:	4c0d      	ldr	r4, [pc, #52]	; (80178d4 <__libc_init_array+0x3c>)
 801789e:	1ba4      	subs	r4, r4, r6
 80178a0:	10a4      	asrs	r4, r4, #2
 80178a2:	2500      	movs	r5, #0
 80178a4:	42a5      	cmp	r5, r4
 80178a6:	d109      	bne.n	80178bc <__libc_init_array+0x24>
 80178a8:	4e0b      	ldr	r6, [pc, #44]	; (80178d8 <__libc_init_array+0x40>)
 80178aa:	4c0c      	ldr	r4, [pc, #48]	; (80178dc <__libc_init_array+0x44>)
 80178ac:	f000 ff1e 	bl	80186ec <_init>
 80178b0:	1ba4      	subs	r4, r4, r6
 80178b2:	10a4      	asrs	r4, r4, #2
 80178b4:	2500      	movs	r5, #0
 80178b6:	42a5      	cmp	r5, r4
 80178b8:	d105      	bne.n	80178c6 <__libc_init_array+0x2e>
 80178ba:	bd70      	pop	{r4, r5, r6, pc}
 80178bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80178c0:	4798      	blx	r3
 80178c2:	3501      	adds	r5, #1
 80178c4:	e7ee      	b.n	80178a4 <__libc_init_array+0xc>
 80178c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80178ca:	4798      	blx	r3
 80178cc:	3501      	adds	r5, #1
 80178ce:	e7f2      	b.n	80178b6 <__libc_init_array+0x1e>
 80178d0:	0801a9f4 	.word	0x0801a9f4
 80178d4:	0801a9f4 	.word	0x0801a9f4
 80178d8:	0801a9f4 	.word	0x0801a9f4
 80178dc:	0801a9f8 	.word	0x0801a9f8

080178e0 <memcmp>:
 80178e0:	b530      	push	{r4, r5, lr}
 80178e2:	2400      	movs	r4, #0
 80178e4:	42a2      	cmp	r2, r4
 80178e6:	d101      	bne.n	80178ec <memcmp+0xc>
 80178e8:	2000      	movs	r0, #0
 80178ea:	e007      	b.n	80178fc <memcmp+0x1c>
 80178ec:	5d03      	ldrb	r3, [r0, r4]
 80178ee:	3401      	adds	r4, #1
 80178f0:	190d      	adds	r5, r1, r4
 80178f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80178f6:	42ab      	cmp	r3, r5
 80178f8:	d0f4      	beq.n	80178e4 <memcmp+0x4>
 80178fa:	1b58      	subs	r0, r3, r5
 80178fc:	bd30      	pop	{r4, r5, pc}

080178fe <memcpy>:
 80178fe:	b510      	push	{r4, lr}
 8017900:	1e43      	subs	r3, r0, #1
 8017902:	440a      	add	r2, r1
 8017904:	4291      	cmp	r1, r2
 8017906:	d100      	bne.n	801790a <memcpy+0xc>
 8017908:	bd10      	pop	{r4, pc}
 801790a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801790e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017912:	e7f7      	b.n	8017904 <memcpy+0x6>

08017914 <memset>:
 8017914:	4402      	add	r2, r0
 8017916:	4603      	mov	r3, r0
 8017918:	4293      	cmp	r3, r2
 801791a:	d100      	bne.n	801791e <memset+0xa>
 801791c:	4770      	bx	lr
 801791e:	f803 1b01 	strb.w	r1, [r3], #1
 8017922:	e7f9      	b.n	8017918 <memset+0x4>

08017924 <iprintf>:
 8017924:	b40f      	push	{r0, r1, r2, r3}
 8017926:	4b0a      	ldr	r3, [pc, #40]	; (8017950 <iprintf+0x2c>)
 8017928:	b513      	push	{r0, r1, r4, lr}
 801792a:	681c      	ldr	r4, [r3, #0]
 801792c:	b124      	cbz	r4, 8017938 <iprintf+0x14>
 801792e:	69a3      	ldr	r3, [r4, #24]
 8017930:	b913      	cbnz	r3, 8017938 <iprintf+0x14>
 8017932:	4620      	mov	r0, r4
 8017934:	f000 f84e 	bl	80179d4 <__sinit>
 8017938:	ab05      	add	r3, sp, #20
 801793a:	9a04      	ldr	r2, [sp, #16]
 801793c:	68a1      	ldr	r1, [r4, #8]
 801793e:	9301      	str	r3, [sp, #4]
 8017940:	4620      	mov	r0, r4
 8017942:	f000 f955 	bl	8017bf0 <_vfiprintf_r>
 8017946:	b002      	add	sp, #8
 8017948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801794c:	b004      	add	sp, #16
 801794e:	4770      	bx	lr
 8017950:	2400002c 	.word	0x2400002c

08017954 <std>:
 8017954:	2300      	movs	r3, #0
 8017956:	b510      	push	{r4, lr}
 8017958:	4604      	mov	r4, r0
 801795a:	e9c0 3300 	strd	r3, r3, [r0]
 801795e:	6083      	str	r3, [r0, #8]
 8017960:	8181      	strh	r1, [r0, #12]
 8017962:	6643      	str	r3, [r0, #100]	; 0x64
 8017964:	81c2      	strh	r2, [r0, #14]
 8017966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801796a:	6183      	str	r3, [r0, #24]
 801796c:	4619      	mov	r1, r3
 801796e:	2208      	movs	r2, #8
 8017970:	305c      	adds	r0, #92	; 0x5c
 8017972:	f7ff ffcf 	bl	8017914 <memset>
 8017976:	4b05      	ldr	r3, [pc, #20]	; (801798c <std+0x38>)
 8017978:	6263      	str	r3, [r4, #36]	; 0x24
 801797a:	4b05      	ldr	r3, [pc, #20]	; (8017990 <std+0x3c>)
 801797c:	62a3      	str	r3, [r4, #40]	; 0x28
 801797e:	4b05      	ldr	r3, [pc, #20]	; (8017994 <std+0x40>)
 8017980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017982:	4b05      	ldr	r3, [pc, #20]	; (8017998 <std+0x44>)
 8017984:	6224      	str	r4, [r4, #32]
 8017986:	6323      	str	r3, [r4, #48]	; 0x30
 8017988:	bd10      	pop	{r4, pc}
 801798a:	bf00      	nop
 801798c:	0801814d 	.word	0x0801814d
 8017990:	0801816f 	.word	0x0801816f
 8017994:	080181a7 	.word	0x080181a7
 8017998:	080181cb 	.word	0x080181cb

0801799c <_cleanup_r>:
 801799c:	4901      	ldr	r1, [pc, #4]	; (80179a4 <_cleanup_r+0x8>)
 801799e:	f000 b885 	b.w	8017aac <_fwalk_reent>
 80179a2:	bf00      	nop
 80179a4:	080184a5 	.word	0x080184a5

080179a8 <__sfmoreglue>:
 80179a8:	b570      	push	{r4, r5, r6, lr}
 80179aa:	1e4a      	subs	r2, r1, #1
 80179ac:	2568      	movs	r5, #104	; 0x68
 80179ae:	4355      	muls	r5, r2
 80179b0:	460e      	mov	r6, r1
 80179b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80179b6:	f000 f897 	bl	8017ae8 <_malloc_r>
 80179ba:	4604      	mov	r4, r0
 80179bc:	b140      	cbz	r0, 80179d0 <__sfmoreglue+0x28>
 80179be:	2100      	movs	r1, #0
 80179c0:	e9c0 1600 	strd	r1, r6, [r0]
 80179c4:	300c      	adds	r0, #12
 80179c6:	60a0      	str	r0, [r4, #8]
 80179c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80179cc:	f7ff ffa2 	bl	8017914 <memset>
 80179d0:	4620      	mov	r0, r4
 80179d2:	bd70      	pop	{r4, r5, r6, pc}

080179d4 <__sinit>:
 80179d4:	6983      	ldr	r3, [r0, #24]
 80179d6:	b510      	push	{r4, lr}
 80179d8:	4604      	mov	r4, r0
 80179da:	bb33      	cbnz	r3, 8017a2a <__sinit+0x56>
 80179dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80179e0:	6503      	str	r3, [r0, #80]	; 0x50
 80179e2:	4b12      	ldr	r3, [pc, #72]	; (8017a2c <__sinit+0x58>)
 80179e4:	4a12      	ldr	r2, [pc, #72]	; (8017a30 <__sinit+0x5c>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	6282      	str	r2, [r0, #40]	; 0x28
 80179ea:	4298      	cmp	r0, r3
 80179ec:	bf04      	itt	eq
 80179ee:	2301      	moveq	r3, #1
 80179f0:	6183      	streq	r3, [r0, #24]
 80179f2:	f000 f81f 	bl	8017a34 <__sfp>
 80179f6:	6060      	str	r0, [r4, #4]
 80179f8:	4620      	mov	r0, r4
 80179fa:	f000 f81b 	bl	8017a34 <__sfp>
 80179fe:	60a0      	str	r0, [r4, #8]
 8017a00:	4620      	mov	r0, r4
 8017a02:	f000 f817 	bl	8017a34 <__sfp>
 8017a06:	2200      	movs	r2, #0
 8017a08:	60e0      	str	r0, [r4, #12]
 8017a0a:	2104      	movs	r1, #4
 8017a0c:	6860      	ldr	r0, [r4, #4]
 8017a0e:	f7ff ffa1 	bl	8017954 <std>
 8017a12:	2201      	movs	r2, #1
 8017a14:	2109      	movs	r1, #9
 8017a16:	68a0      	ldr	r0, [r4, #8]
 8017a18:	f7ff ff9c 	bl	8017954 <std>
 8017a1c:	2202      	movs	r2, #2
 8017a1e:	2112      	movs	r1, #18
 8017a20:	68e0      	ldr	r0, [r4, #12]
 8017a22:	f7ff ff97 	bl	8017954 <std>
 8017a26:	2301      	movs	r3, #1
 8017a28:	61a3      	str	r3, [r4, #24]
 8017a2a:	bd10      	pop	{r4, pc}
 8017a2c:	0801a954 	.word	0x0801a954
 8017a30:	0801799d 	.word	0x0801799d

08017a34 <__sfp>:
 8017a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a36:	4b1b      	ldr	r3, [pc, #108]	; (8017aa4 <__sfp+0x70>)
 8017a38:	681e      	ldr	r6, [r3, #0]
 8017a3a:	69b3      	ldr	r3, [r6, #24]
 8017a3c:	4607      	mov	r7, r0
 8017a3e:	b913      	cbnz	r3, 8017a46 <__sfp+0x12>
 8017a40:	4630      	mov	r0, r6
 8017a42:	f7ff ffc7 	bl	80179d4 <__sinit>
 8017a46:	3648      	adds	r6, #72	; 0x48
 8017a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017a4c:	3b01      	subs	r3, #1
 8017a4e:	d503      	bpl.n	8017a58 <__sfp+0x24>
 8017a50:	6833      	ldr	r3, [r6, #0]
 8017a52:	b133      	cbz	r3, 8017a62 <__sfp+0x2e>
 8017a54:	6836      	ldr	r6, [r6, #0]
 8017a56:	e7f7      	b.n	8017a48 <__sfp+0x14>
 8017a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017a5c:	b16d      	cbz	r5, 8017a7a <__sfp+0x46>
 8017a5e:	3468      	adds	r4, #104	; 0x68
 8017a60:	e7f4      	b.n	8017a4c <__sfp+0x18>
 8017a62:	2104      	movs	r1, #4
 8017a64:	4638      	mov	r0, r7
 8017a66:	f7ff ff9f 	bl	80179a8 <__sfmoreglue>
 8017a6a:	6030      	str	r0, [r6, #0]
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	d1f1      	bne.n	8017a54 <__sfp+0x20>
 8017a70:	230c      	movs	r3, #12
 8017a72:	603b      	str	r3, [r7, #0]
 8017a74:	4604      	mov	r4, r0
 8017a76:	4620      	mov	r0, r4
 8017a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a7a:	4b0b      	ldr	r3, [pc, #44]	; (8017aa8 <__sfp+0x74>)
 8017a7c:	6665      	str	r5, [r4, #100]	; 0x64
 8017a7e:	e9c4 5500 	strd	r5, r5, [r4]
 8017a82:	60a5      	str	r5, [r4, #8]
 8017a84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017a88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017a8c:	2208      	movs	r2, #8
 8017a8e:	4629      	mov	r1, r5
 8017a90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017a94:	f7ff ff3e 	bl	8017914 <memset>
 8017a98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017a9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017aa0:	e7e9      	b.n	8017a76 <__sfp+0x42>
 8017aa2:	bf00      	nop
 8017aa4:	0801a954 	.word	0x0801a954
 8017aa8:	ffff0001 	.word	0xffff0001

08017aac <_fwalk_reent>:
 8017aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ab0:	4680      	mov	r8, r0
 8017ab2:	4689      	mov	r9, r1
 8017ab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017ab8:	2600      	movs	r6, #0
 8017aba:	b914      	cbnz	r4, 8017ac2 <_fwalk_reent+0x16>
 8017abc:	4630      	mov	r0, r6
 8017abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ac2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017ac6:	3f01      	subs	r7, #1
 8017ac8:	d501      	bpl.n	8017ace <_fwalk_reent+0x22>
 8017aca:	6824      	ldr	r4, [r4, #0]
 8017acc:	e7f5      	b.n	8017aba <_fwalk_reent+0xe>
 8017ace:	89ab      	ldrh	r3, [r5, #12]
 8017ad0:	2b01      	cmp	r3, #1
 8017ad2:	d907      	bls.n	8017ae4 <_fwalk_reent+0x38>
 8017ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017ad8:	3301      	adds	r3, #1
 8017ada:	d003      	beq.n	8017ae4 <_fwalk_reent+0x38>
 8017adc:	4629      	mov	r1, r5
 8017ade:	4640      	mov	r0, r8
 8017ae0:	47c8      	blx	r9
 8017ae2:	4306      	orrs	r6, r0
 8017ae4:	3568      	adds	r5, #104	; 0x68
 8017ae6:	e7ee      	b.n	8017ac6 <_fwalk_reent+0x1a>

08017ae8 <_malloc_r>:
 8017ae8:	b570      	push	{r4, r5, r6, lr}
 8017aea:	1ccd      	adds	r5, r1, #3
 8017aec:	f025 0503 	bic.w	r5, r5, #3
 8017af0:	3508      	adds	r5, #8
 8017af2:	2d0c      	cmp	r5, #12
 8017af4:	bf38      	it	cc
 8017af6:	250c      	movcc	r5, #12
 8017af8:	2d00      	cmp	r5, #0
 8017afa:	4606      	mov	r6, r0
 8017afc:	db01      	blt.n	8017b02 <_malloc_r+0x1a>
 8017afe:	42a9      	cmp	r1, r5
 8017b00:	d903      	bls.n	8017b0a <_malloc_r+0x22>
 8017b02:	230c      	movs	r3, #12
 8017b04:	6033      	str	r3, [r6, #0]
 8017b06:	2000      	movs	r0, #0
 8017b08:	bd70      	pop	{r4, r5, r6, pc}
 8017b0a:	f000 fd6b 	bl	80185e4 <__malloc_lock>
 8017b0e:	4a21      	ldr	r2, [pc, #132]	; (8017b94 <_malloc_r+0xac>)
 8017b10:	6814      	ldr	r4, [r2, #0]
 8017b12:	4621      	mov	r1, r4
 8017b14:	b991      	cbnz	r1, 8017b3c <_malloc_r+0x54>
 8017b16:	4c20      	ldr	r4, [pc, #128]	; (8017b98 <_malloc_r+0xb0>)
 8017b18:	6823      	ldr	r3, [r4, #0]
 8017b1a:	b91b      	cbnz	r3, 8017b24 <_malloc_r+0x3c>
 8017b1c:	4630      	mov	r0, r6
 8017b1e:	f000 fb05 	bl	801812c <_sbrk_r>
 8017b22:	6020      	str	r0, [r4, #0]
 8017b24:	4629      	mov	r1, r5
 8017b26:	4630      	mov	r0, r6
 8017b28:	f000 fb00 	bl	801812c <_sbrk_r>
 8017b2c:	1c43      	adds	r3, r0, #1
 8017b2e:	d124      	bne.n	8017b7a <_malloc_r+0x92>
 8017b30:	230c      	movs	r3, #12
 8017b32:	6033      	str	r3, [r6, #0]
 8017b34:	4630      	mov	r0, r6
 8017b36:	f000 fd56 	bl	80185e6 <__malloc_unlock>
 8017b3a:	e7e4      	b.n	8017b06 <_malloc_r+0x1e>
 8017b3c:	680b      	ldr	r3, [r1, #0]
 8017b3e:	1b5b      	subs	r3, r3, r5
 8017b40:	d418      	bmi.n	8017b74 <_malloc_r+0x8c>
 8017b42:	2b0b      	cmp	r3, #11
 8017b44:	d90f      	bls.n	8017b66 <_malloc_r+0x7e>
 8017b46:	600b      	str	r3, [r1, #0]
 8017b48:	50cd      	str	r5, [r1, r3]
 8017b4a:	18cc      	adds	r4, r1, r3
 8017b4c:	4630      	mov	r0, r6
 8017b4e:	f000 fd4a 	bl	80185e6 <__malloc_unlock>
 8017b52:	f104 000b 	add.w	r0, r4, #11
 8017b56:	1d23      	adds	r3, r4, #4
 8017b58:	f020 0007 	bic.w	r0, r0, #7
 8017b5c:	1ac3      	subs	r3, r0, r3
 8017b5e:	d0d3      	beq.n	8017b08 <_malloc_r+0x20>
 8017b60:	425a      	negs	r2, r3
 8017b62:	50e2      	str	r2, [r4, r3]
 8017b64:	e7d0      	b.n	8017b08 <_malloc_r+0x20>
 8017b66:	428c      	cmp	r4, r1
 8017b68:	684b      	ldr	r3, [r1, #4]
 8017b6a:	bf16      	itet	ne
 8017b6c:	6063      	strne	r3, [r4, #4]
 8017b6e:	6013      	streq	r3, [r2, #0]
 8017b70:	460c      	movne	r4, r1
 8017b72:	e7eb      	b.n	8017b4c <_malloc_r+0x64>
 8017b74:	460c      	mov	r4, r1
 8017b76:	6849      	ldr	r1, [r1, #4]
 8017b78:	e7cc      	b.n	8017b14 <_malloc_r+0x2c>
 8017b7a:	1cc4      	adds	r4, r0, #3
 8017b7c:	f024 0403 	bic.w	r4, r4, #3
 8017b80:	42a0      	cmp	r0, r4
 8017b82:	d005      	beq.n	8017b90 <_malloc_r+0xa8>
 8017b84:	1a21      	subs	r1, r4, r0
 8017b86:	4630      	mov	r0, r6
 8017b88:	f000 fad0 	bl	801812c <_sbrk_r>
 8017b8c:	3001      	adds	r0, #1
 8017b8e:	d0cf      	beq.n	8017b30 <_malloc_r+0x48>
 8017b90:	6025      	str	r5, [r4, #0]
 8017b92:	e7db      	b.n	8017b4c <_malloc_r+0x64>
 8017b94:	2400a540 	.word	0x2400a540
 8017b98:	2400a544 	.word	0x2400a544

08017b9c <__sfputc_r>:
 8017b9c:	6893      	ldr	r3, [r2, #8]
 8017b9e:	3b01      	subs	r3, #1
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	b410      	push	{r4}
 8017ba4:	6093      	str	r3, [r2, #8]
 8017ba6:	da08      	bge.n	8017bba <__sfputc_r+0x1e>
 8017ba8:	6994      	ldr	r4, [r2, #24]
 8017baa:	42a3      	cmp	r3, r4
 8017bac:	db01      	blt.n	8017bb2 <__sfputc_r+0x16>
 8017bae:	290a      	cmp	r1, #10
 8017bb0:	d103      	bne.n	8017bba <__sfputc_r+0x1e>
 8017bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bb6:	f000 bb0d 	b.w	80181d4 <__swbuf_r>
 8017bba:	6813      	ldr	r3, [r2, #0]
 8017bbc:	1c58      	adds	r0, r3, #1
 8017bbe:	6010      	str	r0, [r2, #0]
 8017bc0:	7019      	strb	r1, [r3, #0]
 8017bc2:	4608      	mov	r0, r1
 8017bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bc8:	4770      	bx	lr

08017bca <__sfputs_r>:
 8017bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bcc:	4606      	mov	r6, r0
 8017bce:	460f      	mov	r7, r1
 8017bd0:	4614      	mov	r4, r2
 8017bd2:	18d5      	adds	r5, r2, r3
 8017bd4:	42ac      	cmp	r4, r5
 8017bd6:	d101      	bne.n	8017bdc <__sfputs_r+0x12>
 8017bd8:	2000      	movs	r0, #0
 8017bda:	e007      	b.n	8017bec <__sfputs_r+0x22>
 8017bdc:	463a      	mov	r2, r7
 8017bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017be2:	4630      	mov	r0, r6
 8017be4:	f7ff ffda 	bl	8017b9c <__sfputc_r>
 8017be8:	1c43      	adds	r3, r0, #1
 8017bea:	d1f3      	bne.n	8017bd4 <__sfputs_r+0xa>
 8017bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017bf0 <_vfiprintf_r>:
 8017bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf4:	460c      	mov	r4, r1
 8017bf6:	b09d      	sub	sp, #116	; 0x74
 8017bf8:	4617      	mov	r7, r2
 8017bfa:	461d      	mov	r5, r3
 8017bfc:	4606      	mov	r6, r0
 8017bfe:	b118      	cbz	r0, 8017c08 <_vfiprintf_r+0x18>
 8017c00:	6983      	ldr	r3, [r0, #24]
 8017c02:	b90b      	cbnz	r3, 8017c08 <_vfiprintf_r+0x18>
 8017c04:	f7ff fee6 	bl	80179d4 <__sinit>
 8017c08:	4b7c      	ldr	r3, [pc, #496]	; (8017dfc <_vfiprintf_r+0x20c>)
 8017c0a:	429c      	cmp	r4, r3
 8017c0c:	d158      	bne.n	8017cc0 <_vfiprintf_r+0xd0>
 8017c0e:	6874      	ldr	r4, [r6, #4]
 8017c10:	89a3      	ldrh	r3, [r4, #12]
 8017c12:	0718      	lsls	r0, r3, #28
 8017c14:	d55e      	bpl.n	8017cd4 <_vfiprintf_r+0xe4>
 8017c16:	6923      	ldr	r3, [r4, #16]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d05b      	beq.n	8017cd4 <_vfiprintf_r+0xe4>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8017c20:	2320      	movs	r3, #32
 8017c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c26:	2330      	movs	r3, #48	; 0x30
 8017c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c2c:	9503      	str	r5, [sp, #12]
 8017c2e:	f04f 0b01 	mov.w	fp, #1
 8017c32:	46b8      	mov	r8, r7
 8017c34:	4645      	mov	r5, r8
 8017c36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017c3a:	b10b      	cbz	r3, 8017c40 <_vfiprintf_r+0x50>
 8017c3c:	2b25      	cmp	r3, #37	; 0x25
 8017c3e:	d154      	bne.n	8017cea <_vfiprintf_r+0xfa>
 8017c40:	ebb8 0a07 	subs.w	sl, r8, r7
 8017c44:	d00b      	beq.n	8017c5e <_vfiprintf_r+0x6e>
 8017c46:	4653      	mov	r3, sl
 8017c48:	463a      	mov	r2, r7
 8017c4a:	4621      	mov	r1, r4
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f7ff ffbc 	bl	8017bca <__sfputs_r>
 8017c52:	3001      	adds	r0, #1
 8017c54:	f000 80c2 	beq.w	8017ddc <_vfiprintf_r+0x1ec>
 8017c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c5a:	4453      	add	r3, sl
 8017c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c5e:	f898 3000 	ldrb.w	r3, [r8]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	f000 80ba 	beq.w	8017ddc <_vfiprintf_r+0x1ec>
 8017c68:	2300      	movs	r3, #0
 8017c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c72:	9304      	str	r3, [sp, #16]
 8017c74:	9307      	str	r3, [sp, #28]
 8017c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8017c7c:	46a8      	mov	r8, r5
 8017c7e:	2205      	movs	r2, #5
 8017c80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017c84:	485e      	ldr	r0, [pc, #376]	; (8017e00 <_vfiprintf_r+0x210>)
 8017c86:	f7e8 fb2b 	bl	80002e0 <memchr>
 8017c8a:	9b04      	ldr	r3, [sp, #16]
 8017c8c:	bb78      	cbnz	r0, 8017cee <_vfiprintf_r+0xfe>
 8017c8e:	06d9      	lsls	r1, r3, #27
 8017c90:	bf44      	itt	mi
 8017c92:	2220      	movmi	r2, #32
 8017c94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017c98:	071a      	lsls	r2, r3, #28
 8017c9a:	bf44      	itt	mi
 8017c9c:	222b      	movmi	r2, #43	; 0x2b
 8017c9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017ca2:	782a      	ldrb	r2, [r5, #0]
 8017ca4:	2a2a      	cmp	r2, #42	; 0x2a
 8017ca6:	d02a      	beq.n	8017cfe <_vfiprintf_r+0x10e>
 8017ca8:	9a07      	ldr	r2, [sp, #28]
 8017caa:	46a8      	mov	r8, r5
 8017cac:	2000      	movs	r0, #0
 8017cae:	250a      	movs	r5, #10
 8017cb0:	4641      	mov	r1, r8
 8017cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cb6:	3b30      	subs	r3, #48	; 0x30
 8017cb8:	2b09      	cmp	r3, #9
 8017cba:	d969      	bls.n	8017d90 <_vfiprintf_r+0x1a0>
 8017cbc:	b360      	cbz	r0, 8017d18 <_vfiprintf_r+0x128>
 8017cbe:	e024      	b.n	8017d0a <_vfiprintf_r+0x11a>
 8017cc0:	4b50      	ldr	r3, [pc, #320]	; (8017e04 <_vfiprintf_r+0x214>)
 8017cc2:	429c      	cmp	r4, r3
 8017cc4:	d101      	bne.n	8017cca <_vfiprintf_r+0xda>
 8017cc6:	68b4      	ldr	r4, [r6, #8]
 8017cc8:	e7a2      	b.n	8017c10 <_vfiprintf_r+0x20>
 8017cca:	4b4f      	ldr	r3, [pc, #316]	; (8017e08 <_vfiprintf_r+0x218>)
 8017ccc:	429c      	cmp	r4, r3
 8017cce:	bf08      	it	eq
 8017cd0:	68f4      	ldreq	r4, [r6, #12]
 8017cd2:	e79d      	b.n	8017c10 <_vfiprintf_r+0x20>
 8017cd4:	4621      	mov	r1, r4
 8017cd6:	4630      	mov	r0, r6
 8017cd8:	f000 fae0 	bl	801829c <__swsetup_r>
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	d09d      	beq.n	8017c1c <_vfiprintf_r+0x2c>
 8017ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ce4:	b01d      	add	sp, #116	; 0x74
 8017ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cea:	46a8      	mov	r8, r5
 8017cec:	e7a2      	b.n	8017c34 <_vfiprintf_r+0x44>
 8017cee:	4a44      	ldr	r2, [pc, #272]	; (8017e00 <_vfiprintf_r+0x210>)
 8017cf0:	1a80      	subs	r0, r0, r2
 8017cf2:	fa0b f000 	lsl.w	r0, fp, r0
 8017cf6:	4318      	orrs	r0, r3
 8017cf8:	9004      	str	r0, [sp, #16]
 8017cfa:	4645      	mov	r5, r8
 8017cfc:	e7be      	b.n	8017c7c <_vfiprintf_r+0x8c>
 8017cfe:	9a03      	ldr	r2, [sp, #12]
 8017d00:	1d11      	adds	r1, r2, #4
 8017d02:	6812      	ldr	r2, [r2, #0]
 8017d04:	9103      	str	r1, [sp, #12]
 8017d06:	2a00      	cmp	r2, #0
 8017d08:	db01      	blt.n	8017d0e <_vfiprintf_r+0x11e>
 8017d0a:	9207      	str	r2, [sp, #28]
 8017d0c:	e004      	b.n	8017d18 <_vfiprintf_r+0x128>
 8017d0e:	4252      	negs	r2, r2
 8017d10:	f043 0302 	orr.w	r3, r3, #2
 8017d14:	9207      	str	r2, [sp, #28]
 8017d16:	9304      	str	r3, [sp, #16]
 8017d18:	f898 3000 	ldrb.w	r3, [r8]
 8017d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8017d1e:	d10e      	bne.n	8017d3e <_vfiprintf_r+0x14e>
 8017d20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017d24:	2b2a      	cmp	r3, #42	; 0x2a
 8017d26:	d138      	bne.n	8017d9a <_vfiprintf_r+0x1aa>
 8017d28:	9b03      	ldr	r3, [sp, #12]
 8017d2a:	1d1a      	adds	r2, r3, #4
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	9203      	str	r2, [sp, #12]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	bfb8      	it	lt
 8017d34:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d38:	f108 0802 	add.w	r8, r8, #2
 8017d3c:	9305      	str	r3, [sp, #20]
 8017d3e:	4d33      	ldr	r5, [pc, #204]	; (8017e0c <_vfiprintf_r+0x21c>)
 8017d40:	f898 1000 	ldrb.w	r1, [r8]
 8017d44:	2203      	movs	r2, #3
 8017d46:	4628      	mov	r0, r5
 8017d48:	f7e8 faca 	bl	80002e0 <memchr>
 8017d4c:	b140      	cbz	r0, 8017d60 <_vfiprintf_r+0x170>
 8017d4e:	2340      	movs	r3, #64	; 0x40
 8017d50:	1b40      	subs	r0, r0, r5
 8017d52:	fa03 f000 	lsl.w	r0, r3, r0
 8017d56:	9b04      	ldr	r3, [sp, #16]
 8017d58:	4303      	orrs	r3, r0
 8017d5a:	f108 0801 	add.w	r8, r8, #1
 8017d5e:	9304      	str	r3, [sp, #16]
 8017d60:	f898 1000 	ldrb.w	r1, [r8]
 8017d64:	482a      	ldr	r0, [pc, #168]	; (8017e10 <_vfiprintf_r+0x220>)
 8017d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d6a:	2206      	movs	r2, #6
 8017d6c:	f108 0701 	add.w	r7, r8, #1
 8017d70:	f7e8 fab6 	bl	80002e0 <memchr>
 8017d74:	2800      	cmp	r0, #0
 8017d76:	d037      	beq.n	8017de8 <_vfiprintf_r+0x1f8>
 8017d78:	4b26      	ldr	r3, [pc, #152]	; (8017e14 <_vfiprintf_r+0x224>)
 8017d7a:	bb1b      	cbnz	r3, 8017dc4 <_vfiprintf_r+0x1d4>
 8017d7c:	9b03      	ldr	r3, [sp, #12]
 8017d7e:	3307      	adds	r3, #7
 8017d80:	f023 0307 	bic.w	r3, r3, #7
 8017d84:	3308      	adds	r3, #8
 8017d86:	9303      	str	r3, [sp, #12]
 8017d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d8a:	444b      	add	r3, r9
 8017d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8017d8e:	e750      	b.n	8017c32 <_vfiprintf_r+0x42>
 8017d90:	fb05 3202 	mla	r2, r5, r2, r3
 8017d94:	2001      	movs	r0, #1
 8017d96:	4688      	mov	r8, r1
 8017d98:	e78a      	b.n	8017cb0 <_vfiprintf_r+0xc0>
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	f108 0801 	add.w	r8, r8, #1
 8017da0:	9305      	str	r3, [sp, #20]
 8017da2:	4619      	mov	r1, r3
 8017da4:	250a      	movs	r5, #10
 8017da6:	4640      	mov	r0, r8
 8017da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dac:	3a30      	subs	r2, #48	; 0x30
 8017dae:	2a09      	cmp	r2, #9
 8017db0:	d903      	bls.n	8017dba <_vfiprintf_r+0x1ca>
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d0c3      	beq.n	8017d3e <_vfiprintf_r+0x14e>
 8017db6:	9105      	str	r1, [sp, #20]
 8017db8:	e7c1      	b.n	8017d3e <_vfiprintf_r+0x14e>
 8017dba:	fb05 2101 	mla	r1, r5, r1, r2
 8017dbe:	2301      	movs	r3, #1
 8017dc0:	4680      	mov	r8, r0
 8017dc2:	e7f0      	b.n	8017da6 <_vfiprintf_r+0x1b6>
 8017dc4:	ab03      	add	r3, sp, #12
 8017dc6:	9300      	str	r3, [sp, #0]
 8017dc8:	4622      	mov	r2, r4
 8017dca:	4b13      	ldr	r3, [pc, #76]	; (8017e18 <_vfiprintf_r+0x228>)
 8017dcc:	a904      	add	r1, sp, #16
 8017dce:	4630      	mov	r0, r6
 8017dd0:	f3af 8000 	nop.w
 8017dd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017dd8:	4681      	mov	r9, r0
 8017dda:	d1d5      	bne.n	8017d88 <_vfiprintf_r+0x198>
 8017ddc:	89a3      	ldrh	r3, [r4, #12]
 8017dde:	065b      	lsls	r3, r3, #25
 8017de0:	f53f af7e 	bmi.w	8017ce0 <_vfiprintf_r+0xf0>
 8017de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017de6:	e77d      	b.n	8017ce4 <_vfiprintf_r+0xf4>
 8017de8:	ab03      	add	r3, sp, #12
 8017dea:	9300      	str	r3, [sp, #0]
 8017dec:	4622      	mov	r2, r4
 8017dee:	4b0a      	ldr	r3, [pc, #40]	; (8017e18 <_vfiprintf_r+0x228>)
 8017df0:	a904      	add	r1, sp, #16
 8017df2:	4630      	mov	r0, r6
 8017df4:	f000 f888 	bl	8017f08 <_printf_i>
 8017df8:	e7ec      	b.n	8017dd4 <_vfiprintf_r+0x1e4>
 8017dfa:	bf00      	nop
 8017dfc:	0801a978 	.word	0x0801a978
 8017e00:	0801a9b8 	.word	0x0801a9b8
 8017e04:	0801a998 	.word	0x0801a998
 8017e08:	0801a958 	.word	0x0801a958
 8017e0c:	0801a9be 	.word	0x0801a9be
 8017e10:	0801a9c2 	.word	0x0801a9c2
 8017e14:	00000000 	.word	0x00000000
 8017e18:	08017bcb 	.word	0x08017bcb

08017e1c <_printf_common>:
 8017e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e20:	4691      	mov	r9, r2
 8017e22:	461f      	mov	r7, r3
 8017e24:	688a      	ldr	r2, [r1, #8]
 8017e26:	690b      	ldr	r3, [r1, #16]
 8017e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	bfb8      	it	lt
 8017e30:	4613      	movlt	r3, r2
 8017e32:	f8c9 3000 	str.w	r3, [r9]
 8017e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e3a:	4606      	mov	r6, r0
 8017e3c:	460c      	mov	r4, r1
 8017e3e:	b112      	cbz	r2, 8017e46 <_printf_common+0x2a>
 8017e40:	3301      	adds	r3, #1
 8017e42:	f8c9 3000 	str.w	r3, [r9]
 8017e46:	6823      	ldr	r3, [r4, #0]
 8017e48:	0699      	lsls	r1, r3, #26
 8017e4a:	bf42      	ittt	mi
 8017e4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017e50:	3302      	addmi	r3, #2
 8017e52:	f8c9 3000 	strmi.w	r3, [r9]
 8017e56:	6825      	ldr	r5, [r4, #0]
 8017e58:	f015 0506 	ands.w	r5, r5, #6
 8017e5c:	d107      	bne.n	8017e6e <_printf_common+0x52>
 8017e5e:	f104 0a19 	add.w	sl, r4, #25
 8017e62:	68e3      	ldr	r3, [r4, #12]
 8017e64:	f8d9 2000 	ldr.w	r2, [r9]
 8017e68:	1a9b      	subs	r3, r3, r2
 8017e6a:	42ab      	cmp	r3, r5
 8017e6c:	dc28      	bgt.n	8017ec0 <_printf_common+0xa4>
 8017e6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017e72:	6822      	ldr	r2, [r4, #0]
 8017e74:	3300      	adds	r3, #0
 8017e76:	bf18      	it	ne
 8017e78:	2301      	movne	r3, #1
 8017e7a:	0692      	lsls	r2, r2, #26
 8017e7c:	d42d      	bmi.n	8017eda <_printf_common+0xbe>
 8017e7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017e82:	4639      	mov	r1, r7
 8017e84:	4630      	mov	r0, r6
 8017e86:	47c0      	blx	r8
 8017e88:	3001      	adds	r0, #1
 8017e8a:	d020      	beq.n	8017ece <_printf_common+0xb2>
 8017e8c:	6823      	ldr	r3, [r4, #0]
 8017e8e:	68e5      	ldr	r5, [r4, #12]
 8017e90:	f8d9 2000 	ldr.w	r2, [r9]
 8017e94:	f003 0306 	and.w	r3, r3, #6
 8017e98:	2b04      	cmp	r3, #4
 8017e9a:	bf08      	it	eq
 8017e9c:	1aad      	subeq	r5, r5, r2
 8017e9e:	68a3      	ldr	r3, [r4, #8]
 8017ea0:	6922      	ldr	r2, [r4, #16]
 8017ea2:	bf0c      	ite	eq
 8017ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ea8:	2500      	movne	r5, #0
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	bfc4      	itt	gt
 8017eae:	1a9b      	subgt	r3, r3, r2
 8017eb0:	18ed      	addgt	r5, r5, r3
 8017eb2:	f04f 0900 	mov.w	r9, #0
 8017eb6:	341a      	adds	r4, #26
 8017eb8:	454d      	cmp	r5, r9
 8017eba:	d11a      	bne.n	8017ef2 <_printf_common+0xd6>
 8017ebc:	2000      	movs	r0, #0
 8017ebe:	e008      	b.n	8017ed2 <_printf_common+0xb6>
 8017ec0:	2301      	movs	r3, #1
 8017ec2:	4652      	mov	r2, sl
 8017ec4:	4639      	mov	r1, r7
 8017ec6:	4630      	mov	r0, r6
 8017ec8:	47c0      	blx	r8
 8017eca:	3001      	adds	r0, #1
 8017ecc:	d103      	bne.n	8017ed6 <_printf_common+0xba>
 8017ece:	f04f 30ff 	mov.w	r0, #4294967295
 8017ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ed6:	3501      	adds	r5, #1
 8017ed8:	e7c3      	b.n	8017e62 <_printf_common+0x46>
 8017eda:	18e1      	adds	r1, r4, r3
 8017edc:	1c5a      	adds	r2, r3, #1
 8017ede:	2030      	movs	r0, #48	; 0x30
 8017ee0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ee4:	4422      	add	r2, r4
 8017ee6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017eee:	3302      	adds	r3, #2
 8017ef0:	e7c5      	b.n	8017e7e <_printf_common+0x62>
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	4622      	mov	r2, r4
 8017ef6:	4639      	mov	r1, r7
 8017ef8:	4630      	mov	r0, r6
 8017efa:	47c0      	blx	r8
 8017efc:	3001      	adds	r0, #1
 8017efe:	d0e6      	beq.n	8017ece <_printf_common+0xb2>
 8017f00:	f109 0901 	add.w	r9, r9, #1
 8017f04:	e7d8      	b.n	8017eb8 <_printf_common+0x9c>
	...

08017f08 <_printf_i>:
 8017f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017f10:	460c      	mov	r4, r1
 8017f12:	7e09      	ldrb	r1, [r1, #24]
 8017f14:	b085      	sub	sp, #20
 8017f16:	296e      	cmp	r1, #110	; 0x6e
 8017f18:	4617      	mov	r7, r2
 8017f1a:	4606      	mov	r6, r0
 8017f1c:	4698      	mov	r8, r3
 8017f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f20:	f000 80b3 	beq.w	801808a <_printf_i+0x182>
 8017f24:	d822      	bhi.n	8017f6c <_printf_i+0x64>
 8017f26:	2963      	cmp	r1, #99	; 0x63
 8017f28:	d036      	beq.n	8017f98 <_printf_i+0x90>
 8017f2a:	d80a      	bhi.n	8017f42 <_printf_i+0x3a>
 8017f2c:	2900      	cmp	r1, #0
 8017f2e:	f000 80b9 	beq.w	80180a4 <_printf_i+0x19c>
 8017f32:	2958      	cmp	r1, #88	; 0x58
 8017f34:	f000 8083 	beq.w	801803e <_printf_i+0x136>
 8017f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017f40:	e032      	b.n	8017fa8 <_printf_i+0xa0>
 8017f42:	2964      	cmp	r1, #100	; 0x64
 8017f44:	d001      	beq.n	8017f4a <_printf_i+0x42>
 8017f46:	2969      	cmp	r1, #105	; 0x69
 8017f48:	d1f6      	bne.n	8017f38 <_printf_i+0x30>
 8017f4a:	6820      	ldr	r0, [r4, #0]
 8017f4c:	6813      	ldr	r3, [r2, #0]
 8017f4e:	0605      	lsls	r5, r0, #24
 8017f50:	f103 0104 	add.w	r1, r3, #4
 8017f54:	d52a      	bpl.n	8017fac <_printf_i+0xa4>
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	6011      	str	r1, [r2, #0]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	da03      	bge.n	8017f66 <_printf_i+0x5e>
 8017f5e:	222d      	movs	r2, #45	; 0x2d
 8017f60:	425b      	negs	r3, r3
 8017f62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017f66:	486f      	ldr	r0, [pc, #444]	; (8018124 <_printf_i+0x21c>)
 8017f68:	220a      	movs	r2, #10
 8017f6a:	e039      	b.n	8017fe0 <_printf_i+0xd8>
 8017f6c:	2973      	cmp	r1, #115	; 0x73
 8017f6e:	f000 809d 	beq.w	80180ac <_printf_i+0x1a4>
 8017f72:	d808      	bhi.n	8017f86 <_printf_i+0x7e>
 8017f74:	296f      	cmp	r1, #111	; 0x6f
 8017f76:	d020      	beq.n	8017fba <_printf_i+0xb2>
 8017f78:	2970      	cmp	r1, #112	; 0x70
 8017f7a:	d1dd      	bne.n	8017f38 <_printf_i+0x30>
 8017f7c:	6823      	ldr	r3, [r4, #0]
 8017f7e:	f043 0320 	orr.w	r3, r3, #32
 8017f82:	6023      	str	r3, [r4, #0]
 8017f84:	e003      	b.n	8017f8e <_printf_i+0x86>
 8017f86:	2975      	cmp	r1, #117	; 0x75
 8017f88:	d017      	beq.n	8017fba <_printf_i+0xb2>
 8017f8a:	2978      	cmp	r1, #120	; 0x78
 8017f8c:	d1d4      	bne.n	8017f38 <_printf_i+0x30>
 8017f8e:	2378      	movs	r3, #120	; 0x78
 8017f90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017f94:	4864      	ldr	r0, [pc, #400]	; (8018128 <_printf_i+0x220>)
 8017f96:	e055      	b.n	8018044 <_printf_i+0x13c>
 8017f98:	6813      	ldr	r3, [r2, #0]
 8017f9a:	1d19      	adds	r1, r3, #4
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	6011      	str	r1, [r2, #0]
 8017fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017fa8:	2301      	movs	r3, #1
 8017faa:	e08c      	b.n	80180c6 <_printf_i+0x1be>
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	6011      	str	r1, [r2, #0]
 8017fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017fb4:	bf18      	it	ne
 8017fb6:	b21b      	sxthne	r3, r3
 8017fb8:	e7cf      	b.n	8017f5a <_printf_i+0x52>
 8017fba:	6813      	ldr	r3, [r2, #0]
 8017fbc:	6825      	ldr	r5, [r4, #0]
 8017fbe:	1d18      	adds	r0, r3, #4
 8017fc0:	6010      	str	r0, [r2, #0]
 8017fc2:	0628      	lsls	r0, r5, #24
 8017fc4:	d501      	bpl.n	8017fca <_printf_i+0xc2>
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	e002      	b.n	8017fd0 <_printf_i+0xc8>
 8017fca:	0668      	lsls	r0, r5, #25
 8017fcc:	d5fb      	bpl.n	8017fc6 <_printf_i+0xbe>
 8017fce:	881b      	ldrh	r3, [r3, #0]
 8017fd0:	4854      	ldr	r0, [pc, #336]	; (8018124 <_printf_i+0x21c>)
 8017fd2:	296f      	cmp	r1, #111	; 0x6f
 8017fd4:	bf14      	ite	ne
 8017fd6:	220a      	movne	r2, #10
 8017fd8:	2208      	moveq	r2, #8
 8017fda:	2100      	movs	r1, #0
 8017fdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017fe0:	6865      	ldr	r5, [r4, #4]
 8017fe2:	60a5      	str	r5, [r4, #8]
 8017fe4:	2d00      	cmp	r5, #0
 8017fe6:	f2c0 8095 	blt.w	8018114 <_printf_i+0x20c>
 8017fea:	6821      	ldr	r1, [r4, #0]
 8017fec:	f021 0104 	bic.w	r1, r1, #4
 8017ff0:	6021      	str	r1, [r4, #0]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d13d      	bne.n	8018072 <_printf_i+0x16a>
 8017ff6:	2d00      	cmp	r5, #0
 8017ff8:	f040 808e 	bne.w	8018118 <_printf_i+0x210>
 8017ffc:	4665      	mov	r5, ip
 8017ffe:	2a08      	cmp	r2, #8
 8018000:	d10b      	bne.n	801801a <_printf_i+0x112>
 8018002:	6823      	ldr	r3, [r4, #0]
 8018004:	07db      	lsls	r3, r3, #31
 8018006:	d508      	bpl.n	801801a <_printf_i+0x112>
 8018008:	6923      	ldr	r3, [r4, #16]
 801800a:	6862      	ldr	r2, [r4, #4]
 801800c:	429a      	cmp	r2, r3
 801800e:	bfde      	ittt	le
 8018010:	2330      	movle	r3, #48	; 0x30
 8018012:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018016:	f105 35ff 	addle.w	r5, r5, #4294967295
 801801a:	ebac 0305 	sub.w	r3, ip, r5
 801801e:	6123      	str	r3, [r4, #16]
 8018020:	f8cd 8000 	str.w	r8, [sp]
 8018024:	463b      	mov	r3, r7
 8018026:	aa03      	add	r2, sp, #12
 8018028:	4621      	mov	r1, r4
 801802a:	4630      	mov	r0, r6
 801802c:	f7ff fef6 	bl	8017e1c <_printf_common>
 8018030:	3001      	adds	r0, #1
 8018032:	d14d      	bne.n	80180d0 <_printf_i+0x1c8>
 8018034:	f04f 30ff 	mov.w	r0, #4294967295
 8018038:	b005      	add	sp, #20
 801803a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801803e:	4839      	ldr	r0, [pc, #228]	; (8018124 <_printf_i+0x21c>)
 8018040:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018044:	6813      	ldr	r3, [r2, #0]
 8018046:	6821      	ldr	r1, [r4, #0]
 8018048:	1d1d      	adds	r5, r3, #4
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	6015      	str	r5, [r2, #0]
 801804e:	060a      	lsls	r2, r1, #24
 8018050:	d50b      	bpl.n	801806a <_printf_i+0x162>
 8018052:	07ca      	lsls	r2, r1, #31
 8018054:	bf44      	itt	mi
 8018056:	f041 0120 	orrmi.w	r1, r1, #32
 801805a:	6021      	strmi	r1, [r4, #0]
 801805c:	b91b      	cbnz	r3, 8018066 <_printf_i+0x15e>
 801805e:	6822      	ldr	r2, [r4, #0]
 8018060:	f022 0220 	bic.w	r2, r2, #32
 8018064:	6022      	str	r2, [r4, #0]
 8018066:	2210      	movs	r2, #16
 8018068:	e7b7      	b.n	8017fda <_printf_i+0xd2>
 801806a:	064d      	lsls	r5, r1, #25
 801806c:	bf48      	it	mi
 801806e:	b29b      	uxthmi	r3, r3
 8018070:	e7ef      	b.n	8018052 <_printf_i+0x14a>
 8018072:	4665      	mov	r5, ip
 8018074:	fbb3 f1f2 	udiv	r1, r3, r2
 8018078:	fb02 3311 	mls	r3, r2, r1, r3
 801807c:	5cc3      	ldrb	r3, [r0, r3]
 801807e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018082:	460b      	mov	r3, r1
 8018084:	2900      	cmp	r1, #0
 8018086:	d1f5      	bne.n	8018074 <_printf_i+0x16c>
 8018088:	e7b9      	b.n	8017ffe <_printf_i+0xf6>
 801808a:	6813      	ldr	r3, [r2, #0]
 801808c:	6825      	ldr	r5, [r4, #0]
 801808e:	6961      	ldr	r1, [r4, #20]
 8018090:	1d18      	adds	r0, r3, #4
 8018092:	6010      	str	r0, [r2, #0]
 8018094:	0628      	lsls	r0, r5, #24
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	d501      	bpl.n	801809e <_printf_i+0x196>
 801809a:	6019      	str	r1, [r3, #0]
 801809c:	e002      	b.n	80180a4 <_printf_i+0x19c>
 801809e:	066a      	lsls	r2, r5, #25
 80180a0:	d5fb      	bpl.n	801809a <_printf_i+0x192>
 80180a2:	8019      	strh	r1, [r3, #0]
 80180a4:	2300      	movs	r3, #0
 80180a6:	6123      	str	r3, [r4, #16]
 80180a8:	4665      	mov	r5, ip
 80180aa:	e7b9      	b.n	8018020 <_printf_i+0x118>
 80180ac:	6813      	ldr	r3, [r2, #0]
 80180ae:	1d19      	adds	r1, r3, #4
 80180b0:	6011      	str	r1, [r2, #0]
 80180b2:	681d      	ldr	r5, [r3, #0]
 80180b4:	6862      	ldr	r2, [r4, #4]
 80180b6:	2100      	movs	r1, #0
 80180b8:	4628      	mov	r0, r5
 80180ba:	f7e8 f911 	bl	80002e0 <memchr>
 80180be:	b108      	cbz	r0, 80180c4 <_printf_i+0x1bc>
 80180c0:	1b40      	subs	r0, r0, r5
 80180c2:	6060      	str	r0, [r4, #4]
 80180c4:	6863      	ldr	r3, [r4, #4]
 80180c6:	6123      	str	r3, [r4, #16]
 80180c8:	2300      	movs	r3, #0
 80180ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180ce:	e7a7      	b.n	8018020 <_printf_i+0x118>
 80180d0:	6923      	ldr	r3, [r4, #16]
 80180d2:	462a      	mov	r2, r5
 80180d4:	4639      	mov	r1, r7
 80180d6:	4630      	mov	r0, r6
 80180d8:	47c0      	blx	r8
 80180da:	3001      	adds	r0, #1
 80180dc:	d0aa      	beq.n	8018034 <_printf_i+0x12c>
 80180de:	6823      	ldr	r3, [r4, #0]
 80180e0:	079b      	lsls	r3, r3, #30
 80180e2:	d413      	bmi.n	801810c <_printf_i+0x204>
 80180e4:	68e0      	ldr	r0, [r4, #12]
 80180e6:	9b03      	ldr	r3, [sp, #12]
 80180e8:	4298      	cmp	r0, r3
 80180ea:	bfb8      	it	lt
 80180ec:	4618      	movlt	r0, r3
 80180ee:	e7a3      	b.n	8018038 <_printf_i+0x130>
 80180f0:	2301      	movs	r3, #1
 80180f2:	464a      	mov	r2, r9
 80180f4:	4639      	mov	r1, r7
 80180f6:	4630      	mov	r0, r6
 80180f8:	47c0      	blx	r8
 80180fa:	3001      	adds	r0, #1
 80180fc:	d09a      	beq.n	8018034 <_printf_i+0x12c>
 80180fe:	3501      	adds	r5, #1
 8018100:	68e3      	ldr	r3, [r4, #12]
 8018102:	9a03      	ldr	r2, [sp, #12]
 8018104:	1a9b      	subs	r3, r3, r2
 8018106:	42ab      	cmp	r3, r5
 8018108:	dcf2      	bgt.n	80180f0 <_printf_i+0x1e8>
 801810a:	e7eb      	b.n	80180e4 <_printf_i+0x1dc>
 801810c:	2500      	movs	r5, #0
 801810e:	f104 0919 	add.w	r9, r4, #25
 8018112:	e7f5      	b.n	8018100 <_printf_i+0x1f8>
 8018114:	2b00      	cmp	r3, #0
 8018116:	d1ac      	bne.n	8018072 <_printf_i+0x16a>
 8018118:	7803      	ldrb	r3, [r0, #0]
 801811a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801811e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018122:	e76c      	b.n	8017ffe <_printf_i+0xf6>
 8018124:	0801a9c9 	.word	0x0801a9c9
 8018128:	0801a9da 	.word	0x0801a9da

0801812c <_sbrk_r>:
 801812c:	b538      	push	{r3, r4, r5, lr}
 801812e:	4c06      	ldr	r4, [pc, #24]	; (8018148 <_sbrk_r+0x1c>)
 8018130:	2300      	movs	r3, #0
 8018132:	4605      	mov	r5, r0
 8018134:	4608      	mov	r0, r1
 8018136:	6023      	str	r3, [r4, #0]
 8018138:	f7e8 fec2 	bl	8000ec0 <_sbrk>
 801813c:	1c43      	adds	r3, r0, #1
 801813e:	d102      	bne.n	8018146 <_sbrk_r+0x1a>
 8018140:	6823      	ldr	r3, [r4, #0]
 8018142:	b103      	cbz	r3, 8018146 <_sbrk_r+0x1a>
 8018144:	602b      	str	r3, [r5, #0]
 8018146:	bd38      	pop	{r3, r4, r5, pc}
 8018148:	2400da3c 	.word	0x2400da3c

0801814c <__sread>:
 801814c:	b510      	push	{r4, lr}
 801814e:	460c      	mov	r4, r1
 8018150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018154:	f000 fa96 	bl	8018684 <_read_r>
 8018158:	2800      	cmp	r0, #0
 801815a:	bfab      	itete	ge
 801815c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801815e:	89a3      	ldrhlt	r3, [r4, #12]
 8018160:	181b      	addge	r3, r3, r0
 8018162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018166:	bfac      	ite	ge
 8018168:	6563      	strge	r3, [r4, #84]	; 0x54
 801816a:	81a3      	strhlt	r3, [r4, #12]
 801816c:	bd10      	pop	{r4, pc}

0801816e <__swrite>:
 801816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018172:	461f      	mov	r7, r3
 8018174:	898b      	ldrh	r3, [r1, #12]
 8018176:	05db      	lsls	r3, r3, #23
 8018178:	4605      	mov	r5, r0
 801817a:	460c      	mov	r4, r1
 801817c:	4616      	mov	r6, r2
 801817e:	d505      	bpl.n	801818c <__swrite+0x1e>
 8018180:	2302      	movs	r3, #2
 8018182:	2200      	movs	r2, #0
 8018184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018188:	f000 f9b6 	bl	80184f8 <_lseek_r>
 801818c:	89a3      	ldrh	r3, [r4, #12]
 801818e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018196:	81a3      	strh	r3, [r4, #12]
 8018198:	4632      	mov	r2, r6
 801819a:	463b      	mov	r3, r7
 801819c:	4628      	mov	r0, r5
 801819e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181a2:	f000 b869 	b.w	8018278 <_write_r>

080181a6 <__sseek>:
 80181a6:	b510      	push	{r4, lr}
 80181a8:	460c      	mov	r4, r1
 80181aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181ae:	f000 f9a3 	bl	80184f8 <_lseek_r>
 80181b2:	1c43      	adds	r3, r0, #1
 80181b4:	89a3      	ldrh	r3, [r4, #12]
 80181b6:	bf15      	itete	ne
 80181b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80181ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181c2:	81a3      	strheq	r3, [r4, #12]
 80181c4:	bf18      	it	ne
 80181c6:	81a3      	strhne	r3, [r4, #12]
 80181c8:	bd10      	pop	{r4, pc}

080181ca <__sclose>:
 80181ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181ce:	f000 b8d3 	b.w	8018378 <_close_r>
	...

080181d4 <__swbuf_r>:
 80181d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181d6:	460e      	mov	r6, r1
 80181d8:	4614      	mov	r4, r2
 80181da:	4605      	mov	r5, r0
 80181dc:	b118      	cbz	r0, 80181e6 <__swbuf_r+0x12>
 80181de:	6983      	ldr	r3, [r0, #24]
 80181e0:	b90b      	cbnz	r3, 80181e6 <__swbuf_r+0x12>
 80181e2:	f7ff fbf7 	bl	80179d4 <__sinit>
 80181e6:	4b21      	ldr	r3, [pc, #132]	; (801826c <__swbuf_r+0x98>)
 80181e8:	429c      	cmp	r4, r3
 80181ea:	d12a      	bne.n	8018242 <__swbuf_r+0x6e>
 80181ec:	686c      	ldr	r4, [r5, #4]
 80181ee:	69a3      	ldr	r3, [r4, #24]
 80181f0:	60a3      	str	r3, [r4, #8]
 80181f2:	89a3      	ldrh	r3, [r4, #12]
 80181f4:	071a      	lsls	r2, r3, #28
 80181f6:	d52e      	bpl.n	8018256 <__swbuf_r+0x82>
 80181f8:	6923      	ldr	r3, [r4, #16]
 80181fa:	b363      	cbz	r3, 8018256 <__swbuf_r+0x82>
 80181fc:	6923      	ldr	r3, [r4, #16]
 80181fe:	6820      	ldr	r0, [r4, #0]
 8018200:	1ac0      	subs	r0, r0, r3
 8018202:	6963      	ldr	r3, [r4, #20]
 8018204:	b2f6      	uxtb	r6, r6
 8018206:	4283      	cmp	r3, r0
 8018208:	4637      	mov	r7, r6
 801820a:	dc04      	bgt.n	8018216 <__swbuf_r+0x42>
 801820c:	4621      	mov	r1, r4
 801820e:	4628      	mov	r0, r5
 8018210:	f000 f948 	bl	80184a4 <_fflush_r>
 8018214:	bb28      	cbnz	r0, 8018262 <__swbuf_r+0x8e>
 8018216:	68a3      	ldr	r3, [r4, #8]
 8018218:	3b01      	subs	r3, #1
 801821a:	60a3      	str	r3, [r4, #8]
 801821c:	6823      	ldr	r3, [r4, #0]
 801821e:	1c5a      	adds	r2, r3, #1
 8018220:	6022      	str	r2, [r4, #0]
 8018222:	701e      	strb	r6, [r3, #0]
 8018224:	6963      	ldr	r3, [r4, #20]
 8018226:	3001      	adds	r0, #1
 8018228:	4283      	cmp	r3, r0
 801822a:	d004      	beq.n	8018236 <__swbuf_r+0x62>
 801822c:	89a3      	ldrh	r3, [r4, #12]
 801822e:	07db      	lsls	r3, r3, #31
 8018230:	d519      	bpl.n	8018266 <__swbuf_r+0x92>
 8018232:	2e0a      	cmp	r6, #10
 8018234:	d117      	bne.n	8018266 <__swbuf_r+0x92>
 8018236:	4621      	mov	r1, r4
 8018238:	4628      	mov	r0, r5
 801823a:	f000 f933 	bl	80184a4 <_fflush_r>
 801823e:	b190      	cbz	r0, 8018266 <__swbuf_r+0x92>
 8018240:	e00f      	b.n	8018262 <__swbuf_r+0x8e>
 8018242:	4b0b      	ldr	r3, [pc, #44]	; (8018270 <__swbuf_r+0x9c>)
 8018244:	429c      	cmp	r4, r3
 8018246:	d101      	bne.n	801824c <__swbuf_r+0x78>
 8018248:	68ac      	ldr	r4, [r5, #8]
 801824a:	e7d0      	b.n	80181ee <__swbuf_r+0x1a>
 801824c:	4b09      	ldr	r3, [pc, #36]	; (8018274 <__swbuf_r+0xa0>)
 801824e:	429c      	cmp	r4, r3
 8018250:	bf08      	it	eq
 8018252:	68ec      	ldreq	r4, [r5, #12]
 8018254:	e7cb      	b.n	80181ee <__swbuf_r+0x1a>
 8018256:	4621      	mov	r1, r4
 8018258:	4628      	mov	r0, r5
 801825a:	f000 f81f 	bl	801829c <__swsetup_r>
 801825e:	2800      	cmp	r0, #0
 8018260:	d0cc      	beq.n	80181fc <__swbuf_r+0x28>
 8018262:	f04f 37ff 	mov.w	r7, #4294967295
 8018266:	4638      	mov	r0, r7
 8018268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801826a:	bf00      	nop
 801826c:	0801a978 	.word	0x0801a978
 8018270:	0801a998 	.word	0x0801a998
 8018274:	0801a958 	.word	0x0801a958

08018278 <_write_r>:
 8018278:	b538      	push	{r3, r4, r5, lr}
 801827a:	4c07      	ldr	r4, [pc, #28]	; (8018298 <_write_r+0x20>)
 801827c:	4605      	mov	r5, r0
 801827e:	4608      	mov	r0, r1
 8018280:	4611      	mov	r1, r2
 8018282:	2200      	movs	r2, #0
 8018284:	6022      	str	r2, [r4, #0]
 8018286:	461a      	mov	r2, r3
 8018288:	f7e8 fdc9 	bl	8000e1e <_write>
 801828c:	1c43      	adds	r3, r0, #1
 801828e:	d102      	bne.n	8018296 <_write_r+0x1e>
 8018290:	6823      	ldr	r3, [r4, #0]
 8018292:	b103      	cbz	r3, 8018296 <_write_r+0x1e>
 8018294:	602b      	str	r3, [r5, #0]
 8018296:	bd38      	pop	{r3, r4, r5, pc}
 8018298:	2400da3c 	.word	0x2400da3c

0801829c <__swsetup_r>:
 801829c:	4b32      	ldr	r3, [pc, #200]	; (8018368 <__swsetup_r+0xcc>)
 801829e:	b570      	push	{r4, r5, r6, lr}
 80182a0:	681d      	ldr	r5, [r3, #0]
 80182a2:	4606      	mov	r6, r0
 80182a4:	460c      	mov	r4, r1
 80182a6:	b125      	cbz	r5, 80182b2 <__swsetup_r+0x16>
 80182a8:	69ab      	ldr	r3, [r5, #24]
 80182aa:	b913      	cbnz	r3, 80182b2 <__swsetup_r+0x16>
 80182ac:	4628      	mov	r0, r5
 80182ae:	f7ff fb91 	bl	80179d4 <__sinit>
 80182b2:	4b2e      	ldr	r3, [pc, #184]	; (801836c <__swsetup_r+0xd0>)
 80182b4:	429c      	cmp	r4, r3
 80182b6:	d10f      	bne.n	80182d8 <__swsetup_r+0x3c>
 80182b8:	686c      	ldr	r4, [r5, #4]
 80182ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182be:	b29a      	uxth	r2, r3
 80182c0:	0715      	lsls	r5, r2, #28
 80182c2:	d42c      	bmi.n	801831e <__swsetup_r+0x82>
 80182c4:	06d0      	lsls	r0, r2, #27
 80182c6:	d411      	bmi.n	80182ec <__swsetup_r+0x50>
 80182c8:	2209      	movs	r2, #9
 80182ca:	6032      	str	r2, [r6, #0]
 80182cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182d0:	81a3      	strh	r3, [r4, #12]
 80182d2:	f04f 30ff 	mov.w	r0, #4294967295
 80182d6:	e03e      	b.n	8018356 <__swsetup_r+0xba>
 80182d8:	4b25      	ldr	r3, [pc, #148]	; (8018370 <__swsetup_r+0xd4>)
 80182da:	429c      	cmp	r4, r3
 80182dc:	d101      	bne.n	80182e2 <__swsetup_r+0x46>
 80182de:	68ac      	ldr	r4, [r5, #8]
 80182e0:	e7eb      	b.n	80182ba <__swsetup_r+0x1e>
 80182e2:	4b24      	ldr	r3, [pc, #144]	; (8018374 <__swsetup_r+0xd8>)
 80182e4:	429c      	cmp	r4, r3
 80182e6:	bf08      	it	eq
 80182e8:	68ec      	ldreq	r4, [r5, #12]
 80182ea:	e7e6      	b.n	80182ba <__swsetup_r+0x1e>
 80182ec:	0751      	lsls	r1, r2, #29
 80182ee:	d512      	bpl.n	8018316 <__swsetup_r+0x7a>
 80182f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182f2:	b141      	cbz	r1, 8018306 <__swsetup_r+0x6a>
 80182f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182f8:	4299      	cmp	r1, r3
 80182fa:	d002      	beq.n	8018302 <__swsetup_r+0x66>
 80182fc:	4630      	mov	r0, r6
 80182fe:	f000 f973 	bl	80185e8 <_free_r>
 8018302:	2300      	movs	r3, #0
 8018304:	6363      	str	r3, [r4, #52]	; 0x34
 8018306:	89a3      	ldrh	r3, [r4, #12]
 8018308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801830c:	81a3      	strh	r3, [r4, #12]
 801830e:	2300      	movs	r3, #0
 8018310:	6063      	str	r3, [r4, #4]
 8018312:	6923      	ldr	r3, [r4, #16]
 8018314:	6023      	str	r3, [r4, #0]
 8018316:	89a3      	ldrh	r3, [r4, #12]
 8018318:	f043 0308 	orr.w	r3, r3, #8
 801831c:	81a3      	strh	r3, [r4, #12]
 801831e:	6923      	ldr	r3, [r4, #16]
 8018320:	b94b      	cbnz	r3, 8018336 <__swsetup_r+0x9a>
 8018322:	89a3      	ldrh	r3, [r4, #12]
 8018324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801832c:	d003      	beq.n	8018336 <__swsetup_r+0x9a>
 801832e:	4621      	mov	r1, r4
 8018330:	4630      	mov	r0, r6
 8018332:	f000 f917 	bl	8018564 <__smakebuf_r>
 8018336:	89a2      	ldrh	r2, [r4, #12]
 8018338:	f012 0301 	ands.w	r3, r2, #1
 801833c:	d00c      	beq.n	8018358 <__swsetup_r+0xbc>
 801833e:	2300      	movs	r3, #0
 8018340:	60a3      	str	r3, [r4, #8]
 8018342:	6963      	ldr	r3, [r4, #20]
 8018344:	425b      	negs	r3, r3
 8018346:	61a3      	str	r3, [r4, #24]
 8018348:	6923      	ldr	r3, [r4, #16]
 801834a:	b953      	cbnz	r3, 8018362 <__swsetup_r+0xc6>
 801834c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018350:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018354:	d1ba      	bne.n	80182cc <__swsetup_r+0x30>
 8018356:	bd70      	pop	{r4, r5, r6, pc}
 8018358:	0792      	lsls	r2, r2, #30
 801835a:	bf58      	it	pl
 801835c:	6963      	ldrpl	r3, [r4, #20]
 801835e:	60a3      	str	r3, [r4, #8]
 8018360:	e7f2      	b.n	8018348 <__swsetup_r+0xac>
 8018362:	2000      	movs	r0, #0
 8018364:	e7f7      	b.n	8018356 <__swsetup_r+0xba>
 8018366:	bf00      	nop
 8018368:	2400002c 	.word	0x2400002c
 801836c:	0801a978 	.word	0x0801a978
 8018370:	0801a998 	.word	0x0801a998
 8018374:	0801a958 	.word	0x0801a958

08018378 <_close_r>:
 8018378:	b538      	push	{r3, r4, r5, lr}
 801837a:	4c06      	ldr	r4, [pc, #24]	; (8018394 <_close_r+0x1c>)
 801837c:	2300      	movs	r3, #0
 801837e:	4605      	mov	r5, r0
 8018380:	4608      	mov	r0, r1
 8018382:	6023      	str	r3, [r4, #0]
 8018384:	f7e8 fd67 	bl	8000e56 <_close>
 8018388:	1c43      	adds	r3, r0, #1
 801838a:	d102      	bne.n	8018392 <_close_r+0x1a>
 801838c:	6823      	ldr	r3, [r4, #0]
 801838e:	b103      	cbz	r3, 8018392 <_close_r+0x1a>
 8018390:	602b      	str	r3, [r5, #0]
 8018392:	bd38      	pop	{r3, r4, r5, pc}
 8018394:	2400da3c 	.word	0x2400da3c

08018398 <__sflush_r>:
 8018398:	898a      	ldrh	r2, [r1, #12]
 801839a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801839e:	4605      	mov	r5, r0
 80183a0:	0710      	lsls	r0, r2, #28
 80183a2:	460c      	mov	r4, r1
 80183a4:	d458      	bmi.n	8018458 <__sflush_r+0xc0>
 80183a6:	684b      	ldr	r3, [r1, #4]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	dc05      	bgt.n	80183b8 <__sflush_r+0x20>
 80183ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	dc02      	bgt.n	80183b8 <__sflush_r+0x20>
 80183b2:	2000      	movs	r0, #0
 80183b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183ba:	2e00      	cmp	r6, #0
 80183bc:	d0f9      	beq.n	80183b2 <__sflush_r+0x1a>
 80183be:	2300      	movs	r3, #0
 80183c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80183c4:	682f      	ldr	r7, [r5, #0]
 80183c6:	6a21      	ldr	r1, [r4, #32]
 80183c8:	602b      	str	r3, [r5, #0]
 80183ca:	d032      	beq.n	8018432 <__sflush_r+0x9a>
 80183cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80183ce:	89a3      	ldrh	r3, [r4, #12]
 80183d0:	075a      	lsls	r2, r3, #29
 80183d2:	d505      	bpl.n	80183e0 <__sflush_r+0x48>
 80183d4:	6863      	ldr	r3, [r4, #4]
 80183d6:	1ac0      	subs	r0, r0, r3
 80183d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183da:	b10b      	cbz	r3, 80183e0 <__sflush_r+0x48>
 80183dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80183de:	1ac0      	subs	r0, r0, r3
 80183e0:	2300      	movs	r3, #0
 80183e2:	4602      	mov	r2, r0
 80183e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80183e6:	6a21      	ldr	r1, [r4, #32]
 80183e8:	4628      	mov	r0, r5
 80183ea:	47b0      	blx	r6
 80183ec:	1c43      	adds	r3, r0, #1
 80183ee:	89a3      	ldrh	r3, [r4, #12]
 80183f0:	d106      	bne.n	8018400 <__sflush_r+0x68>
 80183f2:	6829      	ldr	r1, [r5, #0]
 80183f4:	291d      	cmp	r1, #29
 80183f6:	d848      	bhi.n	801848a <__sflush_r+0xf2>
 80183f8:	4a29      	ldr	r2, [pc, #164]	; (80184a0 <__sflush_r+0x108>)
 80183fa:	40ca      	lsrs	r2, r1
 80183fc:	07d6      	lsls	r6, r2, #31
 80183fe:	d544      	bpl.n	801848a <__sflush_r+0xf2>
 8018400:	2200      	movs	r2, #0
 8018402:	6062      	str	r2, [r4, #4]
 8018404:	04d9      	lsls	r1, r3, #19
 8018406:	6922      	ldr	r2, [r4, #16]
 8018408:	6022      	str	r2, [r4, #0]
 801840a:	d504      	bpl.n	8018416 <__sflush_r+0x7e>
 801840c:	1c42      	adds	r2, r0, #1
 801840e:	d101      	bne.n	8018414 <__sflush_r+0x7c>
 8018410:	682b      	ldr	r3, [r5, #0]
 8018412:	b903      	cbnz	r3, 8018416 <__sflush_r+0x7e>
 8018414:	6560      	str	r0, [r4, #84]	; 0x54
 8018416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018418:	602f      	str	r7, [r5, #0]
 801841a:	2900      	cmp	r1, #0
 801841c:	d0c9      	beq.n	80183b2 <__sflush_r+0x1a>
 801841e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018422:	4299      	cmp	r1, r3
 8018424:	d002      	beq.n	801842c <__sflush_r+0x94>
 8018426:	4628      	mov	r0, r5
 8018428:	f000 f8de 	bl	80185e8 <_free_r>
 801842c:	2000      	movs	r0, #0
 801842e:	6360      	str	r0, [r4, #52]	; 0x34
 8018430:	e7c0      	b.n	80183b4 <__sflush_r+0x1c>
 8018432:	2301      	movs	r3, #1
 8018434:	4628      	mov	r0, r5
 8018436:	47b0      	blx	r6
 8018438:	1c41      	adds	r1, r0, #1
 801843a:	d1c8      	bne.n	80183ce <__sflush_r+0x36>
 801843c:	682b      	ldr	r3, [r5, #0]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d0c5      	beq.n	80183ce <__sflush_r+0x36>
 8018442:	2b1d      	cmp	r3, #29
 8018444:	d001      	beq.n	801844a <__sflush_r+0xb2>
 8018446:	2b16      	cmp	r3, #22
 8018448:	d101      	bne.n	801844e <__sflush_r+0xb6>
 801844a:	602f      	str	r7, [r5, #0]
 801844c:	e7b1      	b.n	80183b2 <__sflush_r+0x1a>
 801844e:	89a3      	ldrh	r3, [r4, #12]
 8018450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018454:	81a3      	strh	r3, [r4, #12]
 8018456:	e7ad      	b.n	80183b4 <__sflush_r+0x1c>
 8018458:	690f      	ldr	r7, [r1, #16]
 801845a:	2f00      	cmp	r7, #0
 801845c:	d0a9      	beq.n	80183b2 <__sflush_r+0x1a>
 801845e:	0793      	lsls	r3, r2, #30
 8018460:	680e      	ldr	r6, [r1, #0]
 8018462:	bf08      	it	eq
 8018464:	694b      	ldreq	r3, [r1, #20]
 8018466:	600f      	str	r7, [r1, #0]
 8018468:	bf18      	it	ne
 801846a:	2300      	movne	r3, #0
 801846c:	eba6 0807 	sub.w	r8, r6, r7
 8018470:	608b      	str	r3, [r1, #8]
 8018472:	f1b8 0f00 	cmp.w	r8, #0
 8018476:	dd9c      	ble.n	80183b2 <__sflush_r+0x1a>
 8018478:	4643      	mov	r3, r8
 801847a:	463a      	mov	r2, r7
 801847c:	6a21      	ldr	r1, [r4, #32]
 801847e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018480:	4628      	mov	r0, r5
 8018482:	47b0      	blx	r6
 8018484:	2800      	cmp	r0, #0
 8018486:	dc06      	bgt.n	8018496 <__sflush_r+0xfe>
 8018488:	89a3      	ldrh	r3, [r4, #12]
 801848a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801848e:	81a3      	strh	r3, [r4, #12]
 8018490:	f04f 30ff 	mov.w	r0, #4294967295
 8018494:	e78e      	b.n	80183b4 <__sflush_r+0x1c>
 8018496:	4407      	add	r7, r0
 8018498:	eba8 0800 	sub.w	r8, r8, r0
 801849c:	e7e9      	b.n	8018472 <__sflush_r+0xda>
 801849e:	bf00      	nop
 80184a0:	20400001 	.word	0x20400001

080184a4 <_fflush_r>:
 80184a4:	b538      	push	{r3, r4, r5, lr}
 80184a6:	690b      	ldr	r3, [r1, #16]
 80184a8:	4605      	mov	r5, r0
 80184aa:	460c      	mov	r4, r1
 80184ac:	b1db      	cbz	r3, 80184e6 <_fflush_r+0x42>
 80184ae:	b118      	cbz	r0, 80184b8 <_fflush_r+0x14>
 80184b0:	6983      	ldr	r3, [r0, #24]
 80184b2:	b90b      	cbnz	r3, 80184b8 <_fflush_r+0x14>
 80184b4:	f7ff fa8e 	bl	80179d4 <__sinit>
 80184b8:	4b0c      	ldr	r3, [pc, #48]	; (80184ec <_fflush_r+0x48>)
 80184ba:	429c      	cmp	r4, r3
 80184bc:	d109      	bne.n	80184d2 <_fflush_r+0x2e>
 80184be:	686c      	ldr	r4, [r5, #4]
 80184c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184c4:	b17b      	cbz	r3, 80184e6 <_fflush_r+0x42>
 80184c6:	4621      	mov	r1, r4
 80184c8:	4628      	mov	r0, r5
 80184ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184ce:	f7ff bf63 	b.w	8018398 <__sflush_r>
 80184d2:	4b07      	ldr	r3, [pc, #28]	; (80184f0 <_fflush_r+0x4c>)
 80184d4:	429c      	cmp	r4, r3
 80184d6:	d101      	bne.n	80184dc <_fflush_r+0x38>
 80184d8:	68ac      	ldr	r4, [r5, #8]
 80184da:	e7f1      	b.n	80184c0 <_fflush_r+0x1c>
 80184dc:	4b05      	ldr	r3, [pc, #20]	; (80184f4 <_fflush_r+0x50>)
 80184de:	429c      	cmp	r4, r3
 80184e0:	bf08      	it	eq
 80184e2:	68ec      	ldreq	r4, [r5, #12]
 80184e4:	e7ec      	b.n	80184c0 <_fflush_r+0x1c>
 80184e6:	2000      	movs	r0, #0
 80184e8:	bd38      	pop	{r3, r4, r5, pc}
 80184ea:	bf00      	nop
 80184ec:	0801a978 	.word	0x0801a978
 80184f0:	0801a998 	.word	0x0801a998
 80184f4:	0801a958 	.word	0x0801a958

080184f8 <_lseek_r>:
 80184f8:	b538      	push	{r3, r4, r5, lr}
 80184fa:	4c07      	ldr	r4, [pc, #28]	; (8018518 <_lseek_r+0x20>)
 80184fc:	4605      	mov	r5, r0
 80184fe:	4608      	mov	r0, r1
 8018500:	4611      	mov	r1, r2
 8018502:	2200      	movs	r2, #0
 8018504:	6022      	str	r2, [r4, #0]
 8018506:	461a      	mov	r2, r3
 8018508:	f7e8 fccc 	bl	8000ea4 <_lseek>
 801850c:	1c43      	adds	r3, r0, #1
 801850e:	d102      	bne.n	8018516 <_lseek_r+0x1e>
 8018510:	6823      	ldr	r3, [r4, #0]
 8018512:	b103      	cbz	r3, 8018516 <_lseek_r+0x1e>
 8018514:	602b      	str	r3, [r5, #0]
 8018516:	bd38      	pop	{r3, r4, r5, pc}
 8018518:	2400da3c 	.word	0x2400da3c

0801851c <__swhatbuf_r>:
 801851c:	b570      	push	{r4, r5, r6, lr}
 801851e:	460e      	mov	r6, r1
 8018520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018524:	2900      	cmp	r1, #0
 8018526:	b096      	sub	sp, #88	; 0x58
 8018528:	4614      	mov	r4, r2
 801852a:	461d      	mov	r5, r3
 801852c:	da07      	bge.n	801853e <__swhatbuf_r+0x22>
 801852e:	2300      	movs	r3, #0
 8018530:	602b      	str	r3, [r5, #0]
 8018532:	89b3      	ldrh	r3, [r6, #12]
 8018534:	061a      	lsls	r2, r3, #24
 8018536:	d410      	bmi.n	801855a <__swhatbuf_r+0x3e>
 8018538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801853c:	e00e      	b.n	801855c <__swhatbuf_r+0x40>
 801853e:	466a      	mov	r2, sp
 8018540:	f000 f8b2 	bl	80186a8 <_fstat_r>
 8018544:	2800      	cmp	r0, #0
 8018546:	dbf2      	blt.n	801852e <__swhatbuf_r+0x12>
 8018548:	9a01      	ldr	r2, [sp, #4]
 801854a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801854e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018552:	425a      	negs	r2, r3
 8018554:	415a      	adcs	r2, r3
 8018556:	602a      	str	r2, [r5, #0]
 8018558:	e7ee      	b.n	8018538 <__swhatbuf_r+0x1c>
 801855a:	2340      	movs	r3, #64	; 0x40
 801855c:	2000      	movs	r0, #0
 801855e:	6023      	str	r3, [r4, #0]
 8018560:	b016      	add	sp, #88	; 0x58
 8018562:	bd70      	pop	{r4, r5, r6, pc}

08018564 <__smakebuf_r>:
 8018564:	898b      	ldrh	r3, [r1, #12]
 8018566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018568:	079d      	lsls	r5, r3, #30
 801856a:	4606      	mov	r6, r0
 801856c:	460c      	mov	r4, r1
 801856e:	d507      	bpl.n	8018580 <__smakebuf_r+0x1c>
 8018570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018574:	6023      	str	r3, [r4, #0]
 8018576:	6123      	str	r3, [r4, #16]
 8018578:	2301      	movs	r3, #1
 801857a:	6163      	str	r3, [r4, #20]
 801857c:	b002      	add	sp, #8
 801857e:	bd70      	pop	{r4, r5, r6, pc}
 8018580:	ab01      	add	r3, sp, #4
 8018582:	466a      	mov	r2, sp
 8018584:	f7ff ffca 	bl	801851c <__swhatbuf_r>
 8018588:	9900      	ldr	r1, [sp, #0]
 801858a:	4605      	mov	r5, r0
 801858c:	4630      	mov	r0, r6
 801858e:	f7ff faab 	bl	8017ae8 <_malloc_r>
 8018592:	b948      	cbnz	r0, 80185a8 <__smakebuf_r+0x44>
 8018594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018598:	059a      	lsls	r2, r3, #22
 801859a:	d4ef      	bmi.n	801857c <__smakebuf_r+0x18>
 801859c:	f023 0303 	bic.w	r3, r3, #3
 80185a0:	f043 0302 	orr.w	r3, r3, #2
 80185a4:	81a3      	strh	r3, [r4, #12]
 80185a6:	e7e3      	b.n	8018570 <__smakebuf_r+0xc>
 80185a8:	4b0d      	ldr	r3, [pc, #52]	; (80185e0 <__smakebuf_r+0x7c>)
 80185aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80185ac:	89a3      	ldrh	r3, [r4, #12]
 80185ae:	6020      	str	r0, [r4, #0]
 80185b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185b4:	81a3      	strh	r3, [r4, #12]
 80185b6:	9b00      	ldr	r3, [sp, #0]
 80185b8:	6163      	str	r3, [r4, #20]
 80185ba:	9b01      	ldr	r3, [sp, #4]
 80185bc:	6120      	str	r0, [r4, #16]
 80185be:	b15b      	cbz	r3, 80185d8 <__smakebuf_r+0x74>
 80185c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185c4:	4630      	mov	r0, r6
 80185c6:	f000 f881 	bl	80186cc <_isatty_r>
 80185ca:	b128      	cbz	r0, 80185d8 <__smakebuf_r+0x74>
 80185cc:	89a3      	ldrh	r3, [r4, #12]
 80185ce:	f023 0303 	bic.w	r3, r3, #3
 80185d2:	f043 0301 	orr.w	r3, r3, #1
 80185d6:	81a3      	strh	r3, [r4, #12]
 80185d8:	89a3      	ldrh	r3, [r4, #12]
 80185da:	431d      	orrs	r5, r3
 80185dc:	81a5      	strh	r5, [r4, #12]
 80185de:	e7cd      	b.n	801857c <__smakebuf_r+0x18>
 80185e0:	0801799d 	.word	0x0801799d

080185e4 <__malloc_lock>:
 80185e4:	4770      	bx	lr

080185e6 <__malloc_unlock>:
 80185e6:	4770      	bx	lr

080185e8 <_free_r>:
 80185e8:	b538      	push	{r3, r4, r5, lr}
 80185ea:	4605      	mov	r5, r0
 80185ec:	2900      	cmp	r1, #0
 80185ee:	d045      	beq.n	801867c <_free_r+0x94>
 80185f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185f4:	1f0c      	subs	r4, r1, #4
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	bfb8      	it	lt
 80185fa:	18e4      	addlt	r4, r4, r3
 80185fc:	f7ff fff2 	bl	80185e4 <__malloc_lock>
 8018600:	4a1f      	ldr	r2, [pc, #124]	; (8018680 <_free_r+0x98>)
 8018602:	6813      	ldr	r3, [r2, #0]
 8018604:	4610      	mov	r0, r2
 8018606:	b933      	cbnz	r3, 8018616 <_free_r+0x2e>
 8018608:	6063      	str	r3, [r4, #4]
 801860a:	6014      	str	r4, [r2, #0]
 801860c:	4628      	mov	r0, r5
 801860e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018612:	f7ff bfe8 	b.w	80185e6 <__malloc_unlock>
 8018616:	42a3      	cmp	r3, r4
 8018618:	d90c      	bls.n	8018634 <_free_r+0x4c>
 801861a:	6821      	ldr	r1, [r4, #0]
 801861c:	1862      	adds	r2, r4, r1
 801861e:	4293      	cmp	r3, r2
 8018620:	bf04      	itt	eq
 8018622:	681a      	ldreq	r2, [r3, #0]
 8018624:	685b      	ldreq	r3, [r3, #4]
 8018626:	6063      	str	r3, [r4, #4]
 8018628:	bf04      	itt	eq
 801862a:	1852      	addeq	r2, r2, r1
 801862c:	6022      	streq	r2, [r4, #0]
 801862e:	6004      	str	r4, [r0, #0]
 8018630:	e7ec      	b.n	801860c <_free_r+0x24>
 8018632:	4613      	mov	r3, r2
 8018634:	685a      	ldr	r2, [r3, #4]
 8018636:	b10a      	cbz	r2, 801863c <_free_r+0x54>
 8018638:	42a2      	cmp	r2, r4
 801863a:	d9fa      	bls.n	8018632 <_free_r+0x4a>
 801863c:	6819      	ldr	r1, [r3, #0]
 801863e:	1858      	adds	r0, r3, r1
 8018640:	42a0      	cmp	r0, r4
 8018642:	d10b      	bne.n	801865c <_free_r+0x74>
 8018644:	6820      	ldr	r0, [r4, #0]
 8018646:	4401      	add	r1, r0
 8018648:	1858      	adds	r0, r3, r1
 801864a:	4282      	cmp	r2, r0
 801864c:	6019      	str	r1, [r3, #0]
 801864e:	d1dd      	bne.n	801860c <_free_r+0x24>
 8018650:	6810      	ldr	r0, [r2, #0]
 8018652:	6852      	ldr	r2, [r2, #4]
 8018654:	605a      	str	r2, [r3, #4]
 8018656:	4401      	add	r1, r0
 8018658:	6019      	str	r1, [r3, #0]
 801865a:	e7d7      	b.n	801860c <_free_r+0x24>
 801865c:	d902      	bls.n	8018664 <_free_r+0x7c>
 801865e:	230c      	movs	r3, #12
 8018660:	602b      	str	r3, [r5, #0]
 8018662:	e7d3      	b.n	801860c <_free_r+0x24>
 8018664:	6820      	ldr	r0, [r4, #0]
 8018666:	1821      	adds	r1, r4, r0
 8018668:	428a      	cmp	r2, r1
 801866a:	bf04      	itt	eq
 801866c:	6811      	ldreq	r1, [r2, #0]
 801866e:	6852      	ldreq	r2, [r2, #4]
 8018670:	6062      	str	r2, [r4, #4]
 8018672:	bf04      	itt	eq
 8018674:	1809      	addeq	r1, r1, r0
 8018676:	6021      	streq	r1, [r4, #0]
 8018678:	605c      	str	r4, [r3, #4]
 801867a:	e7c7      	b.n	801860c <_free_r+0x24>
 801867c:	bd38      	pop	{r3, r4, r5, pc}
 801867e:	bf00      	nop
 8018680:	2400a540 	.word	0x2400a540

08018684 <_read_r>:
 8018684:	b538      	push	{r3, r4, r5, lr}
 8018686:	4c07      	ldr	r4, [pc, #28]	; (80186a4 <_read_r+0x20>)
 8018688:	4605      	mov	r5, r0
 801868a:	4608      	mov	r0, r1
 801868c:	4611      	mov	r1, r2
 801868e:	2200      	movs	r2, #0
 8018690:	6022      	str	r2, [r4, #0]
 8018692:	461a      	mov	r2, r3
 8018694:	f7e8 fba6 	bl	8000de4 <_read>
 8018698:	1c43      	adds	r3, r0, #1
 801869a:	d102      	bne.n	80186a2 <_read_r+0x1e>
 801869c:	6823      	ldr	r3, [r4, #0]
 801869e:	b103      	cbz	r3, 80186a2 <_read_r+0x1e>
 80186a0:	602b      	str	r3, [r5, #0]
 80186a2:	bd38      	pop	{r3, r4, r5, pc}
 80186a4:	2400da3c 	.word	0x2400da3c

080186a8 <_fstat_r>:
 80186a8:	b538      	push	{r3, r4, r5, lr}
 80186aa:	4c07      	ldr	r4, [pc, #28]	; (80186c8 <_fstat_r+0x20>)
 80186ac:	2300      	movs	r3, #0
 80186ae:	4605      	mov	r5, r0
 80186b0:	4608      	mov	r0, r1
 80186b2:	4611      	mov	r1, r2
 80186b4:	6023      	str	r3, [r4, #0]
 80186b6:	f7e8 fbda 	bl	8000e6e <_fstat>
 80186ba:	1c43      	adds	r3, r0, #1
 80186bc:	d102      	bne.n	80186c4 <_fstat_r+0x1c>
 80186be:	6823      	ldr	r3, [r4, #0]
 80186c0:	b103      	cbz	r3, 80186c4 <_fstat_r+0x1c>
 80186c2:	602b      	str	r3, [r5, #0]
 80186c4:	bd38      	pop	{r3, r4, r5, pc}
 80186c6:	bf00      	nop
 80186c8:	2400da3c 	.word	0x2400da3c

080186cc <_isatty_r>:
 80186cc:	b538      	push	{r3, r4, r5, lr}
 80186ce:	4c06      	ldr	r4, [pc, #24]	; (80186e8 <_isatty_r+0x1c>)
 80186d0:	2300      	movs	r3, #0
 80186d2:	4605      	mov	r5, r0
 80186d4:	4608      	mov	r0, r1
 80186d6:	6023      	str	r3, [r4, #0]
 80186d8:	f7e8 fbd9 	bl	8000e8e <_isatty>
 80186dc:	1c43      	adds	r3, r0, #1
 80186de:	d102      	bne.n	80186e6 <_isatty_r+0x1a>
 80186e0:	6823      	ldr	r3, [r4, #0]
 80186e2:	b103      	cbz	r3, 80186e6 <_isatty_r+0x1a>
 80186e4:	602b      	str	r3, [r5, #0]
 80186e6:	bd38      	pop	{r3, r4, r5, pc}
 80186e8:	2400da3c 	.word	0x2400da3c

080186ec <_init>:
 80186ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ee:	bf00      	nop
 80186f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186f2:	bc08      	pop	{r3}
 80186f4:	469e      	mov	lr, r3
 80186f6:	4770      	bx	lr

080186f8 <_fini>:
 80186f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186fa:	bf00      	nop
 80186fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186fe:	bc08      	pop	{r3}
 8018700:	469e      	mov	lr, r3
 8018702:	4770      	bx	lr
