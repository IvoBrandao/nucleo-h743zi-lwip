
Nucleo_H743ZI_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003068  08018fc0  08018fc0  00028fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c028  0801c028  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  0801c028  0801c028  0002c028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c030  0801c030  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c030  0801c030  0002c030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c034  0801c034  0002c034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  0801c038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024e30  24000098  0801c0d0  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24024ec8  0801c0d0  00034ec8  2**0
                  ALLOC
 11 .lwip_sec     000419d0  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a8cf  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009783  00000000  00000000  0008a995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025e8  00000000  00000000  00094118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002448  00000000  00000000  00096700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000481a4  00000000  00000000  00098b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ff2b  00000000  00000000  000e0cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001869b6  00000000  00000000  00120c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002a75cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a23c  00000000  00000000  002a7620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018fa8 	.word	0x08018fa8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08018fa8 	.word	0x08018fa8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80006a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <vApplicationGetIdleTaskMemory+0x30>)
 80006ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	240000b4 	.word	0x240000b4
 80006c8:	24000108 	.word	0x24000108

080006cc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80006dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <vApplicationGetTimerTaskMemory+0x30>)
 80006e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ea:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	24001108 	.word	0x24001108
 80006fc:	2400115c 	.word	0x2400115c

08000700 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b09c      	sub	sp, #112	; 0x70
 8000704:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartupTask */
  osThreadDef(StartupTask, Task_Startup, osPriorityNormal, 0, 2048);
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_FREERTOS_Init+0xa4>)
 8000708:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800070c:	461d      	mov	r5, r3
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartupTaskHandle = osThreadCreate(osThread(StartupTask), NULL);
 800071a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f009 fb2a 	bl	8009d7a <osThreadCreate>
 8000726:	4603      	mov	r3, r0
 8000728:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <MX_FREERTOS_Init+0xa8>)
 800072a:	6013      	str	r3, [r2, #0]

  /* definition and creation of HeartBeat_Task */
  osThreadDef(HeartBeat_Task, Task_HeartBeat, osPriorityNormal, 0, 2048);
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_FREERTOS_Init+0xac>)
 800072e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HeartBeat_TaskHandle = osThreadCreate(osThread(HeartBeat_Task), NULL);
 8000740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f009 fb17 	bl	8009d7a <osThreadCreate>
 800074c:	4603      	mov	r3, r0
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_FREERTOS_Init+0xb0>)
 8000750:	6013      	str	r3, [r2, #0]

  /* definition and creation of UdpServer_Task */
  osThreadDef(UdpServer_Task, Task_UdpServer, osPriorityBelowNormal, 0, 2048);
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_FREERTOS_Init+0xb4>)
 8000754:	f107 041c 	add.w	r4, r7, #28
 8000758:	461d      	mov	r5, r3
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UdpServer_TaskHandle = osThreadCreate(osThread(UdpServer_Task), NULL);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f009 fb04 	bl	8009d7a <osThreadCreate>
 8000772:	4603      	mov	r3, r0
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <MX_FREERTOS_Init+0xb8>)
 8000776:	6013      	str	r3, [r2, #0]

  /* definition and creation of DHCP_Task */
  osThreadDef(DHCP_Task, TASK_DHCP, osPriorityNormal, 0, 1024);
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_FREERTOS_Init+0xbc>)
 800077a:	463c      	mov	r4, r7
 800077c:	461d      	mov	r5, r3
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000782:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DHCP_TaskHandle = osThreadCreate(osThread(DHCP_Task), NULL);
 800078a:	463b      	mov	r3, r7
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f009 faf3 	bl	8009d7a <osThreadCreate>
 8000794:	4603      	mov	r3, r0
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <MX_FREERTOS_Init+0xc0>)
 8000798:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800079a:	bf00      	nop
 800079c:	3770      	adds	r7, #112	; 0x70
 800079e:	46bd      	mov	sp, r7
 80007a0:	bdb0      	pop	{r4, r5, r7, pc}
 80007a2:	bf00      	nop
 80007a4:	08018ff8 	.word	0x08018ff8
 80007a8:	2402195c 	.word	0x2402195c
 80007ac:	08019014 	.word	0x08019014
 80007b0:	24021964 	.word	0x24021964
 80007b4:	08019030 	.word	0x08019030
 80007b8:	24021968 	.word	0x24021968
 80007bc:	0801904c 	.word	0x0801904c
 80007c0:	24021958 	.word	0x24021958

080007c4 <Task_Startup>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Task_Startup */
void Task_Startup(void const * argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007cc:	f008 fcb2 	bl	8009134 <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {

	  // Terminate the current thread
 	osThreadTerminate(NULL);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f009 fb1e 	bl	8009e12 <osThreadTerminate>
 80007d6:	e7fb      	b.n	80007d0 <Task_Startup+0xc>

080007d8 <Task_HeartBeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_HeartBeat */
void Task_HeartBeat(void const * argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <Task_HeartBeat+0x1c>)
 80007e6:	f003 fb37 	bl	8003e58 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f009 fb1d 	bl	8009e2a <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007f0:	e7f6      	b.n	80007e0 <Task_HeartBeat+0x8>
 80007f2:	bf00      	nop
 80007f4:	58020400 	.word	0x58020400

080007f8 <Task_UdpServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_UdpServer */
void Task_UdpServer(void const * argument)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_UdpServer */


	const char* message = "Hello UDP message!\n\r";
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <Task_UdpServer+0x78>)
 8000802:	617b      	str	r3, [r7, #20]
	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 10, 50, 1, 10);
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <Task_UdpServer+0x7c>)
 8000806:	60bb      	str	r3, [r7, #8]

	struct udp_pcb* my_udp = udp_new();
 8000808:	f014 ff2e 	bl	8015668 <udp_new>
 800080c:	6138      	str	r0, [r7, #16]
	udp_connect(my_udp, &PC_IPADDR, 8888);
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	f242 22b8 	movw	r2, #8888	; 0x22b8
 8000816:	4619      	mov	r1, r3
 8000818:	6938      	ldr	r0, [r7, #16]
 800081a:	f014 feb7 	bl	801558c <udp_connect>
	struct pbuf* udp_buffer = NULL;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]


	/* Infinite loop */
	for (;;)
	{
	  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff fd5c 	bl	80002e0 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29b      	uxth	r3, r3
 800082c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000830:	4619      	mov	r1, r3
 8000832:	2036      	movs	r0, #54	; 0x36
 8000834:	f00e f9cc 	bl	800ebd0 <pbuf_alloc>
 8000838:	60f8      	str	r0, [r7, #12]
	  if (udp_buffer != NULL) {
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d011      	beq.n	8000864 <Task_UdpServer+0x6c>
	    memcpy(udp_buffer->payload, message, strlen(message));
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	685c      	ldr	r4, [r3, #4]
 8000844:	6978      	ldr	r0, [r7, #20]
 8000846:	f7ff fd4b 	bl	80002e0 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	6979      	ldr	r1, [r7, #20]
 8000850:	4620      	mov	r0, r4
 8000852:	f017 fc3d 	bl	80180d0 <memcpy>
	    udp_send(my_udp, udp_buffer);
 8000856:	68f9      	ldr	r1, [r7, #12]
 8000858:	6938      	ldr	r0, [r7, #16]
 800085a:	f014 fbe1 	bl	8015020 <udp_send>
	    pbuf_free(udp_buffer);
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f00e fc9a 	bl	800f198 <pbuf_free>



	  }
	  osDelay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f009 fadf 	bl	8009e2a <osDelay>
	  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 800086c:	e7d9      	b.n	8000822 <Task_UdpServer+0x2a>
 800086e:	bf00      	nop
 8000870:	08019068 	.word	0x08019068
 8000874:	0a01320a 	.word	0x0a01320a

08000878 <TASK_DHCP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_DHCP */
void TASK_DHCP(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	    break;
	    default: break;
	    }
#endif
	    /* wait 500 ms */
	    osDelay(500);
 8000880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000884:	f009 fad1 	bl	8009e2a <osDelay>
 8000888:	e7fa      	b.n	8000880 <TASK_DHCP+0x8>
	...

0800088c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a4d      	ldr	r2, [pc, #308]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c0:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a46      	ldr	r2, [pc, #280]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a3e      	ldr	r2, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_GPIO_Init+0x154>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <MX_GPIO_Init+0x154>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x154>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_GPIO_Init+0x154>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <MX_GPIO_Init+0x154>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_GPIO_Init+0x154>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_GPIO_Init+0x154>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <MX_GPIO_Init+0x154>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_GPIO_Init+0x154>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800095c:	4821      	ldr	r0, [pc, #132]	; (80009e4 <MX_GPIO_Init+0x158>)
 800095e:	f003 fa47 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	; 0x40
 8000966:	4820      	ldr	r0, [pc, #128]	; (80009e8 <MX_GPIO_Init+0x15c>)
 8000968:	f003 fa42 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_GPIO_Init+0x160>)
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	481b      	ldr	r0, [pc, #108]	; (80009f0 <MX_GPIO_Init+0x164>)
 8000982:	f002 ff85 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000986:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x158>)
 80009a0:	f002 ff76 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a4:	2340      	movs	r3, #64	; 0x40
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x15c>)
 80009bc:	f002 ff68 	bl	8003890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_GPIO_Init+0x15c>)
 80009d4:	f002 ff5c 	bl	8003890 <HAL_GPIO_Init>

}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	; 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	58024400 	.word	0x58024400
 80009e4:	58020400 	.word	0x58020400
 80009e8:	58021800 	.word	0x58021800
 80009ec:	11110000 	.word	0x11110000
 80009f0:	58020800 	.word	0x58020800

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009fa:	f000 f8ed 	bl	8000bd8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <main+0xec>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d11b      	bne.n	8000a42 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0a:	f3bf 8f4f 	dsb	sy
}
 8000a0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a10:	f3bf 8f6f 	isb	sy
}
 8000a14:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <main+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1e:	f3bf 8f4f 	dsb	sy
}
 8000a22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a24:	f3bf 8f6f 	isb	sy
}
 8000a28:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <main+0xec>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <main+0xec>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a36:	f3bf 8f4f 	dsb	sy
}
 8000a3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a3c:	f3bf 8f6f 	isb	sy
}
 8000a40:	e000      	b.n	8000a44 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a42:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <main+0xec>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d138      	bne.n	8000ac2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <main+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a58:	f3bf 8f4f 	dsb	sy
}
 8000a5c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <main+0xec>)
 8000a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a64:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	0b5b      	lsrs	r3, r3, #13
 8000a6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a6e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	08db      	lsrs	r3, r3, #3
 8000a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a78:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	015a      	lsls	r2, r3, #5
 8000a7e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a82:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a88:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <main+0xec>)
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1e5a      	subs	r2, r3, #1
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1ef      	bne.n	8000a7a <main+0x86>
    } while(sets-- != 0U);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1e5      	bne.n	8000a70 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa4:	f3bf 8f4f 	dsb	sy
}
 8000aa8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <main+0xec>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <main+0xec>)
 8000ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab6:	f3bf 8f4f 	dsb	sy
}
 8000aba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000abc:	f3bf 8f6f 	isb	sy
}
 8000ac0:	e000      	b.n	8000ac4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ac2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f000 fcf0 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f80c 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f7ff fede 	bl	800088c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ad0:	f000 faae 	bl	8001030 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ad4:	f7ff fe14 	bl	8000700 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ad8:	f009 f938 	bl	8009d4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0xe8>
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	; 0x70
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	224c      	movs	r2, #76	; 0x4c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f017 fafa 	bl	80180ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2220      	movs	r2, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f017 faf4 	bl	80180ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f003 f9d1 	bl	8003eac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <SystemClock_Config+0xec>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <SystemClock_Config+0xec>)
 8000b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <SystemClock_Config+0xec>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <SystemClock_Config+0xf0>)
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	4a2a      	ldr	r2, [pc, #168]	; (8000bd4 <SystemClock_Config+0xf0>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <SystemClock_Config+0xf0>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b3c:	bf00      	nop
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <SystemClock_Config+0xec>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b4a:	d1f8      	bne.n	8000b3e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b62:	2378      	movs	r3, #120	; 0x78
 8000b64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b72:	230c      	movs	r3, #12
 8000b74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f9d8 	bl	8003f38 <HAL_RCC_OscConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b8e:	f000 f87f 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	233f      	movs	r3, #63	; 0x3f
 8000b94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2303      	movs	r3, #3
 8000b98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bb0:	2340      	movs	r3, #64	; 0x40
 8000bb2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 ff15 	bl	80049e8 <HAL_RCC_ClockConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000bc4:	f000 f864 	bl	8000c90 <Error_Handler>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3770      	adds	r7, #112	; 0x70
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024800 	.word	0x58024800
 8000bd4:	58000400 	.word	0x58000400

08000bd8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bde:	463b      	mov	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bea:	f000 fdf5 	bl	80017d8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MPU_Config+0x8c>)
 8000bf8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c06:	2303      	movs	r3, #3
 8000c08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fe13 	bl	8001848 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MPU_Config+0x90>)
 8000c28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c2a:	230d      	movs	r3, #13
 8000c2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fe03 	bl	8001848 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MPU_Config+0x8c>)
 8000c48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fdf9 	bl	8001848 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c56:	2004      	movs	r0, #4
 8000c58:	f000 fdd6 	bl	8001808 <HAL_MPU_Enable>

}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	30040000 	.word	0x30040000
 8000c68:	30044000 	.word	0x30044000

08000c6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c7e:	f000 fc4f 	bl	8001520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010000 	.word	0x40010000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_MspInit+0x38>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_MspInit+0x38>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_MspInit+0x38>)
 8000ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f06f 0001 	mvn.w	r0, #1
 8000ce0:	f000 fd38 	bl	8001754 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	58024400 	.word	0x58024400

08000cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d844      	bhi.n	8000d88 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	2019      	movs	r0, #25
 8000d04:	f000 fd26 	bl	8001754 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d08:	2019      	movs	r0, #25
 8000d0a:	f000 fd4d 	bl	80017a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d0e:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <HAL_InitTick+0xb0>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_InitTick+0xb4>)
 8000d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d1a:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <HAL_InitTick+0xb4>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_InitTick+0xb4>)
 8000d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d32:	f107 020c 	add.w	r2, r7, #12
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 fb99 	bl	8005474 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d42:	f004 fb81 	bl	8005448 <HAL_RCC_GetPCLK2Freq>
 8000d46:	4603      	mov	r3, r0
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4e:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <HAL_InitTick+0xb8>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	0c9b      	lsrs	r3, r3, #18
 8000d56:	3b01      	subs	r3, #1
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0xbc>)
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_InitTick+0xc0>)
 8000d5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0xbc>)
 8000d62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d66:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d68:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_InitTick+0xbc>)
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_InitTick+0xbc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_InitTick+0xbc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <HAL_InitTick+0xbc>)
 8000d7c:	f006 face 	bl	800731c <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d107      	bne.n	8000d96 <HAL_InitTick+0xa6>
 8000d86:	e001      	b.n	8000d8c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e005      	b.n	8000d98 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <HAL_InitTick+0xbc>)
 8000d8e:	f006 fbc7 	bl	8007520 <HAL_TIM_Base_Start_IT>
 8000d92:	4603      	mov	r3, r0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24000008 	.word	0x24000008
 8000da4:	58024400 	.word	0x58024400
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	2402196c 	.word	0x2402196c
 8000db0:	40010000 	.word	0x40010000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__BKPT();
 8000dc6:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <HardFault_Handler+0x6>

08000dca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <UsageFault_Handler+0x4>

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM1_UP_IRQHandler+0x10>)
 8000df2:	f006 fc5f 	bl	80076b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2402196c 	.word	0x2402196c

08000e00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <ETH_IRQHandler+0x10>)
 8000e06:	f001 fb71 	bl	80024ec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	24021b8c 	.word	0x24021b8c

08000e14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e00a      	b.n	8000e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e26:	f3af 8000 	nop.w
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	b2ca      	uxtb	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf0      	blt.n	8000e26 <_read+0x12>
	}

return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e009      	b.n	8000e74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf1      	blt.n	8000e60 <_write+0x12>
	}
	return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_close>:

int _close(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eae:	605a      	str	r2, [r3, #4]
	return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_isatty>:

int _isatty(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x50>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x16>
		heap_end = &end;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <_sbrk+0x50>)
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <_sbrk+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <_sbrk+0x50>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <_sbrk+0x50>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	466a      	mov	r2, sp
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d905      	bls.n	8000f26 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <_sbrk+0x58>)
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	e006      	b.n	8000f34 <_sbrk+0x44>
	}

	heap_end += incr;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <_sbrk+0x50>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <_sbrk+0x50>)
 8000f30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2400215c 	.word	0x2400215c
 8000f44:	24024ec8 	.word	0x24024ec8
 8000f48:	24024eb4 	.word	0x24024eb4

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <SystemInit+0xcc>)
 8000f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f58:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <SystemInit+0xcc>)
 8000f5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <SystemInit+0xd0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a2d      	ldr	r2, [pc, #180]	; (800101c <SystemInit+0xd0>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <SystemInit+0xd0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <SystemInit+0xd0>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4928      	ldr	r1, [pc, #160]	; (800101c <SystemInit+0xd0>)
 8000f7a:	4b29      	ldr	r3, [pc, #164]	; (8001020 <SystemInit+0xd4>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <SystemInit+0xd0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <SystemInit+0xd0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <SystemInit+0xd0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemInit+0xd0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <SystemInit+0xd0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemInit+0xd0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <SystemInit+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <SystemInit+0xd0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <SystemInit+0xd0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <SystemInit+0xd0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <SystemInit+0xd0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <SystemInit+0xd0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <SystemInit+0xd0>)
 8000fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <SystemInit+0xd0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <SystemInit+0xd8>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <SystemInit+0xdc>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe0:	d202      	bcs.n	8000fe8 <SystemInit+0x9c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <SystemInit+0xe0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
#endif

#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <SystemInit+0xd0>)
 8000fea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <SystemInit+0xd0>)
 8000ff0:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000ff4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <SystemInit+0xd0>)
 8000ffa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ffe:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001000:	687b      	ldr	r3, [r7, #4]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SystemInit+0xcc>)
 8001004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001008:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	58024400 	.word	0x58024400
 8001020:	eaf6ed7f 	.word	0xeaf6ed7f
 8001024:	5c001000 	.word	0x5c001000
 8001028:	ffff0000 	.word	0xffff0000
 800102c:	51008108 	.word	0x51008108

08001030 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <MX_USART3_UART_Init+0x94>)
 8001038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 800107a:	f006 fd1b 	bl	8007ab4 <HAL_UART_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001084:	f7ff fe04 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001088:	2100      	movs	r1, #0
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 800108c:	f007 fed0 	bl	8008e30 <HAL_UARTEx_SetTxFifoThreshold>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001096:	f7ff fdfb 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109a:	2100      	movs	r1, #0
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 800109e:	f007 ff61 	bl	8008f64 <HAL_UARTEx_SetRxFifoThreshold>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010a8:	f7ff fdf2 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_USART3_UART_Init+0x90>)
 80010ae:	f007 fe49 	bl	8008d44 <HAL_UARTEx_DisableFifoMode>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010b8:	f7ff fdea 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240219b8 	.word	0x240219b8
 80010c4:	40004800 	.word	0x40004800

080010c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0b8      	sub	sp, #224	; 0xe0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22bc      	movs	r2, #188	; 0xbc
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f016 ffff 	bl	80180ec <memset>
  if(uartHandle->Instance==USART3)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a25      	ldr	r2, [pc, #148]	; (8001188 <HAL_UART_MspInit+0xc0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d142      	bne.n	800117e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4618      	mov	r0, r3
 8001108:	f004 f9f6 	bl	80054f8 <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001112:	f7ff fdbd 	bl	8000c90 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_UART_MspInit+0xc4>)
 8001118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_UART_MspInit+0xc4>)
 800111e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001122:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0xc4>)
 8001128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0xc4>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_UART_MspInit+0xc4>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_UART_MspInit+0xc4>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001156:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116c:	2307      	movs	r3, #7
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0xc8>)
 800117a:	f002 fb89 	bl	8003890 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	37e0      	adds	r7, #224	; 0xe0
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004800 	.word	0x40004800
 800118c:	58024400 	.word	0x58024400
 8001190:	58020c00 	.word	0x58020c00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001198:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800119a:	e003      	b.n	80011a4 <LoopCopyDataInit>

0800119c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800119e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011a2:	3104      	adds	r1, #4

080011a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011ac:	d3f6      	bcc.n	800119c <CopyDataInit>
  ldr  r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011b0:	e002      	b.n	80011b8 <LoopFillZerobss>

080011b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011b4:	f842 3b04 	str.w	r3, [r2], #4

080011b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011bc:	d3f9      	bcc.n	80011b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011be:	f7ff fec5 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f016 ff53 	bl	801806c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fc15 	bl	80009f4 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80011d0:	0801c038 	.word	0x0801c038
  ldr  r0, =_sdata
 80011d4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80011d8:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 80011dc:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 80011e0:	24024ec8 	.word	0x24024ec8

080011e4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC3_IRQHandler>

080011e6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <LAN8742_RegisterBusIO+0x28>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <LAN8742_RegisterBusIO+0x28>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <LAN8742_RegisterBusIO+0x28>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e014      	b.n	800123e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d17c      	bne.n	8001364 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e01c      	b.n	80012be <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f107 0208 	add.w	r2, r7, #8
 800128c:	2112      	movs	r1, #18
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	da03      	bge.n	80012a0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001298:	f06f 0304 	mvn.w	r3, #4
 800129c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800129e:	e00b      	b.n	80012b8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d105      	bne.n	80012b8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
         break;
 80012b6:	e005      	b.n	80012c4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b1f      	cmp	r3, #31
 80012c2:	d9df      	bls.n	8001284 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b1f      	cmp	r3, #31
 80012ca:	d902      	bls.n	80012d2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012cc:	f06f 0302 	mvn.w	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d145      	bne.n	8001364 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6810      	ldr	r0, [r2, #0]
 80012e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012e4:	2100      	movs	r1, #0
 80012e6:	4798      	blx	r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db37      	blt.n	800135e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6810      	ldr	r0, [r2, #0]
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	2100      	movs	r1, #0
 80012fc:	4798      	blx	r3
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	db28      	blt.n	8001356 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4798      	blx	r3
 800130a:	4603      	mov	r3, r0
 800130c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800130e:	e01c      	b.n	800134a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4798      	blx	r3
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001322:	d80e      	bhi.n	8001342 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6810      	ldr	r0, [r2, #0]
 800132c:	f107 0208 	add.w	r2, r7, #8
 8001330:	2100      	movs	r1, #0
 8001332:	4798      	blx	r3
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	da07      	bge.n	800134a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800133a:	f06f 0304 	mvn.w	r3, #4
 800133e:	613b      	str	r3, [r7, #16]
                 break;
 8001340:	e010      	b.n	8001364 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001342:	f06f 0301 	mvn.w	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
               break;
 8001348:	e00c      	b.n	8001364 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1dd      	bne.n	8001310 <LAN8742_Init+0xc6>
 8001354:	e006      	b.n	8001364 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001356:	f06f 0304 	mvn.w	r3, #4
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e002      	b.n	8001364 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800135e:	f06f 0303 	mvn.w	r3, #3
 8001362:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d112      	bne.n	8001390 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4798      	blx	r3
 8001370:	4603      	mov	r3, r0
 8001372:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001374:	bf00      	nop
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4798      	blx	r3
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001388:	d9f5      	bls.n	8001376 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001390:	693b      	ldr	r3, [r7, #16]
 }
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6810      	ldr	r0, [r2, #0]
 80013ae:	f107 020c 	add.w	r2, r7, #12
 80013b2:	2101      	movs	r1, #1
 80013b4:	4798      	blx	r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da02      	bge.n	80013c2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013bc:	f06f 0304 	mvn.w	r3, #4
 80013c0:	e06e      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6810      	ldr	r0, [r2, #0]
 80013ca:	f107 020c 	add.w	r2, r7, #12
 80013ce:	2101      	movs	r1, #1
 80013d0:	4798      	blx	r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da02      	bge.n	80013de <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013d8:	f06f 0304 	mvn.w	r3, #4
 80013dc:	e060      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80013e8:	2301      	movs	r3, #1
 80013ea:	e059      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6810      	ldr	r0, [r2, #0]
 80013f4:	f107 020c 	add.w	r2, r7, #12
 80013f8:	2100      	movs	r1, #0
 80013fa:	4798      	blx	r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da02      	bge.n	8001408 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001402:	f06f 0304 	mvn.w	r3, #4
 8001406:	e04b      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11b      	bne.n	800144a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <LAN8742_GetLinkState+0x90>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001426:	2302      	movs	r3, #2
 8001428:	e03a      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001434:	2303      	movs	r3, #3
 8001436:	e033      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001442:	2304      	movs	r3, #4
 8001444:	e02c      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001446:	2305      	movs	r3, #5
 8001448:	e02a      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6810      	ldr	r0, [r2, #0]
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	211f      	movs	r1, #31
 8001458:	4798      	blx	r3
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	da02      	bge.n	8001466 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001460:	f06f 0304 	mvn.w	r3, #4
 8001464:	e01c      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001470:	2306      	movs	r3, #6
 8001472:	e015      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 031c 	and.w	r3, r3, #28
 800147a:	2b18      	cmp	r3, #24
 800147c:	d101      	bne.n	8001482 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800147e:	2302      	movs	r3, #2
 8001480:	e00e      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f003 031c 	and.w	r3, r3, #28
 8001488:	2b08      	cmp	r3, #8
 800148a:	d101      	bne.n	8001490 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800148c:	2303      	movs	r3, #3
 800148e:	e007      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 031c 	and.w	r3, r3, #28
 8001496:	2b14      	cmp	r3, #20
 8001498:	d101      	bne.n	800149e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800149a:	2304      	movs	r3, #4
 800149c:	e000      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800149e:	2305      	movs	r3, #5
    }				
  }
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 f930 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014b4:	f003 fe08 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_Init+0x68>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	4913      	ldr	r1, [pc, #76]	; (8001514 <HAL_Init+0x6c>)
 80014c6:	5ccb      	ldrb	r3, [r1, r3]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_Init+0x68>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_Init+0x6c>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_Init+0x70>)
 80014ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <HAL_Init+0x74>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fbfc 	bl	8000cf0 <HAL_InitTick>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e002      	b.n	8001508 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001502:	f7ff fbd7 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	58024400 	.word	0x58024400
 8001514:	0801be0c 	.word	0x0801be0c
 8001518:	24000004 	.word	0x24000004
 800151c:	24000000 	.word	0x24000000

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2400000c 	.word	0x2400000c
 8001544:	24021a48 	.word	0x24021a48

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	24021a48 	.word	0x24021a48

08001560 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetREVID+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0c1b      	lsrs	r3, r3, #16
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	5c001000 	.word	0x5c001000

08001578 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d008      	beq.n	8001598 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800158c:	d004      	beq.n	8001598 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 800158e:	f240 215b 	movw	r1, #603	; 0x25b
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 8001594:	f7ff fb83 	bl	8000c9e <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08019080 	.word	0x08019080
 80015b4:	58000400 	.word	0x58000400

080015b8 <__NVIC_SetPriorityGrouping>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	05fa0000 	.word	0x05fa0000

08001600 <__NVIC_GetPriorityGrouping>:
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d00f      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d00c      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d009      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d006      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d003      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800173a:	2192      	movs	r1, #146	; 0x92
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800173e:	f7ff faae 	bl	8000c9e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff38 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	080190b4 	.word	0x080190b4

08001754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d903      	bls.n	8001770 <HAL_NVIC_SetPriority+0x1c>
 8001768:	21aa      	movs	r1, #170	; 0xaa
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <HAL_NVIC_SetPriority+0x50>)
 800176c:	f7ff fa97 	bl	8000c9e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	d903      	bls.n	800177e <HAL_NVIC_SetPriority+0x2a>
 8001776:	21ab      	movs	r1, #171	; 0xab
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <HAL_NVIC_SetPriority+0x50>)
 800177a:	f7ff fa90 	bl	8000c9e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800177e:	f7ff ff3f 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001782:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	6978      	ldr	r0, [r7, #20]
 800178a:	f7ff ff8f 	bl	80016ac <NVIC_EncodePriority>
 800178e:	4602      	mov	r2, r0
 8001790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff5e 	bl	8001658 <__NVIC_SetPriority>
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	080190b4 	.word	0x080190b4

080017a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da03      	bge.n	80017c2 <HAL_NVIC_EnableIRQ+0x1a>
 80017ba:	21be      	movs	r1, #190	; 0xbe
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_NVIC_EnableIRQ+0x2c>)
 80017be:	f7ff fa6e 	bl	8000c9e <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff28 	bl	800161c <__NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	080190b4 	.word	0x080190b4

080017d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017dc:	f3bf 8f5f 	dmb	sy
}
 80017e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_MPU_Disable+0x28>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_MPU_Disable+0x28>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_MPU_Disable+0x2c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	e000ed90 	.word	0xe000ed90

08001808 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_MPU_Enable+0x38>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_MPU_Enable+0x3c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_MPU_Enable+0x3c>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001826:	f3bf 8f4f 	dsb	sy
}
 800182a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800182c:	f3bf 8f6f 	isb	sy
}
 8001830:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed90 	.word	0xe000ed90
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d040      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d03c      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d038      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d034      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d030      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d02c      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	2b06      	cmp	r3, #6
 8001886:	d028      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	2b07      	cmp	r3, #7
 800188e:	d024      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d020      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	2b09      	cmp	r3, #9
 800189e:	d01c      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	2b0a      	cmp	r3, #10
 80018a6:	d018      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	2b0b      	cmp	r3, #11
 80018ae:	d014      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d010      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b0d      	cmp	r3, #13
 80018be:	d00c      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	2b0e      	cmp	r3, #14
 80018c6:	d008      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d004      	beq.n	80018da <HAL_MPU_ConfigRegion+0x92>
 80018d0:	f240 112d 	movw	r1, #301	; 0x12d
 80018d4:	4896      	ldr	r0, [pc, #600]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 80018d6:	f7ff f9e2 	bl	8000c9e <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d008      	beq.n	80018f4 <HAL_MPU_ConfigRegion+0xac>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_MPU_ConfigRegion+0xac>
 80018ea:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80018ee:	4890      	ldr	r0, [pc, #576]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 80018f0:	f7ff f9d5 	bl	8000c9e <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	785a      	ldrb	r2, [r3, #1]
 80018f8:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <HAL_MPU_ConfigRegion+0x2ec>)
 80018fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 810a 	beq.w	8001b1a <HAL_MPU_ConfigRegion+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7b1b      	ldrb	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_MPU_ConfigRegion+0xd8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7b1b      	ldrb	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d004      	beq.n	8001920 <HAL_MPU_ConfigRegion+0xd8>
 8001916:	f44f 719b 	mov.w	r1, #310	; 0x136
 800191a:	4885      	ldr	r0, [pc, #532]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 800191c:	f7ff f9bf 	bl	8000c9e <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7adb      	ldrb	r3, [r3, #11]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d018      	beq.n	800195a <HAL_MPU_ConfigRegion+0x112>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7adb      	ldrb	r3, [r3, #11]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d014      	beq.n	800195a <HAL_MPU_ConfigRegion+0x112>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7adb      	ldrb	r3, [r3, #11]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d010      	beq.n	800195a <HAL_MPU_ConfigRegion+0x112>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7adb      	ldrb	r3, [r3, #11]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d00c      	beq.n	800195a <HAL_MPU_ConfigRegion+0x112>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7adb      	ldrb	r3, [r3, #11]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d008      	beq.n	800195a <HAL_MPU_ConfigRegion+0x112>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7adb      	ldrb	r3, [r3, #11]
 800194c:	2b06      	cmp	r3, #6
 800194e:	d004      	beq.n	800195a <HAL_MPU_ConfigRegion+0x112>
 8001950:	f240 1137 	movw	r1, #311	; 0x137
 8001954:	4876      	ldr	r0, [pc, #472]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 8001956:	f7ff f9a2 	bl	8000c9e <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7a9b      	ldrb	r3, [r3, #10]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00c      	beq.n	800197c <HAL_MPU_ConfigRegion+0x134>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7a9b      	ldrb	r3, [r3, #10]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d008      	beq.n	800197c <HAL_MPU_ConfigRegion+0x134>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7a9b      	ldrb	r3, [r3, #10]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d004      	beq.n	800197c <HAL_MPU_ConfigRegion+0x134>
 8001972:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001976:	486e      	ldr	r0, [pc, #440]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 8001978:	f7ff f991 	bl	8000c9e <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7b5b      	ldrb	r3, [r3, #13]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d008      	beq.n	8001996 <HAL_MPU_ConfigRegion+0x14e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7b5b      	ldrb	r3, [r3, #13]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <HAL_MPU_ConfigRegion+0x14e>
 800198c:	f240 1139 	movw	r1, #313	; 0x139
 8001990:	4867      	ldr	r0, [pc, #412]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 8001992:	f7ff f984 	bl	8000c9e <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7b9b      	ldrb	r3, [r3, #14]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d008      	beq.n	80019b0 <HAL_MPU_ConfigRegion+0x168>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7b9b      	ldrb	r3, [r3, #14]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <HAL_MPU_ConfigRegion+0x168>
 80019a6:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80019aa:	4861      	ldr	r0, [pc, #388]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 80019ac:	f7ff f977 	bl	8000c9e <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7bdb      	ldrb	r3, [r3, #15]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d008      	beq.n	80019ca <HAL_MPU_ConfigRegion+0x182>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7bdb      	ldrb	r3, [r3, #15]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_MPU_ConfigRegion+0x182>
 80019c0:	f240 113b 	movw	r1, #315	; 0x13b
 80019c4:	485a      	ldr	r0, [pc, #360]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 80019c6:	f7ff f96a 	bl	8000c9e <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7a5b      	ldrb	r3, [r3, #9]
 80019ce:	2bff      	cmp	r3, #255	; 0xff
 80019d0:	d104      	bne.n	80019dc <HAL_MPU_ConfigRegion+0x194>
 80019d2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80019d6:	4856      	ldr	r0, [pc, #344]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 80019d8:	f7ff f961 	bl	8000c9e <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7a1b      	ldrb	r3, [r3, #8]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d070      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7a1b      	ldrb	r3, [r3, #8]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d06c      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7a1b      	ldrb	r3, [r3, #8]
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d068      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7a1b      	ldrb	r3, [r3, #8]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d064      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a1b      	ldrb	r3, [r3, #8]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d060      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7a1b      	ldrb	r3, [r3, #8]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d05c      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7a1b      	ldrb	r3, [r3, #8]
 8001a10:	2b0a      	cmp	r3, #10
 8001a12:	d058      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a1b      	ldrb	r3, [r3, #8]
 8001a18:	2b0b      	cmp	r3, #11
 8001a1a:	d054      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7a1b      	ldrb	r3, [r3, #8]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d050      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a1b      	ldrb	r3, [r3, #8]
 8001a28:	2b0d      	cmp	r3, #13
 8001a2a:	d04c      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7a1b      	ldrb	r3, [r3, #8]
 8001a30:	2b0e      	cmp	r3, #14
 8001a32:	d048      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7a1b      	ldrb	r3, [r3, #8]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d044      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7a1b      	ldrb	r3, [r3, #8]
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d040      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7a1b      	ldrb	r3, [r3, #8]
 8001a48:	2b11      	cmp	r3, #17
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7a1b      	ldrb	r3, [r3, #8]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d038      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7a1b      	ldrb	r3, [r3, #8]
 8001a58:	2b13      	cmp	r3, #19
 8001a5a:	d034      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7a1b      	ldrb	r3, [r3, #8]
 8001a60:	2b14      	cmp	r3, #20
 8001a62:	d030      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7a1b      	ldrb	r3, [r3, #8]
 8001a68:	2b15      	cmp	r3, #21
 8001a6a:	d02c      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7a1b      	ldrb	r3, [r3, #8]
 8001a70:	2b16      	cmp	r3, #22
 8001a72:	d028      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7a1b      	ldrb	r3, [r3, #8]
 8001a78:	2b17      	cmp	r3, #23
 8001a7a:	d024      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7a1b      	ldrb	r3, [r3, #8]
 8001a80:	2b18      	cmp	r3, #24
 8001a82:	d020      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7a1b      	ldrb	r3, [r3, #8]
 8001a88:	2b19      	cmp	r3, #25
 8001a8a:	d01c      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7a1b      	ldrb	r3, [r3, #8]
 8001a90:	2b1a      	cmp	r3, #26
 8001a92:	d018      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7a1b      	ldrb	r3, [r3, #8]
 8001a98:	2b1b      	cmp	r3, #27
 8001a9a:	d014      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a1b      	ldrb	r3, [r3, #8]
 8001aa0:	2b1c      	cmp	r3, #28
 8001aa2:	d010      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7a1b      	ldrb	r3, [r3, #8]
 8001aa8:	2b1d      	cmp	r3, #29
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7a1b      	ldrb	r3, [r3, #8]
 8001ab0:	2b1e      	cmp	r3, #30
 8001ab2:	d008      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7a1b      	ldrb	r3, [r3, #8]
 8001ab8:	2b1f      	cmp	r3, #31
 8001aba:	d004      	beq.n	8001ac6 <HAL_MPU_ConfigRegion+0x27e>
 8001abc:	f240 113d 	movw	r1, #317	; 0x13d
 8001ac0:	481b      	ldr	r0, [pc, #108]	; (8001b30 <HAL_MPU_ConfigRegion+0x2e8>)
 8001ac2:	f7ff f8ec 	bl	8000c9e <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_MPU_ConfigRegion+0x2ec>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7b1b      	ldrb	r3, [r3, #12]
 8001ad2:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7adb      	ldrb	r3, [r3, #11]
 8001ad8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ada:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7a9b      	ldrb	r3, [r3, #10]
 8001ae0:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ae2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7b5b      	ldrb	r3, [r3, #13]
 8001ae8:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001aea:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7b9b      	ldrb	r3, [r3, #14]
 8001af0:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001af2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7bdb      	ldrb	r3, [r3, #15]
 8001af8:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001afa:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7a5b      	ldrb	r3, [r3, #9]
 8001b00:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b02:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7a1b      	ldrb	r3, [r3, #8]
 8001b08:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b0a:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	7812      	ldrb	r2, [r2, #0]
 8001b10:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MPU_ConfigRegion+0x2ec>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b14:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b16:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b18:	e005      	b.n	8001b26 <HAL_MPU_ConfigRegion+0x2de>
    MPU->RBAR = 0x00;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MPU_ConfigRegion+0x2ec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <HAL_MPU_ConfigRegion+0x2ec>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	080190b4 	.word	0x080190b4
 8001b34:	e000ed90 	.word	0xe000ed90

08001b38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0c6      	b.n	8001cd8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f007 fc4e 	bl	80093f4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2223      	movs	r2, #35	; 0x23
 8001b5c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <HAL_ETH_Init+0x1a8>)
 8001b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b64:	4a5e      	ldr	r2, [pc, #376]	; (8001ce0 <HAL_ETH_Init+0x1a8>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <HAL_ETH_Init+0x1a8>)
 8001b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7a1b      	ldrb	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fcf7 	bl	8001578 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b8a:	e003      	b.n	8001b94 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b90:	f7ff fcf2 	bl	8001578 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bac:	f7ff fccc 	bl	8001548 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001bb2:	e00f      	b.n	8001bd4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001bb4:	f7ff fcc8 	bl	8001548 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bc2:	d907      	bls.n	8001bd4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	22e0      	movs	r2, #224	; 0xe0
 8001bce:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e081      	b.n	8001cd8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e6      	bne.n	8001bb4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f001 fad8 	bl	800319c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001bec:	f003 fbe6 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	; (8001ce4 <HAL_ETH_Init+0x1ac>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	0c9a      	lsrs	r2, r3, #18
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3a01      	subs	r2, #1
 8001c00:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f001 fa2b 	bl	8003060 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c20:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c24:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	22e0      	movs	r2, #224	; 0xe0
 8001c3c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e04a      	b.n	8001cd8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c4a:	4413      	add	r3, r2
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_ETH_Init+0x1b0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6952      	ldr	r2, [r2, #20]
 8001c56:	0052      	lsls	r2, r2, #1
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	6809      	ldr	r1, [r1, #0]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c62:	440b      	add	r3, r1
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f001 faf0 	bl	800324c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f001 fb34 	bl	80032da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	3305      	adds	r3, #5
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	021a      	lsls	r2, r3, #8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	3303      	adds	r3, #3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	061a      	lsls	r2, r3, #24
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	041b      	lsls	r3, r3, #16
 8001ca4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	3301      	adds	r3, #1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cb0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cbe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	431bde83 	.word	0x431bde83
 8001ce8:	ffff8001 	.word	0xffff8001

08001cec <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	3310      	adds	r3, #16
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_ETH_DescAssignMemory+0x28>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d904      	bls.n	8001d1e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e021      	b.n	8001d62 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d174      	bne.n	8001e68 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2223      	movs	r2, #35	; 0x23
 8001d82:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e00f      	b.n	8001daa <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3310      	adds	r3, #16
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d9ec      	bls.n	8001d8a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0202 	orr.w	r2, r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	f241 1304 	movw	r3, #4356	; 0x1104
 8001df2:	4413      	add	r3, r2
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6811      	ldr	r1, [r2, #0]
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e02:	440b      	add	r3, r1
 8001e04:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6811      	ldr	r1, [r2, #0]
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e1e:	440b      	add	r3, r1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001e34:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e38:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e42:	4413      	add	r3, r2
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6811      	ldr	r1, [r2, #0]
 8001e4a:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e54:	440b      	add	r3, r1
 8001e56:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2222      	movs	r2, #34	; 0x22
 8001e62:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d067      	beq.n	8001f58 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2223      	movs	r2, #35	; 0x23
 8001e8c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	4a32      	ldr	r2, [pc, #200]	; (8001f68 <HAL_ETH_Stop_IT+0xf0>)
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	f241 1334 	movw	r3, #4404	; 0x1134
 8001ea6:	440b      	add	r3, r1
 8001ea8:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f241 1304 	movw	r3, #4356	; 0x1104
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6811      	ldr	r1, [r2, #0]
 8001eba:	f023 0201 	bic.w	r2, r3, #1
 8001ebe:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ec2:	440b      	add	r3, r1
 8001ec4:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ece:	4413      	add	r3, r2
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6811      	ldr	r1, [r2, #0]
 8001ed6:	f023 0201 	bic.w	r2, r3, #1
 8001eda:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ede:	440b      	add	r3, r1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0202 	bic.w	r2, r2, #2
 8001f14:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e00f      	b.n	8001f3c <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3310      	adds	r3, #16
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d9ec      	bls.n	8001f1c <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2210      	movs	r2, #16
 8001f52:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e000      	b.n	8001f5a <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	ffff2fbe 	.word	0xffff2fbe

08001f6c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d107      	bne.n	8001f8e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f82:	f043 0201 	orr.w	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e073      	b.n	8002076 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d16e      	bne.n	8002074 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f96:	2200      	movs	r2, #0
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f001 f9fa 	bl	8003394 <ETH_Prepare_Tx_Descriptors>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001faa:	f043 0202 	orr.w	r2, r3, #2
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e05f      	b.n	8002076 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3206      	adds	r2, #6
 8001fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d904      	bls.n	8001fe0 <HAL_ETH_Transmit+0x74>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	1f1a      	subs	r2, r3, #4
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	3106      	adds	r1, #6
 8001fec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001ff0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001ff4:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001ff6:	f7ff faa7 	bl	8001548 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001ffc:	e034      	b.n	8002068 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d011      	beq.n	8002034 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	f043 0208 	orr.w	r2, r3, #8
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	22e0      	movs	r2, #224	; 0xe0
 800202e:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e020      	b.n	8002076 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d015      	beq.n	8002068 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800203c:	f7ff fa84 	bl	8001548 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <HAL_ETH_Transmit+0xe6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	f043 0204 	orr.w	r2, r3, #4
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	22e0      	movs	r2, #224	; 0xe0
 8002062:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e006      	b.n	8002076 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	dbc6      	blt.n	8001ffe <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800207e:	b480      	push	{r7}
 8002080:	b089      	sub	sp, #36	; 0x24
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3344      	adds	r3, #68	; 0x44
 800208a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d06b      	beq.n	8002188 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e0ce      	b.n	8002252 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d036      	beq.n	8002134 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	3301      	adds	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d902      	bls.n	80020e8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b04      	subs	r3, #4
 80020e6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db11      	blt.n	800211e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2201      	movs	r2, #1
 800210a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d902      	bls.n	800211e <HAL_ETH_IsRxDataAvailable+0xa0>
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3b04      	subs	r3, #4
 800211c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002130:	2301      	movs	r3, #1
 8002132:	e08e      	b.n	8002252 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d012      	beq.n	8002166 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d902      	bls.n	800215a <HAL_ETH_IsRxDataAvailable+0xdc>
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3b04      	subs	r3, #4
 8002158:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e010      	b.n	8002188 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	3301      	adds	r3, #1
 800216a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	3301      	adds	r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d902      	bls.n	800217e <HAL_ETH_IsRxDataAvailable+0x100>
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3b04      	subs	r3, #4
 800217c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002186:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db02      	blt.n	8002196 <HAL_ETH_IsRxDataAvailable+0x118>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d98e      	bls.n	80020b4 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d056      	beq.n	800224a <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e03b      	b.n	8002234 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ca:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	3b01      	subs	r3, #1
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	d20d      	bcs.n	800222e <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d902      	bls.n	8002224 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b04      	subs	r3, #4
 8002222:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d3bf      	bcc.n	80021bc <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f241 1328 	movw	r3, #4392	; 0x1128
 8002246:	440b      	add	r3, r1
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]

  return 0;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b08a      	sub	sp, #40	; 0x28
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3344      	adds	r3, #68	; 0x44
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07d      	b.n	8002392 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff feed 	bl	800207e <HAL_ETH_IsRxDataAvailable>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e071      	b.n	8002392 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	e031      	b.n	8002328 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	461a      	mov	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	461a      	mov	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022fe:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3301      	adds	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	2b03      	cmp	r3, #3
 800230a:	d902      	bls.n	8002312 <HAL_ETH_GetRxDataBuffer+0xb4>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3b04      	subs	r3, #4
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	3301      	adds	r3, #1
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	3b01      	subs	r3, #1
 800232e:	6a3a      	ldr	r2, [r7, #32]
 8002330:	429a      	cmp	r2, r3
 8002332:	d3c7      	bcc.n	80022c4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	461a      	mov	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	429a      	cmp	r2, r3
 8002354:	d803      	bhi.n	800235e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	e018      	b.n	8002390 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	461a      	mov	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	1ad2      	subs	r2, r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	e001      	b.n	8002390 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3344      	adds	r3, #68	; 0x44
 80023a8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fe60 	bl	800207e <HAL_ETH_IsRxDataAvailable>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e017      	b.n	80023f8 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4413      	add	r3, r2
 80023d0:	3b01      	subs	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d902      	bls.n	80023e0 <HAL_ETH_GetRxDataLength+0x46>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3b04      	subs	r3, #4
 80023de:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3344      	adds	r3, #68	; 0x44
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e057      	b.n	80024e0 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e03b      	b.n	80024bc <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002452:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3b01      	subs	r3, #1
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	429a      	cmp	r2, r3
 8002498:	d20d      	bcs.n	80024b6 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d902      	bls.n	80024ac <HAL_ETH_BuildRxDescriptors+0xac>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b04      	subs	r3, #4
 80024aa:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	3301      	adds	r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d3bf      	bcc.n	8002444 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	f241 1328 	movw	r3, #4392	; 0x1128
 80024ce:	440b      	add	r3, r1
 80024d0:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3724      	adds	r7, #36	; 0x24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d113      	bne.n	800252e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f241 1334 	movw	r3, #4404	; 0x1134
 800250e:	4413      	add	r3, r2
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d109      	bne.n	800252e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f007 f850 	bl	80095c0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002528:	f248 0240 	movw	r2, #32832	; 0x8040
 800252c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d113      	bne.n	8002568 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f241 1334 	movw	r3, #4404	; 0x1134
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d109      	bne.n	8002568 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8b7 	bl	80026c8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002562:	f248 0201 	movw	r2, #32769	; 0x8001
 8002566:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800257a:	d149      	bne.n	8002610 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f241 1334 	movw	r3, #4404	; 0x1134
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002590:	d13e      	bne.n	8002610 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002596:	f043 0208 	orr.w	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b0:	d11b      	bne.n	80025ea <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f241 1302 	movw	r3, #4354	; 0x1102
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f241 1334 	movw	r3, #4404	; 0x1134
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025da:	f241 1334 	movw	r3, #4404	; 0x1134
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	22e0      	movs	r2, #224	; 0xe0
 80025e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80025e8:	e00f      	b.n	800260a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002604:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002608:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f866 	bl	80026dc <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002618:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800261c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002620:	d10e      	bne.n	8002640 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	22e0      	movs	r2, #224	; 0xe0
 8002632:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f85b 	bl	80026f0 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b10      	cmp	r3, #16
 800264e:	d10f      	bne.n	8002670 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002658:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f84e 	bl	8002704 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b20      	cmp	r3, #32
 800267e:	d10f      	bne.n	80026a0 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f840 	bl	8002718 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_ETH_IRQHandler+0x1d8>)
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_ETH_IRQHandler+0x1d8>)
 80026ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f839 	bl	800272c <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	58000080 	.word	0x58000080

080026c8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e03e      	b.n	80027e0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	055b      	lsls	r3, r3, #21
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f043 030c 	orr.w	r3, r3, #12
 800278e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80027a2:	f7fe fed1 	bl	8001548 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80027a8:	e009      	b.n	80027be <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80027aa:	f7fe fecd 	bl	8001548 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b8:	d901      	bls.n	80027be <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e010      	b.n	80027e0 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ed      	bne.n	80027aa <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e03c      	b.n	8002884 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002812:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	055b      	lsls	r3, r3, #21
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f023 030c 	bic.w	r3, r3, #12
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_ETH_WritePHYRegister+0xa4>)
 800284a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_ETH_WritePHYRegister+0xa4>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002856:	f7fe fe77 	bl	8001548 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800285c:	e009      	b.n	8002872 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800285e:	f7fe fe73 	bl	8001548 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286c:	d901      	bls.n	8002872 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e008      	b.n	8002884 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ed      	bne.n	800285e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40028000 	.word	0x40028000

08002890 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e1c3      	b.n	8002c2c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0e5b      	lsrs	r3, r3, #25
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 020f 	and.w	r2, r3, #15
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002bb8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bc8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e00a      	b.n	8002c62 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d105      	bne.n	8002c60 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f860 	bl	8002d1c <ETH_SetMACConfig>

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c7c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c84:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c86:	f002 fb99 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8002c8a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d908      	bls.n	8002ca6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d804      	bhi.n	8002ca6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e027      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d908      	bls.n	8002cc0 <HAL_ETH_SetMDIOClockRange+0x54>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d204      	bcs.n	8002cc0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e01a      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d303      	bcc.n	8002cd0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d911      	bls.n	8002cf4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d908      	bls.n	8002cea <HAL_ETH_SetMDIOClockRange+0x7e>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d804      	bhi.n	8002cea <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e005      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e000      	b.n	8002cf6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002cf4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	01312cff 	.word	0x01312cff
 8002d0c:	02160ebf 	.word	0x02160ebf
 8002d10:	03938700 	.word	0x03938700
 8002d14:	05f5e0ff 	.word	0x05f5e0ff
 8002d18:	08f0d17f 	.word	0x08f0d17f

08002d1c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002d2e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	791b      	ldrb	r3, [r3, #4]
 8002d34:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002d36:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002d3e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	7b5b      	ldrb	r3, [r3, #13]
 8002d44:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d46:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	7b9b      	ldrb	r3, [r3, #14]
 8002d4c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	7bdb      	ldrb	r3, [r3, #15]
 8002d54:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d56:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	7c12      	ldrb	r2, [r2, #16]
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d102      	bne.n	8002d66 <ETH_SetMACConfig+0x4a>
 8002d60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d64:	e000      	b.n	8002d68 <ETH_SetMACConfig+0x4c>
 8002d66:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d68:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	7c52      	ldrb	r2, [r2, #17]
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d102      	bne.n	8002d78 <ETH_SetMACConfig+0x5c>
 8002d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d76:	e000      	b.n	8002d7a <ETH_SetMACConfig+0x5e>
 8002d78:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d7a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	7c9b      	ldrb	r3, [r3, #18]
 8002d80:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d82:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002d88:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002d8e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	7f1b      	ldrb	r3, [r3, #28]
 8002d94:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002d96:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7f5b      	ldrb	r3, [r3, #29]
 8002d9c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002d9e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	7f92      	ldrb	r2, [r2, #30]
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d102      	bne.n	8002dae <ETH_SetMACConfig+0x92>
 8002da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dac:	e000      	b.n	8002db0 <ETH_SetMACConfig+0x94>
 8002dae:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002db0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	7fdb      	ldrb	r3, [r3, #31]
 8002db6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002db8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	d102      	bne.n	8002dca <ETH_SetMACConfig+0xae>
 8002dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc8:	e000      	b.n	8002dcc <ETH_SetMACConfig+0xb0>
 8002dca:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002dcc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002dd2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dda:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002ddc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <ETH_SetMACConfig+0x22c>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	68f9      	ldr	r1, [r7, #12]
 8002df6:	430b      	orrs	r3, r1
 8002df8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e06:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002e08:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e10:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002e12:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e1a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002e1c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002e24:	2a00      	cmp	r2, #0
 8002e26:	d102      	bne.n	8002e2e <ETH_SetMACConfig+0x112>
 8002e28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e2c:	e000      	b.n	8002e30 <ETH_SetMACConfig+0x114>
 8002e2e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002e30:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <ETH_SetMACConfig+0x230>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <ETH_SetMACConfig+0x234>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e78:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e7e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d101      	bne.n	8002e8e <ETH_SetMACConfig+0x172>
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	e000      	b.n	8002e90 <ETH_SetMACConfig+0x174>
 8002e8e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e90:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e96:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002eb8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002ec0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f023 0103 	bic.w	r1, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ee6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	d101      	bne.n	8002f0a <ETH_SetMACConfig+0x1ee>
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	e000      	b.n	8002f0c <ETH_SetMACConfig+0x1f0>
 8002f0a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002f0c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002f14:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f16:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002f1e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002f2c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	00048083 	.word	0x00048083
 8002f4c:	c0f88000 	.word	0xc0f88000
 8002f50:	fffffef0 	.word	0xfffffef0

08002f54 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b38      	ldr	r3, [pc, #224]	; (800304c <ETH_SetDMAConfig+0xf8>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	6809      	ldr	r1, [r1, #0]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002f7a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f86:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	7b1b      	ldrb	r3, [r3, #12]
 8002f8c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f9a:	4413      	add	r3, r2
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <ETH_SetDMAConfig+0xfc>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6811      	ldr	r1, [r2, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	f241 0304 	movw	r3, #4100	; 0x1004
 8002fae:	440b      	add	r3, r1
 8002fb0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	7b5b      	ldrb	r3, [r3, #13]
 8002fb6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <ETH_SetDMAConfig+0x100>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002fda:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	7d1b      	ldrb	r3, [r3, #20]
 8002fe4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fe6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	7f5b      	ldrb	r3, [r3, #29]
 8002fec:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ffa:	4413      	add	r3, r2
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <ETH_SetDMAConfig+0x104>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6811      	ldr	r1, [r2, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	431a      	orrs	r2, r3
 800300a:	f241 1304 	movw	r3, #4356	; 0x1104
 800300e:	440b      	add	r3, r1
 8003010:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	7f1b      	ldrb	r3, [r3, #28]
 8003016:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f241 1308 	movw	r3, #4360	; 0x1108
 8003028:	4413      	add	r3, r2
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <ETH_SetDMAConfig+0x108>)
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6811      	ldr	r1, [r2, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	431a      	orrs	r2, r3
 8003038:	f241 1308 	movw	r3, #4360	; 0x1108
 800303c:	440b      	add	r3, r1
 800303e:	601a      	str	r2, [r3, #0]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	ffff87fd 	.word	0xffff87fd
 8003050:	ffff2ffe 	.word	0xffff2ffe
 8003054:	fffec000 	.word	0xfffec000
 8003058:	ffc0efef 	.word	0xffc0efef
 800305c:	7fc0ffff 	.word	0x7fc0ffff

08003060 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b0a4      	sub	sp, #144	; 0x90
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800306e:	2300      	movs	r3, #0
 8003070:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800309c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80030b8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80030bc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80030c4:	2300      	movs	r3, #0
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80030da:	2300      	movs	r3, #0
 80030dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80030de:	2300      	movs	r3, #0
 80030e0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80030e2:	2300      	movs	r3, #0
 80030e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80030f8:	2320      	movs	r3, #32
 80030fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800310a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003110:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800311c:	2302      	movs	r3, #2
 800311e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800313a:	2300      	movs	r3, #0
 800313c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fde6 	bl	8002d1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003150:	2301      	movs	r3, #1
 8003152:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003154:	2301      	movs	r3, #1
 8003156:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800316a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800316e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003178:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003180:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fee1 	bl	8002f54 <ETH_SetDMAConfig>
}
 8003192:	bf00      	nop
 8003194:	3790      	adds	r7, #144	; 0x90
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80031b6:	f002 f901 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80031ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d908      	bls.n	80031d6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d804      	bhi.n	80031d6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e027      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d908      	bls.n	80031f0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4a17      	ldr	r2, [pc, #92]	; (8003240 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d204      	bcs.n	80031f0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e01a      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d303      	bcc.n	8003200 <ETH_MAC_MDIO_ClkConfig+0x64>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d911      	bls.n	8003224 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d908      	bls.n	800321a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d804      	bhi.n	800321a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e005      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e000      	b.n	8003226 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003224:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	01312cff 	.word	0x01312cff
 800323c:	02160ebf 	.word	0x02160ebf
 8003240:	03938700 	.word	0x03938700
 8003244:	05f5e0ff 	.word	0x05f5e0ff
 8003248:	08f0d17f 	.word	0x08f0d17f

0800324c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e01d      	b.n	8003296 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	3206      	adds	r2, #6
 800328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d9de      	bls.n	800325a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f241 132c 	movw	r3, #4396	; 0x112c
 80032aa:	4413      	add	r3, r2
 80032ac:	2203      	movs	r2, #3
 80032ae:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68d9      	ldr	r1, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	f241 1314 	movw	r3, #4372	; 0x1114
 80032bc:	4413      	add	r3, r2
 80032be:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e024      	b.n	8003332 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6919      	ldr	r1, [r3, #16]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3310      	adds	r3, #16
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d9d7      	bls.n	80032e8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f241 1330 	movw	r3, #4400	; 0x1130
 800335e:	4413      	add	r3, r2
 8003360:	2203      	movs	r2, #3
 8003362:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6919      	ldr	r1, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	f241 131c 	movw	r3, #4380	; 0x111c
 8003370:	4413      	add	r3, r2
 8003372:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f241 1328 	movw	r3, #4392	; 0x1128
 8003384:	4413      	add	r3, r2
 8003386:	6019      	str	r1, [r3, #0]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003394:	b480      	push	{r7}
 8003396:	b08d      	sub	sp, #52	; 0x34
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3318      	adds	r3, #24
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033be:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d6:	d007      	beq.n	80033e8 <ETH_Prepare_Tx_Descriptors+0x54>
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	3304      	adds	r3, #4
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80033e8:	2302      	movs	r3, #2
 80033ea:	e24a      	b.n	8003882 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d044      	beq.n	8003482 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <ETH_Prepare_Tx_Descriptors+0x234>)
 80033fe:	4013      	ands	r3, r2
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003404:	431a      	orrs	r2, r3
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003424:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d027      	beq.n	8003482 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	b29a      	uxth	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	431a      	orrs	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003470:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003480:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <ETH_Prepare_Tx_Descriptors+0x238>)
 8003494:	4013      	ands	r3, r2
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	6992      	ldr	r2, [r2, #24]
 800349a:	431a      	orrs	r2, r3
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <ETH_Prepare_Tx_Descriptors+0x130>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d030      	beq.n	8003526 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	3301      	adds	r3, #1
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d902      	bls.n	80034ee <ETH_Prepare_Tx_Descriptors+0x15a>
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	3b04      	subs	r3, #4
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	3301      	adds	r3, #1
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800350a:	d10c      	bne.n	8003526 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003514:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	e1ad      	b.n	8003882 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	3301      	adds	r3, #1
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <ETH_Prepare_Tx_Descriptors+0x238>)
 800353c:	4013      	ands	r3, r2
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	6852      	ldr	r2, [r2, #4]
 8003542:	431a      	orrs	r2, r3
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003566:	4013      	ands	r3, r2
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	6852      	ldr	r2, [r2, #4]
 800356c:	0412      	lsls	r2, r2, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e008      	b.n	8003588 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2200      	movs	r2, #0
 800357a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003582:	4013      	ands	r3, r2
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d021      	beq.n	80035d8 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	04db      	lsls	r3, r3, #19
 80035a2:	431a      	orrs	r2, r3
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <ETH_Prepare_Tx_Descriptors+0x240>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	69d2      	ldr	r2, [r2, #28]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	e02e      	b.n	8003626 <ETH_Prepare_Tx_Descriptors+0x292>
 80035c8:	ffff0000 	.word	0xffff0000
 80035cc:	ffffc000 	.word	0xffffc000
 80035d0:	c000ffff 	.word	0xc000ffff
 80035d4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	4b93      	ldr	r3, [pc, #588]	; (800382c <ETH_Prepare_Tx_Descriptors+0x498>)
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	6852      	ldr	r2, [r2, #4]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	431a      	orrs	r2, r3
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	431a      	orrs	r2, r3
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80cb 	beq.w	800380c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	431a      	orrs	r2, r3
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003688:	e0c0      	b.n	800380c <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	3301      	adds	r3, #1
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d902      	bls.n	80036a8 <ETH_Prepare_Tx_Descriptors+0x314>
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	3b04      	subs	r3, #4
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ca:	d007      	beq.n	80036dc <ETH_Prepare_Tx_Descriptors+0x348>
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	3304      	adds	r3, #4
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d026      	beq.n	800372a <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	e016      	b.n	800371e <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	3301      	adds	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	2b03      	cmp	r3, #3
 8003706:	d902      	bls.n	800370e <ETH_Prepare_Tx_Descriptors+0x37a>
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	3b04      	subs	r3, #4
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003716:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	3301      	adds	r3, #1
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	429a      	cmp	r2, r3
 8003724:	d3e4      	bcc.n	80036f0 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003726:	2302      	movs	r3, #2
 8003728:	e0ab      	b.n	8003882 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	3301      	adds	r3, #1
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003746:	4013      	ands	r3, r2
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	6852      	ldr	r2, [r2, #4]
 800374c:	431a      	orrs	r2, r3
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d012      	beq.n	8003780 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003770:	4013      	ands	r3, r2
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	6852      	ldr	r2, [r2, #4]
 8003776:	0412      	lsls	r2, r2, #16
 8003778:	431a      	orrs	r2, r3
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	e008      	b.n	8003792 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	2200      	movs	r2, #0
 8003784:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800378c:	4013      	ands	r3, r2
 800378e:	6a3a      	ldr	r2, [r7, #32]
 8003790:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00f      	beq.n	80037be <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	69d2      	ldr	r2, [r2, #28]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e017      	b.n	80037ee <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	4b1a      	ldr	r3, [pc, #104]	; (800382c <ETH_Prepare_Tx_Descriptors+0x498>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	6852      	ldr	r2, [r2, #4]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f af3a 	bne.w	800368a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00f      	beq.n	800383c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	e00e      	b.n	8003848 <ETH_Prepare_Tx_Descriptors+0x4b4>
 800382a:	bf00      	nop
 800382c:	ffff8000 	.word	0xffff8000
 8003830:	ffffc000 	.word	0xffffc000
 8003834:	c000ffff 	.word	0xc000ffff
 8003838:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003858:	6979      	ldr	r1, [r7, #20]
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	3304      	adds	r3, #4
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003868:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800386a:	b672      	cpsid	i
}
 800386c:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4413      	add	r3, r2
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800387c:	b662      	cpsie	i
}
 800387e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3734      	adds	r7, #52	; 0x34
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_GPIO_Init+0x12c>)
 80038a0:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a46      	ldr	r2, [pc, #280]	; (80039c0 <HAL_GPIO_Init+0x130>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a45      	ldr	r2, [pc, #276]	; (80039c4 <HAL_GPIO_Init+0x134>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d027      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a44      	ldr	r2, [pc, #272]	; (80039c8 <HAL_GPIO_Init+0x138>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d023      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a43      	ldr	r2, [pc, #268]	; (80039cc <HAL_GPIO_Init+0x13c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a42      	ldr	r2, [pc, #264]	; (80039d0 <HAL_GPIO_Init+0x140>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01b      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <HAL_GPIO_Init+0x144>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d017      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a40      	ldr	r2, [pc, #256]	; (80039d8 <HAL_GPIO_Init+0x148>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a3f      	ldr	r2, [pc, #252]	; (80039dc <HAL_GPIO_Init+0x14c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00f      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a3e      	ldr	r2, [pc, #248]	; (80039e0 <HAL_GPIO_Init+0x150>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a3d      	ldr	r2, [pc, #244]	; (80039e4 <HAL_GPIO_Init+0x154>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a3c      	ldr	r2, [pc, #240]	; (80039e8 <HAL_GPIO_Init+0x158>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x72>
 80038fa:	21bb      	movs	r1, #187	; 0xbb
 80038fc:	483b      	ldr	r0, [pc, #236]	; (80039ec <HAL_GPIO_Init+0x15c>)
 80038fe:	f7fd f9ce 	bl	8000c9e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_GPIO_Init+0x88>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_GPIO_Init+0x160>)
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x90>
 8003918:	21bc      	movs	r1, #188	; 0xbc
 800391a:	4834      	ldr	r0, [pc, #208]	; (80039ec <HAL_GPIO_Init+0x15c>)
 800391c:	f7fd f9bf 	bl	8000c9e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d035      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d031      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b11      	cmp	r3, #17
 8003936:	d02d      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d029      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b12      	cmp	r3, #18
 8003946:	d025      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_GPIO_Init+0x164>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d020      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <HAL_GPIO_Init+0x168>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01b      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_GPIO_Init+0x16c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d016      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <HAL_GPIO_Init+0x170>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d011      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a23      	ldr	r2, [pc, #140]	; (8003a04 <HAL_GPIO_Init+0x174>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00c      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_GPIO_Init+0x178>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x104>
 800398c:	21bd      	movs	r1, #189	; 0xbd
 800398e:	4817      	ldr	r0, [pc, #92]	; (80039ec <HAL_GPIO_Init+0x15c>)
 8003990:	f7fd f985 	bl	8000c9e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 821a 	beq.w	8003dd2 <HAL_GPIO_Init+0x542>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	f000 8215 	beq.w	8003dd2 <HAL_GPIO_Init+0x542>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	f000 8210 	beq.w	8003dd2 <HAL_GPIO_Init+0x542>
 80039b2:	21be      	movs	r1, #190	; 0xbe
 80039b4:	480d      	ldr	r0, [pc, #52]	; (80039ec <HAL_GPIO_Init+0x15c>)
 80039b6:	f7fd f972 	bl	8000c9e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039ba:	e20a      	b.n	8003dd2 <HAL_GPIO_Init+0x542>
 80039bc:	58000080 	.word	0x58000080
 80039c0:	58020000 	.word	0x58020000
 80039c4:	58020400 	.word	0x58020400
 80039c8:	58020800 	.word	0x58020800
 80039cc:	58020c00 	.word	0x58020c00
 80039d0:	58021000 	.word	0x58021000
 80039d4:	58021400 	.word	0x58021400
 80039d8:	58021800 	.word	0x58021800
 80039dc:	58021c00 	.word	0x58021c00
 80039e0:	58022000 	.word	0x58022000
 80039e4:	58022400 	.word	0x58022400
 80039e8:	58022800 	.word	0x58022800
 80039ec:	080190f0 	.word	0x080190f0
 80039f0:	ffff0000 	.word	0xffff0000
 80039f4:	11110000 	.word	0x11110000
 80039f8:	11210000 	.word	0x11210000
 80039fc:	11310000 	.word	0x11310000
 8003a00:	11120000 	.word	0x11120000
 8003a04:	11220000 	.word	0x11220000
 8003a08:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2101      	movs	r1, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 81d4 	beq.w	8003dcc <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d00b      	beq.n	8003a44 <HAL_GPIO_Init+0x1b4>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d007      	beq.n	8003a44 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a38:	2b11      	cmp	r3, #17
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b12      	cmp	r3, #18
 8003a42:	d144      	bne.n	8003ace <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00f      	beq.n	8003a6c <HAL_GPIO_Init+0x1dc>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d00b      	beq.n	8003a6c <HAL_GPIO_Init+0x1dc>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x1dc>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_Init+0x1dc>
 8003a64:	21ce      	movs	r1, #206	; 0xce
 8003a66:	4897      	ldr	r0, [pc, #604]	; (8003cc4 <HAL_GPIO_Init+0x434>)
 8003a68:	f7fd f919 	bl	8000c9e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2203      	movs	r2, #3
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 0201 	and.w	r2, r3, #1
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2203      	movs	r2, #3
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x27e>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b12      	cmp	r3, #18
 8003b0c:	d15b      	bne.n	8003bc6 <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a6d      	ldr	r2, [pc, #436]	; (8003cc8 <HAL_GPIO_Init+0x438>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d02b      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a6c      	ldr	r2, [pc, #432]	; (8003ccc <HAL_GPIO_Init+0x43c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d027      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a6b      	ldr	r2, [pc, #428]	; (8003cd0 <HAL_GPIO_Init+0x440>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d023      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <HAL_GPIO_Init+0x444>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01f      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_GPIO_Init+0x448>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01b      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a68      	ldr	r2, [pc, #416]	; (8003cdc <HAL_GPIO_Init+0x44c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d017      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a67      	ldr	r2, [pc, #412]	; (8003ce0 <HAL_GPIO_Init+0x450>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a66      	ldr	r2, [pc, #408]	; (8003ce4 <HAL_GPIO_Init+0x454>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00f      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a65      	ldr	r2, [pc, #404]	; (8003ce8 <HAL_GPIO_Init+0x458>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00b      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a64      	ldr	r2, [pc, #400]	; (8003cec <HAL_GPIO_Init+0x45c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a63      	ldr	r2, [pc, #396]	; (8003cf0 <HAL_GPIO_Init+0x460>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x2de>
 8003b66:	21e6      	movs	r1, #230	; 0xe6
 8003b68:	4856      	ldr	r0, [pc, #344]	; (8003cc4 <HAL_GPIO_Init+0x434>)
 8003b6a:	f7fd f898 	bl	8000c9e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d903      	bls.n	8003b7e <HAL_GPIO_Init+0x2ee>
 8003b76:	21e7      	movs	r1, #231	; 0xe7
 8003b78:	4852      	ldr	r0, [pc, #328]	; (8003cc4 <HAL_GPIO_Init+0x434>)
 8003b7a:	f7fd f890 	bl	8000c9e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	08da      	lsrs	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3208      	adds	r2, #8
 8003b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	220f      	movs	r2, #15
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	08da      	lsrs	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3208      	adds	r2, #8
 8003bc0:	69b9      	ldr	r1, [r7, #24]
 8003bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0203 	and.w	r2, r3, #3
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80e2 	beq.w	8003dcc <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c08:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_GPIO_Init+0x464>)
 8003c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c0e:	4a39      	ldr	r2, [pc, #228]	; (8003cf4 <HAL_GPIO_Init+0x464>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_GPIO_Init+0x464>)
 8003c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c26:	4a34      	ldr	r2, [pc, #208]	; (8003cf8 <HAL_GPIO_Init+0x468>)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <HAL_GPIO_Init+0x438>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d054      	beq.n	8003cfc <HAL_GPIO_Init+0x46c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <HAL_GPIO_Init+0x43c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_GPIO_Init+0x42e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_GPIO_Init+0x440>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02b      	beq.n	8003cba <HAL_GPIO_Init+0x42a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_GPIO_Init+0x444>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d025      	beq.n	8003cb6 <HAL_GPIO_Init+0x426>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <HAL_GPIO_Init+0x448>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_GPIO_Init+0x422>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_GPIO_Init+0x44c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d019      	beq.n	8003cae <HAL_GPIO_Init+0x41e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <HAL_GPIO_Init+0x450>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0x41a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <HAL_GPIO_Init+0x454>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00d      	beq.n	8003ca6 <HAL_GPIO_Init+0x416>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_GPIO_Init+0x458>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <HAL_GPIO_Init+0x412>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <HAL_GPIO_Init+0x45c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_GPIO_Init+0x40e>
 8003c9a:	2309      	movs	r3, #9
 8003c9c:	e02f      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	e02d      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	e02b      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	e029      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003caa:	2306      	movs	r3, #6
 8003cac:	e027      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003cae:	2305      	movs	r3, #5
 8003cb0:	e025      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e023      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e021      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e01f      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e01d      	b.n	8003cfe <HAL_GPIO_Init+0x46e>
 8003cc2:	bf00      	nop
 8003cc4:	080190f0 	.word	0x080190f0
 8003cc8:	58020000 	.word	0x58020000
 8003ccc:	58020400 	.word	0x58020400
 8003cd0:	58020800 	.word	0x58020800
 8003cd4:	58020c00 	.word	0x58020c00
 8003cd8:	58021000 	.word	0x58021000
 8003cdc:	58021400 	.word	0x58021400
 8003ce0:	58021800 	.word	0x58021800
 8003ce4:	58021c00 	.word	0x58021c00
 8003ce8:	58022000 	.word	0x58022000
 8003cec:	58022400 	.word	0x58022400
 8003cf0:	58022800 	.word	0x58022800
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58000400 	.word	0x58000400
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	f002 0203 	and.w	r2, r2, #3
 8003d04:	0092      	lsls	r2, r2, #2
 8003d06:	4093      	lsls	r3, r2
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d0e:	4937      	ldr	r1, [pc, #220]	; (8003dec <HAL_GPIO_Init+0x55c>)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	3302      	adds	r3, #2
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f ae15 	bne.w	8003a0c <HAL_GPIO_Init+0x17c>
  }
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	58000400 	.word	0x58000400

08003df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_GPIO_WritePin+0x20>
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_GPIO_WritePin+0x60>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <HAL_GPIO_WritePin+0x2a>
 8003e10:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003e14:	480f      	ldr	r0, [pc, #60]	; (8003e54 <HAL_GPIO_WritePin+0x64>)
 8003e16:	f7fc ff42 	bl	8000c9e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003e1a:	787b      	ldrb	r3, [r7, #1]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <HAL_GPIO_WritePin+0x40>
 8003e20:	787b      	ldrb	r3, [r7, #1]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d004      	beq.n	8003e30 <HAL_GPIO_WritePin+0x40>
 8003e26:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003e2a:	480a      	ldr	r0, [pc, #40]	; (8003e54 <HAL_GPIO_WritePin+0x64>)
 8003e2c:	f7fc ff37 	bl	8000c9e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003e30:	787b      	ldrb	r3, [r7, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e3c:	e003      	b.n	8003e46 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	041a      	lsls	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	ffff0000 	.word	0xffff0000
 8003e54:	080190f0 	.word	0x080190f0

08003e58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_GPIO_TogglePin+0x1c>
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_GPIO_TogglePin+0x4c>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_GPIO_TogglePin+0x26>
 8003e74:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003e78:	480b      	ldr	r0, [pc, #44]	; (8003ea8 <HAL_GPIO_TogglePin+0x50>)
 8003e7a:	f7fc ff10 	bl	8000c9e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e84:	887a      	ldrh	r2, [r7, #2]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	041a      	lsls	r2, r3, #16
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	43d9      	mvns	r1, r3
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	400b      	ands	r3, r1
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	619a      	str	r2, [r3, #24]
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	ffff0000 	.word	0xffff0000
 8003ea8:	080190f0 	.word	0x080190f0

08003eac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d007      	beq.n	8003eca <HAL_PWREx_ConfigSupply+0x1e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d004      	beq.n	8003eca <HAL_PWREx_ConfigSupply+0x1e>
 8003ec0:	f240 113f 	movw	r1, #319	; 0x13f
 8003ec4:	481a      	ldr	r0, [pc, #104]	; (8003f30 <HAL_PWREx_ConfigSupply+0x84>)
 8003ec6:	f7fc feea 	bl	8000c9e <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_PWREx_ConfigSupply+0x88>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d00a      	beq.n	8003eec <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ed6:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_PWREx_ConfigSupply+0x88>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e01f      	b.n	8003f28 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e01d      	b.n	8003f28 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_PWREx_ConfigSupply+0x88>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f023 0207 	bic.w	r2, r3, #7
 8003ef4:	490f      	ldr	r1, [pc, #60]	; (8003f34 <HAL_PWREx_ConfigSupply+0x88>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003efc:	f7fd fb24 	bl	8001548 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f02:	e009      	b.n	8003f18 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f04:	f7fd fb20 	bl	8001548 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f12:	d901      	bls.n	8003f18 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_PWREx_ConfigSupply+0x88>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f24:	d1ee      	bne.n	8003f04 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	0801912c 	.word	0x0801912c
 8003f34:	58024800 	.word	0x58024800

08003f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f000 bd47 	b.w	80049da <HAL_RCC_OscConfig+0xaa2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d028      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x6e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d122      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x6e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11c      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x6e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d116      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x6e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d110      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x6e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x6e>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x6e>
 8003f9c:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003fa0:	489b      	ldr	r0, [pc, #620]	; (8004210 <HAL_RCC_OscConfig+0x2d8>)
 8003fa2:	f7fc fe7c 	bl	8000c9e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 809d 	beq.w	80040ee <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_RCC_OscConfig+0xa2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_OscConfig+0xa2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fce:	d004      	beq.n	8003fda <HAL_RCC_OscConfig+0xa2>
 8003fd0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8003fd4:	488e      	ldr	r0, [pc, #568]	; (8004210 <HAL_RCC_OscConfig+0x2d8>)
 8003fd6:	f7fc fe62 	bl	8000c9e <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fda:	4b8e      	ldr	r3, [pc, #568]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fe4:	4b8b      	ldr	r3, [pc, #556]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d007      	beq.n	8004000 <HAL_RCC_OscConfig+0xc8>
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	2b18      	cmp	r3, #24
 8003ff4:	d111      	bne.n	800401a <HAL_RCC_OscConfig+0xe2>
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	4b84      	ldr	r3, [pc, #528]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d06f      	beq.n	80040ec <HAL_RCC_OscConfig+0x1b4>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d16b      	bne.n	80040ec <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f000 bce0 	b.w	80049da <HAL_RCC_OscConfig+0xaa2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004022:	d106      	bne.n	8004032 <HAL_RCC_OscConfig+0xfa>
 8004024:	4b7b      	ldr	r3, [pc, #492]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a7a      	ldr	r2, [pc, #488]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800402a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	e02e      	b.n	8004090 <HAL_RCC_OscConfig+0x158>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x11c>
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a75      	ldr	r2, [pc, #468]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b73      	ldr	r3, [pc, #460]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a72      	ldr	r2, [pc, #456]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800404c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e01d      	b.n	8004090 <HAL_RCC_OscConfig+0x158>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x140>
 800405e:	4b6d      	ldr	r3, [pc, #436]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6c      	ldr	r2, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a69      	ldr	r2, [pc, #420]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e00b      	b.n	8004090 <HAL_RCC_OscConfig+0x158>
 8004078:	4b66      	ldr	r3, [pc, #408]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a65      	ldr	r2, [pc, #404]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800407e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a62      	ldr	r2, [pc, #392]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800408a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d014      	beq.n	80040c2 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd fa56 	bl	8001548 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800409e:	e009      	b.n	80040b4 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a0:	f7fd fa52 	bl	8001548 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d902      	bls.n	80040b4 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	f000 bc93 	b.w	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040b4:	4b57      	ldr	r3, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ef      	beq.n	80040a0 <HAL_RCC_OscConfig+0x168>
 80040c0:	e015      	b.n	80040ee <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd fa41 	bl	8001548 <HAL_GetTick>
 80040c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040c8:	e009      	b.n	80040de <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ca:	f7fd fa3d 	bl	8001548 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b64      	cmp	r3, #100	; 0x64
 80040d6:	d902      	bls.n	80040de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	f000 bc7e 	b.w	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040de:	4b4d      	ldr	r3, [pc, #308]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ef      	bne.n	80040ca <HAL_RCC_OscConfig+0x192>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80d7 	beq.w	80042aa <HAL_RCC_OscConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_RCC_OscConfig+0x1fe>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d014      	beq.n	8004136 <HAL_RCC_OscConfig+0x1fe>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d010      	beq.n	8004136 <HAL_RCC_OscConfig+0x1fe>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b09      	cmp	r3, #9
 800411a:	d00c      	beq.n	8004136 <HAL_RCC_OscConfig+0x1fe>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b11      	cmp	r3, #17
 8004122:	d008      	beq.n	8004136 <HAL_RCC_OscConfig+0x1fe>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b19      	cmp	r3, #25
 800412a:	d004      	beq.n	8004136 <HAL_RCC_OscConfig+0x1fe>
 800412c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004130:	4837      	ldr	r0, [pc, #220]	; (8004210 <HAL_RCC_OscConfig+0x2d8>)
 8004132:	f7fc fdb4 	bl	8000c9e <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b7f      	cmp	r3, #127	; 0x7f
 800413c:	d904      	bls.n	8004148 <HAL_RCC_OscConfig+0x210>
 800413e:	f240 11dd 	movw	r1, #477	; 0x1dd
 8004142:	4833      	ldr	r0, [pc, #204]	; (8004210 <HAL_RCC_OscConfig+0x2d8>)
 8004144:	f7fc fdab 	bl	8000c9e <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004148:	4b32      	ldr	r3, [pc, #200]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004150:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004152:	4b30      	ldr	r3, [pc, #192]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_RCC_OscConfig+0x236>
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	2b18      	cmp	r3, #24
 8004162:	d13b      	bne.n	80041dc <HAL_RCC_OscConfig+0x2a4>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d136      	bne.n	80041dc <HAL_RCC_OscConfig+0x2a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416e:	4b29      	ldr	r3, [pc, #164]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <HAL_RCC_OscConfig+0x250>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f000 bc29 	b.w	80049da <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004188:	f7fd f9ea 	bl	8001560 <HAL_GetREVID>
 800418c:	4603      	mov	r3, r0
 800418e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004192:	4293      	cmp	r3, r2
 8004194:	d817      	bhi.n	80041c6 <HAL_RCC_OscConfig+0x28e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d108      	bne.n	80041b0 <HAL_RCC_OscConfig+0x278>
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ae:	e07c      	b.n	80042aa <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	4915      	ldr	r1, [pc, #84]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c4:	e071      	b.n	80042aa <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	490f      	ldr	r1, [pc, #60]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041da:	e066      	b.n	80042aa <HAL_RCC_OscConfig+0x372>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d049      	beq.n	8004278 <HAL_RCC_OscConfig+0x340>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 0219 	bic.w	r2, r3, #25
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4908      	ldr	r1, [pc, #32]	; (8004214 <HAL_RCC_OscConfig+0x2dc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fd f9a7 	bl	8001548 <HAL_GetTick>
 80041fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041fc:	e00c      	b.n	8004218 <HAL_RCC_OscConfig+0x2e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fd f9a3 	bl	8001548 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d905      	bls.n	8004218 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e3e4      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
 8004210:	08019168 	.word	0x08019168
 8004214:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004218:	4ba4      	ldr	r3, [pc, #656]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ec      	beq.n	80041fe <HAL_RCC_OscConfig+0x2c6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	f7fd f99c 	bl	8001560 <HAL_GetREVID>
 8004228:	4603      	mov	r3, r0
 800422a:	f241 0203 	movw	r2, #4099	; 0x1003
 800422e:	4293      	cmp	r3, r2
 8004230:	d817      	bhi.n	8004262 <HAL_RCC_OscConfig+0x32a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d108      	bne.n	800424c <HAL_RCC_OscConfig+0x314>
 800423a:	4b9c      	ldr	r3, [pc, #624]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004242:	4a9a      	ldr	r2, [pc, #616]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	6053      	str	r3, [r2, #4]
 800424a:	e02e      	b.n	80042aa <HAL_RCC_OscConfig+0x372>
 800424c:	4b97      	ldr	r3, [pc, #604]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	031b      	lsls	r3, r3, #12
 800425a:	4994      	ldr	r1, [pc, #592]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
 8004260:	e023      	b.n	80042aa <HAL_RCC_OscConfig+0x372>
 8004262:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	498e      	ldr	r1, [pc, #568]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
 8004276:	e018      	b.n	80042aa <HAL_RCC_OscConfig+0x372>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004278:	4b8c      	ldr	r3, [pc, #560]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a8b      	ldr	r2, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd f960 	bl	8001548 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800428c:	f7fd f95c 	bl	8001548 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e39d      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800429e:	4b83      	ldr	r3, [pc, #524]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x354>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80bf 	beq.w	8004436 <HAL_RCC_OscConfig+0x4fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_OscConfig+0x39a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d004      	beq.n	80042d2 <HAL_RCC_OscConfig+0x39a>
 80042c8:	f240 211f 	movw	r1, #543	; 0x21f
 80042cc:	4878      	ldr	r0, [pc, #480]	; (80044b0 <HAL_RCC_OscConfig+0x578>)
 80042ce:	f7fc fce6 	bl	8000c9e <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	2b3f      	cmp	r3, #63	; 0x3f
 80042d8:	d904      	bls.n	80042e4 <HAL_RCC_OscConfig+0x3ac>
 80042da:	f44f 7108 	mov.w	r1, #544	; 0x220
 80042de:	4874      	ldr	r0, [pc, #464]	; (80044b0 <HAL_RCC_OscConfig+0x578>)
 80042e0:	f7fc fcdd 	bl	8000c9e <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e4:	4b71      	ldr	r3, [pc, #452]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042ee:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d007      	beq.n	800430a <HAL_RCC_OscConfig+0x3d2>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b18      	cmp	r3, #24
 80042fe:	d13a      	bne.n	8004376 <HAL_RCC_OscConfig+0x43e>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d135      	bne.n	8004376 <HAL_RCC_OscConfig+0x43e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800430a:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_RCC_OscConfig+0x3ea>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d001      	beq.n	8004322 <HAL_RCC_OscConfig+0x3ea>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e35b      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004322:	f7fd f91d 	bl	8001560 <HAL_GetREVID>
 8004326:	4603      	mov	r3, r0
 8004328:	f241 0203 	movw	r2, #4099	; 0x1003
 800432c:	4293      	cmp	r3, r2
 800432e:	d817      	bhi.n	8004360 <HAL_RCC_OscConfig+0x428>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	2b20      	cmp	r3, #32
 8004336:	d108      	bne.n	800434a <HAL_RCC_OscConfig+0x412>
 8004338:	4b5c      	ldr	r3, [pc, #368]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004340:	4a5a      	ldr	r2, [pc, #360]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004346:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004348:	e075      	b.n	8004436 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800434a:	4b58      	ldr	r3, [pc, #352]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	069b      	lsls	r3, r3, #26
 8004358:	4954      	ldr	r1, [pc, #336]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800435e:	e06a      	b.n	8004436 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004360:	4b52      	ldr	r3, [pc, #328]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	494f      	ldr	r1, [pc, #316]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004370:	4313      	orrs	r3, r2
 8004372:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004374:	e05f      	b.n	8004436 <HAL_RCC_OscConfig+0x4fe>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d042      	beq.n	8004404 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800437e:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a4a      	ldr	r2, [pc, #296]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fd f8dd 	bl	8001548 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004392:	f7fd f8d9 	bl	8001548 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e31a      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a4:	4b41      	ldr	r3, [pc, #260]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x45a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043b0:	f7fd f8d6 	bl	8001560 <HAL_GetREVID>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d817      	bhi.n	80043ee <HAL_RCC_OscConfig+0x4b6>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d108      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4a0>
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043ce:	4a37      	ldr	r2, [pc, #220]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80043d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043d4:	6053      	str	r3, [r2, #4]
 80043d6:	e02e      	b.n	8004436 <HAL_RCC_OscConfig+0x4fe>
 80043d8:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	069b      	lsls	r3, r3, #26
 80043e6:	4931      	ldr	r1, [pc, #196]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
 80043ec:	e023      	b.n	8004436 <HAL_RCC_OscConfig+0x4fe>
 80043ee:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	061b      	lsls	r3, r3, #24
 80043fc:	492b      	ldr	r1, [pc, #172]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	60cb      	str	r3, [r1, #12]
 8004402:	e018      	b.n	8004436 <HAL_RCC_OscConfig+0x4fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a28      	ldr	r2, [pc, #160]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800440a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd f89a 	bl	8001548 <HAL_GetTick>
 8004414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x4f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004418:	f7fd f896 	bl	8001548 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x4f2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e2d7      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d047      	beq.n	80044d2 <HAL_RCC_OscConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_RCC_OscConfig+0x524>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d004      	beq.n	800445c <HAL_RCC_OscConfig+0x524>
 8004452:	f240 2161 	movw	r1, #609	; 0x261
 8004456:	4816      	ldr	r0, [pc, #88]	; (80044b0 <HAL_RCC_OscConfig+0x578>)
 8004458:	f7fc fc21 	bl	8000c9e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d019      	beq.n	8004498 <HAL_RCC_OscConfig+0x560>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	4a10      	ldr	r2, [pc, #64]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fd f86a 	bl	8001548 <HAL_GetTick>
 8004474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004478:	f7fd f866 	bl	8001548 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e2a7      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x540>
 8004496:	e01c      	b.n	80044d2 <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	4a03      	ldr	r2, [pc, #12]	; (80044ac <HAL_RCC_OscConfig+0x574>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fd f850 	bl	8001548 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044aa:	e00c      	b.n	80044c6 <HAL_RCC_OscConfig+0x58e>
 80044ac:	58024400 	.word	0x58024400
 80044b0:	08019168 	.word	0x08019168
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fd f848 	bl	8001548 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e289      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044c6:	4b71      	ldr	r3, [pc, #452]	; (800468c <HAL_RCC_OscConfig+0x754>)
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x57c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d043      	beq.n	8004566 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5c0>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d004      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5c0>
 80044ee:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80044f2:	4867      	ldr	r0, [pc, #412]	; (8004690 <HAL_RCC_OscConfig+0x758>)
 80044f4:	f7fc fbd3 	bl	8000c9e <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d019      	beq.n	8004534 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004500:	4b62      	ldr	r3, [pc, #392]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a61      	ldr	r2, [pc, #388]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800450a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800450c:	f7fd f81c 	bl	8001548 <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x5ee>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004514:	f7fd f818 	bl	8001548 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e259      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004526:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x5dc>
 8004532:	e018      	b.n	8004566 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004534:	4b55      	ldr	r3, [pc, #340]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a54      	ldr	r2, [pc, #336]	; (800468c <HAL_RCC_OscConfig+0x754>)
 800453a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004540:	f7fd f802 	bl	8001548 <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004548:	f7fc fffe 	bl	8001548 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e23f      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800455a:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCC_OscConfig+0x754>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8098 	beq.w	80046a4 <HAL_RCC_OscConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00c      	beq.n	8004596 <HAL_RCC_OscConfig+0x65e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d008      	beq.n	8004596 <HAL_RCC_OscConfig+0x65e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d004      	beq.n	8004596 <HAL_RCC_OscConfig+0x65e>
 800458c:	f240 21b6 	movw	r1, #694	; 0x2b6
 8004590:	483f      	ldr	r0, [pc, #252]	; (8004690 <HAL_RCC_OscConfig+0x758>)
 8004592:	f7fc fb84 	bl	8000c9e <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004596:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <HAL_RCC_OscConfig+0x75c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a3e      	ldr	r2, [pc, #248]	; (8004694 <HAL_RCC_OscConfig+0x75c>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a2:	f7fc ffd1 	bl	8001548 <HAL_GetTick>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x684>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fc ffcd 	bl	8001548 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b64      	cmp	r3, #100	; 0x64
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x684>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e20e      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045bc:	4b35      	ldr	r3, [pc, #212]	; (8004694 <HAL_RCC_OscConfig+0x75c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x672>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x6a6>
 80045d0:	4b2e      	ldr	r3, [pc, #184]	; (800468c <HAL_RCC_OscConfig+0x754>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a2d      	ldr	r2, [pc, #180]	; (800468c <HAL_RCC_OscConfig+0x754>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	e02d      	b.n	800463a <HAL_RCC_OscConfig+0x702>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x6c8>
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_RCC_OscConfig+0x754>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <HAL_RCC_OscConfig+0x754>)
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	6713      	str	r3, [r2, #112]	; 0x70
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_RCC_OscConfig+0x754>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a25      	ldr	r2, [pc, #148]	; (800468c <HAL_RCC_OscConfig+0x754>)
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
 80045fe:	e01c      	b.n	800463a <HAL_RCC_OscConfig+0x702>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b05      	cmp	r3, #5
 8004606:	d10c      	bne.n	8004622 <HAL_RCC_OscConfig+0x6ea>
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_RCC_OscConfig+0x754>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	4a1f      	ldr	r2, [pc, #124]	; (800468c <HAL_RCC_OscConfig+0x754>)
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	6713      	str	r3, [r2, #112]	; 0x70
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_RCC_OscConfig+0x754>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	; 0x70
 8004620:	e00b      	b.n	800463a <HAL_RCC_OscConfig+0x702>
 8004622:	4b1a      	ldr	r3, [pc, #104]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	4a19      	ldr	r2, [pc, #100]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	6713      	str	r3, [r2, #112]	; 0x70
 800462e:	4b17      	ldr	r3, [pc, #92]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a16      	ldr	r2, [pc, #88]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d015      	beq.n	800466e <HAL_RCC_OscConfig+0x736>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fc ff81 	bl	8001548 <HAL_GetTick>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x728>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fc ff7d 	bl	8001548 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1bc      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <HAL_RCC_OscConfig+0x754>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ee      	beq.n	800464a <HAL_RCC_OscConfig+0x712>
 800466c:	e01a      	b.n	80046a4 <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fc ff6b 	bl	8001548 <HAL_GetTick>
 8004672:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004674:	e010      	b.n	8004698 <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fc ff67 	bl	8001548 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	; 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d907      	bls.n	8004698 <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e1a6      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
 800468c:	58024400 	.word	0x58024400
 8004690:	08019168 	.word	0x08019168
 8004694:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004698:	4b9f      	ldr	r3, [pc, #636]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e8      	bne.n	8004676 <HAL_RCC_OscConfig+0x73e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x78e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_OscConfig+0x78e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d004      	beq.n	80046c6 <HAL_RCC_OscConfig+0x78e>
 80046bc:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80046c0:	4896      	ldr	r0, [pc, #600]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 80046c2:	f7fc faec 	bl	8000c9e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8184 	beq.w	80049d8 <HAL_RCC_OscConfig+0xaa0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046d0:	4b91      	ldr	r3, [pc, #580]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d8:	2b18      	cmp	r3, #24
 80046da:	f000 813f 	beq.w	800495c <HAL_RCC_OscConfig+0xa24>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	f040 8120 	bne.w	8004928 <HAL_RCC_OscConfig+0x9f0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_OscConfig+0x7da>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_RCC_OscConfig+0x7da>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_OscConfig+0x7da>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	2b02      	cmp	r3, #2
 8004706:	d004      	beq.n	8004712 <HAL_RCC_OscConfig+0x7da>
 8004708:	f240 21f1 	movw	r1, #753	; 0x2f1
 800470c:	4883      	ldr	r0, [pc, #524]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 800470e:	f7fc fac6 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d010      	beq.n	800473c <HAL_RCC_OscConfig+0x804>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	2b04      	cmp	r3, #4
 8004720:	d00c      	beq.n	800473c <HAL_RCC_OscConfig+0x804>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b08      	cmp	r3, #8
 8004728:	d008      	beq.n	800473c <HAL_RCC_OscConfig+0x804>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d004      	beq.n	800473c <HAL_RCC_OscConfig+0x804>
 8004732:	f240 21f2 	movw	r1, #754	; 0x2f2
 8004736:	4879      	ldr	r0, [pc, #484]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 8004738:	f7fc fab1 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_OscConfig+0x81e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	2b02      	cmp	r3, #2
 800474a:	d004      	beq.n	8004756 <HAL_RCC_OscConfig+0x81e>
 800474c:	f240 21f3 	movw	r1, #755	; 0x2f3
 8004750:	4872      	ldr	r0, [pc, #456]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 8004752:	f7fc faa4 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_RCC_OscConfig+0x82e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	2b3f      	cmp	r3, #63	; 0x3f
 8004764:	d904      	bls.n	8004770 <HAL_RCC_OscConfig+0x838>
 8004766:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800476a:	486c      	ldr	r0, [pc, #432]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 800476c:	f7fc fa97 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	2b03      	cmp	r3, #3
 8004776:	d904      	bls.n	8004782 <HAL_RCC_OscConfig+0x84a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004780:	d904      	bls.n	800478c <HAL_RCC_OscConfig+0x854>
 8004782:	f240 21f5 	movw	r1, #757	; 0x2f5
 8004786:	4865      	ldr	r0, [pc, #404]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 8004788:	f7fc fa89 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_RCC_OscConfig+0x864>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	2b80      	cmp	r3, #128	; 0x80
 800479a:	d904      	bls.n	80047a6 <HAL_RCC_OscConfig+0x86e>
 800479c:	f240 21f6 	movw	r1, #758	; 0x2f6
 80047a0:	485e      	ldr	r0, [pc, #376]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 80047a2:	f7fc fa7c 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_OscConfig+0x87e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	2b80      	cmp	r3, #128	; 0x80
 80047b4:	d904      	bls.n	80047c0 <HAL_RCC_OscConfig+0x888>
 80047b6:	f240 21f7 	movw	r1, #759	; 0x2f7
 80047ba:	4858      	ldr	r0, [pc, #352]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 80047bc:	f7fc fa6f 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_RCC_OscConfig+0x898>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d904      	bls.n	80047da <HAL_RCC_OscConfig+0x8a2>
 80047d0:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80047d4:	4851      	ldr	r0, [pc, #324]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 80047d6:	f7fc fa62 	bl	8000c9e <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e2:	d304      	bcc.n	80047ee <HAL_RCC_OscConfig+0x8b6>
 80047e4:	f240 21f9 	movw	r1, #761	; 0x2f9
 80047e8:	484c      	ldr	r0, [pc, #304]	; (800491c <HAL_RCC_OscConfig+0x9e4>)
 80047ea:	f7fc fa58 	bl	8000c9e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a49      	ldr	r2, [pc, #292]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80047f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fc fea5 	bl	8001548 <HAL_GetTick>
 80047fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x8dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004802:	f7fc fea1 	bl	8001548 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x8dc>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0e2      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004814:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x8ca>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004820:	4b3d      	ldr	r3, [pc, #244]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 8004822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004824:	4b3e      	ldr	r3, [pc, #248]	; (8004920 <HAL_RCC_OscConfig+0x9e8>)
 8004826:	4013      	ands	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004830:	0112      	lsls	r2, r2, #4
 8004832:	430a      	orrs	r2, r1
 8004834:	4938      	ldr	r1, [pc, #224]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	628b      	str	r3, [r1, #40]	; 0x28
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	3b01      	subs	r3, #1
 8004840:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	3b01      	subs	r3, #1
 800484a:	025b      	lsls	r3, r3, #9
 800484c:	b29b      	uxth	r3, r3
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	3b01      	subs	r3, #1
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	3b01      	subs	r3, #1
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800486a:	492b      	ldr	r1, [pc, #172]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004870:	4b29      	ldr	r3, [pc, #164]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800487c:	4b26      	ldr	r3, [pc, #152]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 800487e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004880:	4b28      	ldr	r3, [pc, #160]	; (8004924 <HAL_RCC_OscConfig+0x9ec>)
 8004882:	4013      	ands	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004888:	00d2      	lsls	r2, r2, #3
 800488a:	4923      	ldr	r1, [pc, #140]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 800488c:	4313      	orrs	r3, r2
 800488e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004890:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	f023 020c 	bic.w	r2, r3, #12
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	491e      	ldr	r1, [pc, #120]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f023 0202 	bic.w	r2, r3, #2
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	491a      	ldr	r1, [pc, #104]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048b4:	4b18      	ldr	r3, [pc, #96]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	4a14      	ldr	r2, [pc, #80]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048cc:	4b12      	ldr	r3, [pc, #72]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 80048ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fc fe2a 	bl	8001548 <HAL_GetTick>
 80048f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fc fe26 	bl	8001548 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e067      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800490a:	4b03      	ldr	r3, [pc, #12]	; (8004918 <HAL_RCC_OscConfig+0x9e0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x9c0>
 8004916:	e05f      	b.n	80049d8 <HAL_RCC_OscConfig+0xaa0>
 8004918:	58024400 	.word	0x58024400
 800491c:	08019168 	.word	0x08019168
 8004920:	fffffc0c 	.word	0xfffffc0c
 8004924:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004928:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <HAL_RCC_OscConfig+0xaac>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <HAL_RCC_OscConfig+0xaac>)
 800492e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc fe08 	bl	8001548 <HAL_GetTick>
 8004938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xa16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493c:	f7fc fe04 	bl	8001548 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xa16>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e045      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800494e:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_OscConfig+0xaac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0xa04>
 800495a:	e03d      	b.n	80049d8 <HAL_RCC_OscConfig+0xaa0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_RCC_OscConfig+0xaac>)
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_OscConfig+0xaac>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b01      	cmp	r3, #1
 800496e:	d031      	beq.n	80049d4 <HAL_RCC_OscConfig+0xa9c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f003 0203 	and.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d12a      	bne.n	80049d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	429a      	cmp	r2, r3
 800498c:	d122      	bne.n	80049d4 <HAL_RCC_OscConfig+0xa9c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d11a      	bne.n	80049d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	0a5b      	lsrs	r3, r3, #9
 80049a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d111      	bne.n	80049d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d108      	bne.n	80049d4 <HAL_RCC_OscConfig+0xa9c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	0e1b      	lsrs	r3, r3, #24
 80049c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_OscConfig+0xaa0>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0xaa2>
      }
    }
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3730      	adds	r7, #48	; 0x30
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400

080049e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e354      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x24>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b3f      	cmp	r3, #63	; 0x3f
 8004a0a:	d904      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x2e>
 8004a0c:	f240 3186 	movw	r1, #902	; 0x386
 8004a10:	4827      	ldr	r0, [pc, #156]	; (8004ab0 <HAL_RCC_ClockConfig+0xc8>)
 8004a12:	f7fc f944 	bl	8000c9e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d031      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d02e      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d02b      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d028      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d025      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d022      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d01f      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b07      	cmp	r3, #7
 8004a44:	d01c      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d019      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	d016      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b0a      	cmp	r3, #10
 8004a56:	d013      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b0b      	cmp	r3, #11
 8004a5c:	d010      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b0c      	cmp	r3, #12
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b0d      	cmp	r3, #13
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b0e      	cmp	r3, #14
 8004a6e:	d007      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b0f      	cmp	r3, #15
 8004a74:	d004      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x98>
 8004a76:	f240 3187 	movw	r1, #903	; 0x387
 8004a7a:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <HAL_RCC_ClockConfig+0xc8>)
 8004a7c:	f7fc f90f 	bl	8000c9e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <HAL_RCC_ClockConfig+0xcc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d914      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <HAL_RCC_ClockConfig+0xcc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 020f 	bic.w	r2, r3, #15
 8004a96:	4907      	ldr	r1, [pc, #28]	; (8004ab4 <HAL_RCC_ClockConfig+0xcc>)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_ClockConfig+0xcc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e2fa      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
 8004ab0:	08019168 	.word	0x08019168
 8004ab4:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d029      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	4b9a      	ldr	r3, [pc, #616]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d921      	bls.n	8004b18 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d014      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x11e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d010      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x11e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b50      	cmp	r3, #80	; 0x50
 8004aea:	d00c      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x11e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b60      	cmp	r3, #96	; 0x60
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x11e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b70      	cmp	r3, #112	; 0x70
 8004afa:	d004      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x11e>
 8004afc:	f240 31a3 	movw	r1, #931	; 0x3a3
 8004b00:	488d      	ldr	r0, [pc, #564]	; (8004d38 <HAL_RCC_ClockConfig+0x350>)
 8004b02:	f7fc f8cc 	bl	8000c9e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b06:	4b8b      	ldr	r3, [pc, #556]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	4988      	ldr	r1, [pc, #544]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d029      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	4b82      	ldr	r3, [pc, #520]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d921      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d014      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x17e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x17e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	2b50      	cmp	r3, #80	; 0x50
 8004b4a:	d00c      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x17e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b60      	cmp	r3, #96	; 0x60
 8004b52:	d008      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x17e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	2b70      	cmp	r3, #112	; 0x70
 8004b5a:	d004      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x17e>
 8004b5c:	f240 31b5 	movw	r1, #949	; 0x3b5
 8004b60:	4875      	ldr	r0, [pc, #468]	; (8004d38 <HAL_RCC_ClockConfig+0x350>)
 8004b62:	f7fc f89c 	bl	8000c9e <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b66:	4b73      	ldr	r3, [pc, #460]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	4970      	ldr	r1, [pc, #448]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02d      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	4b6a      	ldr	r3, [pc, #424]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d925      	bls.n	8004be0 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d018      	beq.n	8004bce <HAL_RCC_ClockConfig+0x1e6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba4:	d013      	beq.n	8004bce <HAL_RCC_ClockConfig+0x1e6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004bae:	d00e      	beq.n	8004bce <HAL_RCC_ClockConfig+0x1e6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x1e6>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc2:	d004      	beq.n	8004bce <HAL_RCC_ClockConfig+0x1e6>
 8004bc4:	f240 31c6 	movw	r1, #966	; 0x3c6
 8004bc8:	485b      	ldr	r0, [pc, #364]	; (8004d38 <HAL_RCC_ClockConfig+0x350>)
 8004bca:	f7fc f868 	bl	8000c9e <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bce:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	4956      	ldr	r1, [pc, #344]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d029      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d921      	bls.n	8004c40 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d014      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x246>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d010      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x246>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	2b50      	cmp	r3, #80	; 0x50
 8004c12:	d00c      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x246>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	2b60      	cmp	r3, #96	; 0x60
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x246>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b70      	cmp	r3, #112	; 0x70
 8004c22:	d004      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x246>
 8004c24:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8004c28:	4843      	ldr	r0, [pc, #268]	; (8004d38 <HAL_RCC_ClockConfig+0x350>)
 8004c2a:	f7fc f838 	bl	8000c9e <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c2e:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	493e      	ldr	r1, [pc, #248]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d039      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d931      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d024      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d020      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b09      	cmp	r3, #9
 8004c72:	d01c      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b0a      	cmp	r3, #10
 8004c7a:	d018      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2b0b      	cmp	r3, #11
 8004c82:	d014      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b0c      	cmp	r3, #12
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b0d      	cmp	r3, #13
 8004c92:	d00c      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b0e      	cmp	r3, #14
 8004c9a:	d008      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d004      	beq.n	8004cae <HAL_RCC_ClockConfig+0x2c6>
 8004ca4:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8004ca8:	4823      	ldr	r0, [pc, #140]	; (8004d38 <HAL_RCC_ClockConfig+0x350>)
 8004caa:	f7fb fff8 	bl	8000c9e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f023 020f 	bic.w	r2, r3, #15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	491e      	ldr	r1, [pc, #120]	; (8004d34 <HAL_RCC_ClockConfig+0x34c>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80a2 	beq.w	8004e12 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d032      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cde:	d02d      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004ce8:	d028      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004cf2:	d023      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004cfc:	d01e      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d06:	d019      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004d10:	d014      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004d1a:	d00f      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004d26:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8004d2a:	4803      	ldr	r0, [pc, #12]	; (8004d38 <HAL_RCC_ClockConfig+0x350>)
 8004d2c:	f7fb ffb7 	bl	8000c9e <assert_failed>
 8004d30:	e004      	b.n	8004d3c <HAL_RCC_ClockConfig+0x354>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	08019168 	.word	0x08019168
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d010      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x37e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00c      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x37e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d008      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x37e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d004      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x37e>
 8004d5c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8004d60:	4858      	ldr	r0, [pc, #352]	; (8004ec4 <HAL_RCC_ClockConfig+0x4dc>)
 8004d62:	f7fb ff9c 	bl	8000c9e <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d66:	4b58      	ldr	r3, [pc, #352]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	4955      	ldr	r1, [pc, #340]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d80:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d121      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e18a      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d98:	4b4b      	ldr	r3, [pc, #300]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d115      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e17e      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004db0:	4b45      	ldr	r3, [pc, #276]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e172      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc0:	4b41      	ldr	r3, [pc, #260]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e16a      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dd0:	4b3d      	ldr	r3, [pc, #244]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f023 0207 	bic.w	r2, r3, #7
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	493a      	ldr	r1, [pc, #232]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de2:	f7fc fbb1 	bl	8001548 <HAL_GetTick>
 8004de6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de8:	e00a      	b.n	8004e00 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dea:	f7fc fbad 	bl	8001548 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e152      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e00:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d1eb      	bne.n	8004dea <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d039      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	4b29      	ldr	r3, [pc, #164]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d231      	bcs.n	8004e92 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d024      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d020      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d01c      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b0a      	cmp	r3, #10
 8004e4c:	d018      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b0b      	cmp	r3, #11
 8004e54:	d014      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d010      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2b0d      	cmp	r3, #13
 8004e64:	d00c      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b0e      	cmp	r3, #14
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	d004      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x498>
 8004e76:	f240 413d 	movw	r1, #1085	; 0x43d
 8004e7a:	4812      	ldr	r0, [pc, #72]	; (8004ec4 <HAL_RCC_ClockConfig+0x4dc>)
 8004e7c:	f7fb ff0f 	bl	8000c9e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f023 020f 	bic.w	r2, r3, #15
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <HAL_RCC_ClockConfig+0x4e0>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <HAL_RCC_ClockConfig+0x4e4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d217      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x4e4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 020f 	bic.w	r2, r3, #15
 8004ea8:	4908      	ldr	r1, [pc, #32]	; (8004ecc <HAL_RCC_ClockConfig+0x4e4>)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_RCC_ClockConfig+0x4e4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d008      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0f1      	b.n	80050a6 <HAL_RCC_ClockConfig+0x6be>
 8004ec2:	bf00      	nop
 8004ec4:	08019168 	.word	0x08019168
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d029      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	4b73      	ldr	r3, [pc, #460]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d221      	bcs.n	8004f30 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d014      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x536>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d010      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x536>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d00c      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x536>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b60      	cmp	r3, #96	; 0x60
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x536>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b70      	cmp	r3, #112	; 0x70
 8004f12:	d004      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x536>
 8004f14:	f240 415e 	movw	r1, #1118	; 0x45e
 8004f18:	4866      	ldr	r0, [pc, #408]	; (80050b4 <HAL_RCC_ClockConfig+0x6cc>)
 8004f1a:	f7fb fec0 	bl	8000c9e <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f1e:	4b64      	ldr	r3, [pc, #400]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4961      	ldr	r1, [pc, #388]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d029      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d221      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d014      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x596>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d010      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x596>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	2b50      	cmp	r3, #80	; 0x50
 8004f62:	d00c      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x596>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x596>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b70      	cmp	r3, #112	; 0x70
 8004f72:	d004      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x596>
 8004f74:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004f78:	484e      	ldr	r0, [pc, #312]	; (80050b4 <HAL_RCC_ClockConfig+0x6cc>)
 8004f7a:	f7fb fe90 	bl	8000c9e <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f7e:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4949      	ldr	r1, [pc, #292]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d02d      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d225      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d018      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x5fe>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbc:	d013      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x5fe>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x5fe>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x5fe>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fda:	d004      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x5fe>
 8004fdc:	f240 4182 	movw	r1, #1154	; 0x482
 8004fe0:	4834      	ldr	r0, [pc, #208]	; (80050b4 <HAL_RCC_ClockConfig+0x6cc>)
 8004fe2:	f7fb fe5c 	bl	8000c9e <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fe6:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	492f      	ldr	r1, [pc, #188]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d029      	beq.n	8005058 <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005010:	429a      	cmp	r2, r3
 8005012:	d221      	bcs.n	8005058 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d014      	beq.n	8005046 <HAL_RCC_ClockConfig+0x65e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d010      	beq.n	8005046 <HAL_RCC_ClockConfig+0x65e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	2b50      	cmp	r3, #80	; 0x50
 800502a:	d00c      	beq.n	8005046 <HAL_RCC_ClockConfig+0x65e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d008      	beq.n	8005046 <HAL_RCC_ClockConfig+0x65e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d004      	beq.n	8005046 <HAL_RCC_ClockConfig+0x65e>
 800503c:	f240 4194 	movw	r1, #1172	; 0x494
 8005040:	481c      	ldr	r0, [pc, #112]	; (80050b4 <HAL_RCC_ClockConfig+0x6cc>)
 8005042:	f7fb fe2c 	bl	8000c9e <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005046:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	4917      	ldr	r1, [pc, #92]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005058:	f000 f836 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	4913      	ldr	r1, [pc, #76]	; (80050b8 <HAL_RCC_ClockConfig+0x6d0>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005076:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_RCC_ClockConfig+0x6c8>)
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <HAL_RCC_ClockConfig+0x6d0>)
 8005080:	5cd3      	ldrb	r3, [r2, r3]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <HAL_RCC_ClockConfig+0x6d4>)
 800508e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_RCC_ClockConfig+0x6d8>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_ClockConfig+0x6dc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fb fe28 	bl	8000cf0 <HAL_InitTick>
 80050a0:	4603      	mov	r3, r0
 80050a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	58024400 	.word	0x58024400
 80050b4:	08019168 	.word	0x08019168
 80050b8:	0801be0c 	.word	0x0801be0c
 80050bc:	24000004 	.word	0x24000004
 80050c0:	24000000 	.word	0x24000000
 80050c4:	24000008 	.word	0x24000008

080050c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b089      	sub	sp, #36	; 0x24
 80050cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050ce:	4bb3      	ldr	r3, [pc, #716]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d6:	2b18      	cmp	r3, #24
 80050d8:	f200 8155 	bhi.w	8005386 <HAL_RCC_GetSysClockFreq+0x2be>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005149 	.word	0x08005149
 80050e8:	08005387 	.word	0x08005387
 80050ec:	08005387 	.word	0x08005387
 80050f0:	08005387 	.word	0x08005387
 80050f4:	08005387 	.word	0x08005387
 80050f8:	08005387 	.word	0x08005387
 80050fc:	08005387 	.word	0x08005387
 8005100:	08005387 	.word	0x08005387
 8005104:	0800516f 	.word	0x0800516f
 8005108:	08005387 	.word	0x08005387
 800510c:	08005387 	.word	0x08005387
 8005110:	08005387 	.word	0x08005387
 8005114:	08005387 	.word	0x08005387
 8005118:	08005387 	.word	0x08005387
 800511c:	08005387 	.word	0x08005387
 8005120:	08005387 	.word	0x08005387
 8005124:	08005175 	.word	0x08005175
 8005128:	08005387 	.word	0x08005387
 800512c:	08005387 	.word	0x08005387
 8005130:	08005387 	.word	0x08005387
 8005134:	08005387 	.word	0x08005387
 8005138:	08005387 	.word	0x08005387
 800513c:	08005387 	.word	0x08005387
 8005140:	08005387 	.word	0x08005387
 8005144:	0800517b 	.word	0x0800517b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005148:	4b94      	ldr	r3, [pc, #592]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005154:	4b91      	ldr	r3, [pc, #580]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	08db      	lsrs	r3, r3, #3
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	4a90      	ldr	r2, [pc, #576]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
 8005164:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005166:	e111      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005168:	4b8d      	ldr	r3, [pc, #564]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800516a:	61bb      	str	r3, [r7, #24]
    break;
 800516c:	e10e      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800516e:	4b8d      	ldr	r3, [pc, #564]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005170:	61bb      	str	r3, [r7, #24]
    break;
 8005172:	e10b      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005174:	4b8c      	ldr	r3, [pc, #560]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005176:	61bb      	str	r3, [r7, #24]
    break;
 8005178:	e108      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800517a:	4b88      	ldr	r3, [pc, #544]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005184:	4b85      	ldr	r3, [pc, #532]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800518e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005190:	4b82      	ldr	r3, [pc, #520]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800519a:	4b80      	ldr	r3, [pc, #512]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	08db      	lsrs	r3, r3, #3
 80051a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80e1 	beq.w	8005380 <HAL_RCC_GetSysClockFreq+0x2b8>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	f000 8083 	beq.w	80052cc <HAL_RCC_GetSysClockFreq+0x204>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	f200 80a1 	bhi.w	8005310 <HAL_RCC_GetSysClockFreq+0x248>
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x114>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d056      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x1c0>
 80051da:	e099      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051dc:	4b6f      	ldr	r3, [pc, #444]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d02d      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051e8:	4b6c      	ldr	r3, [pc, #432]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	08db      	lsrs	r3, r3, #3
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	4a6b      	ldr	r2, [pc, #428]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005212:	4b62      	ldr	r3, [pc, #392]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005222:	ed97 6a02 	vldr	s12, [r7, #8]
 8005226:	eddf 5a61 	vldr	s11, [pc, #388]	; 80053ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005242:	e087      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80053b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005256:	4b51      	ldr	r3, [pc, #324]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005266:	ed97 6a02 	vldr	s12, [r7, #8]
 800526a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80053ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800526e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005286:	e065      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	eddf 6a48 	vldr	s13, [pc, #288]	; 80053b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529a:	4b40      	ldr	r3, [pc, #256]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80053ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80052b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ca:	e043      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80053b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80052da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052de:	4b2f      	ldr	r3, [pc, #188]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80052f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80053ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80052f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800530e:	e021      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80053b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800531e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005322:	4b1e      	ldr	r3, [pc, #120]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005332:	ed97 6a02 	vldr	s12, [r7, #8]
 8005336:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80053ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800533a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005352:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005354:	4b11      	ldr	r3, [pc, #68]	; (800539c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	0a5b      	lsrs	r3, r3, #9
 800535a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535e:	3301      	adds	r3, #1
 8005360:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800536c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005378:	ee17 3a90 	vmov	r3, s15
 800537c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800537e:	e005      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
    break;
 8005384:	e002      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005388:	61bb      	str	r3, [r7, #24]
    break;
 800538a:	bf00      	nop
  }

  return sysclockfreq;
 800538c:	69bb      	ldr	r3, [r7, #24]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3724      	adds	r7, #36	; 0x24
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	58024400 	.word	0x58024400
 80053a0:	03d09000 	.word	0x03d09000
 80053a4:	003d0900 	.word	0x003d0900
 80053a8:	007a1200 	.word	0x007a1200
 80053ac:	46000000 	.word	0x46000000
 80053b0:	4c742400 	.word	0x4c742400
 80053b4:	4a742400 	.word	0x4a742400
 80053b8:	4af42400 	.word	0x4af42400

080053bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053c2:	f7ff fe81 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b10      	ldr	r3, [pc, #64]	; (800540c <HAL_RCC_GetHCLKFreq+0x50>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490f      	ldr	r1, [pc, #60]	; (8005410 <HAL_RCC_GetHCLKFreq+0x54>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	fa22 f303 	lsr.w	r3, r2, r3
 80053de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <HAL_RCC_GetHCLKFreq+0x50>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_RCC_GetHCLKFreq+0x54>)
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	4a07      	ldr	r2, [pc, #28]	; (8005414 <HAL_RCC_GetHCLKFreq+0x58>)
 80053f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <HAL_RCC_GetHCLKFreq+0x5c>)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <HAL_RCC_GetHCLKFreq+0x58>)
 8005402:	681b      	ldr	r3, [r3, #0]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	58024400 	.word	0x58024400
 8005410:	0801be0c 	.word	0x0801be0c
 8005414:	24000004 	.word	0x24000004
 8005418:	24000000 	.word	0x24000000

0800541c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005420:	f7ff ffcc 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	4904      	ldr	r1, [pc, #16]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	58024400 	.word	0x58024400
 8005444:	0801be0c 	.word	0x0801be0c

08005448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800544c:	f7ff ffb6 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4904      	ldr	r1, [pc, #16]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	58024400 	.word	0x58024400
 8005470:	0801be0c 	.word	0x0801be0c

08005474 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	223f      	movs	r2, #63	; 0x3f
 8005482:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005484:	4b1a      	ldr	r3, [pc, #104]	; (80054f0 <HAL_RCC_GetClockConfig+0x7c>)
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0207 	and.w	r2, r3, #7
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_RCC_GetClockConfig+0x7c>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800549c:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <HAL_RCC_GetClockConfig+0x7c>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_RCC_GetClockConfig+0x7c>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <HAL_RCC_GetClockConfig+0x7c>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_GetClockConfig+0x7c>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_RCC_GetClockConfig+0x7c>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_RCC_GetClockConfig+0x80>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	58024400 	.word	0x58024400
 80054f4:	52002000 	.word	0x52002000

080054f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005500:	2300      	movs	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005504:	2300      	movs	r3, #0
 8005506:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d03f      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800551c:	d02a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800551e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005522:	d824      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005528:	d018      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800552a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800552e:	d81e      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005538:	d007      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800553a:	e018      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553c:	4bab      	ldr	r3, [pc, #684]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4aaa      	ldr	r2, [pc, #680]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005548:	e015      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	2102      	movs	r1, #2
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fc9b 	bl	8006e8c <RCCEx_PLL2_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800555a:	e00c      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3324      	adds	r3, #36	; 0x24
 8005560:	2102      	movs	r1, #2
 8005562:	4618      	mov	r0, r3
 8005564:	f001 fdb4 	bl	80070d0 <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800556c:	e003      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
      break;
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800557c:	4b9b      	ldr	r3, [pc, #620]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005588:	4998      	ldr	r1, [pc, #608]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800558a:	4313      	orrs	r3, r2
 800558c:	650b      	str	r3, [r1, #80]	; 0x50
 800558e:	e001      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
 8005592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d03d      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d826      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055c5 	.word	0x080055c5
 80055b4:	080055d3 	.word	0x080055d3
 80055b8:	080055e5 	.word	0x080055e5
 80055bc:	080055fd 	.word	0x080055fd
 80055c0:	080055fd 	.word	0x080055fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c4:	4b89      	ldr	r3, [pc, #548]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	4a88      	ldr	r2, [pc, #544]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055d0:	e015      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fc57 	bl	8006e8c <RCCEx_PLL2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055e2:	e00c      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3324      	adds	r3, #36	; 0x24
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fd70 	bl	80070d0 <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
      break;
 80055fa:	e000      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80055fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005604:	4b79      	ldr	r3, [pc, #484]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005608:	f023 0207 	bic.w	r2, r3, #7
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005610:	4976      	ldr	r1, [pc, #472]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	650b      	str	r3, [r1, #80]	; 0x50
 8005616:	e001      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005624:	2b00      	cmp	r3, #0
 8005626:	d042      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005630:	d02b      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005636:	d825      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005638:	2bc0      	cmp	r3, #192	; 0xc0
 800563a:	d028      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800563c:	2bc0      	cmp	r3, #192	; 0xc0
 800563e:	d821      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d016      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d81d      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d007      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005650:	e018      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005652:	4b66      	ldr	r3, [pc, #408]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	4a65      	ldr	r2, [pc, #404]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800565c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800565e:	e017      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	2100      	movs	r1, #0
 8005666:	4618      	mov	r0, r3
 8005668:	f001 fc10 	bl	8006e8c <RCCEx_PLL2_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005670:	e00e      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3324      	adds	r3, #36	; 0x24
 8005676:	2100      	movs	r1, #0
 8005678:	4618      	mov	r0, r3
 800567a:	f001 fd29 	bl	80070d0 <RCCEx_PLL3_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005682:	e005      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	75fb      	strb	r3, [r7, #23]
      break;
 8005688:	e002      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800568e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005696:	4b55      	ldr	r3, [pc, #340]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	4952      	ldr	r1, [pc, #328]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	650b      	str	r3, [r1, #80]	; 0x50
 80056a8:	e001      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d049      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056c4:	d030      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80056c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ca:	d82a      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056d0:	d02c      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80056d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056d6:	d824      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056dc:	d018      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80056de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e2:	d81e      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80056e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ec:	d007      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80056ee:	e018      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f0:	4b3e      	ldr	r3, [pc, #248]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4a3d      	ldr	r2, [pc, #244]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056fc:	e017      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3304      	adds	r3, #4
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fbc1 	bl	8006e8c <RCCEx_PLL2_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800570e:	e00e      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3324      	adds	r3, #36	; 0x24
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fcda 	bl	80070d0 <RCCEx_PLL3_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005720:	e005      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
      break;
 8005726:	e002      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005728:	bf00      	nop
 800572a:	e000      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800572c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005742:	492a      	ldr	r1, [pc, #168]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005744:	4313      	orrs	r3, r2
 8005746:	658b      	str	r3, [r1, #88]	; 0x58
 8005748:	e001      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04c      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005764:	d030      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005766:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800576a:	d82a      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800576c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005770:	d02c      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005772:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005776:	d824      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800577c:	d018      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800577e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005782:	d81e      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800578c:	d007      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800578e:	e018      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005790:	4b16      	ldr	r3, [pc, #88]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	4a15      	ldr	r2, [pc, #84]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800579c:	e017      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3304      	adds	r3, #4
 80057a2:	2100      	movs	r1, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fb71 	bl	8006e8c <RCCEx_PLL2_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80057ae:	e00e      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3324      	adds	r3, #36	; 0x24
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 fc8a 	bl	80070d0 <RCCEx_PLL3_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057c0:	e005      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
      break;
 80057c6:	e002      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80057c8:	bf00      	nop
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80057cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057e2:	4902      	ldr	r1, [pc, #8]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	658b      	str	r3, [r1, #88]	; 0x58
 80057e8:	e004      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80057ea:	bf00      	nop
 80057ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d032      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005804:	2b30      	cmp	r3, #48	; 0x30
 8005806:	d01c      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d817      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d00c      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d813      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d016      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005818:	2b10      	cmp	r3, #16
 800581a:	d10f      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581c:	4baf      	ldr	r3, [pc, #700]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4aae      	ldr	r2, [pc, #696]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005828:	e00e      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2102      	movs	r1, #2
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fb2b 	bl	8006e8c <RCCEx_PLL2_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800583a:	e005      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
      break;
 8005840:	e002      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800584e:	4ba3      	ldr	r3, [pc, #652]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585a:	49a0      	ldr	r1, [pc, #640]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800585c:	4313      	orrs	r3, r2
 800585e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005860:	e001      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d047      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800587a:	d030      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800587c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005880:	d82a      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005882:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005886:	d02c      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800588c:	d824      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800588e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005892:	d018      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005898:	d81e      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	d007      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80058a4:	e018      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a6:	4b8d      	ldr	r3, [pc, #564]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	4a8c      	ldr	r2, [pc, #560]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058b2:	e017      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fae6 	bl	8006e8c <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058c4:	e00e      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3324      	adds	r3, #36	; 0x24
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 fbff 	bl	80070d0 <RCCEx_PLL3_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058d6:	e005      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80058e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058ea:	4b7c      	ldr	r3, [pc, #496]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f6:	4979      	ldr	r1, [pc, #484]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	650b      	str	r3, [r1, #80]	; 0x50
 80058fc:	e001      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
 8005900:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d049      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005916:	d02e      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800591c:	d828      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800591e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005922:	d02a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005928:	d822      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800592a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800592e:	d026      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005930:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005934:	d81c      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800593a:	d010      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800593c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005940:	d816      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01d      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594a:	d111      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	2101      	movs	r1, #1
 8005952:	4618      	mov	r0, r3
 8005954:	f001 fa9a 	bl	8006e8c <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800595c:	e012      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3324      	adds	r3, #36	; 0x24
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f001 fbb3 	bl	80070d0 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800596e:	e009      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
      break;
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800598a:	4b54      	ldr	r3, [pc, #336]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005996:	4951      	ldr	r1, [pc, #324]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005998:	4313      	orrs	r3, r2
 800599a:	650b      	str	r3, [r1, #80]	; 0x50
 800599c:	e001      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d04b      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b8:	d02e      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80059ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059be:	d828      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d02a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d822      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80059cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059d0:	d026      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80059d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059d6:	d81c      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059dc:	d010      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80059de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e2:	d816      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01d      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80059e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ec:	d111      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2101      	movs	r1, #1
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 fa49 	bl	8006e8c <RCCEx_PLL2_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059fe:	e012      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	2101      	movs	r1, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 fb62 	bl	80070d0 <RCCEx_PLL3_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a10:	e009      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
      break;
 8005a16:	e006      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005a18:	bf00      	nop
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a3a:	4928      	ldr	r1, [pc, #160]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	658b      	str	r3, [r1, #88]	; 0x58
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d02f      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5a:	d00e      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a60:	d814      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d015      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6a:	d10f      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a1a      	ldr	r2, [pc, #104]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fa03 	bl	8006e8c <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa6:	490d      	ldr	r1, [pc, #52]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	650b      	str	r3, [r1, #80]	; 0x50
 8005aac:	e001      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d036      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x634>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d81c      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b07 	.word	0x08005b07
 8005ad0:	08005ae1 	.word	0x08005ae1
 8005ad4:	08005aef 	.word	0x08005aef
 8005ad8:	08005b07 	.word	0x08005b07
 8005adc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae0:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	4a0f      	ldr	r2, [pc, #60]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005aec:	e00c      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	2102      	movs	r1, #2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 f9c9 	bl	8006e8c <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005afe:	e003      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	75fb      	strb	r3, [r7, #23]
      break;
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x630>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8005b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b12:	f023 0203 	bic.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	4902      	ldr	r1, [pc, #8]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b20:	e004      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 829b 	beq.w	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb78>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b44:	f000 81a9 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b52:	f000 81a2 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b5c:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8005b60:	f000 819b 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b6a:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8005b6e:	f000 8194 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b78:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8005b7c:	f000 818d 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b86:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8005b8a:	f000 8186 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b94:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8005b98:	f000 817f 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ba2:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8005ba6:	f000 8178 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bb0:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8005bb4:	f000 8171 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bbe:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8005bc2:	f000 816a 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bcc:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8005bd0:	f000 8163 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bda:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8005bde:	f000 815c 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005be8:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8005bec:	f000 8155 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bf6:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8005bfa:	f000 814e 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c04:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8005c08:	f000 8147 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c12:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8005c16:	f000 8140 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c20:	4aa8      	ldr	r2, [pc, #672]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f000 8139 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c2e:	4aa6      	ldr	r2, [pc, #664]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	f000 8132 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c3c:	4aa3      	ldr	r2, [pc, #652]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f000 812b 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c4a:	4aa1      	ldr	r2, [pc, #644]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	f000 8124 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c58:	4a9e      	ldr	r2, [pc, #632]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	f000 811d 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c66:	4a9c      	ldr	r2, [pc, #624]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	f000 8116 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c74:	4a99      	ldr	r2, [pc, #612]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f000 810f 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c82:	4a97      	ldr	r2, [pc, #604]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	f000 8108 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c90:	4a94      	ldr	r2, [pc, #592]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	f000 8101 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c9e:	4a92      	ldr	r2, [pc, #584]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	f000 80fa 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cac:	4a8f      	ldr	r2, [pc, #572]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f000 80f3 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cba:	4a8d      	ldr	r2, [pc, #564]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f000 80ec 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cc8:	4a8a      	ldr	r2, [pc, #552]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	f000 80e5 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cd6:	4a88      	ldr	r2, [pc, #544]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	f000 80de 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ce4:	4a85      	ldr	r2, [pc, #532]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	f000 80d7 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cf2:	4a83      	ldr	r2, [pc, #524]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	f000 80d0 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d00:	4a80      	ldr	r2, [pc, #512]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	f000 80c9 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d0e:	4a7e      	ldr	r2, [pc, #504]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	f000 80c2 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d1c:	4a7b      	ldr	r2, [pc, #492]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	f000 80bb 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d2a:	4a79      	ldr	r2, [pc, #484]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	f000 80b4 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d38:	4a76      	ldr	r2, [pc, #472]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	f000 80ad 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d46:	4a74      	ldr	r2, [pc, #464]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	f000 80a6 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d54:	4a71      	ldr	r2, [pc, #452]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	f000 809f 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d62:	4a6f      	ldr	r2, [pc, #444]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	f000 8098 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d70:	4a6c      	ldr	r2, [pc, #432]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	f000 8091 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d7e:	4a6a      	ldr	r2, [pc, #424]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	f000 808a 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d8c:	4a67      	ldr	r2, [pc, #412]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f000 8083 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d9a:	4a65      	ldr	r2, [pc, #404]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d07c      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005da6:	4a63      	ldr	r2, [pc, #396]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d076      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005db2:	4a61      	ldr	r2, [pc, #388]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d070      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dbe:	4a5f      	ldr	r2, [pc, #380]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d06a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dca:	4a5d      	ldr	r2, [pc, #372]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d064      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dd6:	4a5b      	ldr	r2, [pc, #364]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d05e      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005de2:	4a59      	ldr	r2, [pc, #356]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xa50>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d058      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dee:	4a57      	ldr	r2, [pc, #348]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa54>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d052      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dfa:	4a55      	ldr	r2, [pc, #340]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa58>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04c      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e06:	4a53      	ldr	r2, [pc, #332]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa5c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d046      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e12:	4a51      	ldr	r2, [pc, #324]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d040      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e1e:	4a4f      	ldr	r2, [pc, #316]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0xa64>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d03a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e2a:	4a4d      	ldr	r2, [pc, #308]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa68>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d034      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e36:	4a4b      	ldr	r2, [pc, #300]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0xa6c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02e      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e42:	4a49      	ldr	r2, [pc, #292]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa70>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d028      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e4e:	4a47      	ldr	r2, [pc, #284]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e5a:	4a45      	ldr	r2, [pc, #276]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d01c      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e66:	4a43      	ldr	r2, [pc, #268]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d016      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e72:	4a41      	ldr	r2, [pc, #260]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d010      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e7e:	4a3f      	ldr	r2, [pc, #252]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0xa84>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e8a:	4a3d      	ldr	r2, [pc, #244]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005e90:	f240 317f 	movw	r1, #895	; 0x37f
 8005e94:	483b      	ldr	r0, [pc, #236]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8005e96:	f7fa ff02 	bl	8000c9e <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e9a:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a3a      	ldr	r2, [pc, #232]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ea6:	f7fb fb4f 	bl	8001548 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eac:	e06e      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xa94>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eae:	f7fb fb4b 	bl	8001548 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b64      	cmp	r3, #100	; 0x64
 8005eba:	d967      	bls.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xa94>
      {
        ret = HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	75fb      	strb	r3, [r7, #23]
        break;
 8005ec0:	e06a      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8005ec2:	bf00      	nop
 8005ec4:	00010300 	.word	0x00010300
 8005ec8:	00011300 	.word	0x00011300
 8005ecc:	00012300 	.word	0x00012300
 8005ed0:	00013300 	.word	0x00013300
 8005ed4:	00014300 	.word	0x00014300
 8005ed8:	00015300 	.word	0x00015300
 8005edc:	00016300 	.word	0x00016300
 8005ee0:	00017300 	.word	0x00017300
 8005ee4:	00018300 	.word	0x00018300
 8005ee8:	00019300 	.word	0x00019300
 8005eec:	0001a300 	.word	0x0001a300
 8005ef0:	0001b300 	.word	0x0001b300
 8005ef4:	0001c300 	.word	0x0001c300
 8005ef8:	0001d300 	.word	0x0001d300
 8005efc:	0001e300 	.word	0x0001e300
 8005f00:	0001f300 	.word	0x0001f300
 8005f04:	00020300 	.word	0x00020300
 8005f08:	00021300 	.word	0x00021300
 8005f0c:	00022300 	.word	0x00022300
 8005f10:	00023300 	.word	0x00023300
 8005f14:	00024300 	.word	0x00024300
 8005f18:	00025300 	.word	0x00025300
 8005f1c:	00026300 	.word	0x00026300
 8005f20:	00027300 	.word	0x00027300
 8005f24:	00028300 	.word	0x00028300
 8005f28:	00029300 	.word	0x00029300
 8005f2c:	0002a300 	.word	0x0002a300
 8005f30:	0002b300 	.word	0x0002b300
 8005f34:	0002c300 	.word	0x0002c300
 8005f38:	0002d300 	.word	0x0002d300
 8005f3c:	0002e300 	.word	0x0002e300
 8005f40:	0002f300 	.word	0x0002f300
 8005f44:	00030300 	.word	0x00030300
 8005f48:	00031300 	.word	0x00031300
 8005f4c:	00032300 	.word	0x00032300
 8005f50:	00033300 	.word	0x00033300
 8005f54:	00034300 	.word	0x00034300
 8005f58:	00035300 	.word	0x00035300
 8005f5c:	00036300 	.word	0x00036300
 8005f60:	00037300 	.word	0x00037300
 8005f64:	00038300 	.word	0x00038300
 8005f68:	00039300 	.word	0x00039300
 8005f6c:	0003a300 	.word	0x0003a300
 8005f70:	0003b300 	.word	0x0003b300
 8005f74:	0003c300 	.word	0x0003c300
 8005f78:	0003d300 	.word	0x0003d300
 8005f7c:	0003e300 	.word	0x0003e300
 8005f80:	0003f300 	.word	0x0003f300
 8005f84:	080191a0 	.word	0x080191a0
 8005f88:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f8c:	4bb9      	ldr	r3, [pc, #740]	; (8006274 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d08a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      }
    }

    if(ret == HAL_OK)
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d166      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f9e:	4bb6      	ldr	r3, [pc, #728]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8005fa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fa8:	4053      	eors	r3, r2
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d013      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xae2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fb2:	4bb1      	ldr	r3, [pc, #708]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fbc:	4bae      	ldr	r3, [pc, #696]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	4aad      	ldr	r2, [pc, #692]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8005fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc8:	4bab      	ldr	r3, [pc, #684]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	4aaa      	ldr	r2, [pc, #680]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8005fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fd4:	4aa8      	ldr	r2, [pc, #672]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe4:	d115      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe6:	f7fb faaf 	bl	8001548 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fec:	e00b      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fee:	f7fb faab 	bl	8001548 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d902      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
          {
            ret = HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
            break;
 8006004:	e005      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006006:	4b9c      	ldr	r3, [pc, #624]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0ed      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xaf6>
          }
        }
      }

      if(ret == HAL_OK)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d126      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800601e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006026:	d10d      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8006028:	4b93      	ldr	r3, [pc, #588]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006036:	0919      	lsrs	r1, r3, #4
 8006038:	4b90      	ldr	r3, [pc, #576]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0xd84>)
 800603a:	400b      	ands	r3, r1
 800603c:	498e      	ldr	r1, [pc, #568]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]
 8006042:	e005      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8006044:	4b8c      	ldr	r3, [pc, #560]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	4a8b      	ldr	r2, [pc, #556]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800604a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800604e:	6113      	str	r3, [r2, #16]
 8006050:	4b89      	ldr	r3, [pc, #548]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8006052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800605a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800605e:	4986      	ldr	r1, [pc, #536]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8006060:	4313      	orrs	r3, r2
 8006062:	670b      	str	r3, [r1, #112]	; 0x70
 8006064:	e004      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	75bb      	strb	r3, [r7, #22]
 800606a:	e001      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xb78>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d07e      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc82>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006080:	2b28      	cmp	r3, #40	; 0x28
 8006082:	d867      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	0800615b 	.word	0x0800615b
 8006090:	08006155 	.word	0x08006155
 8006094:	08006155 	.word	0x08006155
 8006098:	08006155 	.word	0x08006155
 800609c:	08006155 	.word	0x08006155
 80060a0:	08006155 	.word	0x08006155
 80060a4:	08006155 	.word	0x08006155
 80060a8:	08006155 	.word	0x08006155
 80060ac:	08006131 	.word	0x08006131
 80060b0:	08006155 	.word	0x08006155
 80060b4:	08006155 	.word	0x08006155
 80060b8:	08006155 	.word	0x08006155
 80060bc:	08006155 	.word	0x08006155
 80060c0:	08006155 	.word	0x08006155
 80060c4:	08006155 	.word	0x08006155
 80060c8:	08006155 	.word	0x08006155
 80060cc:	08006143 	.word	0x08006143
 80060d0:	08006155 	.word	0x08006155
 80060d4:	08006155 	.word	0x08006155
 80060d8:	08006155 	.word	0x08006155
 80060dc:	08006155 	.word	0x08006155
 80060e0:	08006155 	.word	0x08006155
 80060e4:	08006155 	.word	0x08006155
 80060e8:	08006155 	.word	0x08006155
 80060ec:	0800615b 	.word	0x0800615b
 80060f0:	08006155 	.word	0x08006155
 80060f4:	08006155 	.word	0x08006155
 80060f8:	08006155 	.word	0x08006155
 80060fc:	08006155 	.word	0x08006155
 8006100:	08006155 	.word	0x08006155
 8006104:	08006155 	.word	0x08006155
 8006108:	08006155 	.word	0x08006155
 800610c:	0800615b 	.word	0x0800615b
 8006110:	08006155 	.word	0x08006155
 8006114:	08006155 	.word	0x08006155
 8006118:	08006155 	.word	0x08006155
 800611c:	08006155 	.word	0x08006155
 8006120:	08006155 	.word	0x08006155
 8006124:	08006155 	.word	0x08006155
 8006128:	08006155 	.word	0x08006155
 800612c:	0800615b 	.word	0x0800615b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	2101      	movs	r1, #1
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fea8 	bl	8006e8c <RCCEx_PLL2_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006140:	e00c      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc64>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3324      	adds	r3, #36	; 0x24
 8006146:	2101      	movs	r1, #1
 8006148:	4618      	mov	r0, r3
 800614a:	f000 ffc1 	bl	80070d0 <RCCEx_PLL3_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006152:	e003      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc64>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	75fb      	strb	r3, [r7, #23]
      break;
 8006158:	e000      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc64>
      break;
 800615a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006162:	4b45      	ldr	r3, [pc, #276]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800616e:	4942      	ldr	r1, [pc, #264]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8006170:	4313      	orrs	r3, r2
 8006172:	654b      	str	r3, [r1, #84]	; 0x54
 8006174:	e001      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d037      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618a:	2b05      	cmp	r3, #5
 800618c:	d820      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061d7 	.word	0x080061d7
 8006198:	080061ad 	.word	0x080061ad
 800619c:	080061bf 	.word	0x080061bf
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061d7 	.word	0x080061d7
 80061a8:	080061d7 	.word	0x080061d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	2101      	movs	r1, #1
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fe6a 	bl	8006e8c <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061bc:	e00c      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xce0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3324      	adds	r3, #36	; 0x24
 80061c2:	2101      	movs	r1, #1
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 ff83 	bl	80070d0 <RCCEx_PLL3_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061ce:	e003      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
      break;
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
      break;
 80061d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061de:	4b26      	ldr	r3, [pc, #152]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80061e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e2:	f023 0207 	bic.w	r2, r3, #7
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ea:	4923      	ldr	r1, [pc, #140]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	654b      	str	r3, [r1, #84]	; 0x54
 80061f0:	e001      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d040      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006208:	2b05      	cmp	r3, #5
 800620a:	d821      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <HAL_RCCEx_PeriphCLKConfig+0xd1c>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006257 	.word	0x08006257
 8006218:	0800622d 	.word	0x0800622d
 800621c:	0800623f 	.word	0x0800623f
 8006220:	08006257 	.word	0x08006257
 8006224:	08006257 	.word	0x08006257
 8006228:	08006257 	.word	0x08006257
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3304      	adds	r3, #4
 8006230:	2101      	movs	r1, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fe2a 	bl	8006e8c <RCCEx_PLL2_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800623c:	e00c      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd60>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3324      	adds	r3, #36	; 0x24
 8006242:	2101      	movs	r1, #1
 8006244:	4618      	mov	r0, r3
 8006246:	f000 ff43 	bl	80070d0 <RCCEx_PLL3_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800624e:	e003      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	75fb      	strb	r3, [r7, #23]
      break;
 8006254:	e000      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd60>
      break;
 8006256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d110      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd88>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 8006260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006262:	f023 0207 	bic.w	r2, r3, #7
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626c:	4902      	ldr	r1, [pc, #8]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
 800626e:	4313      	orrs	r3, r2
 8006270:	658b      	str	r3, [r1, #88]	; 0x58
 8006272:	e007      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006274:	58024800 	.word	0x58024800
 8006278:	58024400 	.word	0x58024400
 800627c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d04b      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800629a:	d02e      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xe02>
 800629c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062a0:	d828      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d02a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xe06>
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d822      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 80062ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062b2:	d026      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
 80062b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062b8:	d81c      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 80062ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062be:	d010      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xdea>
 80062c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c4:	d816      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01d      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 80062ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ce:	d111      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fdd8 	bl	8006e8c <RCCEx_PLL2_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062e0:	e012      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3324      	adds	r3, #36	; 0x24
 80062e6:	2102      	movs	r1, #2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fef1 	bl	80070d0 <RCCEx_PLL3_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062f2:	e009      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	75fb      	strb	r3, [r7, #23]
      break;
 80062f8:	e006      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 80062fa:	bf00      	nop
 80062fc:	e004      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xe10>
      break;
 8006306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800630e:	4bb2      	ldr	r3, [pc, #712]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631c:	49ae      	ldr	r1, [pc, #696]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800631e:	4313      	orrs	r3, r2
 8006320:	654b      	str	r3, [r1, #84]	; 0x54
 8006322:	e001      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe30>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d04b      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xed4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800633a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800633e:	d02e      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8006340:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006344:	d828      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	d02a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006350:	d822      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006356:	d026      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8006358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800635c:	d81c      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800635e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006362:	d010      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
 8006364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006368:	d816      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01d      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xeb2>
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006372:	d111      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xea0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fd86 	bl	8006e8c <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006384:	e012      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xeb4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	2102      	movs	r1, #2
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fe9f 	bl	80070d0 <RCCEx_PLL3_Config>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006396:	e009      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	75fb      	strb	r3, [r7, #23]
      break;
 800639c:	e006      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 800639e:	bf00      	nop
 80063a0:	e004      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 80063a2:	bf00      	nop
 80063a4:	e002      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xeb4>
      break;
 80063aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063b2:	4b89      	ldr	r3, [pc, #548]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063c0:	4985      	ldr	r1, [pc, #532]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	658b      	str	r3, [r1, #88]	; 0x58
 80063c6:	e001      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xed4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d04b      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xf78>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063e2:	d02e      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80063e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063e8:	d828      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ee:	d02a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xf4e>
 80063f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f4:	d822      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 80063f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063fa:	d026      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xf52>
 80063fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006400:	d81c      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 8006402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006406:	d010      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xf32>
 8006408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640c:	d816      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf44>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01d      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xf56>
 8006412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006416:	d111      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf44>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fd34 	bl	8006e8c <RCCEx_PLL2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006428:	e012      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf58>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3324      	adds	r3, #36	; 0x24
 800642e:	2102      	movs	r1, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fe4d 	bl	80070d0 <RCCEx_PLL3_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800643a:	e009      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	e006      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8006442:	bf00      	nop
 8006444:	e004      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 8006446:	bf00      	nop
 8006448:	e002      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800644a:	bf00      	nop
 800644c:	e000      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf58>
      break;
 800644e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xf74>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006456:	4b60      	ldr	r3, [pc, #384]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006464:	495c      	ldr	r1, [pc, #368]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8006466:	4313      	orrs	r3, r2
 8006468:	658b      	str	r3, [r1, #88]	; 0x58
 800646a:	e001      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xf78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d036      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xff2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	d015      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006492:	d00f      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064a8:	d004      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
 80064aa:	f240 510f 	movw	r1, #1295	; 0x50f
 80064ae:	484b      	ldr	r0, [pc, #300]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 80064b0:	f7fa fbf5 	bl	8000c9e <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064be:	d10a      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3324      	adds	r3, #36	; 0x24
 80064c4:	2102      	movs	r1, #2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fe02 	bl	80070d0 <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xfde>
        {
          status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064d6:	4b40      	ldr	r3, [pc, #256]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e4:	493c      	ldr	r1, [pc, #240]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d036      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006500:	d015      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d00f      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006522:	d004      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8006524:	f240 5122 	movw	r1, #1314	; 0x522
 8006528:	482c      	ldr	r0, [pc, #176]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
 800652a:	f7fa fbb8 	bl	8000c9e <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006538:	d10a      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1058>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3324      	adds	r3, #36	; 0x24
 800653e:	2102      	movs	r1, #2
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fdc5 	bl	80070d0 <RCCEx_PLL3_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1058>
      {
        status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006550:	4b21      	ldr	r3, [pc, #132]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800655e:	491e      	ldr	r1, [pc, #120]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d039      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800657a:	d01d      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800657c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006580:	d817      	bhi.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1096>
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658a:	d009      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 800658c:	e011      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fc79 	bl	8006e8c <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800659e:	e00c      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x10c2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3324      	adds	r3, #36	; 0x24
 80065a4:	2102      	movs	r1, #2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fd92 	bl	80070d0 <RCCEx_PLL3_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065b0:	e003      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	75fb      	strb	r3, [r7, #23]
      break;
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 80065b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10f      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80065c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065ce:	4902      	ldr	r1, [pc, #8]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	658b      	str	r3, [r1, #88]	; 0x58
 80065d4:	e006      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x10ec>
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	080191a0 	.word	0x080191a0
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d033      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1160>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065fa:	d01c      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x113e>
 80065fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006600:	d816      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1138>
 8006602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006606:	d003      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1118>
 8006608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800660c:	d007      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1126>
 800660e:	e00f      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1138>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006610:	4b53      	ldr	r3, [pc, #332]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	4a52      	ldr	r2, [pc, #328]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8006616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800661a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800661c:	e00c      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3324      	adds	r3, #36	; 0x24
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fd53 	bl	80070d0 <RCCEx_PLL3_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800662e:	e003      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1140>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
      break;
 8006634:	e000      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1140>
      break;
 8006636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x115c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800663e:	4b48      	ldr	r3, [pc, #288]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664c:	4944      	ldr	r1, [pc, #272]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800664e:	4313      	orrs	r3, r2
 8006650:	654b      	str	r3, [r1, #84]	; 0x54
 8006652:	e001      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1160>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d037      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d004      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006676:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800667a:	483a      	ldr	r0, [pc, #232]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x126c>)
 800667c:	f7fa fb0f 	bl	8000c9e <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1198>
 8006688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668c:	d007      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x11a6>
 800668e:	e00f      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006690:	4b33      	ldr	r3, [pc, #204]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	4a32      	ldr	r2, [pc, #200]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 8006696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800669c:	e00b      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x11be>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	2102      	movs	r1, #2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fbf1 	bl	8006e8c <RCCEx_PLL2_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066ae:	e002      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x11be>

    default:
      ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	75fb      	strb	r3, [r7, #23]
      break;
 80066b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x11d8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066bc:	4b28      	ldr	r3, [pc, #160]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80066be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c8:	4925      	ldr	r1, [pc, #148]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066ce:	e001      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x11fe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3324      	adds	r3, #36	; 0x24
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fcf2 	bl	80070d0 <RCCEx_PLL3_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x11fe>
    {
      status=HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d034      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1274>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670a:	d017      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1244>
 800670c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006710:	d811      	bhi.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x123e>
 8006712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006716:	d013      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1248>
 8006718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671c:	d80b      	bhi.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x123e>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d010      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d106      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x123e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800672e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006734:	e007      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
      break;
 800673a:	e004      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 800673c:	bf00      	nop
 800673e:	e002      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x124e>
      break;
 8006744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1270>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800674c:	4b04      	ldr	r3, [pc, #16]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006758:	4901      	ldr	r1, [pc, #4]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x1268>)
 800675a:	4313      	orrs	r3, r2
 800675c:	654b      	str	r3, [r1, #84]	; 0x54
 800675e:	e005      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8006760:	58024400 	.word	0x58024400
 8006764:	080191a0 	.word	0x080191a0
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d016      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006788:	d004      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 800678a:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800678e:	485e      	ldr	r0, [pc, #376]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006790:	f7fa fa85 	bl	8000c9e <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006794:	4b5d      	ldr	r3, [pc, #372]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8006796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	495a      	ldr	r1, [pc, #360]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d019      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c6:	d004      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x12da>
 80067c8:	f240 51f1 	movw	r1, #1521	; 0x5f1
 80067cc:	484e      	ldr	r0, [pc, #312]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ce:	f7fa fa66 	bl	8000c9e <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067d2:	4b4e      	ldr	r3, [pc, #312]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067e0:	494a      	ldr	r1, [pc, #296]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006802:	d004      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8006804:	f240 51fb 	movw	r1, #1531	; 0x5fb
 8006808:	483f      	ldr	r0, [pc, #252]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800680a:	f7fa fa48 	bl	8000c9e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800680e:	4b3f      	ldr	r3, [pc, #252]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8006810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006812:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681a:	493c      	ldr	r1, [pc, #240]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800681c:	4313      	orrs	r3, r2
 800681e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01d      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1354>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800683c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006840:	d004      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1354>
 8006842:	f240 6111 	movw	r1, #1553	; 0x611
 8006846:	4830      	ldr	r0, [pc, #192]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006848:	f7fa fa29 	bl	8000c9e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800684c:	4b2f      	ldr	r3, [pc, #188]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	4a2e      	ldr	r2, [pc, #184]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8006852:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006856:	6113      	str	r3, [r2, #16]
 8006858:	4b2c      	ldr	r3, [pc, #176]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006862:	492a      	ldr	r1, [pc, #168]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8006864:	4313      	orrs	r3, r2
 8006866:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	da1b      	bge.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x13b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00e      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006880:	d009      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688a:	d004      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x139e>
 800688c:	f240 611b 	movw	r1, #1563	; 0x61b
 8006890:	481d      	ldr	r0, [pc, #116]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006892:	f7fa fa04 	bl	8000c9e <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006896:	4b1d      	ldr	r3, [pc, #116]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 8006898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a2:	491a      	ldr	r1, [pc, #104]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01f      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d010      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c8:	d00a      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068d4:	d004      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80068d6:	f240 6125 	movw	r1, #1573	; 0x625
 80068da:	480b      	ldr	r0, [pc, #44]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068dc:	f7fa f9df 	bl	8000c9e <assert_failed>

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	4907      	ldr	r1, [pc, #28]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x1414>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80068f4:	7dbb      	ldrb	r3, [r7, #22]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x1406>
  {
    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x1408>
  }
  return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	080191a0 	.word	0x080191a0
 800690c:	58024400 	.word	0x58024400

08006910 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006914:	f7fe fd52 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4904      	ldr	r1, [pc, #16]	; (8006938 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	58024400 	.word	0x58024400
 8006938:	0801be0c 	.word	0x0801be0c

0800693c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	; 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006944:	4ba1      	ldr	r3, [pc, #644]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800694e:	4b9f      	ldr	r3, [pc, #636]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	0b1b      	lsrs	r3, r3, #12
 8006954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006958:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800695a:	4b9c      	ldr	r3, [pc, #624]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006966:	4b99      	ldr	r3, [pc, #612]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8111 	beq.w	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b02      	cmp	r3, #2
 800698e:	f000 8083 	beq.w	8006a98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b02      	cmp	r3, #2
 8006996:	f200 80a1 	bhi.w	8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d056      	beq.n	8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80069a6:	e099      	b.n	8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a8:	4b88      	ldr	r3, [pc, #544]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02d      	beq.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069b4:	4b85      	ldr	r3, [pc, #532]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	08db      	lsrs	r3, r3, #3
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	4a84      	ldr	r2, [pc, #528]	; (8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a0e:	e087      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a22:	4b6a      	ldr	r3, [pc, #424]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a52:	e065      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a66:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a96:	e043      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aaa:	4b48      	ldr	r3, [pc, #288]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006abe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ada:	e021      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006b20:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	0a5b      	lsrs	r3, r3, #9
 8006b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b46:	ee17 2a90 	vmov	r2, s15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006b4e:	4b1f      	ldr	r3, [pc, #124]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b74:	ee17 2a90 	vmov	r2, s15
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba2:	ee17 2a90 	vmov	r2, s15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006baa:	e008      	b.n	8006bbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	3724      	adds	r7, #36	; 0x24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	03d09000 	.word	0x03d09000
 8006bd4:	46000000 	.word	0x46000000
 8006bd8:	4c742400 	.word	0x4c742400
 8006bdc:	4a742400 	.word	0x4a742400
 8006be0:	4af42400 	.word	0x4af42400

08006be4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bec:	4ba1      	ldr	r3, [pc, #644]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006bf6:	4b9f      	ldr	r3, [pc, #636]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	0d1b      	lsrs	r3, r3, #20
 8006bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c02:	4b9c      	ldr	r3, [pc, #624]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006c0e:	4b99      	ldr	r3, [pc, #612]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8111 	beq.w	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	f000 8083 	beq.w	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	f200 80a1 	bhi.w	8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c4e:	e099      	b.n	8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c50:	4b88      	ldr	r3, [pc, #544]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d02d      	beq.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c5c:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	4a84      	ldr	r2, [pc, #528]	; (8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b7b      	ldr	r3, [pc, #492]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cb6:	e087      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b6a      	ldr	r3, [pc, #424]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cfa:	e065      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3e:	e043      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b48      	ldr	r3, [pc, #288]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d82:	e021      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006dc8:	4b2a      	ldr	r3, [pc, #168]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	ee17 2a90 	vmov	r2, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006df6:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1c:	ee17 2a90 	vmov	r2, s15
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e4a:	ee17 2a90 	vmov	r2, s15
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e52:	e008      	b.n	8006e66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	609a      	str	r2, [r3, #8]
}
 8006e66:	bf00      	nop
 8006e68:	3724      	adds	r7, #36	; 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	46000000 	.word	0x46000000
 8006e80:	4c742400 	.word	0x4c742400
 8006e84:	4a742400 	.word	0x4a742400
 8006e88:	4af42400 	.word	0x4af42400

08006e8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <RCCEx_PLL2_Config+0x1e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b3f      	cmp	r3, #63	; 0x3f
 8006ea8:	d904      	bls.n	8006eb4 <RCCEx_PLL2_Config+0x28>
 8006eaa:	f640 51c2 	movw	r1, #3522	; 0xdc2
 8006eae:	4885      	ldr	r0, [pc, #532]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006eb0:	f7f9 fef5 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d904      	bls.n	8006ec6 <RCCEx_PLL2_Config+0x3a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec4:	d904      	bls.n	8006ed0 <RCCEx_PLL2_Config+0x44>
 8006ec6:	f640 51c3 	movw	r1, #3523	; 0xdc3
 8006eca:	487e      	ldr	r0, [pc, #504]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006ecc:	f7f9 fee7 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <RCCEx_PLL2_Config+0x54>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b80      	cmp	r3, #128	; 0x80
 8006ede:	d904      	bls.n	8006eea <RCCEx_PLL2_Config+0x5e>
 8006ee0:	f640 51c4 	movw	r1, #3524	; 0xdc4
 8006ee4:	4877      	ldr	r0, [pc, #476]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006ee6:	f7f9 feda 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <RCCEx_PLL2_Config+0x6e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d904      	bls.n	8006f04 <RCCEx_PLL2_Config+0x78>
 8006efa:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8006efe:	4871      	ldr	r0, [pc, #452]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006f00:	f7f9 fecd 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <RCCEx_PLL2_Config+0x88>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d904      	bls.n	8006f1e <RCCEx_PLL2_Config+0x92>
 8006f14:	f640 51c6 	movw	r1, #3526	; 0xdc6
 8006f18:	486a      	ldr	r0, [pc, #424]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006f1a:	f7f9 fec0 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d010      	beq.n	8006f48 <RCCEx_PLL2_Config+0xbc>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d00c      	beq.n	8006f48 <RCCEx_PLL2_Config+0xbc>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d008      	beq.n	8006f48 <RCCEx_PLL2_Config+0xbc>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f3c:	d004      	beq.n	8006f48 <RCCEx_PLL2_Config+0xbc>
 8006f3e:	f640 51c7 	movw	r1, #3527	; 0xdc7
 8006f42:	4860      	ldr	r0, [pc, #384]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006f44:	f7f9 feab 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <RCCEx_PLL2_Config+0xd6>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d004      	beq.n	8006f62 <RCCEx_PLL2_Config+0xd6>
 8006f58:	f640 51c8 	movw	r1, #3528	; 0xdc8
 8006f5c:	4859      	ldr	r0, [pc, #356]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006f5e:	f7f9 fe9e 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f6a:	d304      	bcc.n	8006f76 <RCCEx_PLL2_Config+0xea>
 8006f6c:	f640 51c9 	movw	r1, #3529	; 0xdc9
 8006f70:	4854      	ldr	r0, [pc, #336]	; (80070c4 <RCCEx_PLL2_Config+0x238>)
 8006f72:	f7f9 fe94 	bl	8000c9e <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f76:	4b54      	ldr	r3, [pc, #336]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d101      	bne.n	8006f86 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e099      	b.n	80070ba <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f86:	4b50      	ldr	r3, [pc, #320]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4f      	ldr	r2, [pc, #316]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8006f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f92:	f7fa fad9 	bl	8001548 <HAL_GetTick>
 8006f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f98:	e008      	b.n	8006fac <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f9a:	f7fa fad5 	bl	8001548 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e086      	b.n	80070ba <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fac:	4b46      	ldr	r3, [pc, #280]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fb8:	4b43      	ldr	r3, [pc, #268]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	4940      	ldr	r1, [pc, #256]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	628b      	str	r3, [r1, #40]	; 0x28
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	025b      	lsls	r3, r3, #9
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	061b      	lsls	r3, r3, #24
 8006ff8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ffc:	4932      	ldr	r1, [pc, #200]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007002:	4b31      	ldr	r3, [pc, #196]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	492e      	ldr	r1, [pc, #184]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007014:	4b2c      	ldr	r3, [pc, #176]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	f023 0220 	bic.w	r2, r3, #32
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	4929      	ldr	r1, [pc, #164]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007026:	4b28      	ldr	r3, [pc, #160]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	4a27      	ldr	r2, [pc, #156]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 800702c:	f023 0310 	bic.w	r3, r3, #16
 8007030:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007032:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007036:	4b25      	ldr	r3, [pc, #148]	; (80070cc <RCCEx_PLL2_Config+0x240>)
 8007038:	4013      	ands	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	69d2      	ldr	r2, [r2, #28]
 800703e:	00d2      	lsls	r2, r2, #3
 8007040:	4921      	ldr	r1, [pc, #132]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007042:	4313      	orrs	r3, r2
 8007044:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007046:	4b20      	ldr	r3, [pc, #128]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007058:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	4a1a      	ldr	r2, [pc, #104]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 800705e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007064:	e00f      	b.n	8007086 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800706c:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	4a15      	ldr	r2, [pc, #84]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007078:	e005      	b.n	8007086 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800707a:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007086:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a0f      	ldr	r2, [pc, #60]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 800708c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fa fa59 	bl	8001548 <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800709a:	f7fa fa55 	bl	8001548 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e006      	b.n	80070ba <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070ac:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <RCCEx_PLL2_Config+0x23c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0f0      	beq.n	800709a <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	080191a0 	.word	0x080191a0
 80070c8:	58024400 	.word	0x58024400
 80070cc:	ffff0007 	.word	0xffff0007

080070d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <RCCEx_PLL3_Config+0x1e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b3f      	cmp	r3, #63	; 0x3f
 80070ec:	d904      	bls.n	80070f8 <RCCEx_PLL3_Config+0x28>
 80070ee:	f640 612a 	movw	r1, #3626	; 0xe2a
 80070f2:	4887      	ldr	r0, [pc, #540]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 80070f4:	f7f9 fdd3 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d904      	bls.n	800710a <RCCEx_PLL3_Config+0x3a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007108:	d904      	bls.n	8007114 <RCCEx_PLL3_Config+0x44>
 800710a:	f640 612b 	movw	r1, #3627	; 0xe2b
 800710e:	4880      	ldr	r0, [pc, #512]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 8007110:	f7f9 fdc5 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <RCCEx_PLL3_Config+0x54>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b80      	cmp	r3, #128	; 0x80
 8007122:	d904      	bls.n	800712e <RCCEx_PLL3_Config+0x5e>
 8007124:	f640 612c 	movw	r1, #3628	; 0xe2c
 8007128:	4879      	ldr	r0, [pc, #484]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 800712a:	f7f9 fdb8 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <RCCEx_PLL3_Config+0x6e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d904      	bls.n	8007148 <RCCEx_PLL3_Config+0x78>
 800713e:	f640 612d 	movw	r1, #3629	; 0xe2d
 8007142:	4873      	ldr	r0, [pc, #460]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 8007144:	f7f9 fdab 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <RCCEx_PLL3_Config+0x88>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b80      	cmp	r3, #128	; 0x80
 8007156:	d904      	bls.n	8007162 <RCCEx_PLL3_Config+0x92>
 8007158:	f640 612e 	movw	r1, #3630	; 0xe2e
 800715c:	486c      	ldr	r0, [pc, #432]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 800715e:	f7f9 fd9e 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d013      	beq.n	8007192 <RCCEx_PLL3_Config+0xc2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007172:	d00e      	beq.n	8007192 <RCCEx_PLL3_Config+0xc2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800717c:	d009      	beq.n	8007192 <RCCEx_PLL3_Config+0xc2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007186:	d004      	beq.n	8007192 <RCCEx_PLL3_Config+0xc2>
 8007188:	f640 612f 	movw	r1, #3631	; 0xe2f
 800718c:	4860      	ldr	r0, [pc, #384]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 800718e:	f7f9 fd86 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <RCCEx_PLL3_Config+0xde>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a2:	d004      	beq.n	80071ae <RCCEx_PLL3_Config+0xde>
 80071a4:	f44f 6163 	mov.w	r1, #3632	; 0xe30
 80071a8:	4859      	ldr	r0, [pc, #356]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 80071aa:	f7f9 fd78 	bl	8000c9e <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b6:	d304      	bcc.n	80071c2 <RCCEx_PLL3_Config+0xf2>
 80071b8:	f640 6131 	movw	r1, #3633	; 0xe31
 80071bc:	4854      	ldr	r0, [pc, #336]	; (8007310 <RCCEx_PLL3_Config+0x240>)
 80071be:	f7f9 fd6e 	bl	8000c9e <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071c2:	4b54      	ldr	r3, [pc, #336]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d101      	bne.n	80071d2 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e099      	b.n	8007306 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071d2:	4b50      	ldr	r3, [pc, #320]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a4f      	ldr	r2, [pc, #316]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80071d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071de:	f7fa f9b3 	bl	8001548 <HAL_GetTick>
 80071e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071e4:	e008      	b.n	80071f8 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071e6:	f7fa f9af 	bl	8001548 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e086      	b.n	8007306 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071f8:	4b46      	ldr	r3, [pc, #280]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f0      	bne.n	80071e6 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007204:	4b43      	ldr	r3, [pc, #268]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	051b      	lsls	r3, r3, #20
 8007212:	4940      	ldr	r1, [pc, #256]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007214:	4313      	orrs	r3, r2
 8007216:	628b      	str	r3, [r1, #40]	; 0x28
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	3b01      	subs	r3, #1
 800721e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	3b01      	subs	r3, #1
 8007228:	025b      	lsls	r3, r3, #9
 800722a:	b29b      	uxth	r3, r3
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	3b01      	subs	r3, #1
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	3b01      	subs	r3, #1
 8007242:	061b      	lsls	r3, r3, #24
 8007244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007248:	4932      	ldr	r1, [pc, #200]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 800724a:	4313      	orrs	r3, r2
 800724c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	492e      	ldr	r1, [pc, #184]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 800725c:	4313      	orrs	r3, r2
 800725e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007260:	4b2c      	ldr	r3, [pc, #176]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	4929      	ldr	r1, [pc, #164]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 800726e:	4313      	orrs	r3, r2
 8007270:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007272:	4b28      	ldr	r3, [pc, #160]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	4a27      	ldr	r2, [pc, #156]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800727c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800727e:	4b25      	ldr	r3, [pc, #148]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007282:	4b25      	ldr	r3, [pc, #148]	; (8007318 <RCCEx_PLL3_Config+0x248>)
 8007284:	4013      	ands	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	69d2      	ldr	r2, [r2, #28]
 800728a:	00d2      	lsls	r2, r2, #3
 800728c:	4921      	ldr	r1, [pc, #132]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 800728e:	4313      	orrs	r3, r2
 8007290:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 8007298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800729c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	4a1a      	ldr	r2, [pc, #104]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072b0:	e00f      	b.n	80072d2 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d106      	bne.n	80072c6 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072b8:	4b16      	ldr	r3, [pc, #88]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a15      	ldr	r2, [pc, #84]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072c4:	e005      	b.n	80072d2 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4a12      	ldr	r2, [pc, #72]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a0f      	ldr	r2, [pc, #60]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072de:	f7fa f933 	bl	8001548 <HAL_GetTick>
 80072e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072e4:	e008      	b.n	80072f8 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072e6:	f7fa f92f 	bl	8001548 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e006      	b.n	8007306 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <RCCEx_PLL3_Config+0x244>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f0      	beq.n	80072e6 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	080191a0 	.word	0x080191a0
 8007314:	58024400 	.word	0x58024400
 8007318:	ffff0007 	.word	0xffff0007

0800731c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e0cd      	b.n	80074ca <HAL_TIM_Base_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a68      	ldr	r2, [pc, #416]	; (80074d4 <HAL_TIM_Base_Init+0x1b8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d045      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007340:	d040      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a64      	ldr	r2, [pc, #400]	; (80074d8 <HAL_TIM_Base_Init+0x1bc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d03b      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a62      	ldr	r2, [pc, #392]	; (80074dc <HAL_TIM_Base_Init+0x1c0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d036      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a61      	ldr	r2, [pc, #388]	; (80074e0 <HAL_TIM_Base_Init+0x1c4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d031      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a5f      	ldr	r2, [pc, #380]	; (80074e4 <HAL_TIM_Base_Init+0x1c8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d02c      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a5e      	ldr	r2, [pc, #376]	; (80074e8 <HAL_TIM_Base_Init+0x1cc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d027      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a5c      	ldr	r2, [pc, #368]	; (80074ec <HAL_TIM_Base_Init+0x1d0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d022      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a5b      	ldr	r2, [pc, #364]	; (80074f0 <HAL_TIM_Base_Init+0x1d4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d01d      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a59      	ldr	r2, [pc, #356]	; (80074f4 <HAL_TIM_Base_Init+0x1d8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d018      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a58      	ldr	r2, [pc, #352]	; (80074f8 <HAL_TIM_Base_Init+0x1dc>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d013      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a56      	ldr	r2, [pc, #344]	; (80074fc <HAL_TIM_Base_Init+0x1e0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a55      	ldr	r2, [pc, #340]	; (8007500 <HAL_TIM_Base_Init+0x1e4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d009      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a53      	ldr	r2, [pc, #332]	; (8007504 <HAL_TIM_Base_Init+0x1e8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_TIM_Base_Init+0xa8>
 80073ba:	f44f 718b 	mov.w	r1, #278	; 0x116
 80073be:	4852      	ldr	r0, [pc, #328]	; (8007508 <HAL_TIM_Base_Init+0x1ec>)
 80073c0:	f7f9 fc6d 	bl	8000c9e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d014      	beq.n	80073f6 <HAL_TIM_Base_Init+0xda>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b10      	cmp	r3, #16
 80073d2:	d010      	beq.n	80073f6 <HAL_TIM_Base_Init+0xda>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d00c      	beq.n	80073f6 <HAL_TIM_Base_Init+0xda>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d008      	beq.n	80073f6 <HAL_TIM_Base_Init+0xda>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b60      	cmp	r3, #96	; 0x60
 80073ea:	d004      	beq.n	80073f6 <HAL_TIM_Base_Init+0xda>
 80073ec:	f240 1117 	movw	r1, #279	; 0x117
 80073f0:	4845      	ldr	r0, [pc, #276]	; (8007508 <HAL_TIM_Base_Init+0x1ec>)
 80073f2:	f7f9 fc54 	bl	8000c9e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00e      	beq.n	800741c <HAL_TIM_Base_Init+0x100>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007406:	d009      	beq.n	800741c <HAL_TIM_Base_Init+0x100>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007410:	d004      	beq.n	800741c <HAL_TIM_Base_Init+0x100>
 8007412:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007416:	483c      	ldr	r0, [pc, #240]	; (8007508 <HAL_TIM_Base_Init+0x1ec>)
 8007418:	f7f9 fc41 	bl	8000c9e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <HAL_TIM_Base_Init+0x11a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b80      	cmp	r3, #128	; 0x80
 800742a:	d004      	beq.n	8007436 <HAL_TIM_Base_Init+0x11a>
 800742c:	f240 1119 	movw	r1, #281	; 0x119
 8007430:	4835      	ldr	r0, [pc, #212]	; (8007508 <HAL_TIM_Base_Init+0x1ec>)
 8007432:	f7f9 fc34 	bl	8000c9e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f85e 	bl	800750c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f000 fa6e 	bl	8007944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40000400 	.word	0x40000400
 80074dc:	40000800 	.word	0x40000800
 80074e0:	40000c00 	.word	0x40000c00
 80074e4:	40001000 	.word	0x40001000
 80074e8:	40001400 	.word	0x40001400
 80074ec:	40010400 	.word	0x40010400
 80074f0:	40001800 	.word	0x40001800
 80074f4:	40001c00 	.word	0x40001c00
 80074f8:	40002000 	.word	0x40002000
 80074fc:	40014000 	.word	0x40014000
 8007500:	40014400 	.word	0x40014400
 8007504:	40014800 	.word	0x40014800
 8007508:	080191dc 	.word	0x080191dc

0800750c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a52      	ldr	r2, [pc, #328]	; (8007678 <HAL_TIM_Base_Start_IT+0x158>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d045      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753a:	d040      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a4e      	ldr	r2, [pc, #312]	; (800767c <HAL_TIM_Base_Start_IT+0x15c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d03b      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a4d      	ldr	r2, [pc, #308]	; (8007680 <HAL_TIM_Base_Start_IT+0x160>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d036      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a4b      	ldr	r2, [pc, #300]	; (8007684 <HAL_TIM_Base_Start_IT+0x164>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d031      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a4a      	ldr	r2, [pc, #296]	; (8007688 <HAL_TIM_Base_Start_IT+0x168>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d02c      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a48      	ldr	r2, [pc, #288]	; (800768c <HAL_TIM_Base_Start_IT+0x16c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d027      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a47      	ldr	r2, [pc, #284]	; (8007690 <HAL_TIM_Base_Start_IT+0x170>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d022      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a45      	ldr	r2, [pc, #276]	; (8007694 <HAL_TIM_Base_Start_IT+0x174>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01d      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a44      	ldr	r2, [pc, #272]	; (8007698 <HAL_TIM_Base_Start_IT+0x178>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d018      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a42      	ldr	r2, [pc, #264]	; (800769c <HAL_TIM_Base_Start_IT+0x17c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a41      	ldr	r2, [pc, #260]	; (80076a0 <HAL_TIM_Base_Start_IT+0x180>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00e      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a3f      	ldr	r2, [pc, #252]	; (80076a4 <HAL_TIM_Base_Start_IT+0x184>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d009      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a3e      	ldr	r2, [pc, #248]	; (80076a8 <HAL_TIM_Base_Start_IT+0x188>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d004      	beq.n	80075be <HAL_TIM_Base_Start_IT+0x9e>
 80075b4:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80075b8:	483c      	ldr	r0, [pc, #240]	; (80076ac <HAL_TIM_Base_Start_IT+0x18c>)
 80075ba:	f7f9 fb70 	bl	8000c9e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d001      	beq.n	80075ce <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e04f      	b.n	800766e <HAL_TIM_Base_Start_IT+0x14e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f042 0201 	orr.w	r2, r2, #1
 80075e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a23      	ldr	r2, [pc, #140]	; (8007678 <HAL_TIM_Base_Start_IT+0x158>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d01d      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x10c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f8:	d018      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x10c>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1f      	ldr	r2, [pc, #124]	; (800767c <HAL_TIM_Base_Start_IT+0x15c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d013      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x10c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1d      	ldr	r2, [pc, #116]	; (8007680 <HAL_TIM_Base_Start_IT+0x160>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00e      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x10c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <HAL_TIM_Base_Start_IT+0x164>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d009      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x10c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <HAL_TIM_Base_Start_IT+0x170>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x10c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <HAL_TIM_Base_Start_IT+0x174>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d115      	bne.n	8007658 <HAL_TIM_Base_Start_IT+0x138>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	4b1f      	ldr	r3, [pc, #124]	; (80076b0 <HAL_TIM_Base_Start_IT+0x190>)
 8007634:	4013      	ands	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b06      	cmp	r3, #6
 800763c:	d015      	beq.n	800766a <HAL_TIM_Base_Start_IT+0x14a>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007644:	d011      	beq.n	800766a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f042 0201 	orr.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007656:	e008      	b.n	800766a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e000      	b.n	800766c <HAL_TIM_Base_Start_IT+0x14c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40010000 	.word	0x40010000
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40001000 	.word	0x40001000
 800768c:	40001400 	.word	0x40001400
 8007690:	40010400 	.word	0x40010400
 8007694:	40001800 	.word	0x40001800
 8007698:	40001c00 	.word	0x40001c00
 800769c:	40002000 	.word	0x40002000
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800
 80076ac:	080191dc 	.word	0x080191dc
 80076b0:	00010007 	.word	0x00010007

080076b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d122      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d11b      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0202 	mvn.w	r2, #2
 80076e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f905 	bl	8007906 <HAL_TIM_IC_CaptureCallback>
 80076fc:	e005      	b.n	800770a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8f7 	bl	80078f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f908 	bl	800791a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b04      	cmp	r3, #4
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0204 	mvn.w	r2, #4
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8db 	bl	8007906 <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8cd 	bl	80078f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f8de 	bl	800791a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b08      	cmp	r3, #8
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0208 	mvn.w	r2, #8
 8007788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2204      	movs	r2, #4
 800778e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f8b1 	bl	8007906 <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f8a3 	bl	80078f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f8b4 	bl	800791a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0210 	mvn.w	r2, #16
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2208      	movs	r2, #8
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f887 	bl	8007906 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f879 	bl	80078f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f88a 	bl	800791a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b01      	cmp	r3, #1
 8007818:	d10e      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d107      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0201 	mvn.w	r2, #1
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7f9 fa1a 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d10e      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d107      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800785c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f914 	bl	8007a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007872:	d10e      	bne.n	8007892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d107      	bne.n	8007892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800788a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f907 	bl	8007aa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	d10e      	bne.n	80078be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d107      	bne.n	80078be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f838 	bl	800792e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d10e      	bne.n	80078ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d107      	bne.n	80078ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f06f 0220 	mvn.w	r2, #32
 80078e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f8c7 	bl	8007a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a40      	ldr	r2, [pc, #256]	; (8007a58 <TIM_Base_SetConfig+0x114>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d013      	beq.n	8007984 <TIM_Base_SetConfig+0x40>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007962:	d00f      	beq.n	8007984 <TIM_Base_SetConfig+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a3d      	ldr	r2, [pc, #244]	; (8007a5c <TIM_Base_SetConfig+0x118>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00b      	beq.n	8007984 <TIM_Base_SetConfig+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a3c      	ldr	r2, [pc, #240]	; (8007a60 <TIM_Base_SetConfig+0x11c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d007      	beq.n	8007984 <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a3b      	ldr	r2, [pc, #236]	; (8007a64 <TIM_Base_SetConfig+0x120>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a3a      	ldr	r2, [pc, #232]	; (8007a68 <TIM_Base_SetConfig+0x124>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d108      	bne.n	8007996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a2f      	ldr	r2, [pc, #188]	; (8007a58 <TIM_Base_SetConfig+0x114>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01f      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a4:	d01b      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a2c      	ldr	r2, [pc, #176]	; (8007a5c <TIM_Base_SetConfig+0x118>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d017      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2b      	ldr	r2, [pc, #172]	; (8007a60 <TIM_Base_SetConfig+0x11c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d013      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a2a      	ldr	r2, [pc, #168]	; (8007a64 <TIM_Base_SetConfig+0x120>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00f      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a29      	ldr	r2, [pc, #164]	; (8007a68 <TIM_Base_SetConfig+0x124>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00b      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a28      	ldr	r2, [pc, #160]	; (8007a6c <TIM_Base_SetConfig+0x128>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d007      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a27      	ldr	r2, [pc, #156]	; (8007a70 <TIM_Base_SetConfig+0x12c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d003      	beq.n	80079de <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a26      	ldr	r2, [pc, #152]	; (8007a74 <TIM_Base_SetConfig+0x130>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d108      	bne.n	80079f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a10      	ldr	r2, [pc, #64]	; (8007a58 <TIM_Base_SetConfig+0x114>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00f      	beq.n	8007a3c <TIM_Base_SetConfig+0xf8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a12      	ldr	r2, [pc, #72]	; (8007a68 <TIM_Base_SetConfig+0x124>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00b      	beq.n	8007a3c <TIM_Base_SetConfig+0xf8>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <TIM_Base_SetConfig+0x128>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d007      	beq.n	8007a3c <TIM_Base_SetConfig+0xf8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <TIM_Base_SetConfig+0x12c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d003      	beq.n	8007a3c <TIM_Base_SetConfig+0xf8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a0f      	ldr	r2, [pc, #60]	; (8007a74 <TIM_Base_SetConfig+0x130>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d103      	bne.n	8007a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	615a      	str	r2, [r3, #20]
}
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40014400 	.word	0x40014400
 8007a74:	40014800 	.word	0x40014800

08007a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e0ab      	b.n	8007c1e <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d032      	beq.n	8007b34 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a55      	ldr	r2, [pc, #340]	; (8007c28 <HAL_UART_Init+0x174>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d05f      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a53      	ldr	r2, [pc, #332]	; (8007c2c <HAL_UART_Init+0x178>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d05a      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a52      	ldr	r2, [pc, #328]	; (8007c30 <HAL_UART_Init+0x17c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d055      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a50      	ldr	r2, [pc, #320]	; (8007c34 <HAL_UART_Init+0x180>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d050      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a4f      	ldr	r2, [pc, #316]	; (8007c38 <HAL_UART_Init+0x184>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d04b      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a4d      	ldr	r2, [pc, #308]	; (8007c3c <HAL_UART_Init+0x188>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d046      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4c      	ldr	r2, [pc, #304]	; (8007c40 <HAL_UART_Init+0x18c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d041      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a4a      	ldr	r2, [pc, #296]	; (8007c44 <HAL_UART_Init+0x190>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d03c      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a49      	ldr	r2, [pc, #292]	; (8007c48 <HAL_UART_Init+0x194>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d037      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b28:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8007b2c:	4847      	ldr	r0, [pc, #284]	; (8007c4c <HAL_UART_Init+0x198>)
 8007b2e:	f7f9 f8b6 	bl	8000c9e <assert_failed>
 8007b32:	e031      	b.n	8007b98 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a3b      	ldr	r2, [pc, #236]	; (8007c28 <HAL_UART_Init+0x174>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d02c      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a3a      	ldr	r2, [pc, #232]	; (8007c2c <HAL_UART_Init+0x178>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d027      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a38      	ldr	r2, [pc, #224]	; (8007c30 <HAL_UART_Init+0x17c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d022      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a37      	ldr	r2, [pc, #220]	; (8007c34 <HAL_UART_Init+0x180>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d01d      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a35      	ldr	r2, [pc, #212]	; (8007c38 <HAL_UART_Init+0x184>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d018      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a34      	ldr	r2, [pc, #208]	; (8007c3c <HAL_UART_Init+0x188>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d013      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a32      	ldr	r2, [pc, #200]	; (8007c40 <HAL_UART_Init+0x18c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00e      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a31      	ldr	r2, [pc, #196]	; (8007c44 <HAL_UART_Init+0x190>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d009      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a2f      	ldr	r2, [pc, #188]	; (8007c48 <HAL_UART_Init+0x194>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_UART_Init+0xe4>
 8007b8e:	f240 1143 	movw	r1, #323	; 0x143
 8007b92:	482e      	ldr	r0, [pc, #184]	; (8007c4c <HAL_UART_Init+0x198>)
 8007b94:	f7f9 f883 	bl	8000c9e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7f9 fa8c 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2224      	movs	r2, #36	; 0x24
 8007bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f841 	bl	8007c50 <UART_SetConfig>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e022      	b.n	8007c1e <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fe6d 	bl	80088c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0201 	orr.w	r2, r2, #1
 8007c14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 ffc8 	bl	8008bac <UART_CheckIdleState>
 8007c1c:	4603      	mov	r3, r0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40011000 	.word	0x40011000
 8007c2c:	40004400 	.word	0x40004400
 8007c30:	40004800 	.word	0x40004800
 8007c34:	40004c00 	.word	0x40004c00
 8007c38:	40005000 	.word	0x40005000
 8007c3c:	40011400 	.word	0x40011400
 8007c40:	40007800 	.word	0x40007800
 8007c44:	40007c00 	.word	0x40007c00
 8007c48:	58000c00 	.word	0x58000c00
 8007c4c:	08019214 	.word	0x08019214

08007c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c50:	b5b0      	push	{r4, r5, r7, lr}
 8007c52:	b08e      	sub	sp, #56	; 0x38
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	4a17      	ldr	r2, [pc, #92]	; (8007cc0 <UART_SetConfig+0x70>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d904      	bls.n	8007c72 <UART_SetConfig+0x22>
 8007c68:	f640 31d1 	movw	r1, #3025	; 0xbd1
 8007c6c:	4815      	ldr	r0, [pc, #84]	; (8007cc4 <UART_SetConfig+0x74>)
 8007c6e:	f7f9 f816 	bl	8000c9e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7a:	d00d      	beq.n	8007c98 <UART_SetConfig+0x48>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <UART_SetConfig+0x48>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8c:	d004      	beq.n	8007c98 <UART_SetConfig+0x48>
 8007c8e:	f640 31d2 	movw	r1, #3026	; 0xbd2
 8007c92:	480c      	ldr	r0, [pc, #48]	; (8007cc4 <UART_SetConfig+0x74>)
 8007c94:	f7f9 f803 	bl	8000c9e <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <UART_SetConfig+0x78>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d114      	bne.n	8007ccc <UART_SetConfig+0x7c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d036      	beq.n	8007d18 <UART_SetConfig+0xc8>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb2:	d031      	beq.n	8007d18 <UART_SetConfig+0xc8>
 8007cb4:	f640 31d5 	movw	r1, #3029	; 0xbd5
 8007cb8:	4802      	ldr	r0, [pc, #8]	; (8007cc4 <UART_SetConfig+0x74>)
 8007cba:	f7f8 fff0 	bl	8000c9e <assert_failed>
 8007cbe:	e02b      	b.n	8007d18 <UART_SetConfig+0xc8>
 8007cc0:	00bebc20 	.word	0x00bebc20
 8007cc4:	08019214 	.word	0x08019214
 8007cc8:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd4:	d012      	beq.n	8007cfc <UART_SetConfig+0xac>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00e      	beq.n	8007cfc <UART_SetConfig+0xac>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ce6:	d009      	beq.n	8007cfc <UART_SetConfig+0xac>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf0:	d004      	beq.n	8007cfc <UART_SetConfig+0xac>
 8007cf2:	f640 31d9 	movw	r1, #3033	; 0xbd9
 8007cf6:	48a7      	ldr	r0, [pc, #668]	; (8007f94 <UART_SetConfig+0x344>)
 8007cf8:	f7f8 ffd1 	bl	8000c9e <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <UART_SetConfig+0xc8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d0c:	d004      	beq.n	8007d18 <UART_SetConfig+0xc8>
 8007d0e:	f640 31da 	movw	r1, #3034	; 0xbda
 8007d12:	48a0      	ldr	r0, [pc, #640]	; (8007f94 <UART_SetConfig+0x344>)
 8007d14:	f7f8 ffc3 	bl	8000c9e <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00e      	beq.n	8007d3e <UART_SetConfig+0xee>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d28:	d009      	beq.n	8007d3e <UART_SetConfig+0xee>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d32:	d004      	beq.n	8007d3e <UART_SetConfig+0xee>
 8007d34:	f640 31dd 	movw	r1, #3037	; 0xbdd
 8007d38:	4896      	ldr	r0, [pc, #600]	; (8007f94 <UART_SetConfig+0x344>)
 8007d3a:	f7f8 ffb0 	bl	8000c9e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	f023 030c 	bic.w	r3, r3, #12
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d103      	bne.n	8007d52 <UART_SetConfig+0x102>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <UART_SetConfig+0x10c>
 8007d52:	f640 31de 	movw	r1, #3038	; 0xbde
 8007d56:	488f      	ldr	r0, [pc, #572]	; (8007f94 <UART_SetConfig+0x344>)
 8007d58:	f7f8 ffa1 	bl	8000c9e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d013      	beq.n	8007d8c <UART_SetConfig+0x13c>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6c:	d00e      	beq.n	8007d8c <UART_SetConfig+0x13c>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d76:	d009      	beq.n	8007d8c <UART_SetConfig+0x13c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d80:	d004      	beq.n	8007d8c <UART_SetConfig+0x13c>
 8007d82:	f640 31df 	movw	r1, #3039	; 0xbdf
 8007d86:	4883      	ldr	r0, [pc, #524]	; (8007f94 <UART_SetConfig+0x344>)
 8007d88:	f7f8 ff89 	bl	8000c9e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d009      	beq.n	8007da8 <UART_SetConfig+0x158>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9c:	d004      	beq.n	8007da8 <UART_SetConfig+0x158>
 8007d9e:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 8007da2:	487c      	ldr	r0, [pc, #496]	; (8007f94 <UART_SetConfig+0x344>)
 8007da4:	f7f8 ff7b 	bl	8000c9e <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d030      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d02c      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d028      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d024      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d020      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	2b05      	cmp	r3, #5
 8007dd6:	d01c      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b06      	cmp	r3, #6
 8007dde:	d018      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2b07      	cmp	r3, #7
 8007de6:	d014      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d010      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	d00c      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2b0a      	cmp	r3, #10
 8007dfe:	d008      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	2b0b      	cmp	r3, #11
 8007e06:	d004      	beq.n	8007e12 <UART_SetConfig+0x1c2>
 8007e08:	f640 31e1 	movw	r1, #3041	; 0xbe1
 8007e0c:	4861      	ldr	r0, [pc, #388]	; (8007f94 <UART_SetConfig+0x344>)
 8007e0e:	f7f8 ff46 	bl	8000c9e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	4b59      	ldr	r3, [pc, #356]	; (8007f98 <UART_SetConfig+0x348>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6812      	ldr	r2, [r2, #0]
 8007e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a4f      	ldr	r2, [pc, #316]	; (8007f9c <UART_SetConfig+0x34c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <UART_SetConfig+0x21e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	4b4a      	ldr	r3, [pc, #296]	; (8007fa0 <UART_SetConfig+0x350>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6812      	ldr	r2, [r2, #0]
 8007e7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	f023 010f 	bic.w	r1, r3, #15
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a41      	ldr	r2, [pc, #260]	; (8007fa4 <UART_SetConfig+0x354>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	f040 8084 	bne.w	8007fac <UART_SetConfig+0x35c>
 8007ea4:	4b40      	ldr	r3, [pc, #256]	; (8007fa8 <UART_SetConfig+0x358>)
 8007ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eac:	2b28      	cmp	r3, #40	; 0x28
 8007eae:	d86d      	bhi.n	8007f8c <UART_SetConfig+0x33c>
 8007eb0:	a201      	add	r2, pc, #4	; (adr r2, 8007eb8 <UART_SetConfig+0x268>)
 8007eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb6:	bf00      	nop
 8007eb8:	08007f5d 	.word	0x08007f5d
 8007ebc:	08007f8d 	.word	0x08007f8d
 8007ec0:	08007f8d 	.word	0x08007f8d
 8007ec4:	08007f8d 	.word	0x08007f8d
 8007ec8:	08007f8d 	.word	0x08007f8d
 8007ecc:	08007f8d 	.word	0x08007f8d
 8007ed0:	08007f8d 	.word	0x08007f8d
 8007ed4:	08007f8d 	.word	0x08007f8d
 8007ed8:	08007f65 	.word	0x08007f65
 8007edc:	08007f8d 	.word	0x08007f8d
 8007ee0:	08007f8d 	.word	0x08007f8d
 8007ee4:	08007f8d 	.word	0x08007f8d
 8007ee8:	08007f8d 	.word	0x08007f8d
 8007eec:	08007f8d 	.word	0x08007f8d
 8007ef0:	08007f8d 	.word	0x08007f8d
 8007ef4:	08007f8d 	.word	0x08007f8d
 8007ef8:	08007f6d 	.word	0x08007f6d
 8007efc:	08007f8d 	.word	0x08007f8d
 8007f00:	08007f8d 	.word	0x08007f8d
 8007f04:	08007f8d 	.word	0x08007f8d
 8007f08:	08007f8d 	.word	0x08007f8d
 8007f0c:	08007f8d 	.word	0x08007f8d
 8007f10:	08007f8d 	.word	0x08007f8d
 8007f14:	08007f8d 	.word	0x08007f8d
 8007f18:	08007f75 	.word	0x08007f75
 8007f1c:	08007f8d 	.word	0x08007f8d
 8007f20:	08007f8d 	.word	0x08007f8d
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f8d 	.word	0x08007f8d
 8007f2c:	08007f8d 	.word	0x08007f8d
 8007f30:	08007f8d 	.word	0x08007f8d
 8007f34:	08007f8d 	.word	0x08007f8d
 8007f38:	08007f7d 	.word	0x08007f7d
 8007f3c:	08007f8d 	.word	0x08007f8d
 8007f40:	08007f8d 	.word	0x08007f8d
 8007f44:	08007f8d 	.word	0x08007f8d
 8007f48:	08007f8d 	.word	0x08007f8d
 8007f4c:	08007f8d 	.word	0x08007f8d
 8007f50:	08007f8d 	.word	0x08007f8d
 8007f54:	08007f8d 	.word	0x08007f8d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f62:	e22a      	b.n	80083ba <UART_SetConfig+0x76a>
 8007f64:	2304      	movs	r3, #4
 8007f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6a:	e226      	b.n	80083ba <UART_SetConfig+0x76a>
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f72:	e222      	b.n	80083ba <UART_SetConfig+0x76a>
 8007f74:	2310      	movs	r3, #16
 8007f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f7a:	e21e      	b.n	80083ba <UART_SetConfig+0x76a>
 8007f7c:	2320      	movs	r3, #32
 8007f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f82:	e21a      	b.n	80083ba <UART_SetConfig+0x76a>
 8007f84:	2340      	movs	r3, #64	; 0x40
 8007f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f8a:	e216      	b.n	80083ba <UART_SetConfig+0x76a>
 8007f8c:	2380      	movs	r3, #128	; 0x80
 8007f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f92:	e212      	b.n	80083ba <UART_SetConfig+0x76a>
 8007f94:	08019214 	.word	0x08019214
 8007f98:	cfff69f3 	.word	0xcfff69f3
 8007f9c:	58000c00 	.word	0x58000c00
 8007fa0:	11fff4ff 	.word	0x11fff4ff
 8007fa4:	40011000 	.word	0x40011000
 8007fa8:	58024400 	.word	0x58024400
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4ac3      	ldr	r2, [pc, #780]	; (80082c0 <UART_SetConfig+0x670>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d130      	bne.n	8008018 <UART_SetConfig+0x3c8>
 8007fb6:	4bc3      	ldr	r3, [pc, #780]	; (80082c4 <UART_SetConfig+0x674>)
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	2b05      	cmp	r3, #5
 8007fc0:	d826      	bhi.n	8008010 <UART_SetConfig+0x3c0>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <UART_SetConfig+0x378>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08007fe1 	.word	0x08007fe1
 8007fcc:	08007fe9 	.word	0x08007fe9
 8007fd0:	08007ff1 	.word	0x08007ff1
 8007fd4:	08007ff9 	.word	0x08007ff9
 8007fd8:	08008001 	.word	0x08008001
 8007fdc:	08008009 	.word	0x08008009
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e1e8      	b.n	80083ba <UART_SetConfig+0x76a>
 8007fe8:	2304      	movs	r3, #4
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	e1e4      	b.n	80083ba <UART_SetConfig+0x76a>
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff6:	e1e0      	b.n	80083ba <UART_SetConfig+0x76a>
 8007ff8:	2310      	movs	r3, #16
 8007ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ffe:	e1dc      	b.n	80083ba <UART_SetConfig+0x76a>
 8008000:	2320      	movs	r3, #32
 8008002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008006:	e1d8      	b.n	80083ba <UART_SetConfig+0x76a>
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800800e:	e1d4      	b.n	80083ba <UART_SetConfig+0x76a>
 8008010:	2380      	movs	r3, #128	; 0x80
 8008012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008016:	e1d0      	b.n	80083ba <UART_SetConfig+0x76a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4aaa      	ldr	r2, [pc, #680]	; (80082c8 <UART_SetConfig+0x678>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d130      	bne.n	8008084 <UART_SetConfig+0x434>
 8008022:	4ba8      	ldr	r3, [pc, #672]	; (80082c4 <UART_SetConfig+0x674>)
 8008024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b05      	cmp	r3, #5
 800802c:	d826      	bhi.n	800807c <UART_SetConfig+0x42c>
 800802e:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <UART_SetConfig+0x3e4>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	0800804d 	.word	0x0800804d
 8008038:	08008055 	.word	0x08008055
 800803c:	0800805d 	.word	0x0800805d
 8008040:	08008065 	.word	0x08008065
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008075 	.word	0x08008075
 800804c:	2300      	movs	r3, #0
 800804e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008052:	e1b2      	b.n	80083ba <UART_SetConfig+0x76a>
 8008054:	2304      	movs	r3, #4
 8008056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805a:	e1ae      	b.n	80083ba <UART_SetConfig+0x76a>
 800805c:	2308      	movs	r3, #8
 800805e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008062:	e1aa      	b.n	80083ba <UART_SetConfig+0x76a>
 8008064:	2310      	movs	r3, #16
 8008066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800806a:	e1a6      	b.n	80083ba <UART_SetConfig+0x76a>
 800806c:	2320      	movs	r3, #32
 800806e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008072:	e1a2      	b.n	80083ba <UART_SetConfig+0x76a>
 8008074:	2340      	movs	r3, #64	; 0x40
 8008076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800807a:	e19e      	b.n	80083ba <UART_SetConfig+0x76a>
 800807c:	2380      	movs	r3, #128	; 0x80
 800807e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008082:	e19a      	b.n	80083ba <UART_SetConfig+0x76a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a90      	ldr	r2, [pc, #576]	; (80082cc <UART_SetConfig+0x67c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d130      	bne.n	80080f0 <UART_SetConfig+0x4a0>
 800808e:	4b8d      	ldr	r3, [pc, #564]	; (80082c4 <UART_SetConfig+0x674>)
 8008090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b05      	cmp	r3, #5
 8008098:	d826      	bhi.n	80080e8 <UART_SetConfig+0x498>
 800809a:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <UART_SetConfig+0x450>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080b9 	.word	0x080080b9
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	080080c9 	.word	0x080080c9
 80080ac:	080080d1 	.word	0x080080d1
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080be:	e17c      	b.n	80083ba <UART_SetConfig+0x76a>
 80080c0:	2304      	movs	r3, #4
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e178      	b.n	80083ba <UART_SetConfig+0x76a>
 80080c8:	2308      	movs	r3, #8
 80080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ce:	e174      	b.n	80083ba <UART_SetConfig+0x76a>
 80080d0:	2310      	movs	r3, #16
 80080d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080d6:	e170      	b.n	80083ba <UART_SetConfig+0x76a>
 80080d8:	2320      	movs	r3, #32
 80080da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080de:	e16c      	b.n	80083ba <UART_SetConfig+0x76a>
 80080e0:	2340      	movs	r3, #64	; 0x40
 80080e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080e6:	e168      	b.n	80083ba <UART_SetConfig+0x76a>
 80080e8:	2380      	movs	r3, #128	; 0x80
 80080ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ee:	e164      	b.n	80083ba <UART_SetConfig+0x76a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a76      	ldr	r2, [pc, #472]	; (80082d0 <UART_SetConfig+0x680>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d130      	bne.n	800815c <UART_SetConfig+0x50c>
 80080fa:	4b72      	ldr	r3, [pc, #456]	; (80082c4 <UART_SetConfig+0x674>)
 80080fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b05      	cmp	r3, #5
 8008104:	d826      	bhi.n	8008154 <UART_SetConfig+0x504>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <UART_SetConfig+0x4bc>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008125 	.word	0x08008125
 8008110:	0800812d 	.word	0x0800812d
 8008114:	08008135 	.word	0x08008135
 8008118:	0800813d 	.word	0x0800813d
 800811c:	08008145 	.word	0x08008145
 8008120:	0800814d 	.word	0x0800814d
 8008124:	2300      	movs	r3, #0
 8008126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812a:	e146      	b.n	80083ba <UART_SetConfig+0x76a>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008132:	e142      	b.n	80083ba <UART_SetConfig+0x76a>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813a:	e13e      	b.n	80083ba <UART_SetConfig+0x76a>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008142:	e13a      	b.n	80083ba <UART_SetConfig+0x76a>
 8008144:	2320      	movs	r3, #32
 8008146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814a:	e136      	b.n	80083ba <UART_SetConfig+0x76a>
 800814c:	2340      	movs	r3, #64	; 0x40
 800814e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008152:	e132      	b.n	80083ba <UART_SetConfig+0x76a>
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815a:	e12e      	b.n	80083ba <UART_SetConfig+0x76a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a5c      	ldr	r2, [pc, #368]	; (80082d4 <UART_SetConfig+0x684>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d176      	bne.n	8008254 <UART_SetConfig+0x604>
 8008166:	4b57      	ldr	r3, [pc, #348]	; (80082c4 <UART_SetConfig+0x674>)
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800816e:	2b28      	cmp	r3, #40	; 0x28
 8008170:	d86c      	bhi.n	800824c <UART_SetConfig+0x5fc>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <UART_SetConfig+0x528>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	0800821d 	.word	0x0800821d
 800817c:	0800824d 	.word	0x0800824d
 8008180:	0800824d 	.word	0x0800824d
 8008184:	0800824d 	.word	0x0800824d
 8008188:	0800824d 	.word	0x0800824d
 800818c:	0800824d 	.word	0x0800824d
 8008190:	0800824d 	.word	0x0800824d
 8008194:	0800824d 	.word	0x0800824d
 8008198:	08008225 	.word	0x08008225
 800819c:	0800824d 	.word	0x0800824d
 80081a0:	0800824d 	.word	0x0800824d
 80081a4:	0800824d 	.word	0x0800824d
 80081a8:	0800824d 	.word	0x0800824d
 80081ac:	0800824d 	.word	0x0800824d
 80081b0:	0800824d 	.word	0x0800824d
 80081b4:	0800824d 	.word	0x0800824d
 80081b8:	0800822d 	.word	0x0800822d
 80081bc:	0800824d 	.word	0x0800824d
 80081c0:	0800824d 	.word	0x0800824d
 80081c4:	0800824d 	.word	0x0800824d
 80081c8:	0800824d 	.word	0x0800824d
 80081cc:	0800824d 	.word	0x0800824d
 80081d0:	0800824d 	.word	0x0800824d
 80081d4:	0800824d 	.word	0x0800824d
 80081d8:	08008235 	.word	0x08008235
 80081dc:	0800824d 	.word	0x0800824d
 80081e0:	0800824d 	.word	0x0800824d
 80081e4:	0800824d 	.word	0x0800824d
 80081e8:	0800824d 	.word	0x0800824d
 80081ec:	0800824d 	.word	0x0800824d
 80081f0:	0800824d 	.word	0x0800824d
 80081f4:	0800824d 	.word	0x0800824d
 80081f8:	0800823d 	.word	0x0800823d
 80081fc:	0800824d 	.word	0x0800824d
 8008200:	0800824d 	.word	0x0800824d
 8008204:	0800824d 	.word	0x0800824d
 8008208:	0800824d 	.word	0x0800824d
 800820c:	0800824d 	.word	0x0800824d
 8008210:	0800824d 	.word	0x0800824d
 8008214:	0800824d 	.word	0x0800824d
 8008218:	08008245 	.word	0x08008245
 800821c:	2301      	movs	r3, #1
 800821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008222:	e0ca      	b.n	80083ba <UART_SetConfig+0x76a>
 8008224:	2304      	movs	r3, #4
 8008226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800822a:	e0c6      	b.n	80083ba <UART_SetConfig+0x76a>
 800822c:	2308      	movs	r3, #8
 800822e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008232:	e0c2      	b.n	80083ba <UART_SetConfig+0x76a>
 8008234:	2310      	movs	r3, #16
 8008236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800823a:	e0be      	b.n	80083ba <UART_SetConfig+0x76a>
 800823c:	2320      	movs	r3, #32
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008242:	e0ba      	b.n	80083ba <UART_SetConfig+0x76a>
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824a:	e0b6      	b.n	80083ba <UART_SetConfig+0x76a>
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008252:	e0b2      	b.n	80083ba <UART_SetConfig+0x76a>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a1f      	ldr	r2, [pc, #124]	; (80082d8 <UART_SetConfig+0x688>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d13e      	bne.n	80082dc <UART_SetConfig+0x68c>
 800825e:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <UART_SetConfig+0x674>)
 8008260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b05      	cmp	r3, #5
 8008268:	d826      	bhi.n	80082b8 <UART_SetConfig+0x668>
 800826a:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <UART_SetConfig+0x620>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008289 	.word	0x08008289
 8008274:	08008291 	.word	0x08008291
 8008278:	08008299 	.word	0x08008299
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082a9 	.word	0x080082a9
 8008284:	080082b1 	.word	0x080082b1
 8008288:	2300      	movs	r3, #0
 800828a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828e:	e094      	b.n	80083ba <UART_SetConfig+0x76a>
 8008290:	2304      	movs	r3, #4
 8008292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008296:	e090      	b.n	80083ba <UART_SetConfig+0x76a>
 8008298:	2308      	movs	r3, #8
 800829a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829e:	e08c      	b.n	80083ba <UART_SetConfig+0x76a>
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a6:	e088      	b.n	80083ba <UART_SetConfig+0x76a>
 80082a8:	2320      	movs	r3, #32
 80082aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ae:	e084      	b.n	80083ba <UART_SetConfig+0x76a>
 80082b0:	2340      	movs	r3, #64	; 0x40
 80082b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082b6:	e080      	b.n	80083ba <UART_SetConfig+0x76a>
 80082b8:	2380      	movs	r3, #128	; 0x80
 80082ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082be:	e07c      	b.n	80083ba <UART_SetConfig+0x76a>
 80082c0:	40004400 	.word	0x40004400
 80082c4:	58024400 	.word	0x58024400
 80082c8:	40004800 	.word	0x40004800
 80082cc:	40004c00 	.word	0x40004c00
 80082d0:	40005000 	.word	0x40005000
 80082d4:	40011400 	.word	0x40011400
 80082d8:	40007800 	.word	0x40007800
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4aaa      	ldr	r2, [pc, #680]	; (800858c <UART_SetConfig+0x93c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d130      	bne.n	8008348 <UART_SetConfig+0x6f8>
 80082e6:	4baa      	ldr	r3, [pc, #680]	; (8008590 <UART_SetConfig+0x940>)
 80082e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d826      	bhi.n	8008340 <UART_SetConfig+0x6f0>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <UART_SetConfig+0x6a8>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008311 	.word	0x08008311
 80082fc:	08008319 	.word	0x08008319
 8008300:	08008321 	.word	0x08008321
 8008304:	08008329 	.word	0x08008329
 8008308:	08008331 	.word	0x08008331
 800830c:	08008339 	.word	0x08008339
 8008310:	2300      	movs	r3, #0
 8008312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008316:	e050      	b.n	80083ba <UART_SetConfig+0x76a>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831e:	e04c      	b.n	80083ba <UART_SetConfig+0x76a>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008326:	e048      	b.n	80083ba <UART_SetConfig+0x76a>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800832e:	e044      	b.n	80083ba <UART_SetConfig+0x76a>
 8008330:	2320      	movs	r3, #32
 8008332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008336:	e040      	b.n	80083ba <UART_SetConfig+0x76a>
 8008338:	2340      	movs	r3, #64	; 0x40
 800833a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800833e:	e03c      	b.n	80083ba <UART_SetConfig+0x76a>
 8008340:	2380      	movs	r3, #128	; 0x80
 8008342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008346:	e038      	b.n	80083ba <UART_SetConfig+0x76a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a91      	ldr	r2, [pc, #580]	; (8008594 <UART_SetConfig+0x944>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d130      	bne.n	80083b4 <UART_SetConfig+0x764>
 8008352:	4b8f      	ldr	r3, [pc, #572]	; (8008590 <UART_SetConfig+0x940>)
 8008354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b05      	cmp	r3, #5
 800835c:	d826      	bhi.n	80083ac <UART_SetConfig+0x75c>
 800835e:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <UART_SetConfig+0x714>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	0800837d 	.word	0x0800837d
 8008368:	08008385 	.word	0x08008385
 800836c:	0800838d 	.word	0x0800838d
 8008370:	08008395 	.word	0x08008395
 8008374:	0800839d 	.word	0x0800839d
 8008378:	080083a5 	.word	0x080083a5
 800837c:	2302      	movs	r3, #2
 800837e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008382:	e01a      	b.n	80083ba <UART_SetConfig+0x76a>
 8008384:	2304      	movs	r3, #4
 8008386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838a:	e016      	b.n	80083ba <UART_SetConfig+0x76a>
 800838c:	2308      	movs	r3, #8
 800838e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008392:	e012      	b.n	80083ba <UART_SetConfig+0x76a>
 8008394:	2310      	movs	r3, #16
 8008396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800839a:	e00e      	b.n	80083ba <UART_SetConfig+0x76a>
 800839c:	2320      	movs	r3, #32
 800839e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083a2:	e00a      	b.n	80083ba <UART_SetConfig+0x76a>
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083aa:	e006      	b.n	80083ba <UART_SetConfig+0x76a>
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083b2:	e002      	b.n	80083ba <UART_SetConfig+0x76a>
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a75      	ldr	r2, [pc, #468]	; (8008594 <UART_SetConfig+0x944>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	f040 80ef 	bne.w	80085a4 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	dc46      	bgt.n	800845c <UART_SetConfig+0x80c>
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	db75      	blt.n	80084be <UART_SetConfig+0x86e>
 80083d2:	3b02      	subs	r3, #2
 80083d4:	2b1e      	cmp	r3, #30
 80083d6:	d872      	bhi.n	80084be <UART_SetConfig+0x86e>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x790>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	08008463 	.word	0x08008463
 80083e4:	080084bf 	.word	0x080084bf
 80083e8:	0800846b 	.word	0x0800846b
 80083ec:	080084bf 	.word	0x080084bf
 80083f0:	080084bf 	.word	0x080084bf
 80083f4:	080084bf 	.word	0x080084bf
 80083f8:	0800847b 	.word	0x0800847b
 80083fc:	080084bf 	.word	0x080084bf
 8008400:	080084bf 	.word	0x080084bf
 8008404:	080084bf 	.word	0x080084bf
 8008408:	080084bf 	.word	0x080084bf
 800840c:	080084bf 	.word	0x080084bf
 8008410:	080084bf 	.word	0x080084bf
 8008414:	080084bf 	.word	0x080084bf
 8008418:	0800848b 	.word	0x0800848b
 800841c:	080084bf 	.word	0x080084bf
 8008420:	080084bf 	.word	0x080084bf
 8008424:	080084bf 	.word	0x080084bf
 8008428:	080084bf 	.word	0x080084bf
 800842c:	080084bf 	.word	0x080084bf
 8008430:	080084bf 	.word	0x080084bf
 8008434:	080084bf 	.word	0x080084bf
 8008438:	080084bf 	.word	0x080084bf
 800843c:	080084bf 	.word	0x080084bf
 8008440:	080084bf 	.word	0x080084bf
 8008444:	080084bf 	.word	0x080084bf
 8008448:	080084bf 	.word	0x080084bf
 800844c:	080084bf 	.word	0x080084bf
 8008450:	080084bf 	.word	0x080084bf
 8008454:	080084bf 	.word	0x080084bf
 8008458:	080084b1 	.word	0x080084b1
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	d02a      	beq.n	80084b6 <UART_SetConfig+0x866>
 8008460:	e02d      	b.n	80084be <UART_SetConfig+0x86e>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008462:	f7fe fa55 	bl	8006910 <HAL_RCCEx_GetD3PCLK1Freq>
 8008466:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008468:	e02f      	b.n	80084ca <UART_SetConfig+0x87a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fa64 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008478:	e027      	b.n	80084ca <UART_SetConfig+0x87a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fbb0 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008488:	e01f      	b.n	80084ca <UART_SetConfig+0x87a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800848a:	4b41      	ldr	r3, [pc, #260]	; (8008590 <UART_SetConfig+0x940>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <UART_SetConfig+0x85a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008496:	4b3e      	ldr	r3, [pc, #248]	; (8008590 <UART_SetConfig+0x940>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	4a3d      	ldr	r2, [pc, #244]	; (8008598 <UART_SetConfig+0x948>)
 80084a2:	fa22 f303 	lsr.w	r3, r2, r3
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084a8:	e00f      	b.n	80084ca <UART_SetConfig+0x87a>
          pclk = (uint32_t) HSI_VALUE;
 80084aa:	4b3b      	ldr	r3, [pc, #236]	; (8008598 <UART_SetConfig+0x948>)
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084ae:	e00c      	b.n	80084ca <UART_SetConfig+0x87a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084b0:	4b3a      	ldr	r3, [pc, #232]	; (800859c <UART_SetConfig+0x94c>)
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084b4:	e009      	b.n	80084ca <UART_SetConfig+0x87a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084bc:	e005      	b.n	80084ca <UART_SetConfig+0x87a>
      default:
        pclk = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80084c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 81db 	beq.w	8008888 <UART_SetConfig+0xc38>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	4a32      	ldr	r2, [pc, #200]	; (80085a0 <UART_SetConfig+0x950>)
 80084d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084dc:	461a      	mov	r2, r3
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084e4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	4613      	mov	r3, r2
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4413      	add	r3, r2
 80084f0:	6a3a      	ldr	r2, [r7, #32]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d305      	bcc.n	8008502 <UART_SetConfig+0x8b2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084fc:	6a3a      	ldr	r2, [r7, #32]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d903      	bls.n	800850a <UART_SetConfig+0x8ba>
      {
        ret = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008508:	e1be      	b.n	8008888 <UART_SetConfig+0xc38>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	4618      	mov	r0, r3
 800850e:	f04f 0100 	mov.w	r1, #0
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	4a22      	ldr	r2, [pc, #136]	; (80085a0 <UART_SetConfig+0x950>)
 8008518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800851c:	b29a      	uxth	r2, r3
 800851e:	f04f 0300 	mov.w	r3, #0
 8008522:	f7f7 ff35 	bl	8000390 <__aeabi_uldivmod>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4610      	mov	r0, r2
 800852c:	4619      	mov	r1, r3
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	020b      	lsls	r3, r1, #8
 8008538:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800853c:	0202      	lsls	r2, r0, #8
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	6849      	ldr	r1, [r1, #4]
 8008542:	0849      	lsrs	r1, r1, #1
 8008544:	4608      	mov	r0, r1
 8008546:	f04f 0100 	mov.w	r1, #0
 800854a:	1814      	adds	r4, r2, r0
 800854c:	eb43 0501 	adc.w	r5, r3, r1
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	461a      	mov	r2, r3
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	4620      	mov	r0, r4
 800855c:	4629      	mov	r1, r5
 800855e:	f7f7 ff17 	bl	8000390 <__aeabi_uldivmod>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4613      	mov	r3, r2
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008570:	d308      	bcc.n	8008584 <UART_SetConfig+0x934>
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008578:	d204      	bcs.n	8008584 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008580:	60da      	str	r2, [r3, #12]
 8008582:	e181      	b.n	8008888 <UART_SetConfig+0xc38>
        }
        else
        {
          ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800858a:	e17d      	b.n	8008888 <UART_SetConfig+0xc38>
 800858c:	40007c00 	.word	0x40007c00
 8008590:	58024400 	.word	0x58024400
 8008594:	58000c00 	.word	0x58000c00
 8008598:	03d09000 	.word	0x03d09000
 800859c:	003d0900 	.word	0x003d0900
 80085a0:	0801be1c 	.word	0x0801be1c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ac:	f040 80bf 	bne.w	800872e <UART_SetConfig+0xade>
  {
    switch (clocksource)
 80085b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	dc49      	bgt.n	800864c <UART_SetConfig+0x9fc>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db7c      	blt.n	80086b6 <UART_SetConfig+0xa66>
 80085bc:	2b20      	cmp	r3, #32
 80085be:	d87a      	bhi.n	80086b6 <UART_SetConfig+0xa66>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <UART_SetConfig+0x978>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	08008653 	.word	0x08008653
 80085cc:	0800865b 	.word	0x0800865b
 80085d0:	080086b7 	.word	0x080086b7
 80085d4:	080086b7 	.word	0x080086b7
 80085d8:	08008663 	.word	0x08008663
 80085dc:	080086b7 	.word	0x080086b7
 80085e0:	080086b7 	.word	0x080086b7
 80085e4:	080086b7 	.word	0x080086b7
 80085e8:	08008673 	.word	0x08008673
 80085ec:	080086b7 	.word	0x080086b7
 80085f0:	080086b7 	.word	0x080086b7
 80085f4:	080086b7 	.word	0x080086b7
 80085f8:	080086b7 	.word	0x080086b7
 80085fc:	080086b7 	.word	0x080086b7
 8008600:	080086b7 	.word	0x080086b7
 8008604:	080086b7 	.word	0x080086b7
 8008608:	08008683 	.word	0x08008683
 800860c:	080086b7 	.word	0x080086b7
 8008610:	080086b7 	.word	0x080086b7
 8008614:	080086b7 	.word	0x080086b7
 8008618:	080086b7 	.word	0x080086b7
 800861c:	080086b7 	.word	0x080086b7
 8008620:	080086b7 	.word	0x080086b7
 8008624:	080086b7 	.word	0x080086b7
 8008628:	080086b7 	.word	0x080086b7
 800862c:	080086b7 	.word	0x080086b7
 8008630:	080086b7 	.word	0x080086b7
 8008634:	080086b7 	.word	0x080086b7
 8008638:	080086b7 	.word	0x080086b7
 800863c:	080086b7 	.word	0x080086b7
 8008640:	080086b7 	.word	0x080086b7
 8008644:	080086b7 	.word	0x080086b7
 8008648:	080086a9 	.word	0x080086a9
 800864c:	2b40      	cmp	r3, #64	; 0x40
 800864e:	d02e      	beq.n	80086ae <UART_SetConfig+0xa5e>
 8008650:	e031      	b.n	80086b6 <UART_SetConfig+0xa66>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008652:	f7fc fee3 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8008656:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008658:	e033      	b.n	80086c2 <UART_SetConfig+0xa72>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800865a:	f7fc fef5 	bl	8005448 <HAL_RCC_GetPCLK2Freq>
 800865e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008660:	e02f      	b.n	80086c2 <UART_SetConfig+0xa72>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008662:	f107 0314 	add.w	r3, r7, #20
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe f968 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008670:	e027      	b.n	80086c2 <UART_SetConfig+0xa72>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008672:	f107 0308 	add.w	r3, r7, #8
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fab4 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008680:	e01f      	b.n	80086c2 <UART_SetConfig+0xa72>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008682:	4b8b      	ldr	r3, [pc, #556]	; (80088b0 <UART_SetConfig+0xc60>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <UART_SetConfig+0xa52>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800868e:	4b88      	ldr	r3, [pc, #544]	; (80088b0 <UART_SetConfig+0xc60>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	08db      	lsrs	r3, r3, #3
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	4a86      	ldr	r2, [pc, #536]	; (80088b4 <UART_SetConfig+0xc64>)
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086a0:	e00f      	b.n	80086c2 <UART_SetConfig+0xa72>
          pclk = (uint32_t) HSI_VALUE;
 80086a2:	4b84      	ldr	r3, [pc, #528]	; (80088b4 <UART_SetConfig+0xc64>)
 80086a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086a6:	e00c      	b.n	80086c2 <UART_SetConfig+0xa72>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086a8:	4b83      	ldr	r3, [pc, #524]	; (80088b8 <UART_SetConfig+0xc68>)
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086ac:	e009      	b.n	80086c2 <UART_SetConfig+0xa72>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086b4:	e005      	b.n	80086c2 <UART_SetConfig+0xa72>
      default:
        pclk = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80086c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80df 	beq.w	8008888 <UART_SetConfig+0xc38>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	4a7b      	ldr	r2, [pc, #492]	; (80088bc <UART_SetConfig+0xc6c>)
 80086d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086dc:	005a      	lsls	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	441a      	add	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	2b0f      	cmp	r3, #15
 80086f6:	d916      	bls.n	8008726 <UART_SetConfig+0xad6>
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fe:	d212      	bcs.n	8008726 <UART_SetConfig+0xad6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	b29b      	uxth	r3, r3
 8008704:	f023 030f 	bic.w	r3, r3, #15
 8008708:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	b29b      	uxth	r3, r3
 8008710:	f003 0307 	and.w	r3, r3, #7
 8008714:	b29a      	uxth	r2, r3
 8008716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008718:	4313      	orrs	r3, r2
 800871a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008722:	60da      	str	r2, [r3, #12]
 8008724:	e0b0      	b.n	8008888 <UART_SetConfig+0xc38>
      }
      else
      {
        ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800872c:	e0ac      	b.n	8008888 <UART_SetConfig+0xc38>
      }
    }
  }
  else
  {
    switch (clocksource)
 800872e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008732:	2b20      	cmp	r3, #32
 8008734:	dc48      	bgt.n	80087c8 <UART_SetConfig+0xb78>
 8008736:	2b00      	cmp	r3, #0
 8008738:	db7b      	blt.n	8008832 <UART_SetConfig+0xbe2>
 800873a:	2b20      	cmp	r3, #32
 800873c:	d879      	bhi.n	8008832 <UART_SetConfig+0xbe2>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <UART_SetConfig+0xaf4>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	080087cf 	.word	0x080087cf
 8008748:	080087d7 	.word	0x080087d7
 800874c:	08008833 	.word	0x08008833
 8008750:	08008833 	.word	0x08008833
 8008754:	080087df 	.word	0x080087df
 8008758:	08008833 	.word	0x08008833
 800875c:	08008833 	.word	0x08008833
 8008760:	08008833 	.word	0x08008833
 8008764:	080087ef 	.word	0x080087ef
 8008768:	08008833 	.word	0x08008833
 800876c:	08008833 	.word	0x08008833
 8008770:	08008833 	.word	0x08008833
 8008774:	08008833 	.word	0x08008833
 8008778:	08008833 	.word	0x08008833
 800877c:	08008833 	.word	0x08008833
 8008780:	08008833 	.word	0x08008833
 8008784:	080087ff 	.word	0x080087ff
 8008788:	08008833 	.word	0x08008833
 800878c:	08008833 	.word	0x08008833
 8008790:	08008833 	.word	0x08008833
 8008794:	08008833 	.word	0x08008833
 8008798:	08008833 	.word	0x08008833
 800879c:	08008833 	.word	0x08008833
 80087a0:	08008833 	.word	0x08008833
 80087a4:	08008833 	.word	0x08008833
 80087a8:	08008833 	.word	0x08008833
 80087ac:	08008833 	.word	0x08008833
 80087b0:	08008833 	.word	0x08008833
 80087b4:	08008833 	.word	0x08008833
 80087b8:	08008833 	.word	0x08008833
 80087bc:	08008833 	.word	0x08008833
 80087c0:	08008833 	.word	0x08008833
 80087c4:	08008825 	.word	0x08008825
 80087c8:	2b40      	cmp	r3, #64	; 0x40
 80087ca:	d02e      	beq.n	800882a <UART_SetConfig+0xbda>
 80087cc:	e031      	b.n	8008832 <UART_SetConfig+0xbe2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ce:	f7fc fe25 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 80087d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80087d4:	e033      	b.n	800883e <UART_SetConfig+0xbee>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087d6:	f7fc fe37 	bl	8005448 <HAL_RCC_GetPCLK2Freq>
 80087da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80087dc:	e02f      	b.n	800883e <UART_SetConfig+0xbee>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087de:	f107 0314 	add.w	r3, r7, #20
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe f8aa 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087ec:	e027      	b.n	800883e <UART_SetConfig+0xbee>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ee:	f107 0308 	add.w	r3, r7, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe f9f6 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087fc:	e01f      	b.n	800883e <UART_SetConfig+0xbee>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087fe:	4b2c      	ldr	r3, [pc, #176]	; (80088b0 <UART_SetConfig+0xc60>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <UART_SetConfig+0xbce>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800880a:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <UART_SetConfig+0xc60>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	08db      	lsrs	r3, r3, #3
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	4a27      	ldr	r2, [pc, #156]	; (80088b4 <UART_SetConfig+0xc64>)
 8008816:	fa22 f303 	lsr.w	r3, r2, r3
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800881c:	e00f      	b.n	800883e <UART_SetConfig+0xbee>
          pclk = (uint32_t) HSI_VALUE;
 800881e:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <UART_SetConfig+0xc64>)
 8008820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008822:	e00c      	b.n	800883e <UART_SetConfig+0xbee>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008824:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <UART_SetConfig+0xc68>)
 8008826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008828:	e009      	b.n	800883e <UART_SetConfig+0xbee>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800882a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008830:	e005      	b.n	800883e <UART_SetConfig+0xbee>
      default:
        pclk = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800883c:	bf00      	nop
    }

    if (pclk != 0U)
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d021      	beq.n	8008888 <UART_SetConfig+0xc38>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	4a1c      	ldr	r2, [pc, #112]	; (80088bc <UART_SetConfig+0xc6c>)
 800884a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800884e:	461a      	mov	r2, r3
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	fbb3 f2f2 	udiv	r2, r3, r2
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	441a      	add	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	2b0f      	cmp	r3, #15
 800886e:	d908      	bls.n	8008882 <UART_SetConfig+0xc32>
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008876:	d204      	bcs.n	8008882 <UART_SetConfig+0xc32>
      {
        huart->Instance->BRR = usartdiv;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800887e:	60da      	str	r2, [r3, #12]
 8008880:	e002      	b.n	8008888 <UART_SetConfig+0xc38>
      }
      else
      {
        ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3738      	adds	r7, #56	; 0x38
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bdb0      	pop	{r4, r5, r7, pc}
 80088b0:	58024400 	.word	0x58024400
 80088b4:	03d09000 	.word	0x03d09000
 80088b8:	003d0900 	.word	0x003d0900
 80088bc:	0801be1c 	.word	0x0801be1c

080088c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	2bff      	cmp	r3, #255	; 0xff
 80088ce:	d904      	bls.n	80088da <UART_AdvFeatureConfig+0x1a>
 80088d0:	f640 41cf 	movw	r1, #3279	; 0xccf
 80088d4:	4899      	ldr	r0, [pc, #612]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 80088d6:	f7f8 f9e2 	bl	8000c9e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d018      	beq.n	8008918 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <UART_AdvFeatureConfig+0x42>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088f6:	d004      	beq.n	8008902 <UART_AdvFeatureConfig+0x42>
 80088f8:	f640 41d4 	movw	r1, #3284	; 0xcd4
 80088fc:	488f      	ldr	r0, [pc, #572]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 80088fe:	f7f8 f9ce 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d018      	beq.n	8008956 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <UART_AdvFeatureConfig+0x80>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008934:	d004      	beq.n	8008940 <UART_AdvFeatureConfig+0x80>
 8008936:	f640 41db 	movw	r1, #3291	; 0xcdb
 800893a:	4880      	ldr	r0, [pc, #512]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 800893c:	f7f8 f9af 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	2b00      	cmp	r3, #0
 8008960:	d018      	beq.n	8008994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <UART_AdvFeatureConfig+0xbe>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008972:	d004      	beq.n	800897e <UART_AdvFeatureConfig+0xbe>
 8008974:	f640 41e2 	movw	r1, #3298	; 0xce2
 8008978:	4870      	ldr	r0, [pc, #448]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 800897a:	f7f8 f990 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b00      	cmp	r3, #0
 800899e:	d018      	beq.n	80089d2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d009      	beq.n	80089bc <UART_AdvFeatureConfig+0xfc>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b0:	d004      	beq.n	80089bc <UART_AdvFeatureConfig+0xfc>
 80089b2:	f640 41e9 	movw	r1, #3305	; 0xce9
 80089b6:	4861      	ldr	r0, [pc, #388]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 80089b8:	f7f8 f971 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d018      	beq.n	8008a10 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <UART_AdvFeatureConfig+0x13a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ee:	d004      	beq.n	80089fa <UART_AdvFeatureConfig+0x13a>
 80089f0:	f44f 614f 	mov.w	r1, #3312	; 0xcf0
 80089f4:	4851      	ldr	r0, [pc, #324]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 80089f6:	f7f8 f952 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d018      	beq.n	8008a4e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d009      	beq.n	8008a38 <UART_AdvFeatureConfig+0x178>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a2c:	d004      	beq.n	8008a38 <UART_AdvFeatureConfig+0x178>
 8008a2e:	f640 41f7 	movw	r1, #3319	; 0xcf7
 8008a32:	4842      	ldr	r0, [pc, #264]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 8008a34:	f7f8 f933 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 8082 	beq.w	8008b60 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a37      	ldr	r2, [pc, #220]	; (8008b40 <UART_AdvFeatureConfig+0x280>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d027      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a36      	ldr	r2, [pc, #216]	; (8008b44 <UART_AdvFeatureConfig+0x284>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d022      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a34      	ldr	r2, [pc, #208]	; (8008b48 <UART_AdvFeatureConfig+0x288>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01d      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a33      	ldr	r2, [pc, #204]	; (8008b4c <UART_AdvFeatureConfig+0x28c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d018      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a31      	ldr	r2, [pc, #196]	; (8008b50 <UART_AdvFeatureConfig+0x290>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d013      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a30      	ldr	r2, [pc, #192]	; (8008b54 <UART_AdvFeatureConfig+0x294>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00e      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a2e      	ldr	r2, [pc, #184]	; (8008b58 <UART_AdvFeatureConfig+0x298>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a2d      	ldr	r2, [pc, #180]	; (8008b5c <UART_AdvFeatureConfig+0x29c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x1f6>
 8008aac:	f640 41fe 	movw	r1, #3326	; 0xcfe
 8008ab0:	4822      	ldr	r0, [pc, #136]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 8008ab2:	f7f8 f8f4 	bl	8000c9e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <UART_AdvFeatureConfig+0x212>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac6:	d004      	beq.n	8008ad2 <UART_AdvFeatureConfig+0x212>
 8008ac8:	f640 41ff 	movw	r1, #3327	; 0xcff
 8008acc:	481b      	ldr	r0, [pc, #108]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 8008ace:	f7f8 f8e6 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008af0:	d136      	bne.n	8008b60 <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d013      	beq.n	8008b22 <UART_AdvFeatureConfig+0x262>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b02:	d00e      	beq.n	8008b22 <UART_AdvFeatureConfig+0x262>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b0c:	d009      	beq.n	8008b22 <UART_AdvFeatureConfig+0x262>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b16:	d004      	beq.n	8008b22 <UART_AdvFeatureConfig+0x262>
 8008b18:	f640 5104 	movw	r1, #3332	; 0xd04
 8008b1c:	4807      	ldr	r0, [pc, #28]	; (8008b3c <UART_AdvFeatureConfig+0x27c>)
 8008b1e:	f7f8 f8be 	bl	8000c9e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	605a      	str	r2, [r3, #4]
 8008b38:	e012      	b.n	8008b60 <UART_AdvFeatureConfig+0x2a0>
 8008b3a:	bf00      	nop
 8008b3c:	08019214 	.word	0x08019214
 8008b40:	40011000 	.word	0x40011000
 8008b44:	40004400 	.word	0x40004400
 8008b48:	40004800 	.word	0x40004800
 8008b4c:	40004c00 	.word	0x40004c00
 8008b50:	40005000 	.word	0x40005000
 8008b54:	40011400 	.word	0x40011400
 8008b58:	40007800 	.word	0x40007800
 8008b5c:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d018      	beq.n	8008b9e <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <UART_AdvFeatureConfig+0x2c8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b7c:	d004      	beq.n	8008b88 <UART_AdvFeatureConfig+0x2c8>
 8008b7e:	f640 510c 	movw	r1, #3340	; 0xd0c
 8008b82:	4809      	ldr	r0, [pc, #36]	; (8008ba8 <UART_AdvFeatureConfig+0x2e8>)
 8008b84:	f7f8 f88b 	bl	8000c9e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	08019214 	.word	0x08019214

08008bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bbc:	f7f8 fcc4 	bl	8001548 <HAL_GetTick>
 8008bc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d10e      	bne.n	8008bee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f82f 	bl	8008c42 <UART_WaitOnFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e025      	b.n	8008c3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d10e      	bne.n	8008c1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f819 	bl	8008c42 <UART_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e00f      	b.n	8008c3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	603b      	str	r3, [r7, #0]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c52:	e062      	b.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5a:	d05e      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5c:	f7f8 fc74 	bl	8001548 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d302      	bcc.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11d      	bne.n	8008cae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 0201 	bic.w	r2, r2, #1
 8008c90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e045      	b.n	8008d3a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d02e      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cca:	d126      	bne.n	8008d1a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ce4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0201 	bic.w	r2, r2, #1
 8008cf4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e00f      	b.n	8008d3a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69da      	ldr	r2, [r3, #28]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4013      	ands	r3, r2
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	bf0c      	ite	eq
 8008d2a:	2301      	moveq	r3, #1
 8008d2c:	2300      	movne	r3, #0
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	461a      	mov	r2, r3
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d08d      	beq.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a2e      	ldr	r2, [pc, #184]	; (8008e0c <HAL_UARTEx_DisableFifoMode+0xc8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d027      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a2d      	ldr	r2, [pc, #180]	; (8008e10 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d022      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a2b      	ldr	r2, [pc, #172]	; (8008e14 <HAL_UARTEx_DisableFifoMode+0xd0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d01d      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	; (8008e18 <HAL_UARTEx_DisableFifoMode+0xd4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d018      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a28      	ldr	r2, [pc, #160]	; (8008e1c <HAL_UARTEx_DisableFifoMode+0xd8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d013      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a27      	ldr	r2, [pc, #156]	; (8008e20 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00e      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a25      	ldr	r2, [pc, #148]	; (8008e24 <HAL_UARTEx_DisableFifoMode+0xe0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d009      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a24      	ldr	r2, [pc, #144]	; (8008e28 <HAL_UARTEx_DisableFifoMode+0xe4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d004      	beq.n	8008da6 <HAL_UARTEx_DisableFifoMode+0x62>
 8008d9c:	f44f 710d 	mov.w	r1, #564	; 0x234
 8008da0:	4822      	ldr	r0, [pc, #136]	; (8008e2c <HAL_UARTEx_DisableFifoMode+0xe8>)
 8008da2:	f7f7 ff7c 	bl	8000c9e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_UARTEx_DisableFifoMode+0x70>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e027      	b.n	8008e04 <HAL_UARTEx_DisableFifoMode+0xc0>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2224      	movs	r2, #36	; 0x24
 8008dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0201 	bic.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008de2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	40011000 	.word	0x40011000
 8008e10:	40004400 	.word	0x40004400
 8008e14:	40004800 	.word	0x40004800
 8008e18:	40004c00 	.word	0x40004c00
 8008e1c:	40005000 	.word	0x40005000
 8008e20:	40011400 	.word	0x40011400
 8008e24:	40007800 	.word	0x40007800
 8008e28:	40007c00 	.word	0x40007c00
 8008e2c:	08019250 	.word	0x08019250

08008e30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a40      	ldr	r2, [pc, #256]	; (8008f40 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d027      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a3e      	ldr	r2, [pc, #248]	; (8008f44 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d022      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a3d      	ldr	r2, [pc, #244]	; (8008f48 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d01d      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a3b      	ldr	r2, [pc, #236]	; (8008f4c <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d018      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a3a      	ldr	r2, [pc, #232]	; (8008f50 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a38      	ldr	r2, [pc, #224]	; (8008f54 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00e      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a37      	ldr	r2, [pc, #220]	; (8008f58 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a35      	ldr	r2, [pc, #212]	; (8008f5c <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d004      	beq.n	8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8008e8a:	f240 2162 	movw	r1, #610	; 0x262
 8008e8e:	4834      	ldr	r0, [pc, #208]	; (8008f60 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8008e90:	f7f7 ff05 	bl	8000c9e <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d018      	beq.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea0:	d014      	beq.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea8:	d010      	beq.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008eb0:	d00c      	beq.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eb8:	d008      	beq.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8008ec0:	d004      	beq.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8008ec2:	f240 2163 	movw	r1, #611	; 0x263
 8008ec6:	4826      	ldr	r0, [pc, #152]	; (8008f60 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8008ec8:	f7f7 fee9 	bl	8000c9e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e02d      	b.n	8008f36 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2224      	movs	r2, #36	; 0x24
 8008ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0201 	bic.w	r2, r2, #1
 8008f00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f8be 	bl	8009098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	40011000 	.word	0x40011000
 8008f44:	40004400 	.word	0x40004400
 8008f48:	40004800 	.word	0x40004800
 8008f4c:	40004c00 	.word	0x40004c00
 8008f50:	40005000 	.word	0x40005000
 8008f54:	40011400 	.word	0x40011400
 8008f58:	40007800 	.word	0x40007800
 8008f5c:	40007c00 	.word	0x40007c00
 8008f60:	08019250 	.word	0x08019250

08008f64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a40      	ldr	r2, [pc, #256]	; (8009074 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d027      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a3e      	ldr	r2, [pc, #248]	; (8009078 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d022      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a3d      	ldr	r2, [pc, #244]	; (800907c <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d01d      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a3b      	ldr	r2, [pc, #236]	; (8009080 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d018      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a3a      	ldr	r2, [pc, #232]	; (8009084 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d013      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a38      	ldr	r2, [pc, #224]	; (8009088 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00e      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a37      	ldr	r2, [pc, #220]	; (800908c <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d009      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a35      	ldr	r2, [pc, #212]	; (8009090 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d004      	beq.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8008fbe:	f240 2193 	movw	r1, #659	; 0x293
 8008fc2:	4834      	ldr	r0, [pc, #208]	; (8009094 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8008fc4:	f7f7 fe6b 	bl	8000c9e <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d018      	beq.n	8009000 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fd4:	d014      	beq.n	8009000 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fdc:	d010      	beq.n	8009000 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008fe4:	d00c      	beq.n	8009000 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fec:	d008      	beq.n	8009000 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008ff4:	d004      	beq.n	8009000 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8008ff6:	f44f 7125 	mov.w	r1, #660	; 0x294
 8008ffa:	4826      	ldr	r0, [pc, #152]	; (8009094 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8008ffc:	f7f7 fe4f 	bl	8000c9e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800900a:	2302      	movs	r3, #2
 800900c:	e02d      	b.n	800906a <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2224      	movs	r2, #36	; 0x24
 800901a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0201 	bic.w	r2, r2, #1
 8009034:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f824 	bl	8009098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40011000 	.word	0x40011000
 8009078:	40004400 	.word	0x40004400
 800907c:	40004800 	.word	0x40004800
 8009080:	40004c00 	.word	0x40004c00
 8009084:	40005000 	.word	0x40005000
 8009088:	40011400 	.word	0x40011400
 800908c:	40007800 	.word	0x40007800
 8009090:	40007c00 	.word	0x40007c00
 8009094:	08019250 	.word	0x08019250

08009098 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d108      	bne.n	80090ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090b8:	e031      	b.n	800911e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090ba:	2310      	movs	r3, #16
 80090bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090be:	2310      	movs	r3, #16
 80090c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	0e5b      	lsrs	r3, r3, #25
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	0f5b      	lsrs	r3, r3, #29
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	7b3a      	ldrb	r2, [r7, #12]
 80090e6:	4911      	ldr	r1, [pc, #68]	; (800912c <UARTEx_SetNbDataToProcess+0x94>)
 80090e8:	5c8a      	ldrb	r2, [r1, r2]
 80090ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090ee:	7b3a      	ldrb	r2, [r7, #12]
 80090f0:	490f      	ldr	r1, [pc, #60]	; (8009130 <UARTEx_SetNbDataToProcess+0x98>)
 80090f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	7b7a      	ldrb	r2, [r7, #13]
 8009104:	4909      	ldr	r1, [pc, #36]	; (800912c <UARTEx_SetNbDataToProcess+0x94>)
 8009106:	5c8a      	ldrb	r2, [r1, r2]
 8009108:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800910c:	7b7a      	ldrb	r2, [r7, #13]
 800910e:	4908      	ldr	r1, [pc, #32]	; (8009130 <UARTEx_SetNbDataToProcess+0x98>)
 8009110:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009112:	fb93 f3f2 	sdiv	r3, r3, r2
 8009116:	b29a      	uxth	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800911e:	bf00      	nop
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	0801be34 	.word	0x0801be34
 8009130:	0801be3c 	.word	0x0801be3c

08009134 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b08c      	sub	sp, #48	; 0x30
 8009138:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800913a:	4b96      	ldr	r3, [pc, #600]	; (8009394 <MX_LWIP_Init+0x260>)
 800913c:	220a      	movs	r2, #10
 800913e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 50;
 8009140:	4b94      	ldr	r3, [pc, #592]	; (8009394 <MX_LWIP_Init+0x260>)
 8009142:	2232      	movs	r2, #50	; 0x32
 8009144:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009146:	4b93      	ldr	r3, [pc, #588]	; (8009394 <MX_LWIP_Init+0x260>)
 8009148:	2201      	movs	r2, #1
 800914a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 11;
 800914c:	4b91      	ldr	r3, [pc, #580]	; (8009394 <MX_LWIP_Init+0x260>)
 800914e:	220b      	movs	r2, #11
 8009150:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009152:	4b91      	ldr	r3, [pc, #580]	; (8009398 <MX_LWIP_Init+0x264>)
 8009154:	22ff      	movs	r2, #255	; 0xff
 8009156:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009158:	4b8f      	ldr	r3, [pc, #572]	; (8009398 <MX_LWIP_Init+0x264>)
 800915a:	22ff      	movs	r2, #255	; 0xff
 800915c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800915e:	4b8e      	ldr	r3, [pc, #568]	; (8009398 <MX_LWIP_Init+0x264>)
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009164:	4b8c      	ldr	r3, [pc, #560]	; (8009398 <MX_LWIP_Init+0x264>)
 8009166:	2200      	movs	r2, #0
 8009168:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800916a:	4b8c      	ldr	r3, [pc, #560]	; (800939c <MX_LWIP_Init+0x268>)
 800916c:	220a      	movs	r2, #10
 800916e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 50;
 8009170:	4b8a      	ldr	r3, [pc, #552]	; (800939c <MX_LWIP_Init+0x268>)
 8009172:	2232      	movs	r2, #50	; 0x32
 8009174:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009176:	4b89      	ldr	r3, [pc, #548]	; (800939c <MX_LWIP_Init+0x268>)
 8009178:	2201      	movs	r2, #1
 800917a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800917c:	4b87      	ldr	r3, [pc, #540]	; (800939c <MX_LWIP_Init+0x268>)
 800917e:	2201      	movs	r2, #1
 8009180:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009182:	2100      	movs	r1, #0
 8009184:	2000      	movs	r0, #0
 8009186:	f004 faf1 	bl	800d76c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800918a:	4b82      	ldr	r3, [pc, #520]	; (8009394 <MX_LWIP_Init+0x260>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	061a      	lsls	r2, r3, #24
 8009190:	4b80      	ldr	r3, [pc, #512]	; (8009394 <MX_LWIP_Init+0x260>)
 8009192:	785b      	ldrb	r3, [r3, #1]
 8009194:	041b      	lsls	r3, r3, #16
 8009196:	431a      	orrs	r2, r3
 8009198:	4b7e      	ldr	r3, [pc, #504]	; (8009394 <MX_LWIP_Init+0x260>)
 800919a:	789b      	ldrb	r3, [r3, #2]
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	4313      	orrs	r3, r2
 80091a0:	4a7c      	ldr	r2, [pc, #496]	; (8009394 <MX_LWIP_Init+0x260>)
 80091a2:	78d2      	ldrb	r2, [r2, #3]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	061a      	lsls	r2, r3, #24
 80091a8:	4b7a      	ldr	r3, [pc, #488]	; (8009394 <MX_LWIP_Init+0x260>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	0619      	lsls	r1, r3, #24
 80091ae:	4b79      	ldr	r3, [pc, #484]	; (8009394 <MX_LWIP_Init+0x260>)
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	041b      	lsls	r3, r3, #16
 80091b4:	4319      	orrs	r1, r3
 80091b6:	4b77      	ldr	r3, [pc, #476]	; (8009394 <MX_LWIP_Init+0x260>)
 80091b8:	789b      	ldrb	r3, [r3, #2]
 80091ba:	021b      	lsls	r3, r3, #8
 80091bc:	430b      	orrs	r3, r1
 80091be:	4975      	ldr	r1, [pc, #468]	; (8009394 <MX_LWIP_Init+0x260>)
 80091c0:	78c9      	ldrb	r1, [r1, #3]
 80091c2:	430b      	orrs	r3, r1
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091ca:	431a      	orrs	r2, r3
 80091cc:	4b71      	ldr	r3, [pc, #452]	; (8009394 <MX_LWIP_Init+0x260>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	0619      	lsls	r1, r3, #24
 80091d2:	4b70      	ldr	r3, [pc, #448]	; (8009394 <MX_LWIP_Init+0x260>)
 80091d4:	785b      	ldrb	r3, [r3, #1]
 80091d6:	041b      	lsls	r3, r3, #16
 80091d8:	4319      	orrs	r1, r3
 80091da:	4b6e      	ldr	r3, [pc, #440]	; (8009394 <MX_LWIP_Init+0x260>)
 80091dc:	789b      	ldrb	r3, [r3, #2]
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	430b      	orrs	r3, r1
 80091e2:	496c      	ldr	r1, [pc, #432]	; (8009394 <MX_LWIP_Init+0x260>)
 80091e4:	78c9      	ldrb	r1, [r1, #3]
 80091e6:	430b      	orrs	r3, r1
 80091e8:	0a1b      	lsrs	r3, r3, #8
 80091ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091ee:	431a      	orrs	r2, r3
 80091f0:	4b68      	ldr	r3, [pc, #416]	; (8009394 <MX_LWIP_Init+0x260>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	0619      	lsls	r1, r3, #24
 80091f6:	4b67      	ldr	r3, [pc, #412]	; (8009394 <MX_LWIP_Init+0x260>)
 80091f8:	785b      	ldrb	r3, [r3, #1]
 80091fa:	041b      	lsls	r3, r3, #16
 80091fc:	4319      	orrs	r1, r3
 80091fe:	4b65      	ldr	r3, [pc, #404]	; (8009394 <MX_LWIP_Init+0x260>)
 8009200:	789b      	ldrb	r3, [r3, #2]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	430b      	orrs	r3, r1
 8009206:	4963      	ldr	r1, [pc, #396]	; (8009394 <MX_LWIP_Init+0x260>)
 8009208:	78c9      	ldrb	r1, [r1, #3]
 800920a:	430b      	orrs	r3, r1
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	4313      	orrs	r3, r2
 8009210:	4a63      	ldr	r2, [pc, #396]	; (80093a0 <MX_LWIP_Init+0x26c>)
 8009212:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009214:	4b60      	ldr	r3, [pc, #384]	; (8009398 <MX_LWIP_Init+0x264>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	061a      	lsls	r2, r3, #24
 800921a:	4b5f      	ldr	r3, [pc, #380]	; (8009398 <MX_LWIP_Init+0x264>)
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	431a      	orrs	r2, r3
 8009222:	4b5d      	ldr	r3, [pc, #372]	; (8009398 <MX_LWIP_Init+0x264>)
 8009224:	789b      	ldrb	r3, [r3, #2]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	4313      	orrs	r3, r2
 800922a:	4a5b      	ldr	r2, [pc, #364]	; (8009398 <MX_LWIP_Init+0x264>)
 800922c:	78d2      	ldrb	r2, [r2, #3]
 800922e:	4313      	orrs	r3, r2
 8009230:	061a      	lsls	r2, r3, #24
 8009232:	4b59      	ldr	r3, [pc, #356]	; (8009398 <MX_LWIP_Init+0x264>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	0619      	lsls	r1, r3, #24
 8009238:	4b57      	ldr	r3, [pc, #348]	; (8009398 <MX_LWIP_Init+0x264>)
 800923a:	785b      	ldrb	r3, [r3, #1]
 800923c:	041b      	lsls	r3, r3, #16
 800923e:	4319      	orrs	r1, r3
 8009240:	4b55      	ldr	r3, [pc, #340]	; (8009398 <MX_LWIP_Init+0x264>)
 8009242:	789b      	ldrb	r3, [r3, #2]
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	430b      	orrs	r3, r1
 8009248:	4953      	ldr	r1, [pc, #332]	; (8009398 <MX_LWIP_Init+0x264>)
 800924a:	78c9      	ldrb	r1, [r1, #3]
 800924c:	430b      	orrs	r3, r1
 800924e:	021b      	lsls	r3, r3, #8
 8009250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009254:	431a      	orrs	r2, r3
 8009256:	4b50      	ldr	r3, [pc, #320]	; (8009398 <MX_LWIP_Init+0x264>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	0619      	lsls	r1, r3, #24
 800925c:	4b4e      	ldr	r3, [pc, #312]	; (8009398 <MX_LWIP_Init+0x264>)
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	4319      	orrs	r1, r3
 8009264:	4b4c      	ldr	r3, [pc, #304]	; (8009398 <MX_LWIP_Init+0x264>)
 8009266:	789b      	ldrb	r3, [r3, #2]
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	430b      	orrs	r3, r1
 800926c:	494a      	ldr	r1, [pc, #296]	; (8009398 <MX_LWIP_Init+0x264>)
 800926e:	78c9      	ldrb	r1, [r1, #3]
 8009270:	430b      	orrs	r3, r1
 8009272:	0a1b      	lsrs	r3, r3, #8
 8009274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009278:	431a      	orrs	r2, r3
 800927a:	4b47      	ldr	r3, [pc, #284]	; (8009398 <MX_LWIP_Init+0x264>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	0619      	lsls	r1, r3, #24
 8009280:	4b45      	ldr	r3, [pc, #276]	; (8009398 <MX_LWIP_Init+0x264>)
 8009282:	785b      	ldrb	r3, [r3, #1]
 8009284:	041b      	lsls	r3, r3, #16
 8009286:	4319      	orrs	r1, r3
 8009288:	4b43      	ldr	r3, [pc, #268]	; (8009398 <MX_LWIP_Init+0x264>)
 800928a:	789b      	ldrb	r3, [r3, #2]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	430b      	orrs	r3, r1
 8009290:	4941      	ldr	r1, [pc, #260]	; (8009398 <MX_LWIP_Init+0x264>)
 8009292:	78c9      	ldrb	r1, [r1, #3]
 8009294:	430b      	orrs	r3, r1
 8009296:	0e1b      	lsrs	r3, r3, #24
 8009298:	4313      	orrs	r3, r2
 800929a:	4a42      	ldr	r2, [pc, #264]	; (80093a4 <MX_LWIP_Init+0x270>)
 800929c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800929e:	4b3f      	ldr	r3, [pc, #252]	; (800939c <MX_LWIP_Init+0x268>)
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	061a      	lsls	r2, r3, #24
 80092a4:	4b3d      	ldr	r3, [pc, #244]	; (800939c <MX_LWIP_Init+0x268>)
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	041b      	lsls	r3, r3, #16
 80092aa:	431a      	orrs	r2, r3
 80092ac:	4b3b      	ldr	r3, [pc, #236]	; (800939c <MX_LWIP_Init+0x268>)
 80092ae:	789b      	ldrb	r3, [r3, #2]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	4313      	orrs	r3, r2
 80092b4:	4a39      	ldr	r2, [pc, #228]	; (800939c <MX_LWIP_Init+0x268>)
 80092b6:	78d2      	ldrb	r2, [r2, #3]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	061a      	lsls	r2, r3, #24
 80092bc:	4b37      	ldr	r3, [pc, #220]	; (800939c <MX_LWIP_Init+0x268>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	0619      	lsls	r1, r3, #24
 80092c2:	4b36      	ldr	r3, [pc, #216]	; (800939c <MX_LWIP_Init+0x268>)
 80092c4:	785b      	ldrb	r3, [r3, #1]
 80092c6:	041b      	lsls	r3, r3, #16
 80092c8:	4319      	orrs	r1, r3
 80092ca:	4b34      	ldr	r3, [pc, #208]	; (800939c <MX_LWIP_Init+0x268>)
 80092cc:	789b      	ldrb	r3, [r3, #2]
 80092ce:	021b      	lsls	r3, r3, #8
 80092d0:	430b      	orrs	r3, r1
 80092d2:	4932      	ldr	r1, [pc, #200]	; (800939c <MX_LWIP_Init+0x268>)
 80092d4:	78c9      	ldrb	r1, [r1, #3]
 80092d6:	430b      	orrs	r3, r1
 80092d8:	021b      	lsls	r3, r3, #8
 80092da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092de:	431a      	orrs	r2, r3
 80092e0:	4b2e      	ldr	r3, [pc, #184]	; (800939c <MX_LWIP_Init+0x268>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	0619      	lsls	r1, r3, #24
 80092e6:	4b2d      	ldr	r3, [pc, #180]	; (800939c <MX_LWIP_Init+0x268>)
 80092e8:	785b      	ldrb	r3, [r3, #1]
 80092ea:	041b      	lsls	r3, r3, #16
 80092ec:	4319      	orrs	r1, r3
 80092ee:	4b2b      	ldr	r3, [pc, #172]	; (800939c <MX_LWIP_Init+0x268>)
 80092f0:	789b      	ldrb	r3, [r3, #2]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	430b      	orrs	r3, r1
 80092f6:	4929      	ldr	r1, [pc, #164]	; (800939c <MX_LWIP_Init+0x268>)
 80092f8:	78c9      	ldrb	r1, [r1, #3]
 80092fa:	430b      	orrs	r3, r1
 80092fc:	0a1b      	lsrs	r3, r3, #8
 80092fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009302:	431a      	orrs	r2, r3
 8009304:	4b25      	ldr	r3, [pc, #148]	; (800939c <MX_LWIP_Init+0x268>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	0619      	lsls	r1, r3, #24
 800930a:	4b24      	ldr	r3, [pc, #144]	; (800939c <MX_LWIP_Init+0x268>)
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	041b      	lsls	r3, r3, #16
 8009310:	4319      	orrs	r1, r3
 8009312:	4b22      	ldr	r3, [pc, #136]	; (800939c <MX_LWIP_Init+0x268>)
 8009314:	789b      	ldrb	r3, [r3, #2]
 8009316:	021b      	lsls	r3, r3, #8
 8009318:	430b      	orrs	r3, r1
 800931a:	4920      	ldr	r1, [pc, #128]	; (800939c <MX_LWIP_Init+0x268>)
 800931c:	78c9      	ldrb	r1, [r1, #3]
 800931e:	430b      	orrs	r3, r1
 8009320:	0e1b      	lsrs	r3, r3, #24
 8009322:	4313      	orrs	r3, r2
 8009324:	4a20      	ldr	r2, [pc, #128]	; (80093a8 <MX_LWIP_Init+0x274>)
 8009326:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009328:	4b20      	ldr	r3, [pc, #128]	; (80093ac <MX_LWIP_Init+0x278>)
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	4b20      	ldr	r3, [pc, #128]	; (80093b0 <MX_LWIP_Init+0x27c>)
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	2300      	movs	r3, #0
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	4b1c      	ldr	r3, [pc, #112]	; (80093a8 <MX_LWIP_Init+0x274>)
 8009336:	4a1b      	ldr	r2, [pc, #108]	; (80093a4 <MX_LWIP_Init+0x270>)
 8009338:	4919      	ldr	r1, [pc, #100]	; (80093a0 <MX_LWIP_Init+0x26c>)
 800933a:	481e      	ldr	r0, [pc, #120]	; (80093b4 <MX_LWIP_Init+0x280>)
 800933c:	f005 f898 	bl	800e470 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009340:	481c      	ldr	r0, [pc, #112]	; (80093b4 <MX_LWIP_Init+0x280>)
 8009342:	f005 fa59 	bl	800e7f8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009346:	4b1b      	ldr	r3, [pc, #108]	; (80093b4 <MX_LWIP_Init+0x280>)
 8009348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800934c:	089b      	lsrs	r3, r3, #2
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009358:	4816      	ldr	r0, [pc, #88]	; (80093b4 <MX_LWIP_Init+0x280>)
 800935a:	f005 fa5d 	bl	800e818 <netif_set_up>
 800935e:	e002      	b.n	8009366 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009360:	4814      	ldr	r0, [pc, #80]	; (80093b4 <MX_LWIP_Init+0x280>)
 8009362:	f005 facd 	bl	800e900 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009366:	4914      	ldr	r1, [pc, #80]	; (80093b8 <MX_LWIP_Init+0x284>)
 8009368:	4812      	ldr	r0, [pc, #72]	; (80093b4 <MX_LWIP_Init+0x280>)
 800936a:	f005 fb67 	bl	800ea3c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
	osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0,
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <MX_LWIP_Init+0x288>)
 8009370:	1d3c      	adds	r4, r7, #4
 8009372:	461d      	mov	r5, r3
 8009374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800937c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE *2);
	osThreadCreate(osThread(EthLink), &gnetif);
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	490c      	ldr	r1, [pc, #48]	; (80093b4 <MX_LWIP_Init+0x280>)
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fcf8 	bl	8009d7a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800938a:	bf00      	nop
 800938c:	3720      	adds	r7, #32
 800938e:	46bd      	mov	sp, r7
 8009390:	bdb0      	pop	{r4, r5, r7, pc}
 8009392:	bf00      	nop
 8009394:	24021a94 	.word	0x24021a94
 8009398:	24021a90 	.word	0x24021a90
 800939c:	24021a4c 	.word	0x24021a4c
 80093a0:	24021a8c 	.word	0x24021a8c
 80093a4:	24021a98 	.word	0x24021a98
 80093a8:	24021a9c 	.word	0x24021a9c
 80093ac:	0800d6a9 	.word	0x0800d6a9
 80093b0:	08009ac5 	.word	0x08009ac5
 80093b4:	24021a50 	.word	0x24021a50
 80093b8:	080093c1 	.word	0x080093c1
 80093bc:	08019294 	.word	0x08019294

080093c0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 80093d8:	4805      	ldr	r0, [pc, #20]	; (80093f0 <ethernet_link_status_updated+0x30>)
 80093da:	f005 fa1d 	bl	800e818 <netif_set_up>
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif
/* USER CODE END 6 */
  }
}
 80093de:	e002      	b.n	80093e6 <ethernet_link_status_updated+0x26>
		netif_set_down(&gnetif);
 80093e0:	4803      	ldr	r0, [pc, #12]	; (80093f0 <ethernet_link_status_updated+0x30>)
 80093e2:	f005 fa8d 	bl	800e900 <netif_set_down>
}
 80093e6:	bf00      	nop
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	24021a50 	.word	0x24021a50

080093f4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08e      	sub	sp, #56	; 0x38
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	605a      	str	r2, [r3, #4]
 8009406:	609a      	str	r2, [r3, #8]
 8009408:	60da      	str	r2, [r3, #12]
 800940a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a65      	ldr	r2, [pc, #404]	; (80095a8 <HAL_ETH_MspInit+0x1b4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	f040 80c3 	bne.w	800959e <HAL_ETH_MspInit+0x1aa>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009418:	4b64      	ldr	r3, [pc, #400]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 800941a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800941e:	4a63      	ldr	r2, [pc, #396]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009424:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009428:	4b60      	ldr	r3, [pc, #384]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 800942a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800942e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009432:	623b      	str	r3, [r7, #32]
 8009434:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009436:	4b5d      	ldr	r3, [pc, #372]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800943c:	4a5b      	ldr	r2, [pc, #364]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 800943e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009442:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009446:	4b59      	ldr	r3, [pc, #356]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800944c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009450:	61fb      	str	r3, [r7, #28]
 8009452:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009454:	4b55      	ldr	r3, [pc, #340]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800945a:	4a54      	ldr	r2, [pc, #336]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 800945c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009460:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009464:	4b51      	ldr	r3, [pc, #324]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009466:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800946a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800946e:	61bb      	str	r3, [r7, #24]
 8009470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009472:	4b4e      	ldr	r3, [pc, #312]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009478:	4a4c      	ldr	r2, [pc, #304]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 800947a:	f043 0304 	orr.w	r3, r3, #4
 800947e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009482:	4b4a      	ldr	r3, [pc, #296]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009490:	4b46      	ldr	r3, [pc, #280]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009496:	4a45      	ldr	r2, [pc, #276]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 8009498:	f043 0301 	orr.w	r3, r3, #1
 800949c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80094a0:	4b42      	ldr	r3, [pc, #264]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 80094a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094ae:	4b3f      	ldr	r3, [pc, #252]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 80094b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094b4:	4a3d      	ldr	r2, [pc, #244]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 80094b6:	f043 0302 	orr.w	r3, r3, #2
 80094ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80094be:	4b3b      	ldr	r3, [pc, #236]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 80094c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80094cc:	4b37      	ldr	r3, [pc, #220]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 80094ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094d2:	4a36      	ldr	r2, [pc, #216]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 80094d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80094dc:	4b33      	ldr	r3, [pc, #204]	; (80095ac <HAL_ETH_MspInit+0x1b8>)
 80094de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e6:	60bb      	str	r3, [r7, #8]
 80094e8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80094ea:	2332      	movs	r3, #50	; 0x32
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ee:	2302      	movs	r3, #2
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094f6:	2303      	movs	r3, #3
 80094f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80094fa:	230b      	movs	r3, #11
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009502:	4619      	mov	r1, r3
 8009504:	482a      	ldr	r0, [pc, #168]	; (80095b0 <HAL_ETH_MspInit+0x1bc>)
 8009506:	f7fa f9c3 	bl	8003890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800950a:	2382      	movs	r3, #130	; 0x82
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800950e:	2302      	movs	r3, #2
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009512:	2300      	movs	r3, #0
 8009514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009516:	2300      	movs	r3, #0
 8009518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800951a:	230b      	movs	r3, #11
 800951c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800951e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009522:	4619      	mov	r1, r3
 8009524:	4823      	ldr	r0, [pc, #140]	; (80095b4 <HAL_ETH_MspInit+0x1c0>)
 8009526:	f7fa f9b3 	bl	8003890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 800952a:	2304      	movs	r3, #4
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800952e:	2302      	movs	r3, #2
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009532:	2300      	movs	r3, #0
 8009534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009536:	2303      	movs	r3, #3
 8009538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800953a:	230b      	movs	r3, #11
 800953c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 800953e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009542:	4619      	mov	r1, r3
 8009544:	481b      	ldr	r0, [pc, #108]	; (80095b4 <HAL_ETH_MspInit+0x1c0>)
 8009546:	f7fa f9a3 	bl	8003890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800954a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800954e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009550:	2302      	movs	r3, #2
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009554:	2300      	movs	r3, #0
 8009556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009558:	2303      	movs	r3, #3
 800955a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800955c:	230b      	movs	r3, #11
 800955e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009564:	4619      	mov	r1, r3
 8009566:	4814      	ldr	r0, [pc, #80]	; (80095b8 <HAL_ETH_MspInit+0x1c4>)
 8009568:	f7fa f992 	bl	8003890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800956c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009572:	2302      	movs	r3, #2
 8009574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009576:	2300      	movs	r3, #0
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800957a:	2303      	movs	r3, #3
 800957c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800957e:	230b      	movs	r3, #11
 8009580:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009586:	4619      	mov	r1, r3
 8009588:	480c      	ldr	r0, [pc, #48]	; (80095bc <HAL_ETH_MspInit+0x1c8>)
 800958a:	f7fa f981 	bl	8003890 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800958e:	2200      	movs	r2, #0
 8009590:	2105      	movs	r1, #5
 8009592:	203d      	movs	r0, #61	; 0x3d
 8009594:	f7f8 f8de 	bl	8001754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009598:	203d      	movs	r0, #61	; 0x3d
 800959a:	f7f8 f905 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800959e:	bf00      	nop
 80095a0:	3738      	adds	r7, #56	; 0x38
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	40028000 	.word	0x40028000
 80095ac:	58024400 	.word	0x58024400
 80095b0:	58020800 	.word	0x58020800
 80095b4:	58020000 	.word	0x58020000
 80095b8:	58020400 	.word	0x58020400
 80095bc:	58021800 	.word	0x58021800

080095c0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80095c8:	4b04      	ldr	r3, [pc, #16]	; (80095dc <HAL_ETH_RxCpltCallback+0x1c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fd6b 	bl	800a0a8 <osSemaphoreRelease>
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	24002160 	.word	0x24002160

080095e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80095e0:	b5b0      	push	{r4, r5, r7, lr}
 80095e2:	b0ac      	sub	sp, #176	; 0xb0
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80095fa:	4b91      	ldr	r3, [pc, #580]	; (8009840 <low_level_init+0x260>)
 80095fc:	4a91      	ldr	r2, [pc, #580]	; (8009844 <low_level_init+0x264>)
 80095fe:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009600:	2300      	movs	r3, #0
 8009602:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009606:	2380      	movs	r3, #128	; 0x80
 8009608:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800960c:	23e1      	movs	r3, #225	; 0xe1
 800960e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009612:	2300      	movs	r3, #0
 8009614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009618:	2300      	movs	r3, #0
 800961a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800961e:	2300      	movs	r3, #0
 8009620:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009624:	4a86      	ldr	r2, [pc, #536]	; (8009840 <low_level_init+0x260>)
 8009626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800962a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800962c:	4b84      	ldr	r3, [pc, #528]	; (8009840 <low_level_init+0x260>)
 800962e:	2201      	movs	r2, #1
 8009630:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009632:	4b83      	ldr	r3, [pc, #524]	; (8009840 <low_level_init+0x260>)
 8009634:	4a84      	ldr	r2, [pc, #528]	; (8009848 <low_level_init+0x268>)
 8009636:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009638:	4b81      	ldr	r3, [pc, #516]	; (8009840 <low_level_init+0x260>)
 800963a:	4a84      	ldr	r2, [pc, #528]	; (800984c <low_level_init+0x26c>)
 800963c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800963e:	4b80      	ldr	r3, [pc, #512]	; (8009840 <low_level_init+0x260>)
 8009640:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009644:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009646:	487e      	ldr	r0, [pc, #504]	; (8009840 <low_level_init+0x260>)
 8009648:	f7f8 fa76 	bl	8001b38 <HAL_ETH_Init>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009652:	2234      	movs	r2, #52	; 0x34
 8009654:	2100      	movs	r1, #0
 8009656:	487e      	ldr	r0, [pc, #504]	; (8009850 <low_level_init+0x270>)
 8009658:	f00e fd48 	bl	80180ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800965c:	4b7c      	ldr	r3, [pc, #496]	; (8009850 <low_level_init+0x270>)
 800965e:	2221      	movs	r2, #33	; 0x21
 8009660:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009662:	4b7b      	ldr	r3, [pc, #492]	; (8009850 <low_level_init+0x270>)
 8009664:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009668:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800966a:	4b79      	ldr	r3, [pc, #484]	; (8009850 <low_level_init+0x270>)
 800966c:	2200      	movs	r2, #0
 800966e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009670:	4878      	ldr	r0, [pc, #480]	; (8009854 <low_level_init+0x274>)
 8009672:	f004 fdb7 	bl	800e1e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2206      	movs	r2, #6
 800967a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800967e:	4b70      	ldr	r3, [pc, #448]	; (8009840 <low_level_init+0x260>)
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	781a      	ldrb	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800968a:	4b6d      	ldr	r3, [pc, #436]	; (8009840 <low_level_init+0x260>)
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	785a      	ldrb	r2, [r3, #1]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009696:	4b6a      	ldr	r3, [pc, #424]	; (8009840 <low_level_init+0x260>)
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	789a      	ldrb	r2, [r3, #2]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80096a2:	4b67      	ldr	r3, [pc, #412]	; (8009840 <low_level_init+0x260>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	78da      	ldrb	r2, [r3, #3]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80096ae:	4b64      	ldr	r3, [pc, #400]	; (8009840 <low_level_init+0x260>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	791a      	ldrb	r2, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80096ba:	4b61      	ldr	r3, [pc, #388]	; (8009840 <low_level_init+0x260>)
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	795a      	ldrb	r2, [r3, #5]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80096cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096d4:	f043 030a 	orr.w	r3, r3, #10
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80096e0:	2300      	movs	r3, #0
 80096e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096e6:	e012      	b.n	800970e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80096e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80096f0:	fb02 f303 	mul.w	r3, r2, r3
 80096f4:	4a58      	ldr	r2, [pc, #352]	; (8009858 <low_level_init+0x278>)
 80096f6:	441a      	add	r2, r3
 80096f8:	2300      	movs	r3, #0
 80096fa:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80096fe:	4850      	ldr	r0, [pc, #320]	; (8009840 <low_level_init+0x260>)
 8009700:	f7f8 faf4 	bl	8001cec <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8009704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009708:	3301      	adds	r3, #1
 800970a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800970e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009712:	2b03      	cmp	r3, #3
 8009714:	d9e8      	bls.n	80096e8 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009716:	2300      	movs	r3, #0
 8009718:	62bb      	str	r3, [r7, #40]	; 0x28
 800971a:	2300      	movs	r3, #0
 800971c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800971e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009722:	2101      	movs	r1, #1
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fc31 	bl	8009f8c <osSemaphoreCreate>
 800972a:	4603      	mov	r3, r0
 800972c:	4a4b      	ldr	r2, [pc, #300]	; (800985c <low_level_init+0x27c>)
 800972e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009730:	4b4b      	ldr	r3, [pc, #300]	; (8009860 <low_level_init+0x280>)
 8009732:	f107 040c 	add.w	r4, r7, #12
 8009736:	461d      	mov	r5, r3
 8009738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800973a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800973c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009744:	f107 030c 	add.w	r3, r7, #12
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fb15 	bl	8009d7a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009750:	4944      	ldr	r1, [pc, #272]	; (8009864 <low_level_init+0x284>)
 8009752:	4845      	ldr	r0, [pc, #276]	; (8009868 <low_level_init+0x288>)
 8009754:	f7f7 fd47 	bl	80011e6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009758:	4843      	ldr	r0, [pc, #268]	; (8009868 <low_level_init+0x288>)
 800975a:	f7f7 fd76 	bl	800124a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800975e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d165      	bne.n	8009832 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009766:	4840      	ldr	r0, [pc, #256]	; (8009868 <low_level_init+0x288>)
 8009768:	f7f7 fe17 	bl	800139a <LAN8742_GetLinkState>
 800976c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009774:	2b01      	cmp	r3, #1
 8009776:	dc06      	bgt.n	8009786 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f005 f92f 	bl	800e9dc <netif_set_link_down>
      netif_set_down(netif);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f005 f8be 	bl	800e900 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009784:	e057      	b.n	8009836 <low_level_init+0x256>
 8009786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800978a:	3b02      	subs	r3, #2
 800978c:	2b03      	cmp	r3, #3
 800978e:	d82b      	bhi.n	80097e8 <low_level_init+0x208>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <low_level_init+0x1b8>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097bb 	.word	0x080097bb
 80097a0:	080097cb 	.word	0x080097cb
 80097a4:	080097db 	.word	0x080097db
        duplex = ETH_FULLDUPLEX_MODE;
 80097a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80097b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80097b8:	e01f      	b.n	80097fa <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80097c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80097c8:	e017      	b.n	80097fa <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 80097ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80097d2:	2300      	movs	r3, #0
 80097d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80097d8:	e00f      	b.n	80097fa <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 80097da:	2300      	movs	r3, #0
 80097dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80097e6:	e008      	b.n	80097fa <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 80097e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80097f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80097f8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80097fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80097fe:	4619      	mov	r1, r3
 8009800:	480f      	ldr	r0, [pc, #60]	; (8009840 <low_level_init+0x260>)
 8009802:	f7f9 f845 	bl	8002890 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800980a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800980c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009810:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009812:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009816:	4619      	mov	r1, r3
 8009818:	4809      	ldr	r0, [pc, #36]	; (8009840 <low_level_init+0x260>)
 800981a:	f7f9 fa0d 	bl	8002c38 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800981e:	4808      	ldr	r0, [pc, #32]	; (8009840 <low_level_init+0x260>)
 8009820:	f7f8 faa5 	bl	8001d6e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f004 fff7 	bl	800e818 <netif_set_up>
    netif_set_link_up(netif);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f005 f8a2 	bl	800e974 <netif_set_link_up>
}
 8009830:	e001      	b.n	8009836 <low_level_init+0x256>
    Error_Handler();
 8009832:	f7f7 fa2d 	bl	8000c90 <Error_Handler>
}
 8009836:	bf00      	nop
 8009838:	37b0      	adds	r7, #176	; 0xb0
 800983a:	46bd      	mov	sp, r7
 800983c:	bdb0      	pop	{r4, r5, r7, pc}
 800983e:	bf00      	nop
 8009840:	24021b8c 	.word	0x24021b8c
 8009844:	40028000 	.word	0x40028000
 8009848:	30040060 	.word	0x30040060
 800984c:	30040000 	.word	0x30040000
 8009850:	24021c14 	.word	0x24021c14
 8009854:	0801be44 	.word	0x0801be44
 8009858:	30040200 	.word	0x30040200
 800985c:	24002160 	.word	0x24002160
 8009860:	080192b8 	.word	0x080192b8
 8009864:	24000010 	.word	0x24000010
 8009868:	24021b6c 	.word	0x24021b6c

0800986c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b092      	sub	sp, #72	; 0x48
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8009876:	2300      	movs	r3, #0
 8009878:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009880:	f107 030c 	add.w	r3, r7, #12
 8009884:	2230      	movs	r2, #48	; 0x30
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f00e fc2f 	bl	80180ec <memset>

  for(q = p; q != NULL; q = q->next)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	643b      	str	r3, [r7, #64]	; 0x40
 8009892:	e049      	b.n	8009928 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009896:	2b03      	cmp	r3, #3
 8009898:	d902      	bls.n	80098a0 <low_level_output+0x34>
      return ERR_IF;
 800989a:	f06f 030b 	mvn.w	r3, #11
 800989e:	e056      	b.n	800994e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 80098a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a2:	6859      	ldr	r1, [r3, #4]
 80098a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098a6:	4613      	mov	r3, r2
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098b2:	4413      	add	r3, r2
 80098b4:	3b3c      	subs	r3, #60	; 0x3c
 80098b6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80098b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ba:	895b      	ldrh	r3, [r3, #10]
 80098bc:	4619      	mov	r1, r3
 80098be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098c0:	4613      	mov	r3, r2
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098cc:	4413      	add	r3, r2
 80098ce:	3b38      	subs	r3, #56	; 0x38
 80098d0:	6019      	str	r1, [r3, #0]

    if(i>0)
 80098d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d012      	beq.n	80098fe <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80098d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098da:	1e5a      	subs	r2, r3, #1
 80098dc:	f107 000c 	add.w	r0, r7, #12
 80098e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098e2:	460b      	mov	r3, r1
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	440b      	add	r3, r1
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	18c1      	adds	r1, r0, r3
 80098ec:	4613      	mov	r3, r2
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098f8:	4413      	add	r3, r2
 80098fa:	3b34      	subs	r3, #52	; 0x34
 80098fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80098fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8009906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009908:	4613      	mov	r3, r2
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009914:	4413      	add	r3, r2
 8009916:	3b34      	subs	r3, #52	; 0x34
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800991c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800991e:	3301      	adds	r3, #1
 8009920:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	643b      	str	r3, [r7, #64]	; 0x40
 8009928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1b2      	bne.n	8009894 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	891b      	ldrh	r3, [r3, #8]
 8009932:	461a      	mov	r2, r3
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <low_level_output+0xec>)
 8009936:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009938:	4a07      	ldr	r2, [pc, #28]	; (8009958 <low_level_output+0xec>)
 800993a:	f107 030c 	add.w	r3, r7, #12
 800993e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009940:	2214      	movs	r2, #20
 8009942:	4905      	ldr	r1, [pc, #20]	; (8009958 <low_level_output+0xec>)
 8009944:	4805      	ldr	r0, [pc, #20]	; (800995c <low_level_output+0xf0>)
 8009946:	f7f8 fb11 	bl	8001f6c <HAL_ETH_Transmit>

  return errval;
 800994a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800994e:	4618      	mov	r0, r3
 8009950:	3748      	adds	r7, #72	; 0x48
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	24021c14 	.word	0x24021c14
 800995c:	24021b8c 	.word	0x24021b8c

08009960 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b098      	sub	sp, #96	; 0x60
 8009964:	af02      	add	r7, sp, #8
 8009966:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009968:	2300      	movs	r3, #0
 800996a:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	60bb      	str	r3, [r7, #8]
 8009970:	2300      	movs	r3, #0
 8009972:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009974:	f107 030c 	add.w	r3, r7, #12
 8009978:	2230      	movs	r2, #48	; 0x30
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f00e fbb5 	bl	80180ec <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8009982:	2300      	movs	r3, #0
 8009984:	653b      	str	r3, [r7, #80]	; 0x50
 8009986:	e015      	b.n	80099b4 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8009988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	f107 010c 	add.w	r1, r7, #12
 8009990:	4613      	mov	r3, r2
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4419      	add	r1, r3
 800999a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800999c:	4613      	mov	r3, r2
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80099a8:	4413      	add	r3, r2
 80099aa:	3b44      	subs	r3, #68	; 0x44
 80099ac:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80099ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b0:	3301      	adds	r3, #1
 80099b2:	653b      	str	r3, [r7, #80]	; 0x50
 80099b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d9e6      	bls.n	8009988 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 80099ba:	f107 030c 	add.w	r3, r7, #12
 80099be:	4619      	mov	r1, r3
 80099c0:	4828      	ldr	r0, [pc, #160]	; (8009a64 <low_level_input+0x104>)
 80099c2:	f7f8 fc4c 	bl	800225e <HAL_ETH_GetRxDataBuffer>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d145      	bne.n	8009a58 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 80099cc:	f107 0308 	add.w	r3, r7, #8
 80099d0:	4619      	mov	r1, r3
 80099d2:	4824      	ldr	r0, [pc, #144]	; (8009a64 <low_level_input+0x104>)
 80099d4:	f7f8 fce1 	bl	800239a <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 80099d8:	4822      	ldr	r0, [pc, #136]	; (8009a64 <low_level_input+0x104>)
 80099da:	f7f8 fd11 	bl	8002400 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80099e4:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80099e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dd1d      	ble.n	8009a28 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80099ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ee:	f003 021f 	and.w	r2, r3, #31
 80099f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f4:	4413      	add	r3, r2
 80099f6:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80099f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80099fc:	f3bf 8f4f 	dsb	sy
}
 8009a00:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009a02:	4a19      	ldr	r2, [pc, #100]	; (8009a68 <low_level_input+0x108>)
 8009a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a06:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0c:	3320      	adds	r3, #32
 8009a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a12:	3b20      	subs	r3, #32
 8009a14:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8009a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	dcf2      	bgt.n	8009a02 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8009a1c:	f3bf 8f4f 	dsb	sy
}
 8009a20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009a22:	f3bf 8f6f 	isb	sy
}
 8009a26:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8009a28:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009a2a:	4810      	ldr	r0, [pc, #64]	; (8009a6c <low_level_input+0x10c>)
 8009a2c:	f004 fc56 	bl	800e2dc <memp_malloc_pool>
 8009a30:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8009a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00f      	beq.n	8009a58 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8009a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3a:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <low_level_input+0x110>)
 8009a3c:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	b299      	uxth	r1, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	b292      	uxth	r2, r2
 8009a48:	9201      	str	r2, [sp, #4]
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4e:	2241      	movs	r2, #65	; 0x41
 8009a50:	2000      	movs	r0, #0
 8009a52:	f005 f9e7 	bl	800ee24 <pbuf_alloced_custom>
 8009a56:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 8009a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3758      	adds	r7, #88	; 0x58
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	24021b8c 	.word	0x24021b8c
 8009a68:	e000ed00 	.word	0xe000ed00
 8009a6c:	0801be44 	.word	0x0801be44
 8009a70:	08009b21 	.word	0x08009b21

08009a74 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a80:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <ethernetif_input+0x4c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f04f 31ff 	mov.w	r1, #4294967295
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fabf 	bl	800a00c <osSemaphoreWait>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f5      	bne.n	8009a80 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7ff ff63 	bl	8009960 <low_level_input>
 8009a9a:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	68f9      	ldr	r1, [r7, #12]
 8009aa8:	68b8      	ldr	r0, [r7, #8]
 8009aaa:	4798      	blx	r3
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8009ab2:	68b8      	ldr	r0, [r7, #8]
 8009ab4:	f005 fb70 	bl	800f198 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1ea      	bne.n	8009a94 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009abe:	e7df      	b.n	8009a80 <ethernetif_input+0xc>
 8009ac0:	24002160 	.word	0x24002160

08009ac4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <ethernetif_init+0x1c>
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <ethernetif_init+0x48>)
 8009ad4:	f240 224f 	movw	r2, #591	; 0x24f
 8009ad8:	490d      	ldr	r1, [pc, #52]	; (8009b10 <ethernetif_init+0x4c>)
 8009ada:	480e      	ldr	r0, [pc, #56]	; (8009b14 <ethernetif_init+0x50>)
 8009adc:	f00e fb0e 	bl	80180fc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2273      	movs	r2, #115	; 0x73
 8009ae4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2274      	movs	r2, #116	; 0x74
 8009aec:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <ethernetif_init+0x54>)
 8009af4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a08      	ldr	r2, [pc, #32]	; (8009b1c <ethernetif_init+0x58>)
 8009afa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fd6f 	bl	80095e0 <low_level_init>

  return ERR_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	080192d4 	.word	0x080192d4
 8009b10:	080192f0 	.word	0x080192f0
 8009b14:	08019300 	.word	0x08019300
 8009b18:	0801605d 	.word	0x0801605d
 8009b1c:	0800986d 	.word	0x0800986d

08009b20 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009b2c:	68f9      	ldr	r1, [r7, #12]
 8009b2e:	4803      	ldr	r0, [pc, #12]	; (8009b3c <pbuf_free_custom+0x1c>)
 8009b30:	f004 fc48 	bl	800e3c4 <memp_free_pool>
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	0801be44 	.word	0x0801be44

08009b40 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b44:	f7f7 fd00 	bl	8001548 <HAL_GetTick>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009b54:	4802      	ldr	r0, [pc, #8]	; (8009b60 <ETH_PHY_IO_Init+0x10>)
 8009b56:	f7f9 f889 	bl	8002c6c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	24021b8c 	.word	0x24021b8c

08009b64 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  return 0;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	68f9      	ldr	r1, [r7, #12]
 8009b86:	4807      	ldr	r0, [pc, #28]	; (8009ba4 <ETH_PHY_IO_ReadReg+0x30>)
 8009b88:	f7f8 fdda 	bl	8002740 <HAL_ETH_ReadPHYRegister>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009b92:	f04f 33ff 	mov.w	r3, #4294967295
 8009b96:	e000      	b.n	8009b9a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	24021b8c 	.word	0x24021b8c

08009ba8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	68f9      	ldr	r1, [r7, #12]
 8009bba:	4807      	ldr	r0, [pc, #28]	; (8009bd8 <ETH_PHY_IO_WriteReg+0x30>)
 8009bbc:	f7f8 fe14 	bl	80027e8 <HAL_ETH_WritePHYRegister>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bca:	e000      	b.n	8009bce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	24021b8c 	.word	0x24021b8c

08009bdc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009be0:	f7f7 fcb2 	bl	8001548 <HAL_GetTick>
 8009be4:	4603      	mov	r3, r0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b0a0      	sub	sp, #128	; 0x80
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009c04:	483a      	ldr	r0, [pc, #232]	; (8009cf0 <ethernet_link_thread+0x104>)
 8009c06:	f7f7 fbc8 	bl	800139a <LAN8742_GetLinkState>
 8009c0a:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c12:	089b      	lsrs	r3, r3, #2
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00c      	beq.n	8009c38 <ethernet_link_thread+0x4c>
 8009c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	dc09      	bgt.n	8009c38 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8009c24:	4833      	ldr	r0, [pc, #204]	; (8009cf4 <ethernet_link_thread+0x108>)
 8009c26:	f7f8 f927 	bl	8001e78 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009c2a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009c2c:	f004 fe68 	bl	800e900 <netif_set_down>
    netif_set_link_down(netif);
 8009c30:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009c32:	f004 fed3 	bl	800e9dc <netif_set_link_down>
 8009c36:	e056      	b.n	8009ce6 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d14f      	bne.n	8009ce6 <ethernet_link_thread+0xfa>
 8009c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	dd4c      	ble.n	8009ce6 <ethernet_link_thread+0xfa>
 8009c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c4e:	3b02      	subs	r3, #2
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d82b      	bhi.n	8009cac <ethernet_link_thread+0xc0>
 8009c54:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <ethernet_link_thread+0x70>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009c6d 	.word	0x08009c6d
 8009c60:	08009c7f 	.word	0x08009c7f
 8009c64:	08009c8f 	.word	0x08009c8f
 8009c68:	08009c9f 	.word	0x08009c9f
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c70:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c76:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009c7c:	e017      	b.n	8009cae <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009c82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c86:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009c8c:	e00f      	b.n	8009cae <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c92:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009c94:	2300      	movs	r3, #0
 8009c96:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009c9c:	e007      	b.n	8009cae <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009caa:	e000      	b.n	8009cae <ethernet_link_thread+0xc2>
    default:
      break;
 8009cac:	bf00      	nop
    }

    if(linkchanged)
 8009cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d018      	beq.n	8009ce6 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009cb4:	f107 0308 	add.w	r3, r7, #8
 8009cb8:	4619      	mov	r1, r3
 8009cba:	480e      	ldr	r0, [pc, #56]	; (8009cf4 <ethernet_link_thread+0x108>)
 8009cbc:	f7f8 fde8 	bl	8002890 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cc6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009cc8:	f107 0308 	add.w	r3, r7, #8
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4809      	ldr	r0, [pc, #36]	; (8009cf4 <ethernet_link_thread+0x108>)
 8009cd0:	f7f8 ffb2 	bl	8002c38 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8009cd4:	4807      	ldr	r0, [pc, #28]	; (8009cf4 <ethernet_link_thread+0x108>)
 8009cd6:	f7f8 f84a 	bl	8001d6e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009cda:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009cdc:	f004 fd9c 	bl	800e818 <netif_set_up>
      netif_set_link_up(netif);
 8009ce0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009ce2:	f004 fe47 	bl	800e974 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009ce6:	2064      	movs	r0, #100	; 0x64
 8009ce8:	f000 f89f 	bl	8009e2a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009cec:	e78a      	b.n	8009c04 <ethernet_link_thread+0x18>
 8009cee:	bf00      	nop
 8009cf0:	24021b6c 	.word	0x24021b6c
 8009cf4:	24021b8c 	.word	0x24021b8c

08009cf8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d0a:	2b84      	cmp	r3, #132	; 0x84
 8009d0c:	d005      	beq.n	8009d1a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	3303      	adds	r3, #3
 8009d18:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	607b      	str	r3, [r7, #4]
  return(result);
 8009d34:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bf14      	ite	ne
 8009d3a:	2301      	movne	r3, #1
 8009d3c:	2300      	moveq	r3, #0
 8009d3e:	b2db      	uxtb	r3, r3
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d50:	f001 fdd0 	bl	800b8f4 <vTaskStartScheduler>
  
  return osOK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009d5e:	f7ff ffe3 	bl	8009d28 <inHandlerMode>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009d68:	f001 fee4 	bl	800bb34 <xTaskGetTickCountFromISR>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	e002      	b.n	8009d76 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009d70:	f001 fed0 	bl	800bb14 <xTaskGetTickCount>
 8009d74:	4603      	mov	r3, r0
  }
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7c:	b089      	sub	sp, #36	; 0x24
 8009d7e:	af04      	add	r7, sp, #16
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d020      	beq.n	8009dce <osThreadCreate+0x54>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d01c      	beq.n	8009dce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685c      	ldr	r4, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681d      	ldr	r5, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691e      	ldr	r6, [r3, #16]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff ffa6 	bl	8009cf8 <makeFreeRtosPriority>
 8009dac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009db6:	9202      	str	r2, [sp, #8]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	9100      	str	r1, [sp, #0]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	4632      	mov	r2, r6
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f001 fb3e 	bl	800b444 <xTaskCreateStatic>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	e01c      	b.n	8009e08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685c      	ldr	r4, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dda:	b29e      	uxth	r6, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff ff88 	bl	8009cf8 <makeFreeRtosPriority>
 8009de8:	4602      	mov	r2, r0
 8009dea:	f107 030c 	add.w	r3, r7, #12
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	9200      	str	r2, [sp, #0]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	4632      	mov	r2, r6
 8009df6:	4629      	mov	r1, r5
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f001 fb80 	bl	800b4fe <xTaskCreate>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d001      	beq.n	8009e08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009e04:	2300      	movs	r3, #0
 8009e06:	e000      	b.n	8009e0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009e08:	68fb      	ldr	r3, [r7, #12]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e12 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fca6 	bl	800b76c <vTaskDelete>
  return osOK;
 8009e20:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <osDelay+0x16>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	e000      	b.n	8009e42 <osDelay+0x18>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4618      	mov	r0, r3
 8009e44:	f001 fd22 	bl	800b88c <vTaskDelay>
  
  return osOK;
 8009e48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	4619      	mov	r1, r3
 8009e68:	2001      	movs	r0, #1
 8009e6a:	f000 fc4e 	bl	800a70a <xQueueCreateMutexStatic>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	e003      	b.n	8009e7a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009e72:	2001      	movs	r0, #1
 8009e74:	f000 fc31 	bl	800a6da <xQueueCreateMutex>
 8009e78:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <osMutexWait+0x18>
    return osErrorParameter;
 8009e98:	2380      	movs	r3, #128	; 0x80
 8009e9a:	e03a      	b.n	8009f12 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea6:	d103      	bne.n	8009eb0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	e009      	b.n	8009ec4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <osMutexWait+0x40>
      ticks = 1;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009ec4:	f7ff ff30 	bl	8009d28 <inHandlerMode>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d017      	beq.n	8009efe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009ece:	f107 0308 	add.w	r3, r7, #8
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f8ae 	bl	800b038 <xQueueReceiveFromISR>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d001      	beq.n	8009ee6 <osMutexWait+0x62>
      return osErrorOS;
 8009ee2:	23ff      	movs	r3, #255	; 0xff
 8009ee4:	e015      	b.n	8009f12 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d011      	beq.n	8009f10 <osMutexWait+0x8c>
 8009eec:	4b0b      	ldr	r3, [pc, #44]	; (8009f1c <osMutexWait+0x98>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	e008      	b.n	8009f10 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 ff8d 	bl	800ae20 <xQueueSemaphoreTake>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d001      	beq.n	8009f10 <osMutexWait+0x8c>
    return osErrorOS;
 8009f0c:	23ff      	movs	r3, #255	; 0xff
 8009f0e:	e000      	b.n	8009f12 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009f30:	f7ff fefa 	bl	8009d28 <inHandlerMode>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d016      	beq.n	8009f68 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009f3a:	f107 0308 	add.w	r3, r7, #8
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fe00 	bl	800ab46 <xQueueGiveFromISR>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d001      	beq.n	8009f50 <osMutexRelease+0x30>
      return osErrorOS;
 8009f4c:	23ff      	movs	r3, #255	; 0xff
 8009f4e:	e017      	b.n	8009f80 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d013      	beq.n	8009f7e <osMutexRelease+0x5e>
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <osMutexRelease+0x68>)
 8009f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	e00a      	b.n	8009f7e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fc50 	bl	800a814 <xQueueGenericSend>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d001      	beq.n	8009f7e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009f7a:	23ff      	movs	r3, #255	; 0xff
 8009f7c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d016      	beq.n	8009fcc <osSemaphoreCreate+0x40>
    if (count == 1) {
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d10a      	bne.n	8009fba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2203      	movs	r2, #3
 8009faa:	9200      	str	r2, [sp, #0]
 8009fac:	2200      	movs	r2, #0
 8009fae:	2100      	movs	r1, #0
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	f000 faa7 	bl	800a504 <xQueueGenericCreateStatic>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	e023      	b.n	800a002 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8009fba:	6838      	ldr	r0, [r7, #0]
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f000 fbbc 	bl	800a740 <xQueueCreateCountingSemaphoreStatic>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	e01a      	b.n	800a002 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d110      	bne.n	8009ff4 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	f000 fb0c 	bl	800a5f4 <xQueueGenericCreate>
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d005      	beq.n	8009ff0 <osSemaphoreCreate+0x64>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 fc12 	bl	800a814 <xQueueGenericSend>
      return sema;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	e006      	b.n	800a002 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fbd7 	bl	800a7ae <xQueueCreateCountingSemaphore>
 800a000:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a016:	2300      	movs	r3, #0
 800a018:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a020:	2380      	movs	r3, #128	; 0x80
 800a022:	e03a      	b.n	800a09a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02e:	d103      	bne.n	800a038 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a030:	f04f 33ff 	mov.w	r3, #4294967295
 800a034:	60fb      	str	r3, [r7, #12]
 800a036:	e009      	b.n	800a04c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d006      	beq.n	800a04c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <osSemaphoreWait+0x40>
      ticks = 1;
 800a048:	2301      	movs	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a04c:	f7ff fe6c 	bl	8009d28 <inHandlerMode>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d017      	beq.n	800a086 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a056:	f107 0308 	add.w	r3, r7, #8
 800a05a:	461a      	mov	r2, r3
 800a05c:	2100      	movs	r1, #0
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 ffea 	bl	800b038 <xQueueReceiveFromISR>
 800a064:	4603      	mov	r3, r0
 800a066:	2b01      	cmp	r3, #1
 800a068:	d001      	beq.n	800a06e <osSemaphoreWait+0x62>
      return osErrorOS;
 800a06a:	23ff      	movs	r3, #255	; 0xff
 800a06c:	e015      	b.n	800a09a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d011      	beq.n	800a098 <osSemaphoreWait+0x8c>
 800a074:	4b0b      	ldr	r3, [pc, #44]	; (800a0a4 <osSemaphoreWait+0x98>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	e008      	b.n	800a098 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a086:	68f9      	ldr	r1, [r7, #12]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fec9 	bl	800ae20 <xQueueSemaphoreTake>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b01      	cmp	r3, #1
 800a092:	d001      	beq.n	800a098 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a094:	23ff      	movs	r3, #255	; 0xff
 800a096:	e000      	b.n	800a09a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	e000ed04 	.word	0xe000ed04

0800a0a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a0b8:	f7ff fe36 	bl	8009d28 <inHandlerMode>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d016      	beq.n	800a0f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a0c2:	f107 0308 	add.w	r3, r7, #8
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fd3c 	bl	800ab46 <xQueueGiveFromISR>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d001      	beq.n	800a0d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a0d4:	23ff      	movs	r3, #255	; 0xff
 800a0d6:	e017      	b.n	800a108 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d013      	beq.n	800a106 <osSemaphoreRelease+0x5e>
 800a0de:	4b0c      	ldr	r3, [pc, #48]	; (800a110 <osSemaphoreRelease+0x68>)
 800a0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	e00a      	b.n	800a106 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fb8c 	bl	800a814 <xQueueGenericSend>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d001      	beq.n	800a106 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a102:	23ff      	movs	r3, #255	; 0xff
 800a104:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a106:	68fb      	ldr	r3, [r7, #12]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b085      	sub	sp, #20
 800a118:	af02      	add	r7, sp, #8
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d011      	beq.n	800a14a <osMessageCreate+0x36>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00d      	beq.n	800a14a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6859      	ldr	r1, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	2400      	movs	r4, #0
 800a140:	9400      	str	r4, [sp, #0]
 800a142:	f000 f9df 	bl	800a504 <xQueueGenericCreateStatic>
 800a146:	4603      	mov	r3, r0
 800a148:	e008      	b.n	800a15c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6818      	ldr	r0, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	4619      	mov	r1, r3
 800a156:	f000 fa4d 	bl	800a5f4 <xQueueGenericCreate>
 800a15a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	bd90      	pop	{r4, r7, pc}

0800a164 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <osMessagePut+0x1e>
    ticks = 1;
 800a17e:	2301      	movs	r3, #1
 800a180:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a182:	f7ff fdd1 	bl	8009d28 <inHandlerMode>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d018      	beq.n	800a1be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a18c:	f107 0210 	add.w	r2, r7, #16
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	2300      	movs	r3, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fc3a 	bl	800aa10 <xQueueGenericSendFromISR>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d001      	beq.n	800a1a6 <osMessagePut+0x42>
      return osErrorOS;
 800a1a2:	23ff      	movs	r3, #255	; 0xff
 800a1a4:	e018      	b.n	800a1d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d014      	beq.n	800a1d6 <osMessagePut+0x72>
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <osMessagePut+0x7c>)
 800a1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	e00b      	b.n	800a1d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a1be:	f107 0108 	add.w	r1, r7, #8
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 fb24 	bl	800a814 <xQueueGenericSend>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d001      	beq.n	800a1d6 <osMessagePut+0x72>
      return osErrorOS;
 800a1d2:	23ff      	movs	r3, #255	; 0xff
 800a1d4:	e000      	b.n	800a1d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	e000ed04 	.word	0xe000ed04

0800a1e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b08b      	sub	sp, #44	; 0x2c
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a1fe:	2380      	movs	r3, #128	; 0x80
 800a200:	617b      	str	r3, [r7, #20]
    return event;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	461c      	mov	r4, r3
 800a206:	f107 0314 	add.w	r3, r7, #20
 800a20a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a20e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a212:	e054      	b.n	800a2be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a214:	2300      	movs	r3, #0
 800a216:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a222:	d103      	bne.n	800a22c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a224:	f04f 33ff 	mov.w	r3, #4294967295
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
 800a22a:	e009      	b.n	800a240 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d006      	beq.n	800a240 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <osMessageGet+0x5c>
      ticks = 1;
 800a23c:	2301      	movs	r3, #1
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a240:	f7ff fd72 	bl	8009d28 <inHandlerMode>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01c      	beq.n	800a284 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a24a:	f107 0220 	add.w	r2, r7, #32
 800a24e:	f107 0314 	add.w	r3, r7, #20
 800a252:	3304      	adds	r3, #4
 800a254:	4619      	mov	r1, r3
 800a256:	68b8      	ldr	r0, [r7, #8]
 800a258:	f000 feee 	bl	800b038 <xQueueReceiveFromISR>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d102      	bne.n	800a268 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a262:	2310      	movs	r3, #16
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	e001      	b.n	800a26c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d01d      	beq.n	800a2ae <osMessageGet+0xca>
 800a272:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <osMessageGet+0xe4>)
 800a274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	e014      	b.n	800a2ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a284:	f107 0314 	add.w	r3, r7, #20
 800a288:	3304      	adds	r3, #4
 800a28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28c:	4619      	mov	r1, r3
 800a28e:	68b8      	ldr	r0, [r7, #8]
 800a290:	f000 fce6 	bl	800ac60 <xQueueReceive>
 800a294:	4603      	mov	r3, r0
 800a296:	2b01      	cmp	r3, #1
 800a298:	d102      	bne.n	800a2a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a29a:	2310      	movs	r3, #16
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	e006      	b.n	800a2ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <osMessageGet+0xc6>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e000      	b.n	800a2ac <osMessageGet+0xc8>
 800a2aa:	2340      	movs	r3, #64	; 0x40
 800a2ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	461c      	mov	r4, r3
 800a2b2:	f107 0314 	add.w	r3, r7, #20
 800a2b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	372c      	adds	r7, #44	; 0x2c
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd90      	pop	{r4, r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f103 0208 	add.w	r2, r3, #8
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f103 0208 	add.w	r2, r3, #8
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f103 0208 	add.w	r2, r3, #8
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a31a:	bf00      	nop
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	601a      	str	r2, [r3, #0]
}
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a384:	d103      	bne.n	800a38e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e00c      	b.n	800a3a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3308      	adds	r3, #8
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e002      	b.n	800a39c <vListInsert+0x2e>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d2f6      	bcs.n	800a396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6892      	ldr	r2, [r2, #8]
 800a3f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6852      	ldr	r2, [r2, #4]
 800a400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d103      	bne.n	800a414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	1e5a      	subs	r2, r3, #1
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10a      	bne.n	800a45e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a45e:	f002 fd21 	bl	800cea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	68f9      	ldr	r1, [r7, #12]
 800a46c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a46e:	fb01 f303 	mul.w	r3, r1, r3
 800a472:	441a      	add	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	3b01      	subs	r3, #1
 800a490:	68f9      	ldr	r1, [r7, #12]
 800a492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a494:	fb01 f303 	mul.w	r3, r1, r3
 800a498:	441a      	add	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	22ff      	movs	r2, #255	; 0xff
 800a4a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	22ff      	movs	r2, #255	; 0xff
 800a4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d114      	bne.n	800a4de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d01a      	beq.n	800a4f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3310      	adds	r3, #16
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f001 fcad 	bl	800be20 <xTaskRemoveFromEventList>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d012      	beq.n	800a4f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <xQueueGenericReset+0xcc>)
 800a4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	e009      	b.n	800a4f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3310      	adds	r3, #16
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fef2 	bl	800a2cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3324      	adds	r3, #36	; 0x24
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff feed 	bl	800a2cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4f2:	f002 fd07 	bl	800cf04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4f6:	2301      	movs	r3, #1
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	e000ed04 	.word	0xe000ed04

0800a504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a504:	b580      	push	{r7, lr}
 800a506:	b08e      	sub	sp, #56	; 0x38
 800a508:	af02      	add	r7, sp, #8
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <xQueueGenericCreateStatic+0x52>
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <xQueueGenericCreateStatic+0x56>
 800a556:	2301      	movs	r3, #1
 800a558:	e000      	b.n	800a55c <xQueueGenericCreateStatic+0x58>
 800a55a:	2300      	movs	r3, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	623b      	str	r3, [r7, #32]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <xQueueGenericCreateStatic+0x7e>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <xQueueGenericCreateStatic+0x82>
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <xQueueGenericCreateStatic+0x84>
 800a586:	2300      	movs	r3, #0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	61fb      	str	r3, [r7, #28]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5a2:	2348      	movs	r3, #72	; 0x48
 800a5a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b48      	cmp	r3, #72	; 0x48
 800a5aa:	d00a      	beq.n	800a5c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61bb      	str	r3, [r7, #24]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00d      	beq.n	800a5ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	68b9      	ldr	r1, [r7, #8]
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 f83f 	bl	800a668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3730      	adds	r7, #48	; 0x30
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08a      	sub	sp, #40	; 0x28
 800a5f8:	af02      	add	r7, sp, #8
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	613b      	str	r3, [r7, #16]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	fb02 f303 	mul.w	r3, r2, r3
 800a626:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	3348      	adds	r3, #72	; 0x48
 800a62c:	4618      	mov	r0, r3
 800a62e:	f002 fd5b 	bl	800d0e8 <pvPortMalloc>
 800a632:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d011      	beq.n	800a65e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	3348      	adds	r3, #72	; 0x48
 800a642:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a64c:	79fa      	ldrb	r2, [r7, #7]
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	4613      	mov	r3, r2
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f805 	bl	800a668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a65e:	69bb      	ldr	r3, [r7, #24]
	}
 800a660:	4618      	mov	r0, r3
 800a662:	3720      	adds	r7, #32
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	e002      	b.n	800a68a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a696:	2101      	movs	r1, #1
 800a698:	69b8      	ldr	r0, [r7, #24]
 800a69a:	f7ff fecb 	bl	800a434 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a69e:	bf00      	nop
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00e      	beq.n	800a6d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f8a1 	bl	800a814 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b086      	sub	sp, #24
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	6939      	ldr	r1, [r7, #16]
 800a6f2:	6978      	ldr	r0, [r7, #20]
 800a6f4:	f7ff ff7e 	bl	800a5f4 <xQueueGenericCreate>
 800a6f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f7ff ffd3 	bl	800a6a6 <prvInitialiseMutex>

		return xNewQueue;
 800a700:	68fb      	ldr	r3, [r7, #12]
	}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b088      	sub	sp, #32
 800a70e:	af02      	add	r7, sp, #8
 800a710:	4603      	mov	r3, r0
 800a712:	6039      	str	r1, [r7, #0]
 800a714:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a716:	2301      	movs	r3, #1
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	2300      	movs	r3, #0
 800a71c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a71e:	79fb      	ldrb	r3, [r7, #7]
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2200      	movs	r2, #0
 800a726:	6939      	ldr	r1, [r7, #16]
 800a728:	6978      	ldr	r0, [r7, #20]
 800a72a:	f7ff feeb 	bl	800a504 <xQueueGenericCreateStatic>
 800a72e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f7ff ffb8 	bl	800a6a6 <prvInitialiseMutex>

		return xNewQueue;
 800a736:	68fb      	ldr	r3, [r7, #12]
	}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a740:	b580      	push	{r7, lr}
 800a742:	b08a      	sub	sp, #40	; 0x28
 800a744:	af02      	add	r7, sp, #8
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	61bb      	str	r3, [r7, #24]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d90a      	bls.n	800a786 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	617b      	str	r3, [r7, #20]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a786:	2302      	movs	r3, #2
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	2100      	movs	r1, #0
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff feb7 	bl	800a504 <xQueueGenericCreateStatic>
 800a796:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7a4:	69fb      	ldr	r3, [r7, #28]
	}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3720      	adds	r7, #32
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	613b      	str	r3, [r7, #16]
}
 800a7d0:	bf00      	nop
 800a7d2:	e7fe      	b.n	800a7d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d90a      	bls.n	800a7f2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	60fb      	str	r3, [r7, #12]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fefc 	bl	800a5f4 <xQueueGenericCreate>
 800a7fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a80a:	697b      	ldr	r3, [r7, #20]
	}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	; 0x38
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a822:	2300      	movs	r3, #0
 800a824:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10a      	bne.n	800a846 <xQueueGenericSend+0x32>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d103      	bne.n	800a854 <xQueueGenericSend+0x40>
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <xQueueGenericSend+0x44>
 800a854:	2301      	movs	r3, #1
 800a856:	e000      	b.n	800a85a <xQueueGenericSend+0x46>
 800a858:	2300      	movs	r3, #0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10a      	bne.n	800a874 <xQueueGenericSend+0x60>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a870:	bf00      	nop
 800a872:	e7fe      	b.n	800a872 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	2b02      	cmp	r3, #2
 800a878:	d103      	bne.n	800a882 <xQueueGenericSend+0x6e>
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d101      	bne.n	800a886 <xQueueGenericSend+0x72>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <xQueueGenericSend+0x74>
 800a886:	2300      	movs	r3, #0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10a      	bne.n	800a8a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	623b      	str	r3, [r7, #32]
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8a2:	f001 fc7b 	bl	800c19c <xTaskGetSchedulerState>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d102      	bne.n	800a8b2 <xQueueGenericSend+0x9e>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <xQueueGenericSend+0xa2>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <xQueueGenericSend+0xa4>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	61fb      	str	r3, [r7, #28]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8d2:	f002 fae7 	bl	800cea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d302      	bcc.n	800a8e8 <xQueueGenericSend+0xd4>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d129      	bne.n	800a93c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ee:	f000 fc3b 	bl	800b168 <prvCopyDataToQueue>
 800a8f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d010      	beq.n	800a91e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	3324      	adds	r3, #36	; 0x24
 800a900:	4618      	mov	r0, r3
 800a902:	f001 fa8d 	bl	800be20 <xTaskRemoveFromEventList>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d013      	beq.n	800a934 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a90c:	4b3f      	ldr	r3, [pc, #252]	; (800aa0c <xQueueGenericSend+0x1f8>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	e00a      	b.n	800a934 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d007      	beq.n	800a934 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a924:	4b39      	ldr	r3, [pc, #228]	; (800aa0c <xQueueGenericSend+0x1f8>)
 800a926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a934:	f002 fae6 	bl	800cf04 <vPortExitCritical>
				return pdPASS;
 800a938:	2301      	movs	r3, #1
 800a93a:	e063      	b.n	800aa04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d103      	bne.n	800a94a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a942:	f002 fadf 	bl	800cf04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a946:	2300      	movs	r3, #0
 800a948:	e05c      	b.n	800aa04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d106      	bne.n	800a95e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	4618      	mov	r0, r3
 800a956:	f001 fac5 	bl	800bee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a95a:	2301      	movs	r3, #1
 800a95c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a95e:	f002 fad1 	bl	800cf04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a962:	f001 f82d 	bl	800b9c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a966:	f002 fa9d 	bl	800cea4 <vPortEnterCritical>
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a970:	b25b      	sxtb	r3, r3
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a976:	d103      	bne.n	800a980 <xQueueGenericSend+0x16c>
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a986:	b25b      	sxtb	r3, r3
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d103      	bne.n	800a996 <xQueueGenericSend+0x182>
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a996:	f002 fab5 	bl	800cf04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a99a:	1d3a      	adds	r2, r7, #4
 800a99c:	f107 0314 	add.w	r3, r7, #20
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f001 fab4 	bl	800bf10 <xTaskCheckForTimeOut>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d124      	bne.n	800a9f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9b0:	f000 fcd2 	bl	800b358 <prvIsQueueFull>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d018      	beq.n	800a9ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	3310      	adds	r3, #16
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 f9dc 	bl	800bd80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9ca:	f000 fc5d 	bl	800b288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9ce:	f001 f805 	bl	800b9dc <xTaskResumeAll>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f47f af7c 	bne.w	800a8d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a9da:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <xQueueGenericSend+0x1f8>)
 800a9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	e772      	b.n	800a8d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9ee:	f000 fc4b 	bl	800b288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9f2:	f000 fff3 	bl	800b9dc <xTaskResumeAll>
 800a9f6:	e76c      	b.n	800a8d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9fa:	f000 fc45 	bl	800b288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9fe:	f000 ffed 	bl	800b9dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3738      	adds	r7, #56	; 0x38
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b090      	sub	sp, #64	; 0x40
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10a      	bne.n	800aa3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa3a:	bf00      	nop
 800aa3c:	e7fe      	b.n	800aa3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d103      	bne.n	800aa4c <xQueueGenericSendFromISR+0x3c>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <xQueueGenericSendFromISR+0x40>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e000      	b.n	800aa52 <xQueueGenericSendFromISR+0x42>
 800aa50:	2300      	movs	r3, #0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa68:	bf00      	nop
 800aa6a:	e7fe      	b.n	800aa6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d103      	bne.n	800aa7a <xQueueGenericSendFromISR+0x6a>
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d101      	bne.n	800aa7e <xQueueGenericSendFromISR+0x6e>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueGenericSendFromISR+0x70>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	623b      	str	r3, [r7, #32]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa9a:	f002 fae5 	bl	800d068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa9e:	f3ef 8211 	mrs	r2, BASEPRI
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	61fa      	str	r2, [r7, #28]
 800aab4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aab6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aab8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d302      	bcc.n	800aacc <xQueueGenericSendFromISR+0xbc>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d12f      	bne.n	800ab2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aada:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aae2:	f000 fb41 	bl	800b168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aae6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaee:	d112      	bne.n	800ab16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d016      	beq.n	800ab26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	3324      	adds	r3, #36	; 0x24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 f98f 	bl	800be20 <xTaskRemoveFromEventList>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00e      	beq.n	800ab26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00b      	beq.n	800ab26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e007      	b.n	800ab26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	b25a      	sxtb	r2, r3
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab26:	2301      	movs	r3, #1
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab2a:	e001      	b.n	800ab30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3740      	adds	r7, #64	; 0x40
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b08e      	sub	sp, #56	; 0x38
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10a      	bne.n	800ab70 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	623b      	str	r3, [r7, #32]
}
 800ab6c:	bf00      	nop
 800ab6e:	e7fe      	b.n	800ab6e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00a      	beq.n	800ab8e <xQueueGiveFromISR+0x48>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	61fb      	str	r3, [r7, #28]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <xQueueGiveFromISR+0x58>
 800ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <xQueueGiveFromISR+0x5c>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <xQueueGiveFromISR+0x5e>
 800aba2:	2300      	movs	r3, #0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <xQueueGiveFromISR+0x78>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	61bb      	str	r3, [r7, #24]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abbe:	f002 fa53 	bl	800d068 <vPortValidateInterruptPriority>
	__asm volatile
 800abc2:	f3ef 8211 	mrs	r2, BASEPRI
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	617a      	str	r2, [r7, #20]
 800abd8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800abda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abea:	429a      	cmp	r2, r3
 800abec:	d22b      	bcs.n	800ac46 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d112      	bne.n	800ac30 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d016      	beq.n	800ac40 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	3324      	adds	r3, #36	; 0x24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 f902 	bl	800be20 <xTaskRemoveFromEventList>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00e      	beq.n	800ac40 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00b      	beq.n	800ac40 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	e007      	b.n	800ac40 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac34:	3301      	adds	r3, #1
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	b25a      	sxtb	r2, r3
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac40:	2301      	movs	r3, #1
 800ac42:	637b      	str	r3, [r7, #52]	; 0x34
 800ac44:	e001      	b.n	800ac4a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	637b      	str	r3, [r7, #52]	; 0x34
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f383 8811 	msr	BASEPRI, r3
}
 800ac54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3738      	adds	r7, #56	; 0x38
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08c      	sub	sp, #48	; 0x30
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10a      	bne.n	800ac90 <xQueueReceive+0x30>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	623b      	str	r3, [r7, #32]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d103      	bne.n	800ac9e <xQueueReceive+0x3e>
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <xQueueReceive+0x42>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <xQueueReceive+0x44>
 800aca2:	2300      	movs	r3, #0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <xQueueReceive+0x5e>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	61fb      	str	r3, [r7, #28]
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acbe:	f001 fa6d 	bl	800c19c <xTaskGetSchedulerState>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d102      	bne.n	800acce <xQueueReceive+0x6e>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <xQueueReceive+0x72>
 800acce:	2301      	movs	r3, #1
 800acd0:	e000      	b.n	800acd4 <xQueueReceive+0x74>
 800acd2:	2300      	movs	r3, #0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <xQueueReceive+0x8e>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	61bb      	str	r3, [r7, #24]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acee:	f002 f8d9 	bl	800cea4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d01f      	beq.n	800ad3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acfe:	68b9      	ldr	r1, [r7, #8]
 800ad00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad02:	f000 fa9b 	bl	800b23c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	1e5a      	subs	r2, r3, #1
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00f      	beq.n	800ad36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	3310      	adds	r3, #16
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f001 f880 	bl	800be20 <xTaskRemoveFromEventList>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad26:	4b3d      	ldr	r3, [pc, #244]	; (800ae1c <xQueueReceive+0x1bc>)
 800ad28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad36:	f002 f8e5 	bl	800cf04 <vPortExitCritical>
				return pdPASS;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e069      	b.n	800ae12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d103      	bne.n	800ad4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad44:	f002 f8de 	bl	800cf04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e062      	b.n	800ae12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad52:	f107 0310 	add.w	r3, r7, #16
 800ad56:	4618      	mov	r0, r3
 800ad58:	f001 f8c4 	bl	800bee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad60:	f002 f8d0 	bl	800cf04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad64:	f000 fe2c 	bl	800b9c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad68:	f002 f89c 	bl	800cea4 <vPortEnterCritical>
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad72:	b25b      	sxtb	r3, r3
 800ad74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad78:	d103      	bne.n	800ad82 <xQueueReceive+0x122>
 800ad7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad88:	b25b      	sxtb	r3, r3
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d103      	bne.n	800ad98 <xQueueReceive+0x138>
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad98:	f002 f8b4 	bl	800cf04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad9c:	1d3a      	adds	r2, r7, #4
 800ad9e:	f107 0310 	add.w	r3, r7, #16
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f001 f8b3 	bl	800bf10 <xTaskCheckForTimeOut>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d123      	bne.n	800adf8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adb2:	f000 fabb 	bl	800b32c <prvIsQueueEmpty>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d017      	beq.n	800adec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	3324      	adds	r3, #36	; 0x24
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	4611      	mov	r1, r2
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 ffdb 	bl	800bd80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adcc:	f000 fa5c 	bl	800b288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800add0:	f000 fe04 	bl	800b9dc <xTaskResumeAll>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d189      	bne.n	800acee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800adda:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <xQueueReceive+0x1bc>)
 800addc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	e780      	b.n	800acee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800adec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adee:	f000 fa4b 	bl	800b288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adf2:	f000 fdf3 	bl	800b9dc <xTaskResumeAll>
 800adf6:	e77a      	b.n	800acee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800adf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adfa:	f000 fa45 	bl	800b288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adfe:	f000 fded 	bl	800b9dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae04:	f000 fa92 	bl	800b32c <prvIsQueueEmpty>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f43f af6f 	beq.w	800acee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3730      	adds	r7, #48	; 0x30
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	e000ed04 	.word	0xe000ed04

0800ae20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08e      	sub	sp, #56	; 0x38
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10a      	bne.n	800ae52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	623b      	str	r3, [r7, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	61fb      	str	r3, [r7, #28]
}
 800ae6c:	bf00      	nop
 800ae6e:	e7fe      	b.n	800ae6e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae70:	f001 f994 	bl	800c19c <xTaskGetSchedulerState>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d102      	bne.n	800ae80 <xQueueSemaphoreTake+0x60>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <xQueueSemaphoreTake+0x64>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e000      	b.n	800ae86 <xQueueSemaphoreTake+0x66>
 800ae84:	2300      	movs	r3, #0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	61bb      	str	r3, [r7, #24]
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aea0:	f002 f800 	bl	800cea4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d024      	beq.n	800aefa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	1e5a      	subs	r2, r3, #1
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d104      	bne.n	800aeca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aec0:	f001 fb14 	bl	800c4ec <pvTaskIncrementMutexHeldCount>
 800aec4:	4602      	mov	r2, r0
 800aec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00f      	beq.n	800aef2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	3310      	adds	r3, #16
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 ffa2 	bl	800be20 <xTaskRemoveFromEventList>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d007      	beq.n	800aef2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aee2:	4b54      	ldr	r3, [pc, #336]	; (800b034 <xQueueSemaphoreTake+0x214>)
 800aee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aef2:	f002 f807 	bl	800cf04 <vPortExitCritical>
				return pdPASS;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e097      	b.n	800b02a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d111      	bne.n	800af24 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00a      	beq.n	800af1c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	617b      	str	r3, [r7, #20]
}
 800af18:	bf00      	nop
 800af1a:	e7fe      	b.n	800af1a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800af1c:	f001 fff2 	bl	800cf04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af20:	2300      	movs	r3, #0
 800af22:	e082      	b.n	800b02a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af2a:	f107 030c 	add.w	r3, r7, #12
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 ffd8 	bl	800bee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af34:	2301      	movs	r3, #1
 800af36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af38:	f001 ffe4 	bl	800cf04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af3c:	f000 fd40 	bl	800b9c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af40:	f001 ffb0 	bl	800cea4 <vPortEnterCritical>
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d103      	bne.n	800af5a <xQueueSemaphoreTake+0x13a>
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af60:	b25b      	sxtb	r3, r3
 800af62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af66:	d103      	bne.n	800af70 <xQueueSemaphoreTake+0x150>
 800af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af70:	f001 ffc8 	bl	800cf04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af74:	463a      	mov	r2, r7
 800af76:	f107 030c 	add.w	r3, r7, #12
 800af7a:	4611      	mov	r1, r2
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 ffc7 	bl	800bf10 <xTaskCheckForTimeOut>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d132      	bne.n	800afee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af8a:	f000 f9cf 	bl	800b32c <prvIsQueueEmpty>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d026      	beq.n	800afe2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d109      	bne.n	800afb0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800af9c:	f001 ff82 	bl	800cea4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f001 f917 	bl	800c1d8 <xTaskPriorityInherit>
 800afaa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800afac:	f001 ffaa 	bl	800cf04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb2:	3324      	adds	r3, #36	; 0x24
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	4611      	mov	r1, r2
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fee1 	bl	800bd80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afc0:	f000 f962 	bl	800b288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afc4:	f000 fd0a 	bl	800b9dc <xTaskResumeAll>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f47f af68 	bne.w	800aea0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800afd0:	4b18      	ldr	r3, [pc, #96]	; (800b034 <xQueueSemaphoreTake+0x214>)
 800afd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	e75e      	b.n	800aea0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800afe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afe4:	f000 f950 	bl	800b288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afe8:	f000 fcf8 	bl	800b9dc <xTaskResumeAll>
 800afec:	e758      	b.n	800aea0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800afee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aff0:	f000 f94a 	bl	800b288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aff4:	f000 fcf2 	bl	800b9dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800affa:	f000 f997 	bl	800b32c <prvIsQueueEmpty>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	f43f af4d 	beq.w	800aea0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00d      	beq.n	800b028 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b00c:	f001 ff4a 	bl	800cea4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b012:	f000 f891 	bl	800b138 <prvGetDisinheritPriorityAfterTimeout>
 800b016:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b01e:	4618      	mov	r0, r3
 800b020:	f001 f9d6 	bl	800c3d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b024:	f001 ff6e 	bl	800cf04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3738      	adds	r7, #56	; 0x38
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	e000ed04 	.word	0xe000ed04

0800b038 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08e      	sub	sp, #56	; 0x38
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10a      	bne.n	800b064 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	623b      	str	r3, [r7, #32]
}
 800b060:	bf00      	nop
 800b062:	e7fe      	b.n	800b062 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d103      	bne.n	800b072 <xQueueReceiveFromISR+0x3a>
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <xQueueReceiveFromISR+0x3e>
 800b072:	2301      	movs	r3, #1
 800b074:	e000      	b.n	800b078 <xQueueReceiveFromISR+0x40>
 800b076:	2300      	movs	r3, #0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	61fb      	str	r3, [r7, #28]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b092:	f001 ffe9 	bl	800d068 <vPortValidateInterruptPriority>
	__asm volatile
 800b096:	f3ef 8211 	mrs	r2, BASEPRI
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	61ba      	str	r2, [r7, #24]
 800b0ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b0ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d02f      	beq.n	800b11e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0c8:	68b9      	ldr	r1, [r7, #8]
 800b0ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0cc:	f000 f8b6 	bl	800b23c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	1e5a      	subs	r2, r3, #1
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e0:	d112      	bne.n	800b108 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d016      	beq.n	800b118 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	3310      	adds	r3, #16
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fe96 	bl	800be20 <xTaskRemoveFromEventList>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00e      	beq.n	800b118 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	e007      	b.n	800b118 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b10c:	3301      	adds	r3, #1
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	b25a      	sxtb	r2, r3
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b118:	2301      	movs	r3, #1
 800b11a:	637b      	str	r3, [r7, #52]	; 0x34
 800b11c:	e001      	b.n	800b122 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b11e:	2300      	movs	r3, #0
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f383 8811 	msr	BASEPRI, r3
}
 800b12c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b130:	4618      	mov	r0, r3
 800b132:	3738      	adds	r7, #56	; 0x38
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	2b00      	cmp	r3, #0
 800b146:	d006      	beq.n	800b156 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f1c3 0307 	rsb	r3, r3, #7
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e001      	b.n	800b15a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b15a:	68fb      	ldr	r3, [r7, #12]
	}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b174:	2300      	movs	r3, #0
 800b176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10d      	bne.n	800b1a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d14d      	bne.n	800b22a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	4618      	mov	r0, r3
 800b194:	f001 f896 	bl	800c2c4 <xTaskPriorityDisinherit>
 800b198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	609a      	str	r2, [r3, #8]
 800b1a0:	e043      	b.n	800b22a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d119      	bne.n	800b1dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6858      	ldr	r0, [r3, #4]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	68b9      	ldr	r1, [r7, #8]
 800b1b4:	f00c ff8c 	bl	80180d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c0:	441a      	add	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d32b      	bcc.n	800b22a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	605a      	str	r2, [r3, #4]
 800b1da:	e026      	b.n	800b22a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	68d8      	ldr	r0, [r3, #12]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	68b9      	ldr	r1, [r7, #8]
 800b1e8:	f00c ff72 	bl	80180d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68da      	ldr	r2, [r3, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f4:	425b      	negs	r3, r3
 800b1f6:	441a      	add	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	68da      	ldr	r2, [r3, #12]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	d207      	bcs.n	800b218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b210:	425b      	negs	r3, r3
 800b212:	441a      	add	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d105      	bne.n	800b22a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	3b01      	subs	r3, #1
 800b228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b232:	697b      	ldr	r3, [r7, #20]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d018      	beq.n	800b280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b256:	441a      	add	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	429a      	cmp	r2, r3
 800b266:	d303      	bcc.n	800b270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68d9      	ldr	r1, [r3, #12]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	461a      	mov	r2, r3
 800b27a:	6838      	ldr	r0, [r7, #0]
 800b27c:	f00c ff28 	bl	80180d0 <memcpy>
	}
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b290:	f001 fe08 	bl	800cea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b29a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b29c:	e011      	b.n	800b2c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d012      	beq.n	800b2cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3324      	adds	r3, #36	; 0x24
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 fdb8 	bl	800be20 <xTaskRemoveFromEventList>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2b6:	f000 fe8d 	bl	800bfd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dce9      	bgt.n	800b29e <prvUnlockQueue+0x16>
 800b2ca:	e000      	b.n	800b2ce <prvUnlockQueue+0x46>
					break;
 800b2cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	22ff      	movs	r2, #255	; 0xff
 800b2d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2d6:	f001 fe15 	bl	800cf04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2da:	f001 fde3 	bl	800cea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2e6:	e011      	b.n	800b30c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d012      	beq.n	800b316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3310      	adds	r3, #16
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 fd93 	bl	800be20 <xTaskRemoveFromEventList>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b300:	f000 fe68 	bl	800bfd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	3b01      	subs	r3, #1
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b310:	2b00      	cmp	r3, #0
 800b312:	dce9      	bgt.n	800b2e8 <prvUnlockQueue+0x60>
 800b314:	e000      	b.n	800b318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	22ff      	movs	r2, #255	; 0xff
 800b31c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b320:	f001 fdf0 	bl	800cf04 <vPortExitCritical>
}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b334:	f001 fdb6 	bl	800cea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b340:	2301      	movs	r3, #1
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	e001      	b.n	800b34a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b346:	2300      	movs	r3, #0
 800b348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b34a:	f001 fddb 	bl	800cf04 <vPortExitCritical>

	return xReturn;
 800b34e:	68fb      	ldr	r3, [r7, #12]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b360:	f001 fda0 	bl	800cea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d102      	bne.n	800b376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b370:	2301      	movs	r3, #1
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	e001      	b.n	800b37a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b37a:	f001 fdc3 	bl	800cf04 <vPortExitCritical>

	return xReturn;
 800b37e:	68fb      	ldr	r3, [r7, #12]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	e014      	b.n	800b3c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b398:	4a0f      	ldr	r2, [pc, #60]	; (800b3d8 <vQueueAddToRegistry+0x50>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10b      	bne.n	800b3bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3a4:	490c      	ldr	r1, [pc, #48]	; (800b3d8 <vQueueAddToRegistry+0x50>)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3ae:	4a0a      	ldr	r2, [pc, #40]	; (800b3d8 <vQueueAddToRegistry+0x50>)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	00db      	lsls	r3, r3, #3
 800b3b4:	4413      	add	r3, r2
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3ba:	e006      	b.n	800b3ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b07      	cmp	r3, #7
 800b3c6:	d9e7      	bls.n	800b398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3c8:	bf00      	nop
 800b3ca:	bf00      	nop
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	24021c48 	.word	0x24021c48

0800b3dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3ec:	f001 fd5a 	bl	800cea4 <vPortEnterCritical>
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3f6:	b25b      	sxtb	r3, r3
 800b3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fc:	d103      	bne.n	800b406 <vQueueWaitForMessageRestricted+0x2a>
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b40c:	b25b      	sxtb	r3, r3
 800b40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b412:	d103      	bne.n	800b41c <vQueueWaitForMessageRestricted+0x40>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b41c:	f001 fd72 	bl	800cf04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	3324      	adds	r3, #36	; 0x24
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	4618      	mov	r0, r3
 800b432:	f000 fcc9 	bl	800bdc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b436:	6978      	ldr	r0, [r7, #20]
 800b438:	f7ff ff26 	bl	800b288 <prvUnlockQueue>
	}
 800b43c:	bf00      	nop
 800b43e:	3718      	adds	r7, #24
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08e      	sub	sp, #56	; 0x38
 800b448:	af04      	add	r7, sp, #16
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
 800b450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	623b      	str	r3, [r7, #32]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10a      	bne.n	800b48a <xTaskCreateStatic+0x46>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	61fb      	str	r3, [r7, #28]
}
 800b486:	bf00      	nop
 800b488:	e7fe      	b.n	800b488 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b48a:	2354      	movs	r3, #84	; 0x54
 800b48c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b54      	cmp	r3, #84	; 0x54
 800b492:	d00a      	beq.n	800b4aa <xTaskCreateStatic+0x66>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	61bb      	str	r3, [r7, #24]
}
 800b4a6:	bf00      	nop
 800b4a8:	e7fe      	b.n	800b4a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d01e      	beq.n	800b4f0 <xTaskCreateStatic+0xac>
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d01b      	beq.n	800b4f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9303      	str	r3, [sp, #12]
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	f107 0314 	add.w	r3, r7, #20
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	68b9      	ldr	r1, [r7, #8]
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 f850 	bl	800b588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4ea:	f000 f8d5 	bl	800b698 <prvAddNewTaskToReadyList>
 800b4ee:	e001      	b.n	800b4f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4f4:	697b      	ldr	r3, [r7, #20]
	}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3728      	adds	r7, #40	; 0x28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b08c      	sub	sp, #48	; 0x30
 800b502:	af04      	add	r7, sp, #16
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	603b      	str	r3, [r7, #0]
 800b50a:	4613      	mov	r3, r2
 800b50c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b50e:	88fb      	ldrh	r3, [r7, #6]
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4618      	mov	r0, r3
 800b514:	f001 fde8 	bl	800d0e8 <pvPortMalloc>
 800b518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00e      	beq.n	800b53e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b520:	2054      	movs	r0, #84	; 0x54
 800b522:	f001 fde1 	bl	800d0e8 <pvPortMalloc>
 800b526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	631a      	str	r2, [r3, #48]	; 0x30
 800b534:	e005      	b.n	800b542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b536:	6978      	ldr	r0, [r7, #20]
 800b538:	f001 fea2 	bl	800d280 <vPortFree>
 800b53c:	e001      	b.n	800b542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b53e:	2300      	movs	r3, #0
 800b540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d017      	beq.n	800b578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b550:	88fa      	ldrh	r2, [r7, #6]
 800b552:	2300      	movs	r3, #0
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	68b9      	ldr	r1, [r7, #8]
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 f80e 	bl	800b588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b56c:	69f8      	ldr	r0, [r7, #28]
 800b56e:	f000 f893 	bl	800b698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b572:	2301      	movs	r3, #1
 800b574:	61bb      	str	r3, [r7, #24]
 800b576:	e002      	b.n	800b57e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b578:	f04f 33ff 	mov.w	r3, #4294967295
 800b57c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b57e:	69bb      	ldr	r3, [r7, #24]
	}
 800b580:	4618      	mov	r0, r3
 800b582:	3720      	adds	r7, #32
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b59a:	6879      	ldr	r1, [r7, #4]
 800b59c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b5a0:	440b      	add	r3, r1
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	f023 0307 	bic.w	r3, r3, #7
 800b5ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	f003 0307 	and.w	r3, r3, #7
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	617b      	str	r3, [r7, #20]
}
 800b5cc:	bf00      	nop
 800b5ce:	e7fe      	b.n	800b5ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d01f      	beq.n	800b616 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61fb      	str	r3, [r7, #28]
 800b5da:	e012      	b.n	800b602 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	7819      	ldrb	r1, [r3, #0]
 800b5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	3334      	adds	r3, #52	; 0x34
 800b5ec:	460a      	mov	r2, r1
 800b5ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	3301      	adds	r3, #1
 800b600:	61fb      	str	r3, [r7, #28]
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	2b0f      	cmp	r3, #15
 800b606:	d9e9      	bls.n	800b5dc <prvInitialiseNewTask+0x54>
 800b608:	e000      	b.n	800b60c <prvInitialiseNewTask+0x84>
			{
				break;
 800b60a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b614:	e003      	b.n	800b61e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b620:	2b06      	cmp	r3, #6
 800b622:	d901      	bls.n	800b628 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b624:	2306      	movs	r3, #6
 800b626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b62c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b632:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	2200      	movs	r2, #0
 800b638:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	3304      	adds	r3, #4
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe fe64 	bl	800a30c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	3318      	adds	r3, #24
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe fe5f 	bl	800a30c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	f1c3 0207 	rsb	r2, r3, #7
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	2200      	movs	r2, #0
 800b668:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	68f9      	ldr	r1, [r7, #12]
 800b676:	69b8      	ldr	r0, [r7, #24]
 800b678:	f001 fae4 	bl	800cc44 <pxPortInitialiseStack>
 800b67c:	4602      	mov	r2, r0
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b68c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b68e:	bf00      	nop
 800b690:	3720      	adds	r7, #32
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6a0:	f001 fc00 	bl	800cea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6a4:	4b2a      	ldr	r3, [pc, #168]	; (800b750 <prvAddNewTaskToReadyList+0xb8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	4a29      	ldr	r2, [pc, #164]	; (800b750 <prvAddNewTaskToReadyList+0xb8>)
 800b6ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6ae:	4b29      	ldr	r3, [pc, #164]	; (800b754 <prvAddNewTaskToReadyList+0xbc>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d109      	bne.n	800b6ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6b6:	4a27      	ldr	r2, [pc, #156]	; (800b754 <prvAddNewTaskToReadyList+0xbc>)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6bc:	4b24      	ldr	r3, [pc, #144]	; (800b750 <prvAddNewTaskToReadyList+0xb8>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d110      	bne.n	800b6e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6c4:	f000 fcac 	bl	800c020 <prvInitialiseTaskLists>
 800b6c8:	e00d      	b.n	800b6e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6ca:	4b23      	ldr	r3, [pc, #140]	; (800b758 <prvAddNewTaskToReadyList+0xc0>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6d2:	4b20      	ldr	r3, [pc, #128]	; (800b754 <prvAddNewTaskToReadyList+0xbc>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d802      	bhi.n	800b6e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6e0:	4a1c      	ldr	r2, [pc, #112]	; (800b754 <prvAddNewTaskToReadyList+0xbc>)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6e6:	4b1d      	ldr	r3, [pc, #116]	; (800b75c <prvAddNewTaskToReadyList+0xc4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	4a1b      	ldr	r2, [pc, #108]	; (800b75c <prvAddNewTaskToReadyList+0xc4>)
 800b6ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	409a      	lsls	r2, r3
 800b6f8:	4b19      	ldr	r3, [pc, #100]	; (800b760 <prvAddNewTaskToReadyList+0xc8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	4a18      	ldr	r2, [pc, #96]	; (800b760 <prvAddNewTaskToReadyList+0xc8>)
 800b700:	6013      	str	r3, [r2, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b706:	4613      	mov	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4a15      	ldr	r2, [pc, #84]	; (800b764 <prvAddNewTaskToReadyList+0xcc>)
 800b710:	441a      	add	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3304      	adds	r3, #4
 800b716:	4619      	mov	r1, r3
 800b718:	4610      	mov	r0, r2
 800b71a:	f7fe fe04 	bl	800a326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b71e:	f001 fbf1 	bl	800cf04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b722:	4b0d      	ldr	r3, [pc, #52]	; (800b758 <prvAddNewTaskToReadyList+0xc0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00e      	beq.n	800b748 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b72a:	4b0a      	ldr	r3, [pc, #40]	; (800b754 <prvAddNewTaskToReadyList+0xbc>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	429a      	cmp	r2, r3
 800b736:	d207      	bcs.n	800b748 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b738:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <prvAddNewTaskToReadyList+0xd0>)
 800b73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b748:	bf00      	nop
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	24002268 	.word	0x24002268
 800b754:	24002168 	.word	0x24002168
 800b758:	24002274 	.word	0x24002274
 800b75c:	24002284 	.word	0x24002284
 800b760:	24002270 	.word	0x24002270
 800b764:	2400216c 	.word	0x2400216c
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b774:	f001 fb96 	bl	800cea4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d102      	bne.n	800b784 <vTaskDelete+0x18>
 800b77e:	4b39      	ldr	r3, [pc, #228]	; (800b864 <vTaskDelete+0xf8>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	e000      	b.n	800b786 <vTaskDelete+0x1a>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3304      	adds	r3, #4
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fe27 	bl	800a3e0 <uxListRemove>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d115      	bne.n	800b7c4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79c:	4932      	ldr	r1, [pc, #200]	; (800b868 <vTaskDelete+0xfc>)
 800b79e:	4613      	mov	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	440b      	add	r3, r1
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10a      	bne.n	800b7c4 <vTaskDelete+0x58>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b8:	43da      	mvns	r2, r3
 800b7ba:	4b2c      	ldr	r3, [pc, #176]	; (800b86c <vTaskDelete+0x100>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4013      	ands	r3, r2
 800b7c0:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <vTaskDelete+0x100>)
 800b7c2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d004      	beq.n	800b7d6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3318      	adds	r3, #24
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe fe05 	bl	800a3e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b7d6:	4b26      	ldr	r3, [pc, #152]	; (800b870 <vTaskDelete+0x104>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	4a24      	ldr	r2, [pc, #144]	; (800b870 <vTaskDelete+0x104>)
 800b7de:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b7e0:	4b20      	ldr	r3, [pc, #128]	; (800b864 <vTaskDelete+0xf8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d10b      	bne.n	800b802 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4820      	ldr	r0, [pc, #128]	; (800b874 <vTaskDelete+0x108>)
 800b7f2:	f7fe fd98 	bl	800a326 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b7f6:	4b20      	ldr	r3, [pc, #128]	; (800b878 <vTaskDelete+0x10c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	4a1e      	ldr	r2, [pc, #120]	; (800b878 <vTaskDelete+0x10c>)
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	e009      	b.n	800b816 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b802:	4b1e      	ldr	r3, [pc, #120]	; (800b87c <vTaskDelete+0x110>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3b01      	subs	r3, #1
 800b808:	4a1c      	ldr	r2, [pc, #112]	; (800b87c <vTaskDelete+0x110>)
 800b80a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 fc75 	bl	800c0fc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b812:	f000 fca3 	bl	800c15c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b816:	f001 fb75 	bl	800cf04 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b81a:	4b19      	ldr	r3, [pc, #100]	; (800b880 <vTaskDelete+0x114>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d01b      	beq.n	800b85a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b822:	4b10      	ldr	r3, [pc, #64]	; (800b864 <vTaskDelete+0xf8>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d116      	bne.n	800b85a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b82c:	4b15      	ldr	r3, [pc, #84]	; (800b884 <vTaskDelete+0x118>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00a      	beq.n	800b84a <vTaskDelete+0xde>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	60bb      	str	r3, [r7, #8]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b84a:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <vTaskDelete+0x11c>)
 800b84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	24002168 	.word	0x24002168
 800b868:	2400216c 	.word	0x2400216c
 800b86c:	24002270 	.word	0x24002270
 800b870:	24002284 	.word	0x24002284
 800b874:	2400223c 	.word	0x2400223c
 800b878:	24002250 	.word	0x24002250
 800b87c:	24002268 	.word	0x24002268
 800b880:	24002274 	.word	0x24002274
 800b884:	24002290 	.word	0x24002290
 800b888:	e000ed04 	.word	0xe000ed04

0800b88c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b894:	2300      	movs	r3, #0
 800b896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d017      	beq.n	800b8ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <vTaskDelay+0x60>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <vTaskDelay+0x30>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	60bb      	str	r3, [r7, #8]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8bc:	f000 f880 	bl	800b9c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fe26 	bl	800c514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8c8:	f000 f888 	bl	800b9dc <xTaskResumeAll>
 800b8cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d107      	bne.n	800b8e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8d4:	4b06      	ldr	r3, [pc, #24]	; (800b8f0 <vTaskDelay+0x64>)
 800b8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8e4:	bf00      	nop
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	24002290 	.word	0x24002290
 800b8f0:	e000ed04 	.word	0xe000ed04

0800b8f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08a      	sub	sp, #40	; 0x28
 800b8f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8fe:	2300      	movs	r3, #0
 800b900:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b902:	463a      	mov	r2, r7
 800b904:	1d39      	adds	r1, r7, #4
 800b906:	f107 0308 	add.w	r3, r7, #8
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f4 fec4 	bl	8000698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	9202      	str	r2, [sp, #8]
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	2300      	movs	r3, #0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	2300      	movs	r3, #0
 800b920:	460a      	mov	r2, r1
 800b922:	4921      	ldr	r1, [pc, #132]	; (800b9a8 <vTaskStartScheduler+0xb4>)
 800b924:	4821      	ldr	r0, [pc, #132]	; (800b9ac <vTaskStartScheduler+0xb8>)
 800b926:	f7ff fd8d 	bl	800b444 <xTaskCreateStatic>
 800b92a:	4603      	mov	r3, r0
 800b92c:	4a20      	ldr	r2, [pc, #128]	; (800b9b0 <vTaskStartScheduler+0xbc>)
 800b92e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b930:	4b1f      	ldr	r3, [pc, #124]	; (800b9b0 <vTaskStartScheduler+0xbc>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b938:	2301      	movs	r3, #1
 800b93a:	617b      	str	r3, [r7, #20]
 800b93c:	e001      	b.n	800b942 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b93e:	2300      	movs	r3, #0
 800b940:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d102      	bne.n	800b94e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b948:	f000 fe4a 	bl	800c5e0 <xTimerCreateTimerTask>
 800b94c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d116      	bne.n	800b982 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	613b      	str	r3, [r7, #16]
}
 800b966:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b968:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <vTaskStartScheduler+0xc0>)
 800b96a:	f04f 32ff 	mov.w	r2, #4294967295
 800b96e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b970:	4b11      	ldr	r3, [pc, #68]	; (800b9b8 <vTaskStartScheduler+0xc4>)
 800b972:	2201      	movs	r2, #1
 800b974:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b976:	4b11      	ldr	r3, [pc, #68]	; (800b9bc <vTaskStartScheduler+0xc8>)
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b97c:	f001 f9f0 	bl	800cd60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b980:	e00e      	b.n	800b9a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d10a      	bne.n	800b9a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	60fb      	str	r3, [r7, #12]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <vTaskStartScheduler+0xaa>
}
 800b9a0:	bf00      	nop
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	08019328 	.word	0x08019328
 800b9ac:	0800bfed 	.word	0x0800bfed
 800b9b0:	2400228c 	.word	0x2400228c
 800b9b4:	24002288 	.word	0x24002288
 800b9b8:	24002274 	.word	0x24002274
 800b9bc:	2400226c 	.word	0x2400226c

0800b9c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9c4:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <vTaskSuspendAll+0x18>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	4a03      	ldr	r2, [pc, #12]	; (800b9d8 <vTaskSuspendAll+0x18>)
 800b9cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9ce:	bf00      	nop
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	24002290 	.word	0x24002290

0800b9dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9ea:	4b41      	ldr	r3, [pc, #260]	; (800baf0 <xTaskResumeAll+0x114>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	603b      	str	r3, [r7, #0]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba08:	f001 fa4c 	bl	800cea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba0c:	4b38      	ldr	r3, [pc, #224]	; (800baf0 <xTaskResumeAll+0x114>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	4a37      	ldr	r2, [pc, #220]	; (800baf0 <xTaskResumeAll+0x114>)
 800ba14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba16:	4b36      	ldr	r3, [pc, #216]	; (800baf0 <xTaskResumeAll+0x114>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d161      	bne.n	800bae2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba1e:	4b35      	ldr	r3, [pc, #212]	; (800baf4 <xTaskResumeAll+0x118>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d05d      	beq.n	800bae2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba26:	e02e      	b.n	800ba86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba28:	4b33      	ldr	r3, [pc, #204]	; (800baf8 <xTaskResumeAll+0x11c>)
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3318      	adds	r3, #24
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fcd3 	bl	800a3e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fe fcce 	bl	800a3e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba48:	2201      	movs	r2, #1
 800ba4a:	409a      	lsls	r2, r3
 800ba4c:	4b2b      	ldr	r3, [pc, #172]	; (800bafc <xTaskResumeAll+0x120>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	4a2a      	ldr	r2, [pc, #168]	; (800bafc <xTaskResumeAll+0x120>)
 800ba54:	6013      	str	r3, [r2, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4a27      	ldr	r2, [pc, #156]	; (800bb00 <xTaskResumeAll+0x124>)
 800ba64:	441a      	add	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3304      	adds	r3, #4
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	f7fe fc5a 	bl	800a326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba76:	4b23      	ldr	r3, [pc, #140]	; (800bb04 <xTaskResumeAll+0x128>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d302      	bcc.n	800ba86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ba80:	4b21      	ldr	r3, [pc, #132]	; (800bb08 <xTaskResumeAll+0x12c>)
 800ba82:	2201      	movs	r2, #1
 800ba84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba86:	4b1c      	ldr	r3, [pc, #112]	; (800baf8 <xTaskResumeAll+0x11c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1cc      	bne.n	800ba28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba94:	f000 fb62 	bl	800c15c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba98:	4b1c      	ldr	r3, [pc, #112]	; (800bb0c <xTaskResumeAll+0x130>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d010      	beq.n	800bac6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800baa4:	f000 f858 	bl	800bb58 <xTaskIncrementTick>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d002      	beq.n	800bab4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800baae:	4b16      	ldr	r3, [pc, #88]	; (800bb08 <xTaskResumeAll+0x12c>)
 800bab0:	2201      	movs	r2, #1
 800bab2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1f1      	bne.n	800baa4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bac0:	4b12      	ldr	r3, [pc, #72]	; (800bb0c <xTaskResumeAll+0x130>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bac6:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <xTaskResumeAll+0x12c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d009      	beq.n	800bae2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bace:	2301      	movs	r3, #1
 800bad0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bad2:	4b0f      	ldr	r3, [pc, #60]	; (800bb10 <xTaskResumeAll+0x134>)
 800bad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bae2:	f001 fa0f 	bl	800cf04 <vPortExitCritical>

	return xAlreadyYielded;
 800bae6:	68bb      	ldr	r3, [r7, #8]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	24002290 	.word	0x24002290
 800baf4:	24002268 	.word	0x24002268
 800baf8:	24002228 	.word	0x24002228
 800bafc:	24002270 	.word	0x24002270
 800bb00:	2400216c 	.word	0x2400216c
 800bb04:	24002168 	.word	0x24002168
 800bb08:	2400227c 	.word	0x2400227c
 800bb0c:	24002278 	.word	0x24002278
 800bb10:	e000ed04 	.word	0xe000ed04

0800bb14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb1a:	4b05      	ldr	r3, [pc, #20]	; (800bb30 <xTaskGetTickCount+0x1c>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb20:	687b      	ldr	r3, [r7, #4]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	2400226c 	.word	0x2400226c

0800bb34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb3a:	f001 fa95 	bl	800d068 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb3e:	2300      	movs	r3, #0
 800bb40:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb42:	4b04      	ldr	r3, [pc, #16]	; (800bb54 <xTaskGetTickCountFromISR+0x20>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb48:	683b      	ldr	r3, [r7, #0]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	2400226c 	.word	0x2400226c

0800bb58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb62:	4b4e      	ldr	r3, [pc, #312]	; (800bc9c <xTaskIncrementTick+0x144>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f040 808e 	bne.w	800bc88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb6c:	4b4c      	ldr	r3, [pc, #304]	; (800bca0 <xTaskIncrementTick+0x148>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb74:	4a4a      	ldr	r2, [pc, #296]	; (800bca0 <xTaskIncrementTick+0x148>)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d120      	bne.n	800bbc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb80:	4b48      	ldr	r3, [pc, #288]	; (800bca4 <xTaskIncrementTick+0x14c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00a      	beq.n	800bba0 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	603b      	str	r3, [r7, #0]
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <xTaskIncrementTick+0x46>
 800bba0:	4b40      	ldr	r3, [pc, #256]	; (800bca4 <xTaskIncrementTick+0x14c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60fb      	str	r3, [r7, #12]
 800bba6:	4b40      	ldr	r3, [pc, #256]	; (800bca8 <xTaskIncrementTick+0x150>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a3e      	ldr	r2, [pc, #248]	; (800bca4 <xTaskIncrementTick+0x14c>)
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	4a3e      	ldr	r2, [pc, #248]	; (800bca8 <xTaskIncrementTick+0x150>)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	4b3d      	ldr	r3, [pc, #244]	; (800bcac <xTaskIncrementTick+0x154>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	4a3c      	ldr	r2, [pc, #240]	; (800bcac <xTaskIncrementTick+0x154>)
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	f000 facd 	bl	800c15c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbc2:	4b3b      	ldr	r3, [pc, #236]	; (800bcb0 <xTaskIncrementTick+0x158>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d348      	bcc.n	800bc5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbcc:	4b35      	ldr	r3, [pc, #212]	; (800bca4 <xTaskIncrementTick+0x14c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d104      	bne.n	800bbe0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbd6:	4b36      	ldr	r3, [pc, #216]	; (800bcb0 <xTaskIncrementTick+0x158>)
 800bbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbdc:	601a      	str	r2, [r3, #0]
					break;
 800bbde:	e03e      	b.n	800bc5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbe0:	4b30      	ldr	r3, [pc, #192]	; (800bca4 <xTaskIncrementTick+0x14c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d203      	bcs.n	800bc00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbf8:	4a2d      	ldr	r2, [pc, #180]	; (800bcb0 <xTaskIncrementTick+0x158>)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbfe:	e02e      	b.n	800bc5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	3304      	adds	r3, #4
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe fbeb 	bl	800a3e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d004      	beq.n	800bc1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	3318      	adds	r3, #24
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fe fbe2 	bl	800a3e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc20:	2201      	movs	r2, #1
 800bc22:	409a      	lsls	r2, r3
 800bc24:	4b23      	ldr	r3, [pc, #140]	; (800bcb4 <xTaskIncrementTick+0x15c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	4a22      	ldr	r2, [pc, #136]	; (800bcb4 <xTaskIncrementTick+0x15c>)
 800bc2c:	6013      	str	r3, [r2, #0]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4a1f      	ldr	r2, [pc, #124]	; (800bcb8 <xTaskIncrementTick+0x160>)
 800bc3c:	441a      	add	r2, r3
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	3304      	adds	r3, #4
 800bc42:	4619      	mov	r1, r3
 800bc44:	4610      	mov	r0, r2
 800bc46:	f7fe fb6e 	bl	800a326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	; (800bcbc <xTaskIncrementTick+0x164>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d3b9      	bcc.n	800bbcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc5c:	e7b6      	b.n	800bbcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc5e:	4b17      	ldr	r3, [pc, #92]	; (800bcbc <xTaskIncrementTick+0x164>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc64:	4914      	ldr	r1, [pc, #80]	; (800bcb8 <xTaskIncrementTick+0x160>)
 800bc66:	4613      	mov	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4413      	add	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	440b      	add	r3, r1
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d901      	bls.n	800bc7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bc76:	2301      	movs	r3, #1
 800bc78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc7a:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <xTaskIncrementTick+0x168>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d007      	beq.n	800bc92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bc82:	2301      	movs	r3, #1
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	e004      	b.n	800bc92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc88:	4b0e      	ldr	r3, [pc, #56]	; (800bcc4 <xTaskIncrementTick+0x16c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	4a0d      	ldr	r2, [pc, #52]	; (800bcc4 <xTaskIncrementTick+0x16c>)
 800bc90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc92:	697b      	ldr	r3, [r7, #20]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	24002290 	.word	0x24002290
 800bca0:	2400226c 	.word	0x2400226c
 800bca4:	24002220 	.word	0x24002220
 800bca8:	24002224 	.word	0x24002224
 800bcac:	24002280 	.word	0x24002280
 800bcb0:	24002288 	.word	0x24002288
 800bcb4:	24002270 	.word	0x24002270
 800bcb8:	2400216c 	.word	0x2400216c
 800bcbc:	24002168 	.word	0x24002168
 800bcc0:	2400227c 	.word	0x2400227c
 800bcc4:	24002278 	.word	0x24002278

0800bcc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcce:	4b27      	ldr	r3, [pc, #156]	; (800bd6c <vTaskSwitchContext+0xa4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d003      	beq.n	800bcde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcd6:	4b26      	ldr	r3, [pc, #152]	; (800bd70 <vTaskSwitchContext+0xa8>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcdc:	e03f      	b.n	800bd5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bcde:	4b24      	ldr	r3, [pc, #144]	; (800bd70 <vTaskSwitchContext+0xa8>)
 800bce0:	2200      	movs	r2, #0
 800bce2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce4:	4b23      	ldr	r3, [pc, #140]	; (800bd74 <vTaskSwitchContext+0xac>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	fab3 f383 	clz	r3, r3
 800bcf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bcf2:	7afb      	ldrb	r3, [r7, #11]
 800bcf4:	f1c3 031f 	rsb	r3, r3, #31
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	491f      	ldr	r1, [pc, #124]	; (800bd78 <vTaskSwitchContext+0xb0>)
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	607b      	str	r3, [r7, #4]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vTaskSwitchContext+0x5a>
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	4613      	mov	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4a12      	ldr	r2, [pc, #72]	; (800bd78 <vTaskSwitchContext+0xb0>)
 800bd30:	4413      	add	r3, r2
 800bd32:	613b      	str	r3, [r7, #16]
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	685a      	ldr	r2, [r3, #4]
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	605a      	str	r2, [r3, #4]
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	3308      	adds	r3, #8
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d104      	bne.n	800bd54 <vTaskSwitchContext+0x8c>
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	605a      	str	r2, [r3, #4]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	4a08      	ldr	r2, [pc, #32]	; (800bd7c <vTaskSwitchContext+0xb4>)
 800bd5c:	6013      	str	r3, [r2, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	24002290 	.word	0x24002290
 800bd70:	2400227c 	.word	0x2400227c
 800bd74:	24002270 	.word	0x24002270
 800bd78:	2400216c 	.word	0x2400216c
 800bd7c:	24002168 	.word	0x24002168

0800bd80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60fb      	str	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bda6:	4b07      	ldr	r3, [pc, #28]	; (800bdc4 <vTaskPlaceOnEventList+0x44>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3318      	adds	r3, #24
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7fe fadd 	bl	800a36e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	6838      	ldr	r0, [r7, #0]
 800bdb8:	f000 fbac 	bl	800c514 <prvAddCurrentTaskToDelayedList>
}
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	24002168 	.word	0x24002168

0800bdc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	617b      	str	r3, [r7, #20]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdf0:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <vTaskPlaceOnEventListRestricted+0x54>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3318      	adds	r3, #24
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7fe fa94 	bl	800a326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be04:	f04f 33ff 	mov.w	r3, #4294967295
 800be08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	68b8      	ldr	r0, [r7, #8]
 800be0e:	f000 fb81 	bl	800c514 <prvAddCurrentTaskToDelayedList>
	}
 800be12:	bf00      	nop
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	24002168 	.word	0x24002168

0800be20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10a      	bne.n	800be4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	60fb      	str	r3, [r7, #12]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	3318      	adds	r3, #24
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fac5 	bl	800a3e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be56:	4b1d      	ldr	r3, [pc, #116]	; (800becc <xTaskRemoveFromEventList+0xac>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d11c      	bne.n	800be98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe fabc 	bl	800a3e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	2201      	movs	r2, #1
 800be6e:	409a      	lsls	r2, r3
 800be70:	4b17      	ldr	r3, [pc, #92]	; (800bed0 <xTaskRemoveFromEventList+0xb0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4313      	orrs	r3, r2
 800be76:	4a16      	ldr	r2, [pc, #88]	; (800bed0 <xTaskRemoveFromEventList+0xb0>)
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7e:	4613      	mov	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4a13      	ldr	r2, [pc, #76]	; (800bed4 <xTaskRemoveFromEventList+0xb4>)
 800be88:	441a      	add	r2, r3
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f7fe fa48 	bl	800a326 <vListInsertEnd>
 800be96:	e005      	b.n	800bea4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	3318      	adds	r3, #24
 800be9c:	4619      	mov	r1, r3
 800be9e:	480e      	ldr	r0, [pc, #56]	; (800bed8 <xTaskRemoveFromEventList+0xb8>)
 800bea0:	f7fe fa41 	bl	800a326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <xTaskRemoveFromEventList+0xbc>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	429a      	cmp	r2, r3
 800beb0:	d905      	bls.n	800bebe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800beb2:	2301      	movs	r3, #1
 800beb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800beb6:	4b0a      	ldr	r3, [pc, #40]	; (800bee0 <xTaskRemoveFromEventList+0xc0>)
 800beb8:	2201      	movs	r2, #1
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	e001      	b.n	800bec2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bebe:	2300      	movs	r3, #0
 800bec0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bec2:	697b      	ldr	r3, [r7, #20]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3718      	adds	r7, #24
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	24002290 	.word	0x24002290
 800bed0:	24002270 	.word	0x24002270
 800bed4:	2400216c 	.word	0x2400216c
 800bed8:	24002228 	.word	0x24002228
 800bedc:	24002168 	.word	0x24002168
 800bee0:	2400227c 	.word	0x2400227c

0800bee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800beec:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <vTaskInternalSetTimeOutState+0x24>)
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <vTaskInternalSetTimeOutState+0x28>)
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	605a      	str	r2, [r3, #4]
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	24002280 	.word	0x24002280
 800bf0c:	2400226c 	.word	0x2400226c

0800bf10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10a      	bne.n	800bf36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	613b      	str	r3, [r7, #16]
}
 800bf32:	bf00      	nop
 800bf34:	e7fe      	b.n	800bf34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	60fb      	str	r3, [r7, #12]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bf52:	f000 ffa7 	bl	800cea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf56:	4b1d      	ldr	r3, [pc, #116]	; (800bfcc <xTaskCheckForTimeOut+0xbc>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6e:	d102      	bne.n	800bf76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
 800bf74:	e023      	b.n	800bfbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <xTaskCheckForTimeOut+0xc0>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d007      	beq.n	800bf92 <xTaskCheckForTimeOut+0x82>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d302      	bcc.n	800bf92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	61fb      	str	r3, [r7, #28]
 800bf90:	e015      	b.n	800bfbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d20b      	bcs.n	800bfb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	1ad2      	subs	r2, r2, r3
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff ff9b 	bl	800bee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	61fb      	str	r3, [r7, #28]
 800bfb2:	e004      	b.n	800bfbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfbe:	f000 ffa1 	bl	800cf04 <vPortExitCritical>

	return xReturn;
 800bfc2:	69fb      	ldr	r3, [r7, #28]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3720      	adds	r7, #32
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	2400226c 	.word	0x2400226c
 800bfd0:	24002280 	.word	0x24002280

0800bfd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfd8:	4b03      	ldr	r3, [pc, #12]	; (800bfe8 <vTaskMissedYield+0x14>)
 800bfda:	2201      	movs	r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]
}
 800bfde:	bf00      	nop
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	2400227c 	.word	0x2400227c

0800bfec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bff4:	f000 f854 	bl	800c0a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bff8:	4b07      	ldr	r3, [pc, #28]	; (800c018 <prvIdleTask+0x2c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d907      	bls.n	800c010 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c000:	4b06      	ldr	r3, [pc, #24]	; (800c01c <prvIdleTask+0x30>)
 800c002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c010:	f7f4 fb3a 	bl	8000688 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c014:	e7ee      	b.n	800bff4 <prvIdleTask+0x8>
 800c016:	bf00      	nop
 800c018:	2400216c 	.word	0x2400216c
 800c01c:	e000ed04 	.word	0xe000ed04

0800c020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c026:	2300      	movs	r3, #0
 800c028:	607b      	str	r3, [r7, #4]
 800c02a:	e00c      	b.n	800c046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4a12      	ldr	r2, [pc, #72]	; (800c080 <prvInitialiseTaskLists+0x60>)
 800c038:	4413      	add	r3, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe f946 	bl	800a2cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3301      	adds	r3, #1
 800c044:	607b      	str	r3, [r7, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b06      	cmp	r3, #6
 800c04a:	d9ef      	bls.n	800c02c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c04c:	480d      	ldr	r0, [pc, #52]	; (800c084 <prvInitialiseTaskLists+0x64>)
 800c04e:	f7fe f93d 	bl	800a2cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c052:	480d      	ldr	r0, [pc, #52]	; (800c088 <prvInitialiseTaskLists+0x68>)
 800c054:	f7fe f93a 	bl	800a2cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c058:	480c      	ldr	r0, [pc, #48]	; (800c08c <prvInitialiseTaskLists+0x6c>)
 800c05a:	f7fe f937 	bl	800a2cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c05e:	480c      	ldr	r0, [pc, #48]	; (800c090 <prvInitialiseTaskLists+0x70>)
 800c060:	f7fe f934 	bl	800a2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c064:	480b      	ldr	r0, [pc, #44]	; (800c094 <prvInitialiseTaskLists+0x74>)
 800c066:	f7fe f931 	bl	800a2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c06a:	4b0b      	ldr	r3, [pc, #44]	; (800c098 <prvInitialiseTaskLists+0x78>)
 800c06c:	4a05      	ldr	r2, [pc, #20]	; (800c084 <prvInitialiseTaskLists+0x64>)
 800c06e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c070:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <prvInitialiseTaskLists+0x7c>)
 800c072:	4a05      	ldr	r2, [pc, #20]	; (800c088 <prvInitialiseTaskLists+0x68>)
 800c074:	601a      	str	r2, [r3, #0]
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	2400216c 	.word	0x2400216c
 800c084:	240021f8 	.word	0x240021f8
 800c088:	2400220c 	.word	0x2400220c
 800c08c:	24002228 	.word	0x24002228
 800c090:	2400223c 	.word	0x2400223c
 800c094:	24002254 	.word	0x24002254
 800c098:	24002220 	.word	0x24002220
 800c09c:	24002224 	.word	0x24002224

0800c0a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0a6:	e019      	b.n	800c0dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0a8:	f000 fefc 	bl	800cea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ac:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <prvCheckTasksWaitingTermination+0x50>)
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7fe f991 	bl	800a3e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0be:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <prvCheckTasksWaitingTermination+0x54>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	4a0b      	ldr	r2, [pc, #44]	; (800c0f4 <prvCheckTasksWaitingTermination+0x54>)
 800c0c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0c8:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <prvCheckTasksWaitingTermination+0x58>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	4a0a      	ldr	r2, [pc, #40]	; (800c0f8 <prvCheckTasksWaitingTermination+0x58>)
 800c0d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0d2:	f000 ff17 	bl	800cf04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f810 	bl	800c0fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <prvCheckTasksWaitingTermination+0x58>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1e1      	bne.n	800c0a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	2400223c 	.word	0x2400223c
 800c0f4:	24002268 	.word	0x24002268
 800c0f8:	24002250 	.word	0x24002250

0800c0fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d108      	bne.n	800c120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c112:	4618      	mov	r0, r3
 800c114:	f001 f8b4 	bl	800d280 <vPortFree>
				vPortFree( pxTCB );
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 f8b1 	bl	800d280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c11e:	e018      	b.n	800c152 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c126:	2b01      	cmp	r3, #1
 800c128:	d103      	bne.n	800c132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f001 f8a8 	bl	800d280 <vPortFree>
	}
 800c130:	e00f      	b.n	800c152 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d00a      	beq.n	800c152 <prvDeleteTCB+0x56>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60fb      	str	r3, [r7, #12]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <prvDeleteTCB+0x54>
	}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c162:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <prvResetNextTaskUnblockTime+0x38>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d104      	bne.n	800c176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c16c:	4b0a      	ldr	r3, [pc, #40]	; (800c198 <prvResetNextTaskUnblockTime+0x3c>)
 800c16e:	f04f 32ff 	mov.w	r2, #4294967295
 800c172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c174:	e008      	b.n	800c188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c176:	4b07      	ldr	r3, [pc, #28]	; (800c194 <prvResetNextTaskUnblockTime+0x38>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	4a04      	ldr	r2, [pc, #16]	; (800c198 <prvResetNextTaskUnblockTime+0x3c>)
 800c186:	6013      	str	r3, [r2, #0]
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	24002220 	.word	0x24002220
 800c198:	24002288 	.word	0x24002288

0800c19c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1a2:	4b0b      	ldr	r3, [pc, #44]	; (800c1d0 <xTaskGetSchedulerState+0x34>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d102      	bne.n	800c1b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	607b      	str	r3, [r7, #4]
 800c1ae:	e008      	b.n	800c1c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1b0:	4b08      	ldr	r3, [pc, #32]	; (800c1d4 <xTaskGetSchedulerState+0x38>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	607b      	str	r3, [r7, #4]
 800c1bc:	e001      	b.n	800c1c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1c2:	687b      	ldr	r3, [r7, #4]
	}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr
 800c1d0:	24002274 	.word	0x24002274
 800c1d4:	24002290 	.word	0x24002290

0800c1d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d05e      	beq.n	800c2ac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f2:	4b31      	ldr	r3, [pc, #196]	; (800c2b8 <xTaskPriorityInherit+0xe0>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d24e      	bcs.n	800c29a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	2b00      	cmp	r3, #0
 800c202:	db06      	blt.n	800c212 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c204:	4b2c      	ldr	r3, [pc, #176]	; (800c2b8 <xTaskPriorityInherit+0xe0>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	f1c3 0207 	rsb	r2, r3, #7
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	6959      	ldr	r1, [r3, #20]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21a:	4613      	mov	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4413      	add	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4a26      	ldr	r2, [pc, #152]	; (800c2bc <xTaskPriorityInherit+0xe4>)
 800c224:	4413      	add	r3, r2
 800c226:	4299      	cmp	r1, r3
 800c228:	d12f      	bne.n	800c28a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	3304      	adds	r3, #4
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe f8d6 	bl	800a3e0 <uxListRemove>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10a      	bne.n	800c250 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23e:	2201      	movs	r2, #1
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	43da      	mvns	r2, r3
 800c246:	4b1e      	ldr	r3, [pc, #120]	; (800c2c0 <xTaskPriorityInherit+0xe8>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4013      	ands	r3, r2
 800c24c:	4a1c      	ldr	r2, [pc, #112]	; (800c2c0 <xTaskPriorityInherit+0xe8>)
 800c24e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c250:	4b19      	ldr	r3, [pc, #100]	; (800c2b8 <xTaskPriorityInherit+0xe0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25e:	2201      	movs	r2, #1
 800c260:	409a      	lsls	r2, r3
 800c262:	4b17      	ldr	r3, [pc, #92]	; (800c2c0 <xTaskPriorityInherit+0xe8>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4313      	orrs	r3, r2
 800c268:	4a15      	ldr	r2, [pc, #84]	; (800c2c0 <xTaskPriorityInherit+0xe8>)
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c270:	4613      	mov	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4a10      	ldr	r2, [pc, #64]	; (800c2bc <xTaskPriorityInherit+0xe4>)
 800c27a:	441a      	add	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	3304      	adds	r3, #4
 800c280:	4619      	mov	r1, r3
 800c282:	4610      	mov	r0, r2
 800c284:	f7fe f84f 	bl	800a326 <vListInsertEnd>
 800c288:	e004      	b.n	800c294 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c28a:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <xTaskPriorityInherit+0xe0>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c294:	2301      	movs	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	e008      	b.n	800c2ac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c29e:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <xTaskPriorityInherit+0xe0>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d201      	bcs.n	800c2ac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
	}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	24002168 	.word	0x24002168
 800c2bc:	2400216c 	.word	0x2400216c
 800c2c0:	24002270 	.word	0x24002270

0800c2c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d06e      	beq.n	800c3b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2da:	4b3a      	ldr	r3, [pc, #232]	; (800c3c4 <xTaskPriorityDisinherit+0x100>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d00a      	beq.n	800c2fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	60fb      	str	r3, [r7, #12]
}
 800c2f6:	bf00      	nop
 800c2f8:	e7fe      	b.n	800c2f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10a      	bne.n	800c318 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	60bb      	str	r3, [r7, #8]
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c31c:	1e5a      	subs	r2, r3, #1
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d044      	beq.n	800c3b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c332:	2b00      	cmp	r3, #0
 800c334:	d140      	bne.n	800c3b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	3304      	adds	r3, #4
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe f850 	bl	800a3e0 <uxListRemove>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d115      	bne.n	800c372 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34a:	491f      	ldr	r1, [pc, #124]	; (800c3c8 <xTaskPriorityDisinherit+0x104>)
 800c34c:	4613      	mov	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	440b      	add	r3, r1
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <xTaskPriorityDisinherit+0xae>
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	2201      	movs	r2, #1
 800c362:	fa02 f303 	lsl.w	r3, r2, r3
 800c366:	43da      	mvns	r2, r3
 800c368:	4b18      	ldr	r3, [pc, #96]	; (800c3cc <xTaskPriorityDisinherit+0x108>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4013      	ands	r3, r2
 800c36e:	4a17      	ldr	r2, [pc, #92]	; (800c3cc <xTaskPriorityDisinherit+0x108>)
 800c370:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37e:	f1c3 0207 	rsb	r2, r3, #7
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	2201      	movs	r2, #1
 800c38c:	409a      	lsls	r2, r3
 800c38e:	4b0f      	ldr	r3, [pc, #60]	; (800c3cc <xTaskPriorityDisinherit+0x108>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4313      	orrs	r3, r2
 800c394:	4a0d      	ldr	r2, [pc, #52]	; (800c3cc <xTaskPriorityDisinherit+0x108>)
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39c:	4613      	mov	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4a08      	ldr	r2, [pc, #32]	; (800c3c8 <xTaskPriorityDisinherit+0x104>)
 800c3a6:	441a      	add	r2, r3
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	f7fd ffb9 	bl	800a326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3b8:	697b      	ldr	r3, [r7, #20]
	}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3718      	adds	r7, #24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	24002168 	.word	0x24002168
 800c3c8:	2400216c 	.word	0x2400216c
 800c3cc:	24002270 	.word	0x24002270

0800c3d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b088      	sub	sp, #32
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d077      	beq.n	800c4d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	60fb      	str	r3, [r7, #12]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d902      	bls.n	800c416 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	61fb      	str	r3, [r7, #28]
 800c414:	e002      	b.n	800c41c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	69fa      	ldr	r2, [r7, #28]
 800c422:	429a      	cmp	r2, r3
 800c424:	d058      	beq.n	800c4d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c42a:	697a      	ldr	r2, [r7, #20]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d153      	bne.n	800c4d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c430:	4b2b      	ldr	r3, [pc, #172]	; (800c4e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	429a      	cmp	r2, r3
 800c438:	d10a      	bne.n	800c450 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	60bb      	str	r3, [r7, #8]
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c454:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	69fa      	ldr	r2, [r7, #28]
 800c45a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	2b00      	cmp	r3, #0
 800c462:	db04      	blt.n	800c46e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	f1c3 0207 	rsb	r2, r3, #7
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	6959      	ldr	r1, [r3, #20]
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4a19      	ldr	r2, [pc, #100]	; (800c4e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c47e:	4413      	add	r3, r2
 800c480:	4299      	cmp	r1, r3
 800c482:	d129      	bne.n	800c4d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	3304      	adds	r3, #4
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fd ffa9 	bl	800a3e0 <uxListRemove>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	2201      	movs	r2, #1
 800c49a:	fa02 f303 	lsl.w	r3, r2, r3
 800c49e:	43da      	mvns	r2, r3
 800c4a0:	4b11      	ldr	r3, [pc, #68]	; (800c4e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	4a10      	ldr	r2, [pc, #64]	; (800c4e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	409a      	lsls	r2, r3
 800c4b2:	4b0d      	ldr	r3, [pc, #52]	; (800c4e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	4a0b      	ldr	r2, [pc, #44]	; (800c4e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4a06      	ldr	r2, [pc, #24]	; (800c4e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c4ca:	441a      	add	r2, r3
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	f7fd ff27 	bl	800a326 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4d8:	bf00      	nop
 800c4da:	3720      	adds	r7, #32
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	24002168 	.word	0x24002168
 800c4e4:	2400216c 	.word	0x2400216c
 800c4e8:	24002270 	.word	0x24002270

0800c4ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c4ec:	b480      	push	{r7}
 800c4ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c4f0:	4b07      	ldr	r3, [pc, #28]	; (800c510 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4fe:	3201      	adds	r2, #1
 800c500:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c502:	4b03      	ldr	r3, [pc, #12]	; (800c510 <pvTaskIncrementMutexHeldCount+0x24>)
 800c504:	681b      	ldr	r3, [r3, #0]
	}
 800c506:	4618      	mov	r0, r3
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	24002168 	.word	0x24002168

0800c514 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c51e:	4b29      	ldr	r3, [pc, #164]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c524:	4b28      	ldr	r3, [pc, #160]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3304      	adds	r3, #4
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fd ff58 	bl	800a3e0 <uxListRemove>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10b      	bne.n	800c54e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c536:	4b24      	ldr	r3, [pc, #144]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53c:	2201      	movs	r2, #1
 800c53e:	fa02 f303 	lsl.w	r3, r2, r3
 800c542:	43da      	mvns	r2, r3
 800c544:	4b21      	ldr	r3, [pc, #132]	; (800c5cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4013      	ands	r3, r2
 800c54a:	4a20      	ldr	r2, [pc, #128]	; (800c5cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c54c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c554:	d10a      	bne.n	800c56c <prvAddCurrentTaskToDelayedList+0x58>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d007      	beq.n	800c56c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c55c:	4b1a      	ldr	r3, [pc, #104]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3304      	adds	r3, #4
 800c562:	4619      	mov	r1, r3
 800c564:	481a      	ldr	r0, [pc, #104]	; (800c5d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c566:	f7fd fede 	bl	800a326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c56a:	e026      	b.n	800c5ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4413      	add	r3, r2
 800c572:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c574:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	429a      	cmp	r2, r3
 800c582:	d209      	bcs.n	800c598 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c584:	4b13      	ldr	r3, [pc, #76]	; (800c5d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3304      	adds	r3, #4
 800c58e:	4619      	mov	r1, r3
 800c590:	4610      	mov	r0, r2
 800c592:	f7fd feec 	bl	800a36e <vListInsert>
}
 800c596:	e010      	b.n	800c5ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	f7fd fee2 	bl	800a36e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5aa:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d202      	bcs.n	800c5ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5b4:	4a09      	ldr	r2, [pc, #36]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	6013      	str	r3, [r2, #0]
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	2400226c 	.word	0x2400226c
 800c5c8:	24002168 	.word	0x24002168
 800c5cc:	24002270 	.word	0x24002270
 800c5d0:	24002254 	.word	0x24002254
 800c5d4:	24002224 	.word	0x24002224
 800c5d8:	24002220 	.word	0x24002220
 800c5dc:	24002288 	.word	0x24002288

0800c5e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08a      	sub	sp, #40	; 0x28
 800c5e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5ea:	f000 faeb 	bl	800cbc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c5ee:	4b1c      	ldr	r3, [pc, #112]	; (800c660 <xTimerCreateTimerTask+0x80>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d021      	beq.n	800c63a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5fe:	1d3a      	adds	r2, r7, #4
 800c600:	f107 0108 	add.w	r1, r7, #8
 800c604:	f107 030c 	add.w	r3, r7, #12
 800c608:	4618      	mov	r0, r3
 800c60a:	f7f4 f85f 	bl	80006cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	9202      	str	r2, [sp, #8]
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	2302      	movs	r3, #2
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	2300      	movs	r3, #0
 800c61e:	460a      	mov	r2, r1
 800c620:	4910      	ldr	r1, [pc, #64]	; (800c664 <xTimerCreateTimerTask+0x84>)
 800c622:	4811      	ldr	r0, [pc, #68]	; (800c668 <xTimerCreateTimerTask+0x88>)
 800c624:	f7fe ff0e 	bl	800b444 <xTaskCreateStatic>
 800c628:	4603      	mov	r3, r0
 800c62a:	4a10      	ldr	r2, [pc, #64]	; (800c66c <xTimerCreateTimerTask+0x8c>)
 800c62c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <xTimerCreateTimerTask+0x8c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c636:	2301      	movs	r3, #1
 800c638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d10a      	bne.n	800c656 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	613b      	str	r3, [r7, #16]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c656:	697b      	ldr	r3, [r7, #20]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	240022c4 	.word	0x240022c4
 800c664:	08019330 	.word	0x08019330
 800c668:	0800c7a5 	.word	0x0800c7a5
 800c66c:	240022c8 	.word	0x240022c8

0800c670 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08a      	sub	sp, #40	; 0x28
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
 800c67c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c67e:	2300      	movs	r3, #0
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10a      	bne.n	800c69e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	623b      	str	r3, [r7, #32]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c69e:	4b1a      	ldr	r3, [pc, #104]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d02a      	beq.n	800c6fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b05      	cmp	r3, #5
 800c6b6:	dc18      	bgt.n	800c6ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6b8:	f7ff fd70 	bl	800c19c <xTaskGetSchedulerState>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d109      	bne.n	800c6d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6c2:	4b11      	ldr	r3, [pc, #68]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f107 0114 	add.w	r1, r7, #20
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ce:	f7fe f8a1 	bl	800a814 <xQueueGenericSend>
 800c6d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c6d4:	e012      	b.n	800c6fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	f107 0114 	add.w	r1, r7, #20
 800c6de:	2300      	movs	r3, #0
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f7fe f897 	bl	800a814 <xQueueGenericSend>
 800c6e6:	6278      	str	r0, [r7, #36]	; 0x24
 800c6e8:	e008      	b.n	800c6fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6ea:	4b07      	ldr	r3, [pc, #28]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	f107 0114 	add.w	r1, r7, #20
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	f7fe f98b 	bl	800aa10 <xQueueGenericSendFromISR>
 800c6fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3728      	adds	r7, #40	; 0x28
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	240022c4 	.word	0x240022c4

0800c70c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b088      	sub	sp, #32
 800c710:	af02      	add	r7, sp, #8
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c716:	4b22      	ldr	r3, [pc, #136]	; (800c7a0 <prvProcessExpiredTimer+0x94>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	3304      	adds	r3, #4
 800c724:	4618      	mov	r0, r3
 800c726:	f7fd fe5b 	bl	800a3e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c730:	f003 0304 	and.w	r3, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	d022      	beq.n	800c77e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	699a      	ldr	r2, [r3, #24]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	18d1      	adds	r1, r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	6978      	ldr	r0, [r7, #20]
 800c746:	f000 f8d1 	bl	800c8ec <prvInsertTimerInActiveList>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d01f      	beq.n	800c790 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c750:	2300      	movs	r3, #0
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	2300      	movs	r3, #0
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	2100      	movs	r1, #0
 800c75a:	6978      	ldr	r0, [r7, #20]
 800c75c:	f7ff ff88 	bl	800c670 <xTimerGenericCommand>
 800c760:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d113      	bne.n	800c790 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	60fb      	str	r3, [r7, #12]
}
 800c77a:	bf00      	nop
 800c77c:	e7fe      	b.n	800c77c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c784:	f023 0301 	bic.w	r3, r3, #1
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	6a1b      	ldr	r3, [r3, #32]
 800c794:	6978      	ldr	r0, [r7, #20]
 800c796:	4798      	blx	r3
}
 800c798:	bf00      	nop
 800c79a:	3718      	adds	r7, #24
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	240022bc 	.word	0x240022bc

0800c7a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7ac:	f107 0308 	add.w	r3, r7, #8
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f857 	bl	800c864 <prvGetNextExpireTime>
 800c7b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 f803 	bl	800c7c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7c2:	f000 f8d5 	bl	800c970 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7c6:	e7f1      	b.n	800c7ac <prvTimerTask+0x8>

0800c7c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7d2:	f7ff f8f5 	bl	800b9c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7d6:	f107 0308 	add.w	r3, r7, #8
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f866 	bl	800c8ac <prvSampleTimeNow>
 800c7e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d130      	bne.n	800c84a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10a      	bne.n	800c804 <prvProcessTimerOrBlockTask+0x3c>
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d806      	bhi.n	800c804 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7f6:	f7ff f8f1 	bl	800b9dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7fa:	68f9      	ldr	r1, [r7, #12]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff ff85 	bl	800c70c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c802:	e024      	b.n	800c84e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d008      	beq.n	800c81c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c80a:	4b13      	ldr	r3, [pc, #76]	; (800c858 <prvProcessTimerOrBlockTask+0x90>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <prvProcessTimerOrBlockTask+0x50>
 800c814:	2301      	movs	r3, #1
 800c816:	e000      	b.n	800c81a <prvProcessTimerOrBlockTask+0x52>
 800c818:	2300      	movs	r3, #0
 800c81a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c81c:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <prvProcessTimerOrBlockTask+0x94>)
 800c81e:	6818      	ldr	r0, [r3, #0]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	4619      	mov	r1, r3
 800c82a:	f7fe fdd7 	bl	800b3dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c82e:	f7ff f8d5 	bl	800b9dc <xTaskResumeAll>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10a      	bne.n	800c84e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c838:	4b09      	ldr	r3, [pc, #36]	; (800c860 <prvProcessTimerOrBlockTask+0x98>)
 800c83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	f3bf 8f6f 	isb	sy
}
 800c848:	e001      	b.n	800c84e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c84a:	f7ff f8c7 	bl	800b9dc <xTaskResumeAll>
}
 800c84e:	bf00      	nop
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	240022c0 	.word	0x240022c0
 800c85c:	240022c4 	.word	0x240022c4
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c86c:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <prvGetNextExpireTime+0x44>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <prvGetNextExpireTime+0x16>
 800c876:	2201      	movs	r2, #1
 800c878:	e000      	b.n	800c87c <prvGetNextExpireTime+0x18>
 800c87a:	2200      	movs	r2, #0
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d105      	bne.n	800c894 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c888:	4b07      	ldr	r3, [pc, #28]	; (800c8a8 <prvGetNextExpireTime+0x44>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	e001      	b.n	800c898 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c898:	68fb      	ldr	r3, [r7, #12]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	240022bc 	.word	0x240022bc

0800c8ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8b4:	f7ff f92e 	bl	800bb14 <xTaskGetTickCount>
 800c8b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8ba:	4b0b      	ldr	r3, [pc, #44]	; (800c8e8 <prvSampleTimeNow+0x3c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d205      	bcs.n	800c8d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8c4:	f000 f91a 	bl	800cafc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]
 800c8ce:	e002      	b.n	800c8d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8d6:	4a04      	ldr	r2, [pc, #16]	; (800c8e8 <prvSampleTimeNow+0x3c>)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	240022cc 	.word	0x240022cc

0800c8ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d812      	bhi.n	800c938 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	1ad2      	subs	r2, r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d302      	bcc.n	800c926 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c920:	2301      	movs	r3, #1
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	e01b      	b.n	800c95e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c926:	4b10      	ldr	r3, [pc, #64]	; (800c968 <prvInsertTimerInActiveList+0x7c>)
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3304      	adds	r3, #4
 800c92e:	4619      	mov	r1, r3
 800c930:	4610      	mov	r0, r2
 800c932:	f7fd fd1c 	bl	800a36e <vListInsert>
 800c936:	e012      	b.n	800c95e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d206      	bcs.n	800c94e <prvInsertTimerInActiveList+0x62>
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d302      	bcc.n	800c94e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c948:	2301      	movs	r3, #1
 800c94a:	617b      	str	r3, [r7, #20]
 800c94c:	e007      	b.n	800c95e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c94e:	4b07      	ldr	r3, [pc, #28]	; (800c96c <prvInsertTimerInActiveList+0x80>)
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3304      	adds	r3, #4
 800c956:	4619      	mov	r1, r3
 800c958:	4610      	mov	r0, r2
 800c95a:	f7fd fd08 	bl	800a36e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c95e:	697b      	ldr	r3, [r7, #20]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	240022c0 	.word	0x240022c0
 800c96c:	240022bc 	.word	0x240022bc

0800c970 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b08c      	sub	sp, #48	; 0x30
 800c974:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c976:	e0ae      	b.n	800cad6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f2c0 80aa 	blt.w	800cad4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	695b      	ldr	r3, [r3, #20]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	3304      	adds	r3, #4
 800c990:	4618      	mov	r0, r3
 800c992:	f7fd fd25 	bl	800a3e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c996:	1d3b      	adds	r3, r7, #4
 800c998:	4618      	mov	r0, r3
 800c99a:	f7ff ff87 	bl	800c8ac <prvSampleTimeNow>
 800c99e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2b09      	cmp	r3, #9
 800c9a4:	f200 8097 	bhi.w	800cad6 <prvProcessReceivedCommands+0x166>
 800c9a8:	a201      	add	r2, pc, #4	; (adr r2, 800c9b0 <prvProcessReceivedCommands+0x40>)
 800c9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ae:	bf00      	nop
 800c9b0:	0800c9d9 	.word	0x0800c9d9
 800c9b4:	0800c9d9 	.word	0x0800c9d9
 800c9b8:	0800c9d9 	.word	0x0800c9d9
 800c9bc:	0800ca4d 	.word	0x0800ca4d
 800c9c0:	0800ca61 	.word	0x0800ca61
 800c9c4:	0800caab 	.word	0x0800caab
 800c9c8:	0800c9d9 	.word	0x0800c9d9
 800c9cc:	0800c9d9 	.word	0x0800c9d9
 800c9d0:	0800ca4d 	.word	0x0800ca4d
 800c9d4:	0800ca61 	.word	0x0800ca61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c9de:	f043 0301 	orr.w	r3, r3, #1
 800c9e2:	b2da      	uxtb	r2, r3
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	18d1      	adds	r1, r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6a3a      	ldr	r2, [r7, #32]
 800c9f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f8:	f7ff ff78 	bl	800c8ec <prvInsertTimerInActiveList>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d069      	beq.n	800cad6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca10:	f003 0304 	and.w	r3, r3, #4
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d05e      	beq.n	800cad6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	441a      	add	r2, r3
 800ca20:	2300      	movs	r3, #0
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	2300      	movs	r3, #0
 800ca26:	2100      	movs	r1, #0
 800ca28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca2a:	f7ff fe21 	bl	800c670 <xTimerGenericCommand>
 800ca2e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d14f      	bne.n	800cad6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	61bb      	str	r3, [r7, #24]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca52:	f023 0301 	bic.w	r3, r3, #1
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ca5e:	e03a      	b.n	800cad6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca66:	f043 0301 	orr.w	r3, r3, #1
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7a:	699b      	ldr	r3, [r3, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10a      	bne.n	800ca96 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	617b      	str	r3, [r7, #20]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	699a      	ldr	r2, [r3, #24]
 800ca9a:	6a3b      	ldr	r3, [r7, #32]
 800ca9c:	18d1      	adds	r1, r2, r3
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	6a3a      	ldr	r2, [r7, #32]
 800caa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caa4:	f7ff ff22 	bl	800c8ec <prvInsertTimerInActiveList>
					break;
 800caa8:	e015      	b.n	800cad6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cab0:	f003 0302 	and.w	r3, r3, #2
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d103      	bne.n	800cac0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800cab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caba:	f000 fbe1 	bl	800d280 <vPortFree>
 800cabe:	e00a      	b.n	800cad6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cac6:	f023 0301 	bic.w	r3, r3, #1
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cad2:	e000      	b.n	800cad6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cad4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cad6:	4b08      	ldr	r3, [pc, #32]	; (800caf8 <prvProcessReceivedCommands+0x188>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f107 0108 	add.w	r1, r7, #8
 800cade:	2200      	movs	r2, #0
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe f8bd 	bl	800ac60 <xQueueReceive>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f47f af45 	bne.w	800c978 <prvProcessReceivedCommands+0x8>
	}
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	3728      	adds	r7, #40	; 0x28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	240022c4 	.word	0x240022c4

0800cafc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb02:	e048      	b.n	800cb96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb04:	4b2d      	ldr	r3, [pc, #180]	; (800cbbc <prvSwitchTimerLists+0xc0>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb0e:	4b2b      	ldr	r3, [pc, #172]	; (800cbbc <prvSwitchTimerLists+0xc0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fd fc5f 	bl	800a3e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d02e      	beq.n	800cb96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	4413      	add	r3, r2
 800cb40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d90e      	bls.n	800cb68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb56:	4b19      	ldr	r3, [pc, #100]	; (800cbbc <prvSwitchTimerLists+0xc0>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4610      	mov	r0, r2
 800cb62:	f7fd fc04 	bl	800a36e <vListInsert>
 800cb66:	e016      	b.n	800cb96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb68:	2300      	movs	r3, #0
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	2100      	movs	r1, #0
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	f7ff fd7c 	bl	800c670 <xTimerGenericCommand>
 800cb78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10a      	bne.n	800cb96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	603b      	str	r3, [r7, #0]
}
 800cb92:	bf00      	nop
 800cb94:	e7fe      	b.n	800cb94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb96:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <prvSwitchTimerLists+0xc0>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1b1      	bne.n	800cb04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <prvSwitchTimerLists+0xc0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cba6:	4b06      	ldr	r3, [pc, #24]	; (800cbc0 <prvSwitchTimerLists+0xc4>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a04      	ldr	r2, [pc, #16]	; (800cbbc <prvSwitchTimerLists+0xc0>)
 800cbac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbae:	4a04      	ldr	r2, [pc, #16]	; (800cbc0 <prvSwitchTimerLists+0xc4>)
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	6013      	str	r3, [r2, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	240022bc 	.word	0x240022bc
 800cbc0:	240022c0 	.word	0x240022c0

0800cbc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbca:	f000 f96b 	bl	800cea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbce:	4b15      	ldr	r3, [pc, #84]	; (800cc24 <prvCheckForValidListAndQueue+0x60>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d120      	bne.n	800cc18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbd6:	4814      	ldr	r0, [pc, #80]	; (800cc28 <prvCheckForValidListAndQueue+0x64>)
 800cbd8:	f7fd fb78 	bl	800a2cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cbdc:	4813      	ldr	r0, [pc, #76]	; (800cc2c <prvCheckForValidListAndQueue+0x68>)
 800cbde:	f7fd fb75 	bl	800a2cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cbe2:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <prvCheckForValidListAndQueue+0x6c>)
 800cbe4:	4a10      	ldr	r2, [pc, #64]	; (800cc28 <prvCheckForValidListAndQueue+0x64>)
 800cbe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cbe8:	4b12      	ldr	r3, [pc, #72]	; (800cc34 <prvCheckForValidListAndQueue+0x70>)
 800cbea:	4a10      	ldr	r2, [pc, #64]	; (800cc2c <prvCheckForValidListAndQueue+0x68>)
 800cbec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbee:	2300      	movs	r3, #0
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	4b11      	ldr	r3, [pc, #68]	; (800cc38 <prvCheckForValidListAndQueue+0x74>)
 800cbf4:	4a11      	ldr	r2, [pc, #68]	; (800cc3c <prvCheckForValidListAndQueue+0x78>)
 800cbf6:	210c      	movs	r1, #12
 800cbf8:	200a      	movs	r0, #10
 800cbfa:	f7fd fc83 	bl	800a504 <xQueueGenericCreateStatic>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	4a08      	ldr	r2, [pc, #32]	; (800cc24 <prvCheckForValidListAndQueue+0x60>)
 800cc02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc04:	4b07      	ldr	r3, [pc, #28]	; (800cc24 <prvCheckForValidListAndQueue+0x60>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d005      	beq.n	800cc18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc0c:	4b05      	ldr	r3, [pc, #20]	; (800cc24 <prvCheckForValidListAndQueue+0x60>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	490b      	ldr	r1, [pc, #44]	; (800cc40 <prvCheckForValidListAndQueue+0x7c>)
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fe fbb8 	bl	800b388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc18:	f000 f974 	bl	800cf04 <vPortExitCritical>
}
 800cc1c:	bf00      	nop
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	240022c4 	.word	0x240022c4
 800cc28:	24002294 	.word	0x24002294
 800cc2c:	240022a8 	.word	0x240022a8
 800cc30:	240022bc 	.word	0x240022bc
 800cc34:	240022c0 	.word	0x240022c0
 800cc38:	24002348 	.word	0x24002348
 800cc3c:	240022d0 	.word	0x240022d0
 800cc40:	08019338 	.word	0x08019338

0800cc44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3b04      	subs	r3, #4
 800cc54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3b04      	subs	r3, #4
 800cc62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f023 0201 	bic.w	r2, r3, #1
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3b04      	subs	r3, #4
 800cc72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc74:	4a0c      	ldr	r2, [pc, #48]	; (800cca8 <pxPortInitialiseStack+0x64>)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3b14      	subs	r3, #20
 800cc7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3b04      	subs	r3, #4
 800cc8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f06f 0202 	mvn.w	r2, #2
 800cc92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	3b20      	subs	r3, #32
 800cc98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	0800ccad 	.word	0x0800ccad

0800ccac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccb6:	4b12      	ldr	r3, [pc, #72]	; (800cd00 <prvTaskExitError+0x54>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbe:	d00a      	beq.n	800ccd6 <prvTaskExitError+0x2a>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60fb      	str	r3, [r7, #12]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <prvTaskExitError+0x28>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	60bb      	str	r3, [r7, #8]
}
 800cce8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccea:	bf00      	nop
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d0fc      	beq.n	800ccec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	24000024 	.word	0x24000024
	...

0800cd10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd10:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <pxCurrentTCBConst2>)
 800cd12:	6819      	ldr	r1, [r3, #0]
 800cd14:	6808      	ldr	r0, [r1, #0]
 800cd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	f380 8809 	msr	PSP, r0
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f04f 0000 	mov.w	r0, #0
 800cd26:	f380 8811 	msr	BASEPRI, r0
 800cd2a:	4770      	bx	lr
 800cd2c:	f3af 8000 	nop.w

0800cd30 <pxCurrentTCBConst2>:
 800cd30:	24002168 	.word	0x24002168
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop

0800cd38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd38:	4808      	ldr	r0, [pc, #32]	; (800cd5c <prvPortStartFirstTask+0x24>)
 800cd3a:	6800      	ldr	r0, [r0, #0]
 800cd3c:	6800      	ldr	r0, [r0, #0]
 800cd3e:	f380 8808 	msr	MSP, r0
 800cd42:	f04f 0000 	mov.w	r0, #0
 800cd46:	f380 8814 	msr	CONTROL, r0
 800cd4a:	b662      	cpsie	i
 800cd4c:	b661      	cpsie	f
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	df00      	svc	0
 800cd58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd5a:	bf00      	nop
 800cd5c:	e000ed08 	.word	0xe000ed08

0800cd60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd66:	4b46      	ldr	r3, [pc, #280]	; (800ce80 <xPortStartScheduler+0x120>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a46      	ldr	r2, [pc, #280]	; (800ce84 <xPortStartScheduler+0x124>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d10a      	bne.n	800cd86 <xPortStartScheduler+0x26>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	613b      	str	r3, [r7, #16]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd86:	4b3e      	ldr	r3, [pc, #248]	; (800ce80 <xPortStartScheduler+0x120>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a3f      	ldr	r2, [pc, #252]	; (800ce88 <xPortStartScheduler+0x128>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d10a      	bne.n	800cda6 <xPortStartScheduler+0x46>
	__asm volatile
 800cd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	60fb      	str	r3, [r7, #12]
}
 800cda2:	bf00      	nop
 800cda4:	e7fe      	b.n	800cda4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cda6:	4b39      	ldr	r3, [pc, #228]	; (800ce8c <xPortStartScheduler+0x12c>)
 800cda8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	22ff      	movs	r2, #255	; 0xff
 800cdb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdc0:	78fb      	ldrb	r3, [r7, #3]
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	4b31      	ldr	r3, [pc, #196]	; (800ce90 <xPortStartScheduler+0x130>)
 800cdcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdce:	4b31      	ldr	r3, [pc, #196]	; (800ce94 <xPortStartScheduler+0x134>)
 800cdd0:	2207      	movs	r2, #7
 800cdd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdd4:	e009      	b.n	800cdea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cdd6:	4b2f      	ldr	r3, [pc, #188]	; (800ce94 <xPortStartScheduler+0x134>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	4a2d      	ldr	r2, [pc, #180]	; (800ce94 <xPortStartScheduler+0x134>)
 800cdde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	005b      	lsls	r3, r3, #1
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdea:	78fb      	ldrb	r3, [r7, #3]
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdf2:	2b80      	cmp	r3, #128	; 0x80
 800cdf4:	d0ef      	beq.n	800cdd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdf6:	4b27      	ldr	r3, [pc, #156]	; (800ce94 <xPortStartScheduler+0x134>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f1c3 0307 	rsb	r3, r3, #7
 800cdfe:	2b04      	cmp	r3, #4
 800ce00:	d00a      	beq.n	800ce18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	60bb      	str	r3, [r7, #8]
}
 800ce14:	bf00      	nop
 800ce16:	e7fe      	b.n	800ce16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce18:	4b1e      	ldr	r3, [pc, #120]	; (800ce94 <xPortStartScheduler+0x134>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	021b      	lsls	r3, r3, #8
 800ce1e:	4a1d      	ldr	r2, [pc, #116]	; (800ce94 <xPortStartScheduler+0x134>)
 800ce20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce22:	4b1c      	ldr	r3, [pc, #112]	; (800ce94 <xPortStartScheduler+0x134>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce2a:	4a1a      	ldr	r2, [pc, #104]	; (800ce94 <xPortStartScheduler+0x134>)
 800ce2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce36:	4b18      	ldr	r3, [pc, #96]	; (800ce98 <xPortStartScheduler+0x138>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <xPortStartScheduler+0x138>)
 800ce3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <xPortStartScheduler+0x138>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a14      	ldr	r2, [pc, #80]	; (800ce98 <xPortStartScheduler+0x138>)
 800ce48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce4e:	f000 f8dd 	bl	800d00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce52:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <xPortStartScheduler+0x13c>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce58:	f000 f8fc 	bl	800d054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce5c:	4b10      	ldr	r3, [pc, #64]	; (800cea0 <xPortStartScheduler+0x140>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a0f      	ldr	r2, [pc, #60]	; (800cea0 <xPortStartScheduler+0x140>)
 800ce62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce68:	f7ff ff66 	bl	800cd38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce6c:	f7fe ff2c 	bl	800bcc8 <vTaskSwitchContext>
	prvTaskExitError();
 800ce70:	f7ff ff1c 	bl	800ccac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	e000ed00 	.word	0xe000ed00
 800ce84:	410fc271 	.word	0x410fc271
 800ce88:	410fc270 	.word	0x410fc270
 800ce8c:	e000e400 	.word	0xe000e400
 800ce90:	24002390 	.word	0x24002390
 800ce94:	24002394 	.word	0x24002394
 800ce98:	e000ed20 	.word	0xe000ed20
 800ce9c:	24000024 	.word	0x24000024
 800cea0:	e000ef34 	.word	0xe000ef34

0800cea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	607b      	str	r3, [r7, #4]
}
 800cebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cebe:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <vPortEnterCritical+0x58>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3301      	adds	r3, #1
 800cec4:	4a0d      	ldr	r2, [pc, #52]	; (800cefc <vPortEnterCritical+0x58>)
 800cec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <vPortEnterCritical+0x58>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d10f      	bne.n	800cef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ced0:	4b0b      	ldr	r3, [pc, #44]	; (800cf00 <vPortEnterCritical+0x5c>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00a      	beq.n	800cef0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	603b      	str	r3, [r7, #0]
}
 800ceec:	bf00      	nop
 800ceee:	e7fe      	b.n	800ceee <vPortEnterCritical+0x4a>
	}
}
 800cef0:	bf00      	nop
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	24000024 	.word	0x24000024
 800cf00:	e000ed04 	.word	0xe000ed04

0800cf04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf0a:	4b12      	ldr	r3, [pc, #72]	; (800cf54 <vPortExitCritical+0x50>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10a      	bne.n	800cf28 <vPortExitCritical+0x24>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	607b      	str	r3, [r7, #4]
}
 800cf24:	bf00      	nop
 800cf26:	e7fe      	b.n	800cf26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf28:	4b0a      	ldr	r3, [pc, #40]	; (800cf54 <vPortExitCritical+0x50>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	4a09      	ldr	r2, [pc, #36]	; (800cf54 <vPortExitCritical+0x50>)
 800cf30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf32:	4b08      	ldr	r3, [pc, #32]	; (800cf54 <vPortExitCritical+0x50>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d105      	bne.n	800cf46 <vPortExitCritical+0x42>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	f383 8811 	msr	BASEPRI, r3
}
 800cf44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf46:	bf00      	nop
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	24000024 	.word	0x24000024
	...

0800cf60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf60:	f3ef 8009 	mrs	r0, PSP
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	4b15      	ldr	r3, [pc, #84]	; (800cfc0 <pxCurrentTCBConst>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	f01e 0f10 	tst.w	lr, #16
 800cf70:	bf08      	it	eq
 800cf72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7a:	6010      	str	r0, [r2, #0]
 800cf7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf84:	f380 8811 	msr	BASEPRI, r0
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f7fe fe9a 	bl	800bcc8 <vTaskSwitchContext>
 800cf94:	f04f 0000 	mov.w	r0, #0
 800cf98:	f380 8811 	msr	BASEPRI, r0
 800cf9c:	bc09      	pop	{r0, r3}
 800cf9e:	6819      	ldr	r1, [r3, #0]
 800cfa0:	6808      	ldr	r0, [r1, #0]
 800cfa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa6:	f01e 0f10 	tst.w	lr, #16
 800cfaa:	bf08      	it	eq
 800cfac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfb0:	f380 8809 	msr	PSP, r0
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	f3af 8000 	nop.w

0800cfc0 <pxCurrentTCBConst>:
 800cfc0:	24002168 	.word	0x24002168
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop

0800cfc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	607b      	str	r3, [r7, #4]
}
 800cfe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfe2:	f7fe fdb9 	bl	800bb58 <xTaskIncrementTick>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d003      	beq.n	800cff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfec:	4b06      	ldr	r3, [pc, #24]	; (800d008 <SysTick_Handler+0x40>)
 800cfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	2300      	movs	r3, #0
 800cff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f383 8811 	msr	BASEPRI, r3
}
 800cffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	e000ed04 	.word	0xe000ed04

0800d00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d010:	4b0b      	ldr	r3, [pc, #44]	; (800d040 <vPortSetupTimerInterrupt+0x34>)
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d016:	4b0b      	ldr	r3, [pc, #44]	; (800d044 <vPortSetupTimerInterrupt+0x38>)
 800d018:	2200      	movs	r2, #0
 800d01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d01c:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <vPortSetupTimerInterrupt+0x3c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a0a      	ldr	r2, [pc, #40]	; (800d04c <vPortSetupTimerInterrupt+0x40>)
 800d022:	fba2 2303 	umull	r2, r3, r2, r3
 800d026:	099b      	lsrs	r3, r3, #6
 800d028:	4a09      	ldr	r2, [pc, #36]	; (800d050 <vPortSetupTimerInterrupt+0x44>)
 800d02a:	3b01      	subs	r3, #1
 800d02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d02e:	4b04      	ldr	r3, [pc, #16]	; (800d040 <vPortSetupTimerInterrupt+0x34>)
 800d030:	2207      	movs	r2, #7
 800d032:	601a      	str	r2, [r3, #0]
}
 800d034:	bf00      	nop
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	e000e010 	.word	0xe000e010
 800d044:	e000e018 	.word	0xe000e018
 800d048:	24000000 	.word	0x24000000
 800d04c:	10624dd3 	.word	0x10624dd3
 800d050:	e000e014 	.word	0xe000e014

0800d054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d064 <vPortEnableVFP+0x10>
 800d058:	6801      	ldr	r1, [r0, #0]
 800d05a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d05e:	6001      	str	r1, [r0, #0]
 800d060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d062:	bf00      	nop
 800d064:	e000ed88 	.word	0xe000ed88

0800d068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d06e:	f3ef 8305 	mrs	r3, IPSR
 800d072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2b0f      	cmp	r3, #15
 800d078:	d914      	bls.n	800d0a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d07a:	4a17      	ldr	r2, [pc, #92]	; (800d0d8 <vPortValidateInterruptPriority+0x70>)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4413      	add	r3, r2
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d084:	4b15      	ldr	r3, [pc, #84]	; (800d0dc <vPortValidateInterruptPriority+0x74>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	7afa      	ldrb	r2, [r7, #11]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d20a      	bcs.n	800d0a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	607b      	str	r3, [r7, #4]
}
 800d0a0:	bf00      	nop
 800d0a2:	e7fe      	b.n	800d0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0a4:	4b0e      	ldr	r3, [pc, #56]	; (800d0e0 <vPortValidateInterruptPriority+0x78>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d0ac:	4b0d      	ldr	r3, [pc, #52]	; (800d0e4 <vPortValidateInterruptPriority+0x7c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d90a      	bls.n	800d0ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	603b      	str	r3, [r7, #0]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <vPortValidateInterruptPriority+0x60>
	}
 800d0ca:	bf00      	nop
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	e000e3f0 	.word	0xe000e3f0
 800d0dc:	24002390 	.word	0x24002390
 800d0e0:	e000ed0c 	.word	0xe000ed0c
 800d0e4:	24002394 	.word	0x24002394

0800d0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08a      	sub	sp, #40	; 0x28
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0f4:	f7fe fc64 	bl	800b9c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0f8:	4b5b      	ldr	r3, [pc, #364]	; (800d268 <pvPortMalloc+0x180>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d100:	f000 f920 	bl	800d344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d104:	4b59      	ldr	r3, [pc, #356]	; (800d26c <pvPortMalloc+0x184>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4013      	ands	r3, r2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f040 8093 	bne.w	800d238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d01d      	beq.n	800d154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d118:	2208      	movs	r2, #8
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f003 0307 	and.w	r3, r3, #7
 800d126:	2b00      	cmp	r3, #0
 800d128:	d014      	beq.n	800d154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f023 0307 	bic.w	r3, r3, #7
 800d130:	3308      	adds	r3, #8
 800d132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00a      	beq.n	800d154 <pvPortMalloc+0x6c>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	617b      	str	r3, [r7, #20]
}
 800d150:	bf00      	nop
 800d152:	e7fe      	b.n	800d152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d06e      	beq.n	800d238 <pvPortMalloc+0x150>
 800d15a:	4b45      	ldr	r3, [pc, #276]	; (800d270 <pvPortMalloc+0x188>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	429a      	cmp	r2, r3
 800d162:	d869      	bhi.n	800d238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d164:	4b43      	ldr	r3, [pc, #268]	; (800d274 <pvPortMalloc+0x18c>)
 800d166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d168:	4b42      	ldr	r3, [pc, #264]	; (800d274 <pvPortMalloc+0x18c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d16e:	e004      	b.n	800d17a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d903      	bls.n	800d18c <pvPortMalloc+0xa4>
 800d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1f1      	bne.n	800d170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d18c:	4b36      	ldr	r3, [pc, #216]	; (800d268 <pvPortMalloc+0x180>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d192:	429a      	cmp	r2, r3
 800d194:	d050      	beq.n	800d238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2208      	movs	r2, #8
 800d19c:	4413      	add	r3, r2
 800d19e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	6a3b      	ldr	r3, [r7, #32]
 800d1a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	1ad2      	subs	r2, r2, r3
 800d1b0:	2308      	movs	r3, #8
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d91f      	bls.n	800d1f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4413      	add	r3, r2
 800d1be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	f003 0307 	and.w	r3, r3, #7
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	613b      	str	r3, [r7, #16]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	1ad2      	subs	r2, r2, r3
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1f2:	69b8      	ldr	r0, [r7, #24]
 800d1f4:	f000 f908 	bl	800d408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1f8:	4b1d      	ldr	r3, [pc, #116]	; (800d270 <pvPortMalloc+0x188>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	4a1b      	ldr	r2, [pc, #108]	; (800d270 <pvPortMalloc+0x188>)
 800d204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d206:	4b1a      	ldr	r3, [pc, #104]	; (800d270 <pvPortMalloc+0x188>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	4b1b      	ldr	r3, [pc, #108]	; (800d278 <pvPortMalloc+0x190>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d203      	bcs.n	800d21a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d212:	4b17      	ldr	r3, [pc, #92]	; (800d270 <pvPortMalloc+0x188>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a18      	ldr	r2, [pc, #96]	; (800d278 <pvPortMalloc+0x190>)
 800d218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	685a      	ldr	r2, [r3, #4]
 800d21e:	4b13      	ldr	r3, [pc, #76]	; (800d26c <pvPortMalloc+0x184>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	431a      	orrs	r2, r3
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22a:	2200      	movs	r2, #0
 800d22c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d22e:	4b13      	ldr	r3, [pc, #76]	; (800d27c <pvPortMalloc+0x194>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3301      	adds	r3, #1
 800d234:	4a11      	ldr	r2, [pc, #68]	; (800d27c <pvPortMalloc+0x194>)
 800d236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d238:	f7fe fbd0 	bl	800b9dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	f003 0307 	and.w	r3, r3, #7
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <pvPortMalloc+0x174>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	60fb      	str	r3, [r7, #12]
}
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <pvPortMalloc+0x172>
	return pvReturn;
 800d25c:	69fb      	ldr	r3, [r7, #28]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3728      	adds	r7, #40	; 0x28
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	240217a0 	.word	0x240217a0
 800d26c:	240217b4 	.word	0x240217b4
 800d270:	240217a4 	.word	0x240217a4
 800d274:	24021798 	.word	0x24021798
 800d278:	240217a8 	.word	0x240217a8
 800d27c:	240217ac 	.word	0x240217ac

0800d280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d04d      	beq.n	800d32e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d292:	2308      	movs	r3, #8
 800d294:	425b      	negs	r3, r3
 800d296:	697a      	ldr	r2, [r7, #20]
 800d298:	4413      	add	r3, r2
 800d29a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	4b24      	ldr	r3, [pc, #144]	; (800d338 <vPortFree+0xb8>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10a      	bne.n	800d2c4 <vPortFree+0x44>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	60fb      	str	r3, [r7, #12]
}
 800d2c0:	bf00      	nop
 800d2c2:	e7fe      	b.n	800d2c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00a      	beq.n	800d2e2 <vPortFree+0x62>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	60bb      	str	r3, [r7, #8]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	685a      	ldr	r2, [r3, #4]
 800d2e6:	4b14      	ldr	r3, [pc, #80]	; (800d338 <vPortFree+0xb8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d01e      	beq.n	800d32e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d11a      	bne.n	800d32e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	4b0e      	ldr	r3, [pc, #56]	; (800d338 <vPortFree+0xb8>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	43db      	mvns	r3, r3
 800d302:	401a      	ands	r2, r3
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d308:	f7fe fb5a 	bl	800b9c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	4b0a      	ldr	r3, [pc, #40]	; (800d33c <vPortFree+0xbc>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4413      	add	r3, r2
 800d316:	4a09      	ldr	r2, [pc, #36]	; (800d33c <vPortFree+0xbc>)
 800d318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d31a:	6938      	ldr	r0, [r7, #16]
 800d31c:	f000 f874 	bl	800d408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d320:	4b07      	ldr	r3, [pc, #28]	; (800d340 <vPortFree+0xc0>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3301      	adds	r3, #1
 800d326:	4a06      	ldr	r2, [pc, #24]	; (800d340 <vPortFree+0xc0>)
 800d328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d32a:	f7fe fb57 	bl	800b9dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d32e:	bf00      	nop
 800d330:	3718      	adds	r7, #24
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	240217b4 	.word	0x240217b4
 800d33c:	240217a4 	.word	0x240217a4
 800d340:	240217b0 	.word	0x240217b0

0800d344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d34a:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800d34e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d350:	4b27      	ldr	r3, [pc, #156]	; (800d3f0 <prvHeapInit+0xac>)
 800d352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f003 0307 	and.w	r3, r3, #7
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00c      	beq.n	800d378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3307      	adds	r3, #7
 800d362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f023 0307 	bic.w	r3, r3, #7
 800d36a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	4a1f      	ldr	r2, [pc, #124]	; (800d3f0 <prvHeapInit+0xac>)
 800d374:	4413      	add	r3, r2
 800d376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d37c:	4a1d      	ldr	r2, [pc, #116]	; (800d3f4 <prvHeapInit+0xb0>)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d382:	4b1c      	ldr	r3, [pc, #112]	; (800d3f4 <prvHeapInit+0xb0>)
 800d384:	2200      	movs	r2, #0
 800d386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	4413      	add	r3, r2
 800d38e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d390:	2208      	movs	r2, #8
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	1a9b      	subs	r3, r3, r2
 800d396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f023 0307 	bic.w	r3, r3, #7
 800d39e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	4a15      	ldr	r2, [pc, #84]	; (800d3f8 <prvHeapInit+0xb4>)
 800d3a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3a6:	4b14      	ldr	r3, [pc, #80]	; (800d3f8 <prvHeapInit+0xb4>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3ae:	4b12      	ldr	r3, [pc, #72]	; (800d3f8 <prvHeapInit+0xb4>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	1ad2      	subs	r2, r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3c4:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <prvHeapInit+0xb4>)
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	4a0a      	ldr	r2, [pc, #40]	; (800d3fc <prvHeapInit+0xb8>)
 800d3d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	4a09      	ldr	r2, [pc, #36]	; (800d400 <prvHeapInit+0xbc>)
 800d3da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3dc:	4b09      	ldr	r3, [pc, #36]	; (800d404 <prvHeapInit+0xc0>)
 800d3de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d3e2:	601a      	str	r2, [r3, #0]
}
 800d3e4:	bf00      	nop
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	24002398 	.word	0x24002398
 800d3f4:	24021798 	.word	0x24021798
 800d3f8:	240217a0 	.word	0x240217a0
 800d3fc:	240217a8 	.word	0x240217a8
 800d400:	240217a4 	.word	0x240217a4
 800d404:	240217b4 	.word	0x240217b4

0800d408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d410:	4b28      	ldr	r3, [pc, #160]	; (800d4b4 <prvInsertBlockIntoFreeList+0xac>)
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	e002      	b.n	800d41c <prvInsertBlockIntoFreeList+0x14>
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	429a      	cmp	r2, r3
 800d424:	d8f7      	bhi.n	800d416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	68ba      	ldr	r2, [r7, #8]
 800d430:	4413      	add	r3, r2
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	429a      	cmp	r2, r3
 800d436:	d108      	bne.n	800d44a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	441a      	add	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	441a      	add	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d118      	bne.n	800d490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4b15      	ldr	r3, [pc, #84]	; (800d4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	429a      	cmp	r2, r3
 800d468:	d00d      	beq.n	800d486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	685a      	ldr	r2, [r3, #4]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	441a      	add	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	601a      	str	r2, [r3, #0]
 800d484:	e008      	b.n	800d498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d486:	4b0c      	ldr	r3, [pc, #48]	; (800d4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	601a      	str	r2, [r3, #0]
 800d48e:	e003      	b.n	800d498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d002      	beq.n	800d4a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4a6:	bf00      	nop
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	24021798 	.word	0x24021798
 800d4b8:	240217a0 	.word	0x240217a0

0800d4bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d4c6:	f007 fbb5 	bl	8014c34 <sys_timeouts_sleeptime>
 800d4ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d2:	d10b      	bne.n	800d4ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d4d4:	4813      	ldr	r0, [pc, #76]	; (800d524 <tcpip_timeouts_mbox_fetch+0x68>)
 800d4d6:	f00a fd78 	bl	8017fca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d4da:	2200      	movs	r2, #0
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f00a fcea 	bl	8017eb8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d4e4:	480f      	ldr	r0, [pc, #60]	; (800d524 <tcpip_timeouts_mbox_fetch+0x68>)
 800d4e6:	f00a fd61 	bl	8017fac <sys_mutex_lock>
    return;
 800d4ea:	e018      	b.n	800d51e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d102      	bne.n	800d4f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d4f2:	f007 fb65 	bl	8014bc0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d4f6:	e7e6      	b.n	800d4c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d4f8:	480a      	ldr	r0, [pc, #40]	; (800d524 <tcpip_timeouts_mbox_fetch+0x68>)
 800d4fa:	f00a fd66 	bl	8017fca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f00a fcd8 	bl	8017eb8 <sys_arch_mbox_fetch>
 800d508:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d50a:	4806      	ldr	r0, [pc, #24]	; (800d524 <tcpip_timeouts_mbox_fetch+0x68>)
 800d50c:	f00a fd4e 	bl	8017fac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d516:	d102      	bne.n	800d51e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d518:	f007 fb52 	bl	8014bc0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d51c:	e7d3      	b.n	800d4c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	24021c88 	.word	0x24021c88

0800d528 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d530:	4810      	ldr	r0, [pc, #64]	; (800d574 <tcpip_thread+0x4c>)
 800d532:	f00a fd3b 	bl	8017fac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d536:	4b10      	ldr	r3, [pc, #64]	; (800d578 <tcpip_thread+0x50>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d005      	beq.n	800d54a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d53e:	4b0e      	ldr	r3, [pc, #56]	; (800d578 <tcpip_thread+0x50>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a0e      	ldr	r2, [pc, #56]	; (800d57c <tcpip_thread+0x54>)
 800d544:	6812      	ldr	r2, [r2, #0]
 800d546:	4610      	mov	r0, r2
 800d548:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d54a:	f107 030c 	add.w	r3, r7, #12
 800d54e:	4619      	mov	r1, r3
 800d550:	480b      	ldr	r0, [pc, #44]	; (800d580 <tcpip_thread+0x58>)
 800d552:	f7ff ffb3 	bl	800d4bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d106      	bne.n	800d56a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d55c:	4b09      	ldr	r3, [pc, #36]	; (800d584 <tcpip_thread+0x5c>)
 800d55e:	2291      	movs	r2, #145	; 0x91
 800d560:	4909      	ldr	r1, [pc, #36]	; (800d588 <tcpip_thread+0x60>)
 800d562:	480a      	ldr	r0, [pc, #40]	; (800d58c <tcpip_thread+0x64>)
 800d564:	f00a fdca 	bl	80180fc <iprintf>
      continue;
 800d568:	e003      	b.n	800d572 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f000 f80f 	bl	800d590 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d572:	e7ea      	b.n	800d54a <tcpip_thread+0x22>
 800d574:	24021c88 	.word	0x24021c88
 800d578:	240217b8 	.word	0x240217b8
 800d57c:	240217bc 	.word	0x240217bc
 800d580:	240217c0 	.word	0x240217c0
 800d584:	08019340 	.word	0x08019340
 800d588:	08019370 	.word	0x08019370
 800d58c:	08019390 	.word	0x08019390

0800d590 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d026      	beq.n	800d5ee <tcpip_thread_handle_msg+0x5e>
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	dc2b      	bgt.n	800d5fc <tcpip_thread_handle_msg+0x6c>
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <tcpip_thread_handle_msg+0x1e>
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d015      	beq.n	800d5d8 <tcpip_thread_handle_msg+0x48>
 800d5ac:	e026      	b.n	800d5fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	6850      	ldr	r0, [r2, #4]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	6892      	ldr	r2, [r2, #8]
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4798      	blx	r3
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d004      	beq.n	800d5ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f001 fde5 	bl	800f198 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	2009      	movs	r0, #9
 800d5d2:	f000 ff1b 	bl	800e40c <memp_free>
      break;
 800d5d6:	e018      	b.n	800d60a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	6892      	ldr	r2, [r2, #8]
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d5e4:	6879      	ldr	r1, [r7, #4]
 800d5e6:	2008      	movs	r0, #8
 800d5e8:	f000 ff10 	bl	800e40c <memp_free>
      break;
 800d5ec:	e00d      	b.n	800d60a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	6892      	ldr	r2, [r2, #8]
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	4798      	blx	r3
      break;
 800d5fa:	e006      	b.n	800d60a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d5fc:	4b05      	ldr	r3, [pc, #20]	; (800d614 <tcpip_thread_handle_msg+0x84>)
 800d5fe:	22cf      	movs	r2, #207	; 0xcf
 800d600:	4905      	ldr	r1, [pc, #20]	; (800d618 <tcpip_thread_handle_msg+0x88>)
 800d602:	4806      	ldr	r0, [pc, #24]	; (800d61c <tcpip_thread_handle_msg+0x8c>)
 800d604:	f00a fd7a 	bl	80180fc <iprintf>
      break;
 800d608:	bf00      	nop
  }
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	08019340 	.word	0x08019340
 800d618:	08019370 	.word	0x08019370
 800d61c:	08019390 	.word	0x08019390

0800d620 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d62c:	481a      	ldr	r0, [pc, #104]	; (800d698 <tcpip_inpkt+0x78>)
 800d62e:	f00a fc82 	bl	8017f36 <sys_mbox_valid>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d105      	bne.n	800d644 <tcpip_inpkt+0x24>
 800d638:	4b18      	ldr	r3, [pc, #96]	; (800d69c <tcpip_inpkt+0x7c>)
 800d63a:	22fc      	movs	r2, #252	; 0xfc
 800d63c:	4918      	ldr	r1, [pc, #96]	; (800d6a0 <tcpip_inpkt+0x80>)
 800d63e:	4819      	ldr	r0, [pc, #100]	; (800d6a4 <tcpip_inpkt+0x84>)
 800d640:	f00a fd5c 	bl	80180fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d644:	2009      	movs	r0, #9
 800d646:	f000 fe6b 	bl	800e320 <memp_malloc>
 800d64a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d102      	bne.n	800d658 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d652:	f04f 33ff 	mov.w	r3, #4294967295
 800d656:	e01a      	b.n	800d68e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2200      	movs	r2, #0
 800d65c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d670:	6979      	ldr	r1, [r7, #20]
 800d672:	4809      	ldr	r0, [pc, #36]	; (800d698 <tcpip_inpkt+0x78>)
 800d674:	f00a fc06 	bl	8017e84 <sys_mbox_trypost>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d006      	beq.n	800d68c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d67e:	6979      	ldr	r1, [r7, #20]
 800d680:	2009      	movs	r0, #9
 800d682:	f000 fec3 	bl	800e40c <memp_free>
    return ERR_MEM;
 800d686:	f04f 33ff 	mov.w	r3, #4294967295
 800d68a:	e000      	b.n	800d68e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d68c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	240217c0 	.word	0x240217c0
 800d69c:	08019340 	.word	0x08019340
 800d6a0:	080193b8 	.word	0x080193b8
 800d6a4:	08019390 	.word	0x08019390

0800d6a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d6b8:	f003 0318 	and.w	r3, r3, #24
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d6c0:	4a08      	ldr	r2, [pc, #32]	; (800d6e4 <tcpip_input+0x3c>)
 800d6c2:	6839      	ldr	r1, [r7, #0]
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff ffab 	bl	800d620 <tcpip_inpkt>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	e005      	b.n	800d6da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d6ce:	4a06      	ldr	r2, [pc, #24]	; (800d6e8 <tcpip_input+0x40>)
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff ffa4 	bl	800d620 <tcpip_inpkt>
 800d6d8:	4603      	mov	r3, r0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	08017c95 	.word	0x08017c95
 800d6e8:	08016ba9 	.word	0x08016ba9

0800d6ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d6f6:	4819      	ldr	r0, [pc, #100]	; (800d75c <tcpip_try_callback+0x70>)
 800d6f8:	f00a fc1d 	bl	8017f36 <sys_mbox_valid>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d106      	bne.n	800d710 <tcpip_try_callback+0x24>
 800d702:	4b17      	ldr	r3, [pc, #92]	; (800d760 <tcpip_try_callback+0x74>)
 800d704:	f240 125d 	movw	r2, #349	; 0x15d
 800d708:	4916      	ldr	r1, [pc, #88]	; (800d764 <tcpip_try_callback+0x78>)
 800d70a:	4817      	ldr	r0, [pc, #92]	; (800d768 <tcpip_try_callback+0x7c>)
 800d70c:	f00a fcf6 	bl	80180fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d710:	2008      	movs	r0, #8
 800d712:	f000 fe05 	bl	800e320 <memp_malloc>
 800d716:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d102      	bne.n	800d724 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d71e:	f04f 33ff 	mov.w	r3, #4294967295
 800d722:	e017      	b.n	800d754 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2201      	movs	r2, #1
 800d728:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d736:	68f9      	ldr	r1, [r7, #12]
 800d738:	4808      	ldr	r0, [pc, #32]	; (800d75c <tcpip_try_callback+0x70>)
 800d73a:	f00a fba3 	bl	8017e84 <sys_mbox_trypost>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d006      	beq.n	800d752 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d744:	68f9      	ldr	r1, [r7, #12]
 800d746:	2008      	movs	r0, #8
 800d748:	f000 fe60 	bl	800e40c <memp_free>
    return ERR_MEM;
 800d74c:	f04f 33ff 	mov.w	r3, #4294967295
 800d750:	e000      	b.n	800d754 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	240217c0 	.word	0x240217c0
 800d760:	08019340 	.word	0x08019340
 800d764:	080193b8 	.word	0x080193b8
 800d768:	08019390 	.word	0x08019390

0800d76c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af02      	add	r7, sp, #8
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d776:	f000 f92d 	bl	800d9d4 <lwip_init>

  tcpip_init_done = initfunc;
 800d77a:	4a17      	ldr	r2, [pc, #92]	; (800d7d8 <tcpip_init+0x6c>)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d780:	4a16      	ldr	r2, [pc, #88]	; (800d7dc <tcpip_init+0x70>)
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d786:	2106      	movs	r1, #6
 800d788:	4815      	ldr	r0, [pc, #84]	; (800d7e0 <tcpip_init+0x74>)
 800d78a:	f00a fb59 	bl	8017e40 <sys_mbox_new>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d006      	beq.n	800d7a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d794:	4b13      	ldr	r3, [pc, #76]	; (800d7e4 <tcpip_init+0x78>)
 800d796:	f240 2261 	movw	r2, #609	; 0x261
 800d79a:	4913      	ldr	r1, [pc, #76]	; (800d7e8 <tcpip_init+0x7c>)
 800d79c:	4813      	ldr	r0, [pc, #76]	; (800d7ec <tcpip_init+0x80>)
 800d79e:	f00a fcad 	bl	80180fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d7a2:	4813      	ldr	r0, [pc, #76]	; (800d7f0 <tcpip_init+0x84>)
 800d7a4:	f00a fbe6 	bl	8017f74 <sys_mutex_new>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d006      	beq.n	800d7bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d7ae:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <tcpip_init+0x78>)
 800d7b0:	f240 2265 	movw	r2, #613	; 0x265
 800d7b4:	490f      	ldr	r1, [pc, #60]	; (800d7f4 <tcpip_init+0x88>)
 800d7b6:	480d      	ldr	r0, [pc, #52]	; (800d7ec <tcpip_init+0x80>)
 800d7b8:	f00a fca0 	bl	80180fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d7bc:	2300      	movs	r3, #0
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	490c      	ldr	r1, [pc, #48]	; (800d7f8 <tcpip_init+0x8c>)
 800d7c8:	480c      	ldr	r0, [pc, #48]	; (800d7fc <tcpip_init+0x90>)
 800d7ca:	f00a fc0b 	bl	8017fe4 <sys_thread_new>
}
 800d7ce:	bf00      	nop
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	240217b8 	.word	0x240217b8
 800d7dc:	240217bc 	.word	0x240217bc
 800d7e0:	240217c0 	.word	0x240217c0
 800d7e4:	08019340 	.word	0x08019340
 800d7e8:	080193c8 	.word	0x080193c8
 800d7ec:	08019390 	.word	0x08019390
 800d7f0:	24021c88 	.word	0x24021c88
 800d7f4:	080193ec 	.word	0x080193ec
 800d7f8:	0800d529 	.word	0x0800d529
 800d7fc:	08019410 	.word	0x08019410

0800d800 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	4603      	mov	r3, r0
 800d808:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d80a:	88fb      	ldrh	r3, [r7, #6]
 800d80c:	021b      	lsls	r3, r3, #8
 800d80e:	b21a      	sxth	r2, r3
 800d810:	88fb      	ldrh	r3, [r7, #6]
 800d812:	0a1b      	lsrs	r3, r3, #8
 800d814:	b29b      	uxth	r3, r3
 800d816:	b21b      	sxth	r3, r3
 800d818:	4313      	orrs	r3, r2
 800d81a:	b21b      	sxth	r3, r3
 800d81c:	b29b      	uxth	r3, r3
}
 800d81e:	4618      	mov	r0, r3
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b083      	sub	sp, #12
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	061a      	lsls	r2, r3, #24
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	021b      	lsls	r3, r3, #8
 800d83a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d83e:	431a      	orrs	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	0a1b      	lsrs	r3, r3, #8
 800d844:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d848:	431a      	orrs	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	0e1b      	lsrs	r3, r3, #24
 800d84e:	4313      	orrs	r3, r2
}
 800d850:	4618      	mov	r0, r3
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b089      	sub	sp, #36	; 0x24
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00d      	beq.n	800d89c <lwip_standard_chksum+0x40>
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	dd0a      	ble.n	800d89c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d886:	69fa      	ldr	r2, [r7, #28]
 800d888:	1c53      	adds	r3, r2, #1
 800d88a:	61fb      	str	r3, [r7, #28]
 800d88c:	f107 030e 	add.w	r3, r7, #14
 800d890:	3301      	adds	r3, #1
 800d892:	7812      	ldrb	r2, [r2, #0]
 800d894:	701a      	strb	r2, [r3, #0]
    len--;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	3b01      	subs	r3, #1
 800d89a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d8a0:	e00a      	b.n	800d8b8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	1c9a      	adds	r2, r3, #2
 800d8a6:	61ba      	str	r2, [r7, #24]
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	3b02      	subs	r3, #2
 800d8b6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	dcf1      	bgt.n	800d8a2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	dd04      	ble.n	800d8ce <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d8c4:	f107 030e 	add.w	r3, r7, #14
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	7812      	ldrb	r2, [r2, #0]
 800d8cc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d8ce:	89fb      	ldrh	r3, [r7, #14]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	0c1a      	lsrs	r2, r3, #16
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4413      	add	r3, r2
 800d8e2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	0c1a      	lsrs	r2, r3, #16
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	4413      	add	r3, r2
 800d8ee:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d007      	beq.n	800d906 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	021b      	lsls	r3, r3, #8
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	0a1b      	lsrs	r3, r3, #8
 800d900:	b2db      	uxtb	r3, r3
 800d902:	4313      	orrs	r3, r2
 800d904:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	b29b      	uxth	r3, r3
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3724      	adds	r7, #36	; 0x24
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b082      	sub	sp, #8
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
 800d91e:	460b      	mov	r3, r1
 800d920:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d922:	887b      	ldrh	r3, [r7, #2]
 800d924:	4619      	mov	r1, r3
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7ff ff98 	bl	800d85c <lwip_standard_chksum>
 800d92c:	4603      	mov	r3, r0
 800d92e:	43db      	mvns	r3, r3
 800d930:	b29b      	uxth	r3, r3
}
 800d932:	4618      	mov	r0, r3
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b086      	sub	sp, #24
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d942:	2300      	movs	r3, #0
 800d944:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	613b      	str	r3, [r7, #16]
 800d94e:	e02b      	b.n	800d9a8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	685a      	ldr	r2, [r3, #4]
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	895b      	ldrh	r3, [r3, #10]
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f7ff ff7e 	bl	800d85c <lwip_standard_chksum>
 800d960:	4603      	mov	r3, r0
 800d962:	461a      	mov	r2, r3
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	4413      	add	r3, r2
 800d968:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	0c1a      	lsrs	r2, r3, #16
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	b29b      	uxth	r3, r3
 800d972:	4413      	add	r3, r2
 800d974:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	895b      	ldrh	r3, [r3, #10]
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	b29b      	uxth	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00e      	beq.n	800d9a2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	bf0c      	ite	eq
 800d98a:	2301      	moveq	r3, #1
 800d98c:	2300      	movne	r3, #0
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	021b      	lsls	r3, r3, #8
 800d996:	b29a      	uxth	r2, r3
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	0a1b      	lsrs	r3, r3, #8
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	613b      	str	r3, [r7, #16]
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1d0      	bne.n	800d950 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d007      	beq.n	800d9c4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	021b      	lsls	r3, r3, #8
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	0a1b      	lsrs	r3, r3, #8
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	43db      	mvns	r3, r3
 800d9ca:	b29b      	uxth	r3, r3
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3718      	adds	r7, #24
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d9de:	f00a fabb 	bl	8017f58 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d9e2:	f000 f8d5 	bl	800db90 <mem_init>
  memp_init();
 800d9e6:	f000 fc2d 	bl	800e244 <memp_init>
  pbuf_init();
  netif_init();
 800d9ea:	f000 fd39 	bl	800e460 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d9ee:	f007 f959 	bl	8014ca4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d9f2:	f001 fe7b 	bl	800f6ec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d9f6:	f007 f89b 	bl	8014b30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d9fa:	bf00      	nop
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
	...

0800da04 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800da0e:	4b05      	ldr	r3, [pc, #20]	; (800da24 <ptr_to_mem+0x20>)
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	88fb      	ldrh	r3, [r7, #6]
 800da14:	4413      	add	r3, r2
}
 800da16:	4618      	mov	r0, r3
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	240217c4 	.word	0x240217c4

0800da28 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800da30:	4b05      	ldr	r3, [pc, #20]	; (800da48 <mem_to_ptr+0x20>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	b29b      	uxth	r3, r3
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	240217c4 	.word	0x240217c4

0800da4c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800da4c:	b590      	push	{r4, r7, lr}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800da54:	4b45      	ldr	r3, [pc, #276]	; (800db6c <plug_holes+0x120>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d206      	bcs.n	800da6c <plug_holes+0x20>
 800da5e:	4b44      	ldr	r3, [pc, #272]	; (800db70 <plug_holes+0x124>)
 800da60:	f240 12df 	movw	r2, #479	; 0x1df
 800da64:	4943      	ldr	r1, [pc, #268]	; (800db74 <plug_holes+0x128>)
 800da66:	4844      	ldr	r0, [pc, #272]	; (800db78 <plug_holes+0x12c>)
 800da68:	f00a fb48 	bl	80180fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800da6c:	4b43      	ldr	r3, [pc, #268]	; (800db7c <plug_holes+0x130>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	429a      	cmp	r2, r3
 800da74:	d306      	bcc.n	800da84 <plug_holes+0x38>
 800da76:	4b3e      	ldr	r3, [pc, #248]	; (800db70 <plug_holes+0x124>)
 800da78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800da7c:	4940      	ldr	r1, [pc, #256]	; (800db80 <plug_holes+0x134>)
 800da7e:	483e      	ldr	r0, [pc, #248]	; (800db78 <plug_holes+0x12c>)
 800da80:	f00a fb3c 	bl	80180fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	791b      	ldrb	r3, [r3, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d006      	beq.n	800da9a <plug_holes+0x4e>
 800da8c:	4b38      	ldr	r3, [pc, #224]	; (800db70 <plug_holes+0x124>)
 800da8e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800da92:	493c      	ldr	r1, [pc, #240]	; (800db84 <plug_holes+0x138>)
 800da94:	4838      	ldr	r0, [pc, #224]	; (800db78 <plug_holes+0x12c>)
 800da96:	f00a fb31 	bl	80180fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800daa2:	d906      	bls.n	800dab2 <plug_holes+0x66>
 800daa4:	4b32      	ldr	r3, [pc, #200]	; (800db70 <plug_holes+0x124>)
 800daa6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800daaa:	4937      	ldr	r1, [pc, #220]	; (800db88 <plug_holes+0x13c>)
 800daac:	4832      	ldr	r0, [pc, #200]	; (800db78 <plug_holes+0x12c>)
 800daae:	f00a fb25 	bl	80180fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7ff ffa4 	bl	800da04 <ptr_to_mem>
 800dabc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d024      	beq.n	800db10 <plug_holes+0xc4>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	791b      	ldrb	r3, [r3, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d120      	bne.n	800db10 <plug_holes+0xc4>
 800dace:	4b2b      	ldr	r3, [pc, #172]	; (800db7c <plug_holes+0x130>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d01b      	beq.n	800db10 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dad8:	4b2c      	ldr	r3, [pc, #176]	; (800db8c <plug_holes+0x140>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d102      	bne.n	800dae8 <plug_holes+0x9c>
      lfree = mem;
 800dae2:	4a2a      	ldr	r2, [pc, #168]	; (800db8c <plug_holes+0x140>)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	881a      	ldrh	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800daf8:	d00a      	beq.n	800db10 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	881b      	ldrh	r3, [r3, #0]
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff ff80 	bl	800da04 <ptr_to_mem>
 800db04:	4604      	mov	r4, r0
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f7ff ff8e 	bl	800da28 <mem_to_ptr>
 800db0c:	4603      	mov	r3, r0
 800db0e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	885b      	ldrh	r3, [r3, #2]
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff ff75 	bl	800da04 <ptr_to_mem>
 800db1a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	429a      	cmp	r2, r3
 800db22:	d01f      	beq.n	800db64 <plug_holes+0x118>
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	791b      	ldrb	r3, [r3, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d11b      	bne.n	800db64 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800db2c:	4b17      	ldr	r3, [pc, #92]	; (800db8c <plug_holes+0x140>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	429a      	cmp	r2, r3
 800db34:	d102      	bne.n	800db3c <plug_holes+0xf0>
      lfree = pmem;
 800db36:	4a15      	ldr	r2, [pc, #84]	; (800db8c <plug_holes+0x140>)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	881a      	ldrh	r2, [r3, #0]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	881b      	ldrh	r3, [r3, #0]
 800db48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db4c:	d00a      	beq.n	800db64 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff ff56 	bl	800da04 <ptr_to_mem>
 800db58:	4604      	mov	r4, r0
 800db5a:	68b8      	ldr	r0, [r7, #8]
 800db5c:	f7ff ff64 	bl	800da28 <mem_to_ptr>
 800db60:	4603      	mov	r3, r0
 800db62:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800db64:	bf00      	nop
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd90      	pop	{r4, r7, pc}
 800db6c:	240217c4 	.word	0x240217c4
 800db70:	08019420 	.word	0x08019420
 800db74:	08019450 	.word	0x08019450
 800db78:	08019468 	.word	0x08019468
 800db7c:	240217c8 	.word	0x240217c8
 800db80:	08019490 	.word	0x08019490
 800db84:	080194ac 	.word	0x080194ac
 800db88:	080194c8 	.word	0x080194c8
 800db8c:	240217d0 	.word	0x240217d0

0800db90 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800db96:	4b1d      	ldr	r3, [pc, #116]	; (800dc0c <mem_init+0x7c>)
 800db98:	4a1d      	ldr	r2, [pc, #116]	; (800dc10 <mem_init+0x80>)
 800db9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800db9c:	4b1b      	ldr	r3, [pc, #108]	; (800dc0c <mem_init+0x7c>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dba8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dbb6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800dbba:	f7ff ff23 	bl	800da04 <ptr_to_mem>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	4a14      	ldr	r2, [pc, #80]	; (800dc14 <mem_init+0x84>)
 800dbc2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dbc4:	4b13      	ldr	r3, [pc, #76]	; (800dc14 <mem_init+0x84>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dbcc:	4b11      	ldr	r3, [pc, #68]	; (800dc14 <mem_init+0x84>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dbd4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dbd6:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <mem_init+0x84>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dbde:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dbe0:	4b0a      	ldr	r3, [pc, #40]	; (800dc0c <mem_init+0x7c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a0c      	ldr	r2, [pc, #48]	; (800dc18 <mem_init+0x88>)
 800dbe6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dbe8:	480c      	ldr	r0, [pc, #48]	; (800dc1c <mem_init+0x8c>)
 800dbea:	f00a f9c3 	bl	8017f74 <sys_mutex_new>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d006      	beq.n	800dc02 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dbf4:	4b0a      	ldr	r3, [pc, #40]	; (800dc20 <mem_init+0x90>)
 800dbf6:	f240 221f 	movw	r2, #543	; 0x21f
 800dbfa:	490a      	ldr	r1, [pc, #40]	; (800dc24 <mem_init+0x94>)
 800dbfc:	480a      	ldr	r0, [pc, #40]	; (800dc28 <mem_init+0x98>)
 800dbfe:	f00a fa7d 	bl	80180fc <iprintf>
  }
}
 800dc02:	bf00      	nop
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	240217c4 	.word	0x240217c4
 800dc10:	30044000 	.word	0x30044000
 800dc14:	240217c8 	.word	0x240217c8
 800dc18:	240217d0 	.word	0x240217d0
 800dc1c:	240217cc 	.word	0x240217cc
 800dc20:	08019420 	.word	0x08019420
 800dc24:	080194f4 	.word	0x080194f4
 800dc28:	08019468 	.word	0x08019468

0800dc2c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f7ff fef7 	bl	800da28 <mem_to_ptr>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	881b      	ldrh	r3, [r3, #0]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7ff fede 	bl	800da04 <ptr_to_mem>
 800dc48:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	885b      	ldrh	r3, [r3, #2]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fed8 	bl	800da04 <ptr_to_mem>
 800dc54:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc5e:	d818      	bhi.n	800dc92 <mem_link_valid+0x66>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	885b      	ldrh	r3, [r3, #2]
 800dc64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc68:	d813      	bhi.n	800dc92 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dc6e:	8afa      	ldrh	r2, [r7, #22]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d004      	beq.n	800dc7e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	8afa      	ldrh	r2, [r7, #22]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d109      	bne.n	800dc92 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dc7e:	4b08      	ldr	r3, [pc, #32]	; (800dca0 <mem_link_valid+0x74>)
 800dc80:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d006      	beq.n	800dc96 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	885b      	ldrh	r3, [r3, #2]
 800dc8c:	8afa      	ldrh	r2, [r7, #22]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d001      	beq.n	800dc96 <mem_link_valid+0x6a>
    return 0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e000      	b.n	800dc98 <mem_link_valid+0x6c>
  }
  return 1;
 800dc96:	2301      	movs	r3, #1
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	240217c8 	.word	0x240217c8

0800dca4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b088      	sub	sp, #32
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d070      	beq.n	800dd94 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f003 0303 	and.w	r3, r3, #3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00d      	beq.n	800dcd8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dcbc:	4b37      	ldr	r3, [pc, #220]	; (800dd9c <mem_free+0xf8>)
 800dcbe:	f240 2273 	movw	r2, #627	; 0x273
 800dcc2:	4937      	ldr	r1, [pc, #220]	; (800dda0 <mem_free+0xfc>)
 800dcc4:	4837      	ldr	r0, [pc, #220]	; (800dda4 <mem_free+0x100>)
 800dcc6:	f00a fa19 	bl	80180fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dcca:	f00a f9b1 	bl	8018030 <sys_arch_protect>
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f00a f9bb 	bl	801804c <sys_arch_unprotect>
    return;
 800dcd6:	e05e      	b.n	800dd96 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	3b08      	subs	r3, #8
 800dcdc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dcde:	4b32      	ldr	r3, [pc, #200]	; (800dda8 <mem_free+0x104>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	69fa      	ldr	r2, [r7, #28]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d306      	bcc.n	800dcf6 <mem_free+0x52>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f103 020c 	add.w	r2, r3, #12
 800dcee:	4b2f      	ldr	r3, [pc, #188]	; (800ddac <mem_free+0x108>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d90d      	bls.n	800dd12 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dcf6:	4b29      	ldr	r3, [pc, #164]	; (800dd9c <mem_free+0xf8>)
 800dcf8:	f240 227f 	movw	r2, #639	; 0x27f
 800dcfc:	492c      	ldr	r1, [pc, #176]	; (800ddb0 <mem_free+0x10c>)
 800dcfe:	4829      	ldr	r0, [pc, #164]	; (800dda4 <mem_free+0x100>)
 800dd00:	f00a f9fc 	bl	80180fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd04:	f00a f994 	bl	8018030 <sys_arch_protect>
 800dd08:	6138      	str	r0, [r7, #16]
 800dd0a:	6938      	ldr	r0, [r7, #16]
 800dd0c:	f00a f99e 	bl	801804c <sys_arch_unprotect>
    return;
 800dd10:	e041      	b.n	800dd96 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dd12:	4828      	ldr	r0, [pc, #160]	; (800ddb4 <mem_free+0x110>)
 800dd14:	f00a f94a 	bl	8017fac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	791b      	ldrb	r3, [r3, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d110      	bne.n	800dd42 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dd20:	4b1e      	ldr	r3, [pc, #120]	; (800dd9c <mem_free+0xf8>)
 800dd22:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800dd26:	4924      	ldr	r1, [pc, #144]	; (800ddb8 <mem_free+0x114>)
 800dd28:	481e      	ldr	r0, [pc, #120]	; (800dda4 <mem_free+0x100>)
 800dd2a:	f00a f9e7 	bl	80180fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dd2e:	4821      	ldr	r0, [pc, #132]	; (800ddb4 <mem_free+0x110>)
 800dd30:	f00a f94b 	bl	8017fca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd34:	f00a f97c 	bl	8018030 <sys_arch_protect>
 800dd38:	6178      	str	r0, [r7, #20]
 800dd3a:	6978      	ldr	r0, [r7, #20]
 800dd3c:	f00a f986 	bl	801804c <sys_arch_unprotect>
    return;
 800dd40:	e029      	b.n	800dd96 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dd42:	69f8      	ldr	r0, [r7, #28]
 800dd44:	f7ff ff72 	bl	800dc2c <mem_link_valid>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d110      	bne.n	800dd70 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dd4e:	4b13      	ldr	r3, [pc, #76]	; (800dd9c <mem_free+0xf8>)
 800dd50:	f240 2295 	movw	r2, #661	; 0x295
 800dd54:	4919      	ldr	r1, [pc, #100]	; (800ddbc <mem_free+0x118>)
 800dd56:	4813      	ldr	r0, [pc, #76]	; (800dda4 <mem_free+0x100>)
 800dd58:	f00a f9d0 	bl	80180fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dd5c:	4815      	ldr	r0, [pc, #84]	; (800ddb4 <mem_free+0x110>)
 800dd5e:	f00a f934 	bl	8017fca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd62:	f00a f965 	bl	8018030 <sys_arch_protect>
 800dd66:	61b8      	str	r0, [r7, #24]
 800dd68:	69b8      	ldr	r0, [r7, #24]
 800dd6a:	f00a f96f 	bl	801804c <sys_arch_unprotect>
    return;
 800dd6e:	e012      	b.n	800dd96 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	2200      	movs	r2, #0
 800dd74:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dd76:	4b12      	ldr	r3, [pc, #72]	; (800ddc0 <mem_free+0x11c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	69fa      	ldr	r2, [r7, #28]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d202      	bcs.n	800dd86 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dd80:	4a0f      	ldr	r2, [pc, #60]	; (800ddc0 <mem_free+0x11c>)
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800dd86:	69f8      	ldr	r0, [r7, #28]
 800dd88:	f7ff fe60 	bl	800da4c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dd8c:	4809      	ldr	r0, [pc, #36]	; (800ddb4 <mem_free+0x110>)
 800dd8e:	f00a f91c 	bl	8017fca <sys_mutex_unlock>
 800dd92:	e000      	b.n	800dd96 <mem_free+0xf2>
    return;
 800dd94:	bf00      	nop
}
 800dd96:	3720      	adds	r7, #32
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	08019420 	.word	0x08019420
 800dda0:	08019510 	.word	0x08019510
 800dda4:	08019468 	.word	0x08019468
 800dda8:	240217c4 	.word	0x240217c4
 800ddac:	240217c8 	.word	0x240217c8
 800ddb0:	08019534 	.word	0x08019534
 800ddb4:	240217cc 	.word	0x240217cc
 800ddb8:	08019550 	.word	0x08019550
 800ddbc:	08019578 	.word	0x08019578
 800ddc0:	240217d0 	.word	0x240217d0

0800ddc4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ddd0:	887b      	ldrh	r3, [r7, #2]
 800ddd2:	3303      	adds	r3, #3
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	f023 0303 	bic.w	r3, r3, #3
 800ddda:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800dddc:	8bfb      	ldrh	r3, [r7, #30]
 800ddde:	2b0b      	cmp	r3, #11
 800dde0:	d801      	bhi.n	800dde6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800dde2:	230c      	movs	r3, #12
 800dde4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dde6:	8bfb      	ldrh	r3, [r7, #30]
 800dde8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ddec:	d803      	bhi.n	800ddf6 <mem_trim+0x32>
 800ddee:	8bfa      	ldrh	r2, [r7, #30]
 800ddf0:	887b      	ldrh	r3, [r7, #2]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d201      	bcs.n	800ddfa <mem_trim+0x36>
    return NULL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	e0d8      	b.n	800dfac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ddfa:	4b6e      	ldr	r3, [pc, #440]	; (800dfb4 <mem_trim+0x1f0>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	429a      	cmp	r2, r3
 800de02:	d304      	bcc.n	800de0e <mem_trim+0x4a>
 800de04:	4b6c      	ldr	r3, [pc, #432]	; (800dfb8 <mem_trim+0x1f4>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d306      	bcc.n	800de1c <mem_trim+0x58>
 800de0e:	4b6b      	ldr	r3, [pc, #428]	; (800dfbc <mem_trim+0x1f8>)
 800de10:	f240 22d1 	movw	r2, #721	; 0x2d1
 800de14:	496a      	ldr	r1, [pc, #424]	; (800dfc0 <mem_trim+0x1fc>)
 800de16:	486b      	ldr	r0, [pc, #428]	; (800dfc4 <mem_trim+0x200>)
 800de18:	f00a f970 	bl	80180fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800de1c:	4b65      	ldr	r3, [pc, #404]	; (800dfb4 <mem_trim+0x1f0>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	429a      	cmp	r2, r3
 800de24:	d304      	bcc.n	800de30 <mem_trim+0x6c>
 800de26:	4b64      	ldr	r3, [pc, #400]	; (800dfb8 <mem_trim+0x1f4>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d307      	bcc.n	800de40 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de30:	f00a f8fe 	bl	8018030 <sys_arch_protect>
 800de34:	60b8      	str	r0, [r7, #8]
 800de36:	68b8      	ldr	r0, [r7, #8]
 800de38:	f00a f908 	bl	801804c <sys_arch_unprotect>
    return rmem;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	e0b5      	b.n	800dfac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	3b08      	subs	r3, #8
 800de44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800de46:	69b8      	ldr	r0, [r7, #24]
 800de48:	f7ff fdee 	bl	800da28 <mem_to_ptr>
 800de4c:	4603      	mov	r3, r0
 800de4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	881a      	ldrh	r2, [r3, #0]
 800de54:	8afb      	ldrh	r3, [r7, #22]
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	b29b      	uxth	r3, r3
 800de5a:	3b08      	subs	r3, #8
 800de5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800de5e:	8bfa      	ldrh	r2, [r7, #30]
 800de60:	8abb      	ldrh	r3, [r7, #20]
 800de62:	429a      	cmp	r2, r3
 800de64:	d906      	bls.n	800de74 <mem_trim+0xb0>
 800de66:	4b55      	ldr	r3, [pc, #340]	; (800dfbc <mem_trim+0x1f8>)
 800de68:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800de6c:	4956      	ldr	r1, [pc, #344]	; (800dfc8 <mem_trim+0x204>)
 800de6e:	4855      	ldr	r0, [pc, #340]	; (800dfc4 <mem_trim+0x200>)
 800de70:	f00a f944 	bl	80180fc <iprintf>
  if (newsize > size) {
 800de74:	8bfa      	ldrh	r2, [r7, #30]
 800de76:	8abb      	ldrh	r3, [r7, #20]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d901      	bls.n	800de80 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800de7c:	2300      	movs	r3, #0
 800de7e:	e095      	b.n	800dfac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800de80:	8bfa      	ldrh	r2, [r7, #30]
 800de82:	8abb      	ldrh	r3, [r7, #20]
 800de84:	429a      	cmp	r2, r3
 800de86:	d101      	bne.n	800de8c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	e08f      	b.n	800dfac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800de8c:	484f      	ldr	r0, [pc, #316]	; (800dfcc <mem_trim+0x208>)
 800de8e:	f00a f88d 	bl	8017fac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff fdb4 	bl	800da04 <ptr_to_mem>
 800de9c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	791b      	ldrb	r3, [r3, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d13f      	bne.n	800df26 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800deae:	d106      	bne.n	800debe <mem_trim+0xfa>
 800deb0:	4b42      	ldr	r3, [pc, #264]	; (800dfbc <mem_trim+0x1f8>)
 800deb2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800deb6:	4946      	ldr	r1, [pc, #280]	; (800dfd0 <mem_trim+0x20c>)
 800deb8:	4842      	ldr	r0, [pc, #264]	; (800dfc4 <mem_trim+0x200>)
 800deba:	f00a f91f 	bl	80180fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dec4:	8afa      	ldrh	r2, [r7, #22]
 800dec6:	8bfb      	ldrh	r3, [r7, #30]
 800dec8:	4413      	add	r3, r2
 800deca:	b29b      	uxth	r3, r3
 800decc:	3308      	adds	r3, #8
 800dece:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ded0:	4b40      	ldr	r3, [pc, #256]	; (800dfd4 <mem_trim+0x210>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d106      	bne.n	800dee8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800deda:	89fb      	ldrh	r3, [r7, #14]
 800dedc:	4618      	mov	r0, r3
 800dede:	f7ff fd91 	bl	800da04 <ptr_to_mem>
 800dee2:	4603      	mov	r3, r0
 800dee4:	4a3b      	ldr	r2, [pc, #236]	; (800dfd4 <mem_trim+0x210>)
 800dee6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dee8:	89fb      	ldrh	r3, [r7, #14]
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff fd8a 	bl	800da04 <ptr_to_mem>
 800def0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	2200      	movs	r2, #0
 800def6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	89ba      	ldrh	r2, [r7, #12]
 800defc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	8afa      	ldrh	r2, [r7, #22]
 800df02:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	89fa      	ldrh	r2, [r7, #14]
 800df08:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800df12:	d047      	beq.n	800dfa4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff fd73 	bl	800da04 <ptr_to_mem>
 800df1e:	4602      	mov	r2, r0
 800df20:	89fb      	ldrh	r3, [r7, #14]
 800df22:	8053      	strh	r3, [r2, #2]
 800df24:	e03e      	b.n	800dfa4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800df26:	8bfb      	ldrh	r3, [r7, #30]
 800df28:	f103 0214 	add.w	r2, r3, #20
 800df2c:	8abb      	ldrh	r3, [r7, #20]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d838      	bhi.n	800dfa4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800df32:	8afa      	ldrh	r2, [r7, #22]
 800df34:	8bfb      	ldrh	r3, [r7, #30]
 800df36:	4413      	add	r3, r2
 800df38:	b29b      	uxth	r3, r3
 800df3a:	3308      	adds	r3, #8
 800df3c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	881b      	ldrh	r3, [r3, #0]
 800df42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800df46:	d106      	bne.n	800df56 <mem_trim+0x192>
 800df48:	4b1c      	ldr	r3, [pc, #112]	; (800dfbc <mem_trim+0x1f8>)
 800df4a:	f240 3216 	movw	r2, #790	; 0x316
 800df4e:	4920      	ldr	r1, [pc, #128]	; (800dfd0 <mem_trim+0x20c>)
 800df50:	481c      	ldr	r0, [pc, #112]	; (800dfc4 <mem_trim+0x200>)
 800df52:	f00a f8d3 	bl	80180fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800df56:	89fb      	ldrh	r3, [r7, #14]
 800df58:	4618      	mov	r0, r3
 800df5a:	f7ff fd53 	bl	800da04 <ptr_to_mem>
 800df5e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800df60:	4b1c      	ldr	r3, [pc, #112]	; (800dfd4 <mem_trim+0x210>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	693a      	ldr	r2, [r7, #16]
 800df66:	429a      	cmp	r2, r3
 800df68:	d202      	bcs.n	800df70 <mem_trim+0x1ac>
      lfree = mem2;
 800df6a:	4a1a      	ldr	r2, [pc, #104]	; (800dfd4 <mem_trim+0x210>)
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	2200      	movs	r2, #0
 800df74:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	881a      	ldrh	r2, [r3, #0]
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	8afa      	ldrh	r2, [r7, #22]
 800df82:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	89fa      	ldrh	r2, [r7, #14]
 800df88:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800df92:	d007      	beq.n	800dfa4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff fd33 	bl	800da04 <ptr_to_mem>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	89fb      	ldrh	r3, [r7, #14]
 800dfa2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dfa4:	4809      	ldr	r0, [pc, #36]	; (800dfcc <mem_trim+0x208>)
 800dfa6:	f00a f810 	bl	8017fca <sys_mutex_unlock>
  return rmem;
 800dfaa:	687b      	ldr	r3, [r7, #4]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3720      	adds	r7, #32
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	240217c4 	.word	0x240217c4
 800dfb8:	240217c8 	.word	0x240217c8
 800dfbc:	08019420 	.word	0x08019420
 800dfc0:	080195ac 	.word	0x080195ac
 800dfc4:	08019468 	.word	0x08019468
 800dfc8:	080195c4 	.word	0x080195c4
 800dfcc:	240217cc 	.word	0x240217cc
 800dfd0:	080195e4 	.word	0x080195e4
 800dfd4:	240217d0 	.word	0x240217d0

0800dfd8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b088      	sub	sp, #32
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dfe2:	88fb      	ldrh	r3, [r7, #6]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <mem_malloc+0x14>
    return NULL;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	e0e2      	b.n	800e1b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dfec:	88fb      	ldrh	r3, [r7, #6]
 800dfee:	3303      	adds	r3, #3
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	f023 0303 	bic.w	r3, r3, #3
 800dff6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dff8:	8bbb      	ldrh	r3, [r7, #28]
 800dffa:	2b0b      	cmp	r3, #11
 800dffc:	d801      	bhi.n	800e002 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dffe:	230c      	movs	r3, #12
 800e000:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e002:	8bbb      	ldrh	r3, [r7, #28]
 800e004:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e008:	d803      	bhi.n	800e012 <mem_malloc+0x3a>
 800e00a:	8bba      	ldrh	r2, [r7, #28]
 800e00c:	88fb      	ldrh	r3, [r7, #6]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d201      	bcs.n	800e016 <mem_malloc+0x3e>
    return NULL;
 800e012:	2300      	movs	r3, #0
 800e014:	e0cd      	b.n	800e1b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e016:	4869      	ldr	r0, [pc, #420]	; (800e1bc <mem_malloc+0x1e4>)
 800e018:	f009 ffc8 	bl	8017fac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e01c:	4b68      	ldr	r3, [pc, #416]	; (800e1c0 <mem_malloc+0x1e8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4618      	mov	r0, r3
 800e022:	f7ff fd01 	bl	800da28 <mem_to_ptr>
 800e026:	4603      	mov	r3, r0
 800e028:	83fb      	strh	r3, [r7, #30]
 800e02a:	e0b7      	b.n	800e19c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e02c:	8bfb      	ldrh	r3, [r7, #30]
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff fce8 	bl	800da04 <ptr_to_mem>
 800e034:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	791b      	ldrb	r3, [r3, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f040 80a7 	bne.w	800e18e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	461a      	mov	r2, r3
 800e046:	8bfb      	ldrh	r3, [r7, #30]
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	f1a3 0208 	sub.w	r2, r3, #8
 800e04e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e050:	429a      	cmp	r2, r3
 800e052:	f0c0 809c 	bcc.w	800e18e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	461a      	mov	r2, r3
 800e05c:	8bfb      	ldrh	r3, [r7, #30]
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	f1a3 0208 	sub.w	r2, r3, #8
 800e064:	8bbb      	ldrh	r3, [r7, #28]
 800e066:	3314      	adds	r3, #20
 800e068:	429a      	cmp	r2, r3
 800e06a:	d333      	bcc.n	800e0d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e06c:	8bfa      	ldrh	r2, [r7, #30]
 800e06e:	8bbb      	ldrh	r3, [r7, #28]
 800e070:	4413      	add	r3, r2
 800e072:	b29b      	uxth	r3, r3
 800e074:	3308      	adds	r3, #8
 800e076:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e078:	8a7b      	ldrh	r3, [r7, #18]
 800e07a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e07e:	d106      	bne.n	800e08e <mem_malloc+0xb6>
 800e080:	4b50      	ldr	r3, [pc, #320]	; (800e1c4 <mem_malloc+0x1ec>)
 800e082:	f240 3287 	movw	r2, #903	; 0x387
 800e086:	4950      	ldr	r1, [pc, #320]	; (800e1c8 <mem_malloc+0x1f0>)
 800e088:	4850      	ldr	r0, [pc, #320]	; (800e1cc <mem_malloc+0x1f4>)
 800e08a:	f00a f837 	bl	80180fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e08e:	8a7b      	ldrh	r3, [r7, #18]
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff fcb7 	bl	800da04 <ptr_to_mem>
 800e096:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	881a      	ldrh	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	8bfa      	ldrh	r2, [r7, #30]
 800e0aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	8a7a      	ldrh	r2, [r7, #18]
 800e0b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e0c0:	d00b      	beq.n	800e0da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff fc9c 	bl	800da04 <ptr_to_mem>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	8a7b      	ldrh	r3, [r7, #18]
 800e0d0:	8053      	strh	r3, [r2, #2]
 800e0d2:	e002      	b.n	800e0da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e0da:	4b39      	ldr	r3, [pc, #228]	; (800e1c0 <mem_malloc+0x1e8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	697a      	ldr	r2, [r7, #20]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d127      	bne.n	800e134 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e0e4:	4b36      	ldr	r3, [pc, #216]	; (800e1c0 <mem_malloc+0x1e8>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e0ea:	e005      	b.n	800e0f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7ff fc87 	bl	800da04 <ptr_to_mem>
 800e0f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	791b      	ldrb	r3, [r3, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d004      	beq.n	800e10a <mem_malloc+0x132>
 800e100:	4b33      	ldr	r3, [pc, #204]	; (800e1d0 <mem_malloc+0x1f8>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	69ba      	ldr	r2, [r7, #24]
 800e106:	429a      	cmp	r2, r3
 800e108:	d1f0      	bne.n	800e0ec <mem_malloc+0x114>
          }
          lfree = cur;
 800e10a:	4a2d      	ldr	r2, [pc, #180]	; (800e1c0 <mem_malloc+0x1e8>)
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e110:	4b2b      	ldr	r3, [pc, #172]	; (800e1c0 <mem_malloc+0x1e8>)
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	4b2e      	ldr	r3, [pc, #184]	; (800e1d0 <mem_malloc+0x1f8>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d00b      	beq.n	800e134 <mem_malloc+0x15c>
 800e11c:	4b28      	ldr	r3, [pc, #160]	; (800e1c0 <mem_malloc+0x1e8>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	791b      	ldrb	r3, [r3, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d006      	beq.n	800e134 <mem_malloc+0x15c>
 800e126:	4b27      	ldr	r3, [pc, #156]	; (800e1c4 <mem_malloc+0x1ec>)
 800e128:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e12c:	4929      	ldr	r1, [pc, #164]	; (800e1d4 <mem_malloc+0x1fc>)
 800e12e:	4827      	ldr	r0, [pc, #156]	; (800e1cc <mem_malloc+0x1f4>)
 800e130:	f009 ffe4 	bl	80180fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e134:	4821      	ldr	r0, [pc, #132]	; (800e1bc <mem_malloc+0x1e4>)
 800e136:	f009 ff48 	bl	8017fca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e13a:	8bba      	ldrh	r2, [r7, #28]
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	4413      	add	r3, r2
 800e140:	3308      	adds	r3, #8
 800e142:	4a23      	ldr	r2, [pc, #140]	; (800e1d0 <mem_malloc+0x1f8>)
 800e144:	6812      	ldr	r2, [r2, #0]
 800e146:	4293      	cmp	r3, r2
 800e148:	d906      	bls.n	800e158 <mem_malloc+0x180>
 800e14a:	4b1e      	ldr	r3, [pc, #120]	; (800e1c4 <mem_malloc+0x1ec>)
 800e14c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e150:	4921      	ldr	r1, [pc, #132]	; (800e1d8 <mem_malloc+0x200>)
 800e152:	481e      	ldr	r0, [pc, #120]	; (800e1cc <mem_malloc+0x1f4>)
 800e154:	f009 ffd2 	bl	80180fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	f003 0303 	and.w	r3, r3, #3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d006      	beq.n	800e170 <mem_malloc+0x198>
 800e162:	4b18      	ldr	r3, [pc, #96]	; (800e1c4 <mem_malloc+0x1ec>)
 800e164:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e168:	491c      	ldr	r1, [pc, #112]	; (800e1dc <mem_malloc+0x204>)
 800e16a:	4818      	ldr	r0, [pc, #96]	; (800e1cc <mem_malloc+0x1f4>)
 800e16c:	f009 ffc6 	bl	80180fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	f003 0303 	and.w	r3, r3, #3
 800e176:	2b00      	cmp	r3, #0
 800e178:	d006      	beq.n	800e188 <mem_malloc+0x1b0>
 800e17a:	4b12      	ldr	r3, [pc, #72]	; (800e1c4 <mem_malloc+0x1ec>)
 800e17c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e180:	4917      	ldr	r1, [pc, #92]	; (800e1e0 <mem_malloc+0x208>)
 800e182:	4812      	ldr	r0, [pc, #72]	; (800e1cc <mem_malloc+0x1f4>)
 800e184:	f009 ffba 	bl	80180fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	3308      	adds	r3, #8
 800e18c:	e011      	b.n	800e1b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e18e:	8bfb      	ldrh	r3, [r7, #30]
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff fc37 	bl	800da04 <ptr_to_mem>
 800e196:	4603      	mov	r3, r0
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e19c:	8bfa      	ldrh	r2, [r7, #30]
 800e19e:	8bbb      	ldrh	r3, [r7, #28]
 800e1a0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	f4ff af41 	bcc.w	800e02c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e1aa:	4804      	ldr	r0, [pc, #16]	; (800e1bc <mem_malloc+0x1e4>)
 800e1ac:	f009 ff0d 	bl	8017fca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3720      	adds	r7, #32
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	240217cc 	.word	0x240217cc
 800e1c0:	240217d0 	.word	0x240217d0
 800e1c4:	08019420 	.word	0x08019420
 800e1c8:	080195e4 	.word	0x080195e4
 800e1cc:	08019468 	.word	0x08019468
 800e1d0:	240217c8 	.word	0x240217c8
 800e1d4:	080195f8 	.word	0x080195f8
 800e1d8:	08019614 	.word	0x08019614
 800e1dc:	08019644 	.word	0x08019644
 800e1e0:	08019674 	.word	0x08019674

0800e1e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	3303      	adds	r3, #3
 800e1fa:	f023 0303 	bic.w	r3, r3, #3
 800e1fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e200:	2300      	movs	r3, #0
 800e202:	60fb      	str	r3, [r7, #12]
 800e204:	e011      	b.n	800e22a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	881b      	ldrh	r3, [r3, #0]
 800e21c:	461a      	mov	r2, r3
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	4413      	add	r3, r2
 800e222:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	3301      	adds	r3, #1
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	885b      	ldrh	r3, [r3, #2]
 800e22e:	461a      	mov	r2, r3
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4293      	cmp	r3, r2
 800e234:	dbe7      	blt.n	800e206 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e236:	bf00      	nop
 800e238:	bf00      	nop
 800e23a:	3714      	adds	r7, #20
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e24a:	2300      	movs	r3, #0
 800e24c:	80fb      	strh	r3, [r7, #6]
 800e24e:	e009      	b.n	800e264 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e250:	88fb      	ldrh	r3, [r7, #6]
 800e252:	4a08      	ldr	r2, [pc, #32]	; (800e274 <memp_init+0x30>)
 800e254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7ff ffc3 	bl	800e1e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e25e:	88fb      	ldrh	r3, [r7, #6]
 800e260:	3301      	adds	r3, #1
 800e262:	80fb      	strh	r3, [r7, #6]
 800e264:	88fb      	ldrh	r3, [r7, #6]
 800e266:	2b0d      	cmp	r3, #13
 800e268:	d9f2      	bls.n	800e250 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e26a:	bf00      	nop
 800e26c:	bf00      	nop
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	0801bef8 	.word	0x0801bef8

0800e278 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e280:	f009 fed6 	bl	8018030 <sys_arch_protect>
 800e284:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d015      	beq.n	800e2c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	6812      	ldr	r2, [r2, #0]
 800e29c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	f003 0303 	and.w	r3, r3, #3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d006      	beq.n	800e2b6 <do_memp_malloc_pool+0x3e>
 800e2a8:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <do_memp_malloc_pool+0x58>)
 800e2aa:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e2ae:	4909      	ldr	r1, [pc, #36]	; (800e2d4 <do_memp_malloc_pool+0x5c>)
 800e2b0:	4809      	ldr	r0, [pc, #36]	; (800e2d8 <do_memp_malloc_pool+0x60>)
 800e2b2:	f009 ff23 	bl	80180fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f009 fec8 	bl	801804c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	e003      	b.n	800e2c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f009 fec3 	bl	801804c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	08019698 	.word	0x08019698
 800e2d4:	080196c8 	.word	0x080196c8
 800e2d8:	080196ec 	.word	0x080196ec

0800e2dc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d106      	bne.n	800e2f8 <memp_malloc_pool+0x1c>
 800e2ea:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <memp_malloc_pool+0x38>)
 800e2ec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800e2f0:	4909      	ldr	r1, [pc, #36]	; (800e318 <memp_malloc_pool+0x3c>)
 800e2f2:	480a      	ldr	r0, [pc, #40]	; (800e31c <memp_malloc_pool+0x40>)
 800e2f4:	f009 ff02 	bl	80180fc <iprintf>
  if (desc == NULL) {
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d101      	bne.n	800e302 <memp_malloc_pool+0x26>
    return NULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	e003      	b.n	800e30a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff ffb8 	bl	800e278 <do_memp_malloc_pool>
 800e308:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	08019698 	.word	0x08019698
 800e318:	08019714 	.word	0x08019714
 800e31c:	080196ec 	.word	0x080196ec

0800e320 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e32a:	79fb      	ldrb	r3, [r7, #7]
 800e32c:	2b0d      	cmp	r3, #13
 800e32e:	d908      	bls.n	800e342 <memp_malloc+0x22>
 800e330:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <memp_malloc+0x3c>)
 800e332:	f240 1257 	movw	r2, #343	; 0x157
 800e336:	490a      	ldr	r1, [pc, #40]	; (800e360 <memp_malloc+0x40>)
 800e338:	480a      	ldr	r0, [pc, #40]	; (800e364 <memp_malloc+0x44>)
 800e33a:	f009 fedf 	bl	80180fc <iprintf>
 800e33e:	2300      	movs	r3, #0
 800e340:	e008      	b.n	800e354 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e342:	79fb      	ldrb	r3, [r7, #7]
 800e344:	4a08      	ldr	r2, [pc, #32]	; (800e368 <memp_malloc+0x48>)
 800e346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff ff94 	bl	800e278 <do_memp_malloc_pool>
 800e350:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e352:	68fb      	ldr	r3, [r7, #12]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	08019698 	.word	0x08019698
 800e360:	08019728 	.word	0x08019728
 800e364:	080196ec 	.word	0x080196ec
 800e368:	0801bef8 	.word	0x0801bef8

0800e36c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	f003 0303 	and.w	r3, r3, #3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d006      	beq.n	800e38e <do_memp_free_pool+0x22>
 800e380:	4b0d      	ldr	r3, [pc, #52]	; (800e3b8 <do_memp_free_pool+0x4c>)
 800e382:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e386:	490d      	ldr	r1, [pc, #52]	; (800e3bc <do_memp_free_pool+0x50>)
 800e388:	480d      	ldr	r0, [pc, #52]	; (800e3c0 <do_memp_free_pool+0x54>)
 800e38a:	f009 feb7 	bl	80180fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e392:	f009 fe4d 	bl	8018030 <sys_arch_protect>
 800e396:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	689b      	ldr	r3, [r3, #8]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e3aa:	68b8      	ldr	r0, [r7, #8]
 800e3ac:	f009 fe4e 	bl	801804c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e3b0:	bf00      	nop
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	08019698 	.word	0x08019698
 800e3bc:	08019748 	.word	0x08019748
 800e3c0:	080196ec 	.word	0x080196ec

0800e3c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d106      	bne.n	800e3e2 <memp_free_pool+0x1e>
 800e3d4:	4b0a      	ldr	r3, [pc, #40]	; (800e400 <memp_free_pool+0x3c>)
 800e3d6:	f240 1295 	movw	r2, #405	; 0x195
 800e3da:	490a      	ldr	r1, [pc, #40]	; (800e404 <memp_free_pool+0x40>)
 800e3dc:	480a      	ldr	r0, [pc, #40]	; (800e408 <memp_free_pool+0x44>)
 800e3de:	f009 fe8d 	bl	80180fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d007      	beq.n	800e3f8 <memp_free_pool+0x34>
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d004      	beq.n	800e3f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff ffbb 	bl	800e36c <do_memp_free_pool>
 800e3f6:	e000      	b.n	800e3fa <memp_free_pool+0x36>
    return;
 800e3f8:	bf00      	nop
}
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	08019698 	.word	0x08019698
 800e404:	08019714 	.word	0x08019714
 800e408:	080196ec 	.word	0x080196ec

0800e40c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	6039      	str	r1, [r7, #0]
 800e416:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e418:	79fb      	ldrb	r3, [r7, #7]
 800e41a:	2b0d      	cmp	r3, #13
 800e41c:	d907      	bls.n	800e42e <memp_free+0x22>
 800e41e:	4b0c      	ldr	r3, [pc, #48]	; (800e450 <memp_free+0x44>)
 800e420:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e424:	490b      	ldr	r1, [pc, #44]	; (800e454 <memp_free+0x48>)
 800e426:	480c      	ldr	r0, [pc, #48]	; (800e458 <memp_free+0x4c>)
 800e428:	f009 fe68 	bl	80180fc <iprintf>
 800e42c:	e00c      	b.n	800e448 <memp_free+0x3c>

  if (mem == NULL) {
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d008      	beq.n	800e446 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e434:	79fb      	ldrb	r3, [r7, #7]
 800e436:	4a09      	ldr	r2, [pc, #36]	; (800e45c <memp_free+0x50>)
 800e438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	4618      	mov	r0, r3
 800e440:	f7ff ff94 	bl	800e36c <do_memp_free_pool>
 800e444:	e000      	b.n	800e448 <memp_free+0x3c>
    return;
 800e446:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	08019698 	.word	0x08019698
 800e454:	08019768 	.word	0x08019768
 800e458:	080196ec 	.word	0x080196ec
 800e45c:	0801bef8 	.word	0x0801bef8

0800e460 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e460:	b480      	push	{r7}
 800e462:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e464:	bf00      	nop
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
	...

0800e470 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d108      	bne.n	800e496 <netif_add+0x26>
 800e484:	4b5c      	ldr	r3, [pc, #368]	; (800e5f8 <netif_add+0x188>)
 800e486:	f240 1227 	movw	r2, #295	; 0x127
 800e48a:	495c      	ldr	r1, [pc, #368]	; (800e5fc <netif_add+0x18c>)
 800e48c:	485c      	ldr	r0, [pc, #368]	; (800e600 <netif_add+0x190>)
 800e48e:	f009 fe35 	bl	80180fc <iprintf>
 800e492:	2300      	movs	r3, #0
 800e494:	e0ac      	b.n	800e5f0 <netif_add+0x180>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d108      	bne.n	800e4ae <netif_add+0x3e>
 800e49c:	4b56      	ldr	r3, [pc, #344]	; (800e5f8 <netif_add+0x188>)
 800e49e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e4a2:	4958      	ldr	r1, [pc, #352]	; (800e604 <netif_add+0x194>)
 800e4a4:	4856      	ldr	r0, [pc, #344]	; (800e600 <netif_add+0x190>)
 800e4a6:	f009 fe29 	bl	80180fc <iprintf>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e0a0      	b.n	800e5f0 <netif_add+0x180>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d101      	bne.n	800e4b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e4b4:	4b54      	ldr	r3, [pc, #336]	; (800e608 <netif_add+0x198>)
 800e4b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e4be:	4b52      	ldr	r3, [pc, #328]	; (800e608 <netif_add+0x198>)
 800e4c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e4c8:	4b4f      	ldr	r3, [pc, #316]	; (800e608 <netif_add+0x198>)
 800e4ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	4a4a      	ldr	r2, [pc, #296]	; (800e60c <netif_add+0x19c>)
 800e4e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3328      	adds	r3, #40	; 0x28
 800e4f6:	2204      	movs	r2, #4
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f009 fdf6 	bl	80180ec <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2200      	movs	r2, #0
 800e50a:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6a3a      	ldr	r2, [r7, #32]
 800e510:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 800e512:	4b3f      	ldr	r3, [pc, #252]	; (800e610 <netif_add+0x1a0>)
 800e514:	781a      	ldrb	r2, [r3, #0]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e520:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	68b9      	ldr	r1, [r7, #8]
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 f91b 	bl	800e764 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	4798      	blx	r3
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <netif_add+0xce>
    return NULL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	e058      	b.n	800e5f0 <netif_add+0x180>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e544:	2bff      	cmp	r3, #255	; 0xff
 800e546:	d103      	bne.n	800e550 <netif_add+0xe0>
        netif->num = 0;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e554:	4b2f      	ldr	r3, [pc, #188]	; (800e614 <netif_add+0x1a4>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	617b      	str	r3, [r7, #20]
 800e55a:	e02b      	b.n	800e5b4 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	429a      	cmp	r2, r3
 800e562:	d106      	bne.n	800e572 <netif_add+0x102>
 800e564:	4b24      	ldr	r3, [pc, #144]	; (800e5f8 <netif_add+0x188>)
 800e566:	f240 128b 	movw	r2, #395	; 0x18b
 800e56a:	492b      	ldr	r1, [pc, #172]	; (800e618 <netif_add+0x1a8>)
 800e56c:	4824      	ldr	r0, [pc, #144]	; (800e600 <netif_add+0x190>)
 800e56e:	f009 fdc5 	bl	80180fc <iprintf>
        num_netifs++;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	3301      	adds	r3, #1
 800e576:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	2bff      	cmp	r3, #255	; 0xff
 800e57c:	dd06      	ble.n	800e58c <netif_add+0x11c>
 800e57e:	4b1e      	ldr	r3, [pc, #120]	; (800e5f8 <netif_add+0x188>)
 800e580:	f240 128d 	movw	r2, #397	; 0x18d
 800e584:	4925      	ldr	r1, [pc, #148]	; (800e61c <netif_add+0x1ac>)
 800e586:	481e      	ldr	r0, [pc, #120]	; (800e600 <netif_add+0x190>)
 800e588:	f009 fdb8 	bl	80180fc <iprintf>
        if (netif2->num == netif->num) {
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e598:	429a      	cmp	r2, r3
 800e59a:	d108      	bne.n	800e5ae <netif_add+0x13e>
          netif->num++;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 800e5ac:	e005      	b.n	800e5ba <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d1d0      	bne.n	800e55c <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1be      	bne.n	800e53e <netif_add+0xce>
  }
  if (netif->num == 254) {
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5c6:	2bfe      	cmp	r3, #254	; 0xfe
 800e5c8:	d103      	bne.n	800e5d2 <netif_add+0x162>
    netif_num = 0;
 800e5ca:	4b11      	ldr	r3, [pc, #68]	; (800e610 <netif_add+0x1a0>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	701a      	strb	r2, [r3, #0]
 800e5d0:	e006      	b.n	800e5e0 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5d8:	3301      	adds	r3, #1
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	4b0c      	ldr	r3, [pc, #48]	; (800e610 <netif_add+0x1a0>)
 800e5de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e5e0:	4b0c      	ldr	r3, [pc, #48]	; (800e614 <netif_add+0x1a4>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e5e8:	4a0a      	ldr	r2, [pc, #40]	; (800e614 <netif_add+0x1a4>)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3718      	adds	r7, #24
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	08019784 	.word	0x08019784
 800e5fc:	08019818 	.word	0x08019818
 800e600:	080197d4 	.word	0x080197d4
 800e604:	08019834 	.word	0x08019834
 800e608:	0801bf70 	.word	0x0801bf70
 800e60c:	0800ea5f 	.word	0x0800ea5f
 800e610:	2402180c 	.word	0x2402180c
 800e614:	24024e88 	.word	0x24024e88
 800e618:	08019858 	.word	0x08019858
 800e61c:	0801986c 	.word	0x0801986c

0800e620 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f002 fbaf 	bl	8010d90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e632:	6839      	ldr	r1, [r7, #0]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f007 f831 	bl	801569c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e63a:	bf00      	nop
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b086      	sub	sp, #24
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d106      	bne.n	800e664 <netif_do_set_ipaddr+0x20>
 800e656:	4b21      	ldr	r3, [pc, #132]	; (800e6dc <netif_do_set_ipaddr+0x98>)
 800e658:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e65c:	4920      	ldr	r1, [pc, #128]	; (800e6e0 <netif_do_set_ipaddr+0x9c>)
 800e65e:	4821      	ldr	r0, [pc, #132]	; (800e6e4 <netif_do_set_ipaddr+0xa0>)
 800e660:	f009 fd4c 	bl	80180fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <netif_do_set_ipaddr+0x34>
 800e66a:	4b1c      	ldr	r3, [pc, #112]	; (800e6dc <netif_do_set_ipaddr+0x98>)
 800e66c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e670:	491b      	ldr	r1, [pc, #108]	; (800e6e0 <netif_do_set_ipaddr+0x9c>)
 800e672:	481c      	ldr	r0, [pc, #112]	; (800e6e4 <netif_do_set_ipaddr+0xa0>)
 800e674:	f009 fd42 	bl	80180fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	3304      	adds	r3, #4
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	429a      	cmp	r2, r3
 800e684:	d024      	beq.n	800e6d0 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3304      	adds	r3, #4
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e696:	f107 0314 	add.w	r3, r7, #20
 800e69a:	4619      	mov	r1, r3
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7ff ffbf 	bl	800e620 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <netif_do_set_ipaddr+0x6a>
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	e000      	b.n	800e6b0 <netif_do_set_ipaddr+0x6c>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f000 f8e2 	bl	800e880 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	69db      	ldr	r3, [r3, #28]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <netif_do_set_ipaddr+0x88>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	69db      	ldr	r3, [r3, #28]
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	4798      	blx	r3
    return 1; /* address changed */
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e000      	b.n	800e6d2 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	08019784 	.word	0x08019784
 800e6e0:	0801989c 	.word	0x0801989c
 800e6e4:	080197d4 	.word	0x080197d4

0800e6e8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	3308      	adds	r3, #8
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d00a      	beq.n	800e718 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d002      	beq.n	800e70e <netif_do_set_netmask+0x26>
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	e000      	b.n	800e710 <netif_do_set_netmask+0x28>
 800e70e:	2300      	movs	r3, #0
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e714:	2301      	movs	r3, #1
 800e716:	e000      	b.n	800e71a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e726:	b480      	push	{r7}
 800e728:	b085      	sub	sp, #20
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	60f8      	str	r0, [r7, #12]
 800e72e:	60b9      	str	r1, [r7, #8]
 800e730:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	330c      	adds	r3, #12
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d00a      	beq.n	800e756 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d002      	beq.n	800e74c <netif_do_set_gw+0x26>
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	e000      	b.n	800e74e <netif_do_set_gw+0x28>
 800e74c:	2300      	movs	r3, #0
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e752:	2301      	movs	r3, #1
 800e754:	e000      	b.n	800e758 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e756:	2300      	movs	r3, #0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
 800e770:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e772:	2300      	movs	r3, #0
 800e774:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e776:	2300      	movs	r3, #0
 800e778:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e780:	4b1c      	ldr	r3, [pc, #112]	; (800e7f4 <netif_set_addr+0x90>)
 800e782:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e78a:	4b1a      	ldr	r3, [pc, #104]	; (800e7f4 <netif_set_addr+0x90>)
 800e78c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d101      	bne.n	800e798 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e794:	4b17      	ldr	r3, [pc, #92]	; (800e7f4 <netif_set_addr+0x90>)
 800e796:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <netif_set_addr+0x42>
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <netif_set_addr+0x46>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e000      	b.n	800e7ac <netif_set_addr+0x48>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d006      	beq.n	800e7c2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e7b4:	f107 0310 	add.w	r3, r7, #16
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7ff ff41 	bl	800e644 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e7c2:	69fa      	ldr	r2, [r7, #28]
 800e7c4:	6879      	ldr	r1, [r7, #4]
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f7ff ff8e 	bl	800e6e8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e7cc:	69ba      	ldr	r2, [r7, #24]
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f7ff ffa8 	bl	800e726 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d106      	bne.n	800e7ea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e7dc:	f107 0310 	add.w	r3, r7, #16
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f7ff ff2d 	bl	800e644 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e7ea:	bf00      	nop
 800e7ec:	3720      	adds	r7, #32
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	0801bf70 	.word	0x0801bf70

0800e7f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e800:	4a04      	ldr	r2, [pc, #16]	; (800e814 <netif_set_default+0x1c>)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e806:	bf00      	nop
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	24024e8c 	.word	0x24024e8c

0800e818 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d107      	bne.n	800e836 <netif_set_up+0x1e>
 800e826:	4b13      	ldr	r3, [pc, #76]	; (800e874 <netif_set_up+0x5c>)
 800e828:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e82c:	4912      	ldr	r1, [pc, #72]	; (800e878 <netif_set_up+0x60>)
 800e82e:	4813      	ldr	r0, [pc, #76]	; (800e87c <netif_set_up+0x64>)
 800e830:	f009 fc64 	bl	80180fc <iprintf>
 800e834:	e01b      	b.n	800e86e <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e83c:	f003 0301 	and.w	r3, r3, #1
 800e840:	2b00      	cmp	r3, #0
 800e842:	d114      	bne.n	800e86e <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e84a:	f043 0301 	orr.w	r3, r3, #1
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	69db      	ldr	r3, [r3, #28]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d003      	beq.n	800e866 <netif_set_up+0x4e>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	69db      	ldr	r3, [r3, #28]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e866:	2103      	movs	r1, #3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f809 	bl	800e880 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	08019784 	.word	0x08019784
 800e878:	0801990c 	.word	0x0801990c
 800e87c:	080197d4 	.word	0x080197d4

0800e880 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	460b      	mov	r3, r1
 800e88a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d106      	bne.n	800e8a0 <netif_issue_reports+0x20>
 800e892:	4b18      	ldr	r3, [pc, #96]	; (800e8f4 <netif_issue_reports+0x74>)
 800e894:	f240 326d 	movw	r2, #877	; 0x36d
 800e898:	4917      	ldr	r1, [pc, #92]	; (800e8f8 <netif_issue_reports+0x78>)
 800e89a:	4818      	ldr	r0, [pc, #96]	; (800e8fc <netif_issue_reports+0x7c>)
 800e89c:	f009 fc2e 	bl	80180fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e8a6:	f003 0304 	and.w	r3, r3, #4
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d01e      	beq.n	800e8ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e8b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d017      	beq.n	800e8ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e8bc:	78fb      	ldrb	r3, [r7, #3]
 800e8be:	f003 0301 	and.w	r3, r3, #1
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d013      	beq.n	800e8ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	3304      	adds	r3, #4
 800e8ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00e      	beq.n	800e8ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e8d6:	f003 0308 	and.w	r3, r3, #8
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d007      	beq.n	800e8ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f007 fef3 	bl	80166d0 <etharp_request>
 800e8ea:	e000      	b.n	800e8ee <netif_issue_reports+0x6e>
    return;
 800e8ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	08019784 	.word	0x08019784
 800e8f8:	08019928 	.word	0x08019928
 800e8fc:	080197d4 	.word	0x080197d4

0800e900 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d107      	bne.n	800e91e <netif_set_down+0x1e>
 800e90e:	4b16      	ldr	r3, [pc, #88]	; (800e968 <netif_set_down+0x68>)
 800e910:	f240 329b 	movw	r2, #923	; 0x39b
 800e914:	4915      	ldr	r1, [pc, #84]	; (800e96c <netif_set_down+0x6c>)
 800e916:	4816      	ldr	r0, [pc, #88]	; (800e970 <netif_set_down+0x70>)
 800e918:	f009 fbf0 	bl	80180fc <iprintf>
 800e91c:	e021      	b.n	800e962 <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d01a      	beq.n	800e962 <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e932:	f023 0301 	bic.w	r3, r3, #1
 800e936:	b2da      	uxtb	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e944:	f003 0308 	and.w	r3, r3, #8
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d002      	beq.n	800e952 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f007 fa31 	bl	8015db4 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <netif_set_down+0x62>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	69db      	ldr	r3, [r3, #28]
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	4798      	blx	r3
  }
}
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	08019784 	.word	0x08019784
 800e96c:	0801994c 	.word	0x0801994c
 800e970:	080197d4 	.word	0x080197d4

0800e974 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d107      	bne.n	800e992 <netif_set_link_up+0x1e>
 800e982:	4b13      	ldr	r3, [pc, #76]	; (800e9d0 <netif_set_link_up+0x5c>)
 800e984:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e988:	4912      	ldr	r1, [pc, #72]	; (800e9d4 <netif_set_link_up+0x60>)
 800e98a:	4813      	ldr	r0, [pc, #76]	; (800e9d8 <netif_set_link_up+0x64>)
 800e98c:	f009 fbb6 	bl	80180fc <iprintf>
 800e990:	e01b      	b.n	800e9ca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e998:	f003 0304 	and.w	r3, r3, #4
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d114      	bne.n	800e9ca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e9a6:	f043 0304 	orr.w	r3, r3, #4
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e9b2:	2103      	movs	r1, #3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff ff63 	bl	800e880 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d003      	beq.n	800e9ca <netif_set_link_up+0x56>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a1b      	ldr	r3, [r3, #32]
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	08019784 	.word	0x08019784
 800e9d4:	0801996c 	.word	0x0801996c
 800e9d8:	080197d4 	.word	0x080197d4

0800e9dc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d107      	bne.n	800e9fa <netif_set_link_down+0x1e>
 800e9ea:	4b11      	ldr	r3, [pc, #68]	; (800ea30 <netif_set_link_down+0x54>)
 800e9ec:	f240 4206 	movw	r2, #1030	; 0x406
 800e9f0:	4910      	ldr	r1, [pc, #64]	; (800ea34 <netif_set_link_down+0x58>)
 800e9f2:	4811      	ldr	r0, [pc, #68]	; (800ea38 <netif_set_link_down+0x5c>)
 800e9f4:	f009 fb82 	bl	80180fc <iprintf>
 800e9f8:	e017      	b.n	800ea2a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ea00:	f003 0304 	and.w	r3, r3, #4
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d010      	beq.n	800ea2a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ea0e:	f023 0304 	bic.w	r3, r3, #4
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a1b      	ldr	r3, [r3, #32]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d003      	beq.n	800ea2a <netif_set_link_down+0x4e>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a1b      	ldr	r3, [r3, #32]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	08019784 	.word	0x08019784
 800ea34:	08019990 	.word	0x08019990
 800ea38:	080197d4 	.word	0x080197d4

0800ea3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	621a      	str	r2, [r3, #32]
  }
}
 800ea52:	bf00      	nop
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b085      	sub	sp, #20
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	60f8      	str	r0, [r7, #12]
 800ea66:	60b9      	str	r1, [r7, #8]
 800ea68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ea6a:	f06f 030b 	mvn.w	r3, #11
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3714      	adds	r7, #20
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
	...

0800ea7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	4603      	mov	r3, r0
 800ea84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d013      	beq.n	800eab4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ea8c:	4b0d      	ldr	r3, [pc, #52]	; (800eac4 <netif_get_by_index+0x48>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	60fb      	str	r3, [r7, #12]
 800ea92:	e00c      	b.n	800eaae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	79fa      	ldrb	r2, [r7, #7]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d101      	bne.n	800eaa8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	e006      	b.n	800eab6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	60fb      	str	r3, [r7, #12]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1ef      	bne.n	800ea94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3714      	adds	r7, #20
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr
 800eac2:	bf00      	nop
 800eac4:	24024e88 	.word	0x24024e88

0800eac8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800eace:	f009 faaf 	bl	8018030 <sys_arch_protect>
 800ead2:	6038      	str	r0, [r7, #0]
 800ead4:	4b0d      	ldr	r3, [pc, #52]	; (800eb0c <pbuf_free_ooseq+0x44>)
 800ead6:	2200      	movs	r2, #0
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	6838      	ldr	r0, [r7, #0]
 800eadc:	f009 fab6 	bl	801804c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eae0:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <pbuf_free_ooseq+0x48>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	607b      	str	r3, [r7, #4]
 800eae6:	e00a      	b.n	800eafe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d003      	beq.n	800eaf8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f002 f98b 	bl	8010e0c <tcp_free_ooseq>
      return;
 800eaf6:	e005      	b.n	800eb04 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	607b      	str	r3, [r7, #4]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1f1      	bne.n	800eae8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	24024e90 	.word	0x24024e90
 800eb10:	24024e98 	.word	0x24024e98

0800eb14 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800eb1c:	f7ff ffd4 	bl	800eac8 <pbuf_free_ooseq>
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800eb2e:	f009 fa7f 	bl	8018030 <sys_arch_protect>
 800eb32:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800eb34:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <pbuf_pool_is_empty+0x4c>)
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800eb3a:	4b0e      	ldr	r3, [pc, #56]	; (800eb74 <pbuf_pool_is_empty+0x4c>)
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f009 fa83 	bl	801804c <sys_arch_unprotect>

  if (!queued) {
 800eb46:	78fb      	ldrb	r3, [r7, #3]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10f      	bne.n	800eb6c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	480a      	ldr	r0, [pc, #40]	; (800eb78 <pbuf_pool_is_empty+0x50>)
 800eb50:	f7fe fdcc 	bl	800d6ec <tcpip_try_callback>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d008      	beq.n	800eb6c <pbuf_pool_is_empty+0x44>
 800eb5a:	f009 fa69 	bl	8018030 <sys_arch_protect>
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	4b04      	ldr	r3, [pc, #16]	; (800eb74 <pbuf_pool_is_empty+0x4c>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	701a      	strb	r2, [r3, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f009 fa70 	bl	801804c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800eb6c:	bf00      	nop
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	24024e90 	.word	0x24024e90
 800eb78:	0800eb15 	.word	0x0800eb15

0800eb7c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	4611      	mov	r1, r2
 800eb88:	461a      	mov	r2, r3
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	80fb      	strh	r3, [r7, #6]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	88fa      	ldrh	r2, [r7, #6]
 800eba2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	88ba      	ldrh	r2, [r7, #4]
 800eba8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ebaa:	8b3b      	ldrh	r3, [r7, #24]
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	7f3a      	ldrb	r2, [r7, #28]
 800ebb6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	73da      	strb	r2, [r3, #15]
}
 800ebc4:	bf00      	nop
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b08c      	sub	sp, #48	; 0x30
 800ebd4:	af02      	add	r7, sp, #8
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	71fb      	strb	r3, [r7, #7]
 800ebda:	460b      	mov	r3, r1
 800ebdc:	80bb      	strh	r3, [r7, #4]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ebe2:	79fb      	ldrb	r3, [r7, #7]
 800ebe4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ebe6:	887b      	ldrh	r3, [r7, #2]
 800ebe8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ebec:	d07f      	beq.n	800ecee <pbuf_alloc+0x11e>
 800ebee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ebf2:	f300 80c8 	bgt.w	800ed86 <pbuf_alloc+0x1b6>
 800ebf6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ebfa:	d010      	beq.n	800ec1e <pbuf_alloc+0x4e>
 800ebfc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ec00:	f300 80c1 	bgt.w	800ed86 <pbuf_alloc+0x1b6>
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d002      	beq.n	800ec0e <pbuf_alloc+0x3e>
 800ec08:	2b41      	cmp	r3, #65	; 0x41
 800ec0a:	f040 80bc 	bne.w	800ed86 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ec0e:	887a      	ldrh	r2, [r7, #2]
 800ec10:	88bb      	ldrh	r3, [r7, #4]
 800ec12:	4619      	mov	r1, r3
 800ec14:	2000      	movs	r0, #0
 800ec16:	f000 f8d1 	bl	800edbc <pbuf_alloc_reference>
 800ec1a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ec1c:	e0bd      	b.n	800ed9a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ec26:	88bb      	ldrh	r3, [r7, #4]
 800ec28:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ec2a:	200d      	movs	r0, #13
 800ec2c:	f7ff fb78 	bl	800e320 <memp_malloc>
 800ec30:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d109      	bne.n	800ec4c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ec38:	f7ff ff76 	bl	800eb28 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ec42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec44:	f000 faa8 	bl	800f198 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	e0a7      	b.n	800ed9c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ec4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec4e:	3303      	adds	r3, #3
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	f023 0303 	bic.w	r3, r3, #3
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	8b7a      	ldrh	r2, [r7, #26]
 800ec60:	4293      	cmp	r3, r2
 800ec62:	bf28      	it	cs
 800ec64:	4613      	movcs	r3, r2
 800ec66:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ec68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec6a:	3310      	adds	r3, #16
 800ec6c:	693a      	ldr	r2, [r7, #16]
 800ec6e:	4413      	add	r3, r2
 800ec70:	3303      	adds	r3, #3
 800ec72:	f023 0303 	bic.w	r3, r3, #3
 800ec76:	4618      	mov	r0, r3
 800ec78:	89f9      	ldrh	r1, [r7, #14]
 800ec7a:	8b7a      	ldrh	r2, [r7, #26]
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	887b      	ldrh	r3, [r7, #2]
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	460b      	mov	r3, r1
 800ec86:	4601      	mov	r1, r0
 800ec88:	6938      	ldr	r0, [r7, #16]
 800ec8a:	f7ff ff77 	bl	800eb7c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	f003 0303 	and.w	r3, r3, #3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d006      	beq.n	800eca8 <pbuf_alloc+0xd8>
 800ec9a:	4b42      	ldr	r3, [pc, #264]	; (800eda4 <pbuf_alloc+0x1d4>)
 800ec9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eca0:	4941      	ldr	r1, [pc, #260]	; (800eda8 <pbuf_alloc+0x1d8>)
 800eca2:	4842      	ldr	r0, [pc, #264]	; (800edac <pbuf_alloc+0x1dc>)
 800eca4:	f009 fa2a 	bl	80180fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eca8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecaa:	3303      	adds	r3, #3
 800ecac:	f023 0303 	bic.w	r3, r3, #3
 800ecb0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ecb4:	d106      	bne.n	800ecc4 <pbuf_alloc+0xf4>
 800ecb6:	4b3b      	ldr	r3, [pc, #236]	; (800eda4 <pbuf_alloc+0x1d4>)
 800ecb8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ecbc:	493c      	ldr	r1, [pc, #240]	; (800edb0 <pbuf_alloc+0x1e0>)
 800ecbe:	483b      	ldr	r0, [pc, #236]	; (800edac <pbuf_alloc+0x1dc>)
 800ecc0:	f009 fa1c 	bl	80180fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d102      	bne.n	800ecd0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	627b      	str	r3, [r7, #36]	; 0x24
 800ecce:	e002      	b.n	800ecd6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	693a      	ldr	r2, [r7, #16]
 800ecd4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ecda:	8b7a      	ldrh	r2, [r7, #26]
 800ecdc:	89fb      	ldrh	r3, [r7, #14]
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ece6:	8b7b      	ldrh	r3, [r7, #26]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d19e      	bne.n	800ec2a <pbuf_alloc+0x5a>
      break;
 800ecec:	e055      	b.n	800ed9a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ecee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecf0:	3303      	adds	r3, #3
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	f023 0303 	bic.w	r3, r3, #3
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	88bb      	ldrh	r3, [r7, #4]
 800ecfc:	3303      	adds	r3, #3
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	f023 0303 	bic.w	r3, r3, #3
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	4413      	add	r3, r2
 800ed08:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ed0a:	8b3b      	ldrh	r3, [r7, #24]
 800ed0c:	3310      	adds	r3, #16
 800ed0e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ed10:	8b3a      	ldrh	r2, [r7, #24]
 800ed12:	88bb      	ldrh	r3, [r7, #4]
 800ed14:	3303      	adds	r3, #3
 800ed16:	f023 0303 	bic.w	r3, r3, #3
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d306      	bcc.n	800ed2c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ed1e:	8afa      	ldrh	r2, [r7, #22]
 800ed20:	88bb      	ldrh	r3, [r7, #4]
 800ed22:	3303      	adds	r3, #3
 800ed24:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d201      	bcs.n	800ed30 <pbuf_alloc+0x160>
        return NULL;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e035      	b.n	800ed9c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ed30:	8afb      	ldrh	r3, [r7, #22]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7ff f950 	bl	800dfd8 <mem_malloc>
 800ed38:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ed3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <pbuf_alloc+0x174>
        return NULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	e02b      	b.n	800ed9c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ed44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed46:	3310      	adds	r3, #16
 800ed48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed4a:	4413      	add	r3, r2
 800ed4c:	3303      	adds	r3, #3
 800ed4e:	f023 0303 	bic.w	r3, r3, #3
 800ed52:	4618      	mov	r0, r3
 800ed54:	88b9      	ldrh	r1, [r7, #4]
 800ed56:	88ba      	ldrh	r2, [r7, #4]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	887b      	ldrh	r3, [r7, #2]
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	460b      	mov	r3, r1
 800ed62:	4601      	mov	r1, r0
 800ed64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed66:	f7ff ff09 	bl	800eb7c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	f003 0303 	and.w	r3, r3, #3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d010      	beq.n	800ed98 <pbuf_alloc+0x1c8>
 800ed76:	4b0b      	ldr	r3, [pc, #44]	; (800eda4 <pbuf_alloc+0x1d4>)
 800ed78:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ed7c:	490d      	ldr	r1, [pc, #52]	; (800edb4 <pbuf_alloc+0x1e4>)
 800ed7e:	480b      	ldr	r0, [pc, #44]	; (800edac <pbuf_alloc+0x1dc>)
 800ed80:	f009 f9bc 	bl	80180fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ed84:	e008      	b.n	800ed98 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ed86:	4b07      	ldr	r3, [pc, #28]	; (800eda4 <pbuf_alloc+0x1d4>)
 800ed88:	f240 1227 	movw	r2, #295	; 0x127
 800ed8c:	490a      	ldr	r1, [pc, #40]	; (800edb8 <pbuf_alloc+0x1e8>)
 800ed8e:	4807      	ldr	r0, [pc, #28]	; (800edac <pbuf_alloc+0x1dc>)
 800ed90:	f009 f9b4 	bl	80180fc <iprintf>
      return NULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	e001      	b.n	800ed9c <pbuf_alloc+0x1cc>
      break;
 800ed98:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3728      	adds	r7, #40	; 0x28
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	080199e8 	.word	0x080199e8
 800eda8:	08019a18 	.word	0x08019a18
 800edac:	08019a48 	.word	0x08019a48
 800edb0:	08019a70 	.word	0x08019a70
 800edb4:	08019aa4 	.word	0x08019aa4
 800edb8:	08019ad0 	.word	0x08019ad0

0800edbc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af02      	add	r7, sp, #8
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	460b      	mov	r3, r1
 800edc6:	807b      	strh	r3, [r7, #2]
 800edc8:	4613      	mov	r3, r2
 800edca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800edcc:	883b      	ldrh	r3, [r7, #0]
 800edce:	2b41      	cmp	r3, #65	; 0x41
 800edd0:	d009      	beq.n	800ede6 <pbuf_alloc_reference+0x2a>
 800edd2:	883b      	ldrh	r3, [r7, #0]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d006      	beq.n	800ede6 <pbuf_alloc_reference+0x2a>
 800edd8:	4b0f      	ldr	r3, [pc, #60]	; (800ee18 <pbuf_alloc_reference+0x5c>)
 800edda:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800edde:	490f      	ldr	r1, [pc, #60]	; (800ee1c <pbuf_alloc_reference+0x60>)
 800ede0:	480f      	ldr	r0, [pc, #60]	; (800ee20 <pbuf_alloc_reference+0x64>)
 800ede2:	f009 f98b 	bl	80180fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ede6:	200c      	movs	r0, #12
 800ede8:	f7ff fa9a 	bl	800e320 <memp_malloc>
 800edec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d101      	bne.n	800edf8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800edf4:	2300      	movs	r3, #0
 800edf6:	e00b      	b.n	800ee10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800edf8:	8879      	ldrh	r1, [r7, #2]
 800edfa:	887a      	ldrh	r2, [r7, #2]
 800edfc:	2300      	movs	r3, #0
 800edfe:	9301      	str	r3, [sp, #4]
 800ee00:	883b      	ldrh	r3, [r7, #0]
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	460b      	mov	r3, r1
 800ee06:	6879      	ldr	r1, [r7, #4]
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f7ff feb7 	bl	800eb7c <pbuf_init_alloced_pbuf>
  return p;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	080199e8 	.word	0x080199e8
 800ee1c:	08019aec 	.word	0x08019aec
 800ee20:	08019a48 	.word	0x08019a48

0800ee24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b088      	sub	sp, #32
 800ee28:	af02      	add	r7, sp, #8
 800ee2a:	607b      	str	r3, [r7, #4]
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	73fb      	strb	r3, [r7, #15]
 800ee30:	460b      	mov	r3, r1
 800ee32:	81bb      	strh	r3, [r7, #12]
 800ee34:	4613      	mov	r3, r2
 800ee36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
 800ee3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ee3c:	8a7b      	ldrh	r3, [r7, #18]
 800ee3e:	3303      	adds	r3, #3
 800ee40:	f023 0203 	bic.w	r2, r3, #3
 800ee44:	89bb      	ldrh	r3, [r7, #12]
 800ee46:	441a      	add	r2, r3
 800ee48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d901      	bls.n	800ee52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	e018      	b.n	800ee84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ee58:	8a7b      	ldrh	r3, [r7, #18]
 800ee5a:	3303      	adds	r3, #3
 800ee5c:	f023 0303 	bic.w	r3, r3, #3
 800ee60:	6a3a      	ldr	r2, [r7, #32]
 800ee62:	4413      	add	r3, r2
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	e001      	b.n	800ee6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	89b9      	ldrh	r1, [r7, #12]
 800ee70:	89ba      	ldrh	r2, [r7, #12]
 800ee72:	2302      	movs	r3, #2
 800ee74:	9301      	str	r3, [sp, #4]
 800ee76:	897b      	ldrh	r3, [r7, #10]
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	6979      	ldr	r1, [r7, #20]
 800ee7e:	f7ff fe7d 	bl	800eb7c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ee82:	687b      	ldr	r3, [r7, #4]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3718      	adds	r7, #24
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d106      	bne.n	800eeac <pbuf_realloc+0x20>
 800ee9e:	4b3a      	ldr	r3, [pc, #232]	; (800ef88 <pbuf_realloc+0xfc>)
 800eea0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800eea4:	4939      	ldr	r1, [pc, #228]	; (800ef8c <pbuf_realloc+0x100>)
 800eea6:	483a      	ldr	r0, [pc, #232]	; (800ef90 <pbuf_realloc+0x104>)
 800eea8:	f009 f928 	bl	80180fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	891b      	ldrh	r3, [r3, #8]
 800eeb0:	887a      	ldrh	r2, [r7, #2]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d263      	bcs.n	800ef7e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	891a      	ldrh	r2, [r3, #8]
 800eeba:	887b      	ldrh	r3, [r7, #2]
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800eec0:	887b      	ldrh	r3, [r7, #2]
 800eec2:	817b      	strh	r3, [r7, #10]
  q = p;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800eec8:	e018      	b.n	800eefc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	895b      	ldrh	r3, [r3, #10]
 800eece:	897a      	ldrh	r2, [r7, #10]
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	891a      	ldrh	r2, [r3, #8]
 800eed8:	893b      	ldrh	r3, [r7, #8]
 800eeda:	1ad3      	subs	r3, r2, r3
 800eedc:	b29a      	uxth	r2, r3
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <pbuf_realloc+0x70>
 800eeee:	4b26      	ldr	r3, [pc, #152]	; (800ef88 <pbuf_realloc+0xfc>)
 800eef0:	f240 12af 	movw	r2, #431	; 0x1af
 800eef4:	4927      	ldr	r1, [pc, #156]	; (800ef94 <pbuf_realloc+0x108>)
 800eef6:	4826      	ldr	r0, [pc, #152]	; (800ef90 <pbuf_realloc+0x104>)
 800eef8:	f009 f900 	bl	80180fc <iprintf>
  while (rem_len > q->len) {
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	895b      	ldrh	r3, [r3, #10]
 800ef00:	897a      	ldrh	r2, [r7, #10]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d8e1      	bhi.n	800eeca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	7b1b      	ldrb	r3, [r3, #12]
 800ef0a:	f003 030f 	and.w	r3, r3, #15
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d121      	bne.n	800ef56 <pbuf_realloc+0xca>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	895b      	ldrh	r3, [r3, #10]
 800ef16:	897a      	ldrh	r2, [r7, #10]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d01c      	beq.n	800ef56 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	7b5b      	ldrb	r3, [r3, #13]
 800ef20:	f003 0302 	and.w	r3, r3, #2
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d116      	bne.n	800ef56 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	897b      	ldrh	r3, [r7, #10]
 800ef34:	4413      	add	r3, r2
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	4619      	mov	r1, r3
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7fe ff42 	bl	800ddc4 <mem_trim>
 800ef40:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d106      	bne.n	800ef56 <pbuf_realloc+0xca>
 800ef48:	4b0f      	ldr	r3, [pc, #60]	; (800ef88 <pbuf_realloc+0xfc>)
 800ef4a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ef4e:	4912      	ldr	r1, [pc, #72]	; (800ef98 <pbuf_realloc+0x10c>)
 800ef50:	480f      	ldr	r0, [pc, #60]	; (800ef90 <pbuf_realloc+0x104>)
 800ef52:	f009 f8d3 	bl	80180fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	897a      	ldrh	r2, [r7, #10]
 800ef5a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	895a      	ldrh	r2, [r3, #10]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d004      	beq.n	800ef76 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f000 f911 	bl	800f198 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	e000      	b.n	800ef80 <pbuf_realloc+0xf4>
    return;
 800ef7e:	bf00      	nop

}
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	080199e8 	.word	0x080199e8
 800ef8c:	08019b00 	.word	0x08019b00
 800ef90:	08019a48 	.word	0x08019a48
 800ef94:	08019b18 	.word	0x08019b18
 800ef98:	08019b30 	.word	0x08019b30

0800ef9c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	4613      	mov	r3, r2
 800efa8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d106      	bne.n	800efbe <pbuf_add_header_impl+0x22>
 800efb0:	4b2b      	ldr	r3, [pc, #172]	; (800f060 <pbuf_add_header_impl+0xc4>)
 800efb2:	f240 12df 	movw	r2, #479	; 0x1df
 800efb6:	492b      	ldr	r1, [pc, #172]	; (800f064 <pbuf_add_header_impl+0xc8>)
 800efb8:	482b      	ldr	r0, [pc, #172]	; (800f068 <pbuf_add_header_impl+0xcc>)
 800efba:	f009 f89f 	bl	80180fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d003      	beq.n	800efcc <pbuf_add_header_impl+0x30>
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efca:	d301      	bcc.n	800efd0 <pbuf_add_header_impl+0x34>
    return 1;
 800efcc:	2301      	movs	r3, #1
 800efce:	e043      	b.n	800f058 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <pbuf_add_header_impl+0x3e>
    return 0;
 800efd6:	2300      	movs	r3, #0
 800efd8:	e03e      	b.n	800f058 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	891a      	ldrh	r2, [r3, #8]
 800efe2:	8a7b      	ldrh	r3, [r7, #18]
 800efe4:	4413      	add	r3, r2
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	8a7a      	ldrh	r2, [r7, #18]
 800efea:	429a      	cmp	r2, r3
 800efec:	d901      	bls.n	800eff2 <pbuf_add_header_impl+0x56>
    return 1;
 800efee:	2301      	movs	r3, #1
 800eff0:	e032      	b.n	800f058 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	7b1b      	ldrb	r3, [r3, #12]
 800eff6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800eff8:	8a3b      	ldrh	r3, [r7, #16]
 800effa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00c      	beq.n	800f01c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	685a      	ldr	r2, [r3, #4]
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	425b      	negs	r3, r3
 800f00a:	4413      	add	r3, r2
 800f00c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3310      	adds	r3, #16
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	429a      	cmp	r2, r3
 800f016:	d20d      	bcs.n	800f034 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f018:	2301      	movs	r3, #1
 800f01a:	e01d      	b.n	800f058 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f01c:	79fb      	ldrb	r3, [r7, #7]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d006      	beq.n	800f030 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	425b      	negs	r3, r3
 800f02a:	4413      	add	r3, r2
 800f02c:	617b      	str	r3, [r7, #20]
 800f02e:	e001      	b.n	800f034 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f030:	2301      	movs	r3, #1
 800f032:	e011      	b.n	800f058 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	895a      	ldrh	r2, [r3, #10]
 800f03e:	8a7b      	ldrh	r3, [r7, #18]
 800f040:	4413      	add	r3, r2
 800f042:	b29a      	uxth	r2, r3
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	891a      	ldrh	r2, [r3, #8]
 800f04c:	8a7b      	ldrh	r3, [r7, #18]
 800f04e:	4413      	add	r3, r2
 800f050:	b29a      	uxth	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	811a      	strh	r2, [r3, #8]


  return 0;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	080199e8 	.word	0x080199e8
 800f064:	08019b4c 	.word	0x08019b4c
 800f068:	08019a48 	.word	0x08019a48

0800f06c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f076:	2200      	movs	r2, #0
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7ff ff8e 	bl	800ef9c <pbuf_add_header_impl>
 800f080:	4603      	mov	r3, r0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
	...

0800f08c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <pbuf_remove_header+0x1e>
 800f09c:	4b20      	ldr	r3, [pc, #128]	; (800f120 <pbuf_remove_header+0x94>)
 800f09e:	f240 224b 	movw	r2, #587	; 0x24b
 800f0a2:	4920      	ldr	r1, [pc, #128]	; (800f124 <pbuf_remove_header+0x98>)
 800f0a4:	4820      	ldr	r0, [pc, #128]	; (800f128 <pbuf_remove_header+0x9c>)
 800f0a6:	f009 f829 	bl	80180fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <pbuf_remove_header+0x2c>
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0b6:	d301      	bcc.n	800f0bc <pbuf_remove_header+0x30>
    return 1;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e02c      	b.n	800f116 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <pbuf_remove_header+0x3a>
    return 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e027      	b.n	800f116 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	895b      	ldrh	r3, [r3, #10]
 800f0ce:	89fa      	ldrh	r2, [r7, #14]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d908      	bls.n	800f0e6 <pbuf_remove_header+0x5a>
 800f0d4:	4b12      	ldr	r3, [pc, #72]	; (800f120 <pbuf_remove_header+0x94>)
 800f0d6:	f240 2255 	movw	r2, #597	; 0x255
 800f0da:	4914      	ldr	r1, [pc, #80]	; (800f12c <pbuf_remove_header+0xa0>)
 800f0dc:	4812      	ldr	r0, [pc, #72]	; (800f128 <pbuf_remove_header+0x9c>)
 800f0de:	f009 f80d 	bl	80180fc <iprintf>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e017      	b.n	800f116 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	441a      	add	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	895a      	ldrh	r2, [r3, #10]
 800f0fc:	89fb      	ldrh	r3, [r7, #14]
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	b29a      	uxth	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	891a      	ldrh	r2, [r3, #8]
 800f10a:	89fb      	ldrh	r3, [r7, #14]
 800f10c:	1ad3      	subs	r3, r2, r3
 800f10e:	b29a      	uxth	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	080199e8 	.word	0x080199e8
 800f124:	08019b4c 	.word	0x08019b4c
 800f128:	08019a48 	.word	0x08019a48
 800f12c:	08019b58 	.word	0x08019b58

0800f130 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	460b      	mov	r3, r1
 800f13a:	807b      	strh	r3, [r7, #2]
 800f13c:	4613      	mov	r3, r2
 800f13e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f144:	2b00      	cmp	r3, #0
 800f146:	da08      	bge.n	800f15a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f148:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f14c:	425b      	negs	r3, r3
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7ff ff9b 	bl	800f08c <pbuf_remove_header>
 800f156:	4603      	mov	r3, r0
 800f158:	e007      	b.n	800f16a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f15a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f15e:	787a      	ldrb	r2, [r7, #1]
 800f160:	4619      	mov	r1, r3
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7ff ff1a 	bl	800ef9c <pbuf_add_header_impl>
 800f168:	4603      	mov	r3, r0
  }
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3708      	adds	r7, #8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b082      	sub	sp, #8
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
 800f17a:	460b      	mov	r3, r1
 800f17c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f17e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f182:	2201      	movs	r2, #1
 800f184:	4619      	mov	r1, r3
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f7ff ffd2 	bl	800f130 <pbuf_header_impl>
 800f18c:	4603      	mov	r3, r0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
	...

0800f198 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b088      	sub	sp, #32
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10b      	bne.n	800f1be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d106      	bne.n	800f1ba <pbuf_free+0x22>
 800f1ac:	4b3b      	ldr	r3, [pc, #236]	; (800f29c <pbuf_free+0x104>)
 800f1ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f1b2:	493b      	ldr	r1, [pc, #236]	; (800f2a0 <pbuf_free+0x108>)
 800f1b4:	483b      	ldr	r0, [pc, #236]	; (800f2a4 <pbuf_free+0x10c>)
 800f1b6:	f008 ffa1 	bl	80180fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e069      	b.n	800f292 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f1c2:	e062      	b.n	800f28a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f1c4:	f008 ff34 	bl	8018030 <sys_arch_protect>
 800f1c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	7b9b      	ldrb	r3, [r3, #14]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d106      	bne.n	800f1e0 <pbuf_free+0x48>
 800f1d2:	4b32      	ldr	r3, [pc, #200]	; (800f29c <pbuf_free+0x104>)
 800f1d4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f1d8:	4933      	ldr	r1, [pc, #204]	; (800f2a8 <pbuf_free+0x110>)
 800f1da:	4832      	ldr	r0, [pc, #200]	; (800f2a4 <pbuf_free+0x10c>)
 800f1dc:	f008 ff8e 	bl	80180fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	7b9b      	ldrb	r3, [r3, #14]
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	739a      	strb	r2, [r3, #14]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	7b9b      	ldrb	r3, [r3, #14]
 800f1f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f1f2:	69b8      	ldr	r0, [r7, #24]
 800f1f4:	f008 ff2a 	bl	801804c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f1f8:	7dfb      	ldrb	r3, [r7, #23]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d143      	bne.n	800f286 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	7b1b      	ldrb	r3, [r3, #12]
 800f208:	f003 030f 	and.w	r3, r3, #15
 800f20c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	7b5b      	ldrb	r3, [r3, #13]
 800f212:	f003 0302 	and.w	r3, r3, #2
 800f216:	2b00      	cmp	r3, #0
 800f218:	d011      	beq.n	800f23e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <pbuf_free+0x9c>
 800f226:	4b1d      	ldr	r3, [pc, #116]	; (800f29c <pbuf_free+0x104>)
 800f228:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f22c:	491f      	ldr	r1, [pc, #124]	; (800f2ac <pbuf_free+0x114>)
 800f22e:	481d      	ldr	r0, [pc, #116]	; (800f2a4 <pbuf_free+0x10c>)
 800f230:	f008 ff64 	bl	80180fc <iprintf>
        pc->custom_free_function(p);
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	4798      	blx	r3
 800f23c:	e01d      	b.n	800f27a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f23e:	7bfb      	ldrb	r3, [r7, #15]
 800f240:	2b02      	cmp	r3, #2
 800f242:	d104      	bne.n	800f24e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f244:	6879      	ldr	r1, [r7, #4]
 800f246:	200d      	movs	r0, #13
 800f248:	f7ff f8e0 	bl	800e40c <memp_free>
 800f24c:	e015      	b.n	800f27a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f24e:	7bfb      	ldrb	r3, [r7, #15]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d104      	bne.n	800f25e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f254:	6879      	ldr	r1, [r7, #4]
 800f256:	200c      	movs	r0, #12
 800f258:	f7ff f8d8 	bl	800e40c <memp_free>
 800f25c:	e00d      	b.n	800f27a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f25e:	7bfb      	ldrb	r3, [r7, #15]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d103      	bne.n	800f26c <pbuf_free+0xd4>
          mem_free(p);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7fe fd1d 	bl	800dca4 <mem_free>
 800f26a:	e006      	b.n	800f27a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f26c:	4b0b      	ldr	r3, [pc, #44]	; (800f29c <pbuf_free+0x104>)
 800f26e:	f240 320f 	movw	r2, #783	; 0x30f
 800f272:	490f      	ldr	r1, [pc, #60]	; (800f2b0 <pbuf_free+0x118>)
 800f274:	480b      	ldr	r0, [pc, #44]	; (800f2a4 <pbuf_free+0x10c>)
 800f276:	f008 ff41 	bl	80180fc <iprintf>
        }
      }
      count++;
 800f27a:	7ffb      	ldrb	r3, [r7, #31]
 800f27c:	3301      	adds	r3, #1
 800f27e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	607b      	str	r3, [r7, #4]
 800f284:	e001      	b.n	800f28a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f286:	2300      	movs	r3, #0
 800f288:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d199      	bne.n	800f1c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f290:	7ffb      	ldrb	r3, [r7, #31]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3720      	adds	r7, #32
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	080199e8 	.word	0x080199e8
 800f2a0:	08019b4c 	.word	0x08019b4c
 800f2a4:	08019a48 	.word	0x08019a48
 800f2a8:	08019b78 	.word	0x08019b78
 800f2ac:	08019b90 	.word	0x08019b90
 800f2b0:	08019bb4 	.word	0x08019bb4

0800f2b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f2c0:	e005      	b.n	800f2ce <pbuf_clen+0x1a>
    ++len;
 800f2c2:	89fb      	ldrh	r3, [r7, #14]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d1f6      	bne.n	800f2c2 <pbuf_clen+0xe>
  }
  return len;
 800f2d4:	89fb      	ldrh	r3, [r7, #14]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3714      	adds	r7, #20
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
	...

0800f2e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d016      	beq.n	800f320 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f2f2:	f008 fe9d 	bl	8018030 <sys_arch_protect>
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	7b9b      	ldrb	r3, [r3, #14]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	b2da      	uxtb	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	739a      	strb	r2, [r3, #14]
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	f008 fea1 	bl	801804c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	7b9b      	ldrb	r3, [r3, #14]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d106      	bne.n	800f320 <pbuf_ref+0x3c>
 800f312:	4b05      	ldr	r3, [pc, #20]	; (800f328 <pbuf_ref+0x44>)
 800f314:	f240 3242 	movw	r2, #834	; 0x342
 800f318:	4904      	ldr	r1, [pc, #16]	; (800f32c <pbuf_ref+0x48>)
 800f31a:	4805      	ldr	r0, [pc, #20]	; (800f330 <pbuf_ref+0x4c>)
 800f31c:	f008 feee 	bl	80180fc <iprintf>
  }
}
 800f320:	bf00      	nop
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	080199e8 	.word	0x080199e8
 800f32c:	08019bc8 	.word	0x08019bc8
 800f330:	08019a48 	.word	0x08019a48

0800f334 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <pbuf_cat+0x16>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d107      	bne.n	800f35a <pbuf_cat+0x26>
 800f34a:	4b20      	ldr	r3, [pc, #128]	; (800f3cc <pbuf_cat+0x98>)
 800f34c:	f240 3259 	movw	r2, #857	; 0x359
 800f350:	491f      	ldr	r1, [pc, #124]	; (800f3d0 <pbuf_cat+0x9c>)
 800f352:	4820      	ldr	r0, [pc, #128]	; (800f3d4 <pbuf_cat+0xa0>)
 800f354:	f008 fed2 	bl	80180fc <iprintf>
 800f358:	e034      	b.n	800f3c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	e00a      	b.n	800f376 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	891a      	ldrh	r2, [r3, #8]
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	891b      	ldrh	r3, [r3, #8]
 800f368:	4413      	add	r3, r2
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1f0      	bne.n	800f360 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	891a      	ldrh	r2, [r3, #8]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	895b      	ldrh	r3, [r3, #10]
 800f386:	429a      	cmp	r2, r3
 800f388:	d006      	beq.n	800f398 <pbuf_cat+0x64>
 800f38a:	4b10      	ldr	r3, [pc, #64]	; (800f3cc <pbuf_cat+0x98>)
 800f38c:	f240 3262 	movw	r2, #866	; 0x362
 800f390:	4911      	ldr	r1, [pc, #68]	; (800f3d8 <pbuf_cat+0xa4>)
 800f392:	4810      	ldr	r0, [pc, #64]	; (800f3d4 <pbuf_cat+0xa0>)
 800f394:	f008 feb2 	bl	80180fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d006      	beq.n	800f3ae <pbuf_cat+0x7a>
 800f3a0:	4b0a      	ldr	r3, [pc, #40]	; (800f3cc <pbuf_cat+0x98>)
 800f3a2:	f240 3263 	movw	r2, #867	; 0x363
 800f3a6:	490d      	ldr	r1, [pc, #52]	; (800f3dc <pbuf_cat+0xa8>)
 800f3a8:	480a      	ldr	r0, [pc, #40]	; (800f3d4 <pbuf_cat+0xa0>)
 800f3aa:	f008 fea7 	bl	80180fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	891a      	ldrh	r2, [r3, #8]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	891b      	ldrh	r3, [r3, #8]
 800f3b6:	4413      	add	r3, r2
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	080199e8 	.word	0x080199e8
 800f3d0:	08019bdc 	.word	0x08019bdc
 800f3d4:	08019a48 	.word	0x08019a48
 800f3d8:	08019c14 	.word	0x08019c14
 800f3dc:	08019c44 	.word	0x08019c44

0800f3e0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f7ff ffa1 	bl	800f334 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f3f2:	6838      	ldr	r0, [r7, #0]
 800f3f4:	f7ff ff76 	bl	800f2e4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f3f8:	bf00      	nop
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f40a:	2300      	movs	r3, #0
 800f40c:	617b      	str	r3, [r7, #20]
 800f40e:	2300      	movs	r3, #0
 800f410:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d008      	beq.n	800f42a <pbuf_copy+0x2a>
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d005      	beq.n	800f42a <pbuf_copy+0x2a>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	891a      	ldrh	r2, [r3, #8]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	891b      	ldrh	r3, [r3, #8]
 800f426:	429a      	cmp	r2, r3
 800f428:	d209      	bcs.n	800f43e <pbuf_copy+0x3e>
 800f42a:	4b57      	ldr	r3, [pc, #348]	; (800f588 <pbuf_copy+0x188>)
 800f42c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f430:	4956      	ldr	r1, [pc, #344]	; (800f58c <pbuf_copy+0x18c>)
 800f432:	4857      	ldr	r0, [pc, #348]	; (800f590 <pbuf_copy+0x190>)
 800f434:	f008 fe62 	bl	80180fc <iprintf>
 800f438:	f06f 030f 	mvn.w	r3, #15
 800f43c:	e09f      	b.n	800f57e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	895b      	ldrh	r3, [r3, #10]
 800f442:	461a      	mov	r2, r3
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	1ad2      	subs	r2, r2, r3
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	895b      	ldrh	r3, [r3, #10]
 800f44c:	4619      	mov	r1, r3
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	1acb      	subs	r3, r1, r3
 800f452:	429a      	cmp	r2, r3
 800f454:	d306      	bcc.n	800f464 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	895b      	ldrh	r3, [r3, #10]
 800f45a:	461a      	mov	r2, r3
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	1ad3      	subs	r3, r2, r3
 800f460:	60fb      	str	r3, [r7, #12]
 800f462:	e005      	b.n	800f470 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	895b      	ldrh	r3, [r3, #10]
 800f468:	461a      	mov	r2, r3
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	685a      	ldr	r2, [r3, #4]
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	18d0      	adds	r0, r2, r3
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	4413      	add	r3, r2
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	4619      	mov	r1, r3
 800f484:	f008 fe24 	bl	80180d0 <memcpy>
    offset_to += len;
 800f488:	697a      	ldr	r2, [r7, #20]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	4413      	add	r3, r2
 800f48e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f490:	693a      	ldr	r2, [r7, #16]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	4413      	add	r3, r2
 800f496:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	895b      	ldrh	r3, [r3, #10]
 800f49c:	461a      	mov	r2, r3
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d906      	bls.n	800f4b2 <pbuf_copy+0xb2>
 800f4a4:	4b38      	ldr	r3, [pc, #224]	; (800f588 <pbuf_copy+0x188>)
 800f4a6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f4aa:	493a      	ldr	r1, [pc, #232]	; (800f594 <pbuf_copy+0x194>)
 800f4ac:	4838      	ldr	r0, [pc, #224]	; (800f590 <pbuf_copy+0x190>)
 800f4ae:	f008 fe25 	bl	80180fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	895b      	ldrh	r3, [r3, #10]
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d906      	bls.n	800f4cc <pbuf_copy+0xcc>
 800f4be:	4b32      	ldr	r3, [pc, #200]	; (800f588 <pbuf_copy+0x188>)
 800f4c0:	f240 32da 	movw	r2, #986	; 0x3da
 800f4c4:	4934      	ldr	r1, [pc, #208]	; (800f598 <pbuf_copy+0x198>)
 800f4c6:	4832      	ldr	r0, [pc, #200]	; (800f590 <pbuf_copy+0x190>)
 800f4c8:	f008 fe18 	bl	80180fc <iprintf>
    if (offset_from >= p_from->len) {
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	895b      	ldrh	r3, [r3, #10]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d304      	bcc.n	800f4e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	895b      	ldrh	r3, [r3, #10]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d114      	bne.n	800f518 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10c      	bne.n	800f518 <pbuf_copy+0x118>
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d009      	beq.n	800f518 <pbuf_copy+0x118>
 800f504:	4b20      	ldr	r3, [pc, #128]	; (800f588 <pbuf_copy+0x188>)
 800f506:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f50a:	4924      	ldr	r1, [pc, #144]	; (800f59c <pbuf_copy+0x19c>)
 800f50c:	4820      	ldr	r0, [pc, #128]	; (800f590 <pbuf_copy+0x190>)
 800f50e:	f008 fdf5 	bl	80180fc <iprintf>
 800f512:	f06f 030f 	mvn.w	r3, #15
 800f516:	e032      	b.n	800f57e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d013      	beq.n	800f546 <pbuf_copy+0x146>
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	895a      	ldrh	r2, [r3, #10]
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	891b      	ldrh	r3, [r3, #8]
 800f526:	429a      	cmp	r2, r3
 800f528:	d10d      	bne.n	800f546 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d009      	beq.n	800f546 <pbuf_copy+0x146>
 800f532:	4b15      	ldr	r3, [pc, #84]	; (800f588 <pbuf_copy+0x188>)
 800f534:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f538:	4919      	ldr	r1, [pc, #100]	; (800f5a0 <pbuf_copy+0x1a0>)
 800f53a:	4815      	ldr	r0, [pc, #84]	; (800f590 <pbuf_copy+0x190>)
 800f53c:	f008 fdde 	bl	80180fc <iprintf>
 800f540:	f06f 0305 	mvn.w	r3, #5
 800f544:	e01b      	b.n	800f57e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d013      	beq.n	800f574 <pbuf_copy+0x174>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	895a      	ldrh	r2, [r3, #10]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	891b      	ldrh	r3, [r3, #8]
 800f554:	429a      	cmp	r2, r3
 800f556:	d10d      	bne.n	800f574 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d009      	beq.n	800f574 <pbuf_copy+0x174>
 800f560:	4b09      	ldr	r3, [pc, #36]	; (800f588 <pbuf_copy+0x188>)
 800f562:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f566:	490e      	ldr	r1, [pc, #56]	; (800f5a0 <pbuf_copy+0x1a0>)
 800f568:	4809      	ldr	r0, [pc, #36]	; (800f590 <pbuf_copy+0x190>)
 800f56a:	f008 fdc7 	bl	80180fc <iprintf>
 800f56e:	f06f 0305 	mvn.w	r3, #5
 800f572:	e004      	b.n	800f57e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f47f af61 	bne.w	800f43e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	080199e8 	.word	0x080199e8
 800f58c:	08019c90 	.word	0x08019c90
 800f590:	08019a48 	.word	0x08019a48
 800f594:	08019cc0 	.word	0x08019cc0
 800f598:	08019cd8 	.word	0x08019cd8
 800f59c:	08019cf4 	.word	0x08019cf4
 800f5a0:	08019d04 	.word	0x08019d04

0800f5a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b088      	sub	sp, #32
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	4611      	mov	r1, r2
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	80fb      	strh	r3, [r7, #6]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d108      	bne.n	800f5da <pbuf_copy_partial+0x36>
 800f5c8:	4b2b      	ldr	r3, [pc, #172]	; (800f678 <pbuf_copy_partial+0xd4>)
 800f5ca:	f240 420a 	movw	r2, #1034	; 0x40a
 800f5ce:	492b      	ldr	r1, [pc, #172]	; (800f67c <pbuf_copy_partial+0xd8>)
 800f5d0:	482b      	ldr	r0, [pc, #172]	; (800f680 <pbuf_copy_partial+0xdc>)
 800f5d2:	f008 fd93 	bl	80180fc <iprintf>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	e04a      	b.n	800f670 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d108      	bne.n	800f5f2 <pbuf_copy_partial+0x4e>
 800f5e0:	4b25      	ldr	r3, [pc, #148]	; (800f678 <pbuf_copy_partial+0xd4>)
 800f5e2:	f240 420b 	movw	r2, #1035	; 0x40b
 800f5e6:	4927      	ldr	r1, [pc, #156]	; (800f684 <pbuf_copy_partial+0xe0>)
 800f5e8:	4825      	ldr	r0, [pc, #148]	; (800f680 <pbuf_copy_partial+0xdc>)
 800f5ea:	f008 fd87 	bl	80180fc <iprintf>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e03e      	b.n	800f670 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	61fb      	str	r3, [r7, #28]
 800f5f6:	e034      	b.n	800f662 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f5f8:	88bb      	ldrh	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00a      	beq.n	800f614 <pbuf_copy_partial+0x70>
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	895b      	ldrh	r3, [r3, #10]
 800f602:	88ba      	ldrh	r2, [r7, #4]
 800f604:	429a      	cmp	r2, r3
 800f606:	d305      	bcc.n	800f614 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	895b      	ldrh	r3, [r3, #10]
 800f60c:	88ba      	ldrh	r2, [r7, #4]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	80bb      	strh	r3, [r7, #4]
 800f612:	e023      	b.n	800f65c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	895a      	ldrh	r2, [r3, #10]
 800f618:	88bb      	ldrh	r3, [r7, #4]
 800f61a:	1ad3      	subs	r3, r2, r3
 800f61c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f61e:	8b3a      	ldrh	r2, [r7, #24]
 800f620:	88fb      	ldrh	r3, [r7, #6]
 800f622:	429a      	cmp	r2, r3
 800f624:	d901      	bls.n	800f62a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f626:	88fb      	ldrh	r3, [r7, #6]
 800f628:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f62a:	8b7b      	ldrh	r3, [r7, #26]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	18d0      	adds	r0, r2, r3
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	685a      	ldr	r2, [r3, #4]
 800f634:	88bb      	ldrh	r3, [r7, #4]
 800f636:	4413      	add	r3, r2
 800f638:	8b3a      	ldrh	r2, [r7, #24]
 800f63a:	4619      	mov	r1, r3
 800f63c:	f008 fd48 	bl	80180d0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f640:	8afa      	ldrh	r2, [r7, #22]
 800f642:	8b3b      	ldrh	r3, [r7, #24]
 800f644:	4413      	add	r3, r2
 800f646:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f648:	8b7a      	ldrh	r2, [r7, #26]
 800f64a:	8b3b      	ldrh	r3, [r7, #24]
 800f64c:	4413      	add	r3, r2
 800f64e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f650:	88fa      	ldrh	r2, [r7, #6]
 800f652:	8b3b      	ldrh	r3, [r7, #24]
 800f654:	1ad3      	subs	r3, r2, r3
 800f656:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	61fb      	str	r3, [r7, #28]
 800f662:	88fb      	ldrh	r3, [r7, #6]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d002      	beq.n	800f66e <pbuf_copy_partial+0xca>
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1c4      	bne.n	800f5f8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f66e:	8afb      	ldrh	r3, [r7, #22]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	080199e8 	.word	0x080199e8
 800f67c:	08019d30 	.word	0x08019d30
 800f680:	08019a48 	.word	0x08019a48
 800f684:	08019d50 	.word	0x08019d50

0800f688 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	603a      	str	r2, [r7, #0]
 800f692:	71fb      	strb	r3, [r7, #7]
 800f694:	460b      	mov	r3, r1
 800f696:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	8919      	ldrh	r1, [r3, #8]
 800f69c:	88ba      	ldrh	r2, [r7, #4]
 800f69e:	79fb      	ldrb	r3, [r7, #7]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7ff fa95 	bl	800ebd0 <pbuf_alloc>
 800f6a6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d101      	bne.n	800f6b2 <pbuf_clone+0x2a>
    return NULL;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e011      	b.n	800f6d6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f7ff fea3 	bl	800f400 <pbuf_copy>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f6be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d006      	beq.n	800f6d4 <pbuf_clone+0x4c>
 800f6c6:	4b06      	ldr	r3, [pc, #24]	; (800f6e0 <pbuf_clone+0x58>)
 800f6c8:	f240 5224 	movw	r2, #1316	; 0x524
 800f6cc:	4905      	ldr	r1, [pc, #20]	; (800f6e4 <pbuf_clone+0x5c>)
 800f6ce:	4806      	ldr	r0, [pc, #24]	; (800f6e8 <pbuf_clone+0x60>)
 800f6d0:	f008 fd14 	bl	80180fc <iprintf>
  return q;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3710      	adds	r7, #16
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	080199e8 	.word	0x080199e8
 800f6e4:	08019e5c 	.word	0x08019e5c
 800f6e8:	08019a48 	.word	0x08019a48

0800f6ec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f6f0:	4b04      	ldr	r3, [pc, #16]	; (800f704 <tcp_init+0x18>)
 800f6f2:	f24e 22b8 	movw	r2, #58040	; 0xe2b8
 800f6f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f6f8:	bf00      	nop
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	24000028 	.word	0x24000028

0800f708 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	7d1b      	ldrb	r3, [r3, #20]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d105      	bne.n	800f724 <tcp_free+0x1c>
 800f718:	4b06      	ldr	r3, [pc, #24]	; (800f734 <tcp_free+0x2c>)
 800f71a:	22d4      	movs	r2, #212	; 0xd4
 800f71c:	4906      	ldr	r1, [pc, #24]	; (800f738 <tcp_free+0x30>)
 800f71e:	4807      	ldr	r0, [pc, #28]	; (800f73c <tcp_free+0x34>)
 800f720:	f008 fcec 	bl	80180fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f724:	6879      	ldr	r1, [r7, #4]
 800f726:	2001      	movs	r0, #1
 800f728:	f7fe fe70 	bl	800e40c <memp_free>
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	08019ee8 	.word	0x08019ee8
 800f738:	08019f18 	.word	0x08019f18
 800f73c:	08019f2c 	.word	0x08019f2c

0800f740 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d105      	bne.n	800f75c <tcp_free_listen+0x1c>
 800f750:	4b06      	ldr	r3, [pc, #24]	; (800f76c <tcp_free_listen+0x2c>)
 800f752:	22df      	movs	r2, #223	; 0xdf
 800f754:	4906      	ldr	r1, [pc, #24]	; (800f770 <tcp_free_listen+0x30>)
 800f756:	4807      	ldr	r0, [pc, #28]	; (800f774 <tcp_free_listen+0x34>)
 800f758:	f008 fcd0 	bl	80180fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f75c:	6879      	ldr	r1, [r7, #4]
 800f75e:	2002      	movs	r0, #2
 800f760:	f7fe fe54 	bl	800e40c <memp_free>
}
 800f764:	bf00      	nop
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	08019ee8 	.word	0x08019ee8
 800f770:	08019f54 	.word	0x08019f54
 800f774:	08019f2c 	.word	0x08019f2c

0800f778 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f77c:	f000 fea6 	bl	80104cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f780:	4b07      	ldr	r3, [pc, #28]	; (800f7a0 <tcp_tmr+0x28>)
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	3301      	adds	r3, #1
 800f786:	b2da      	uxtb	r2, r3
 800f788:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <tcp_tmr+0x28>)
 800f78a:	701a      	strb	r2, [r3, #0]
 800f78c:	4b04      	ldr	r3, [pc, #16]	; (800f7a0 <tcp_tmr+0x28>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	f003 0301 	and.w	r3, r3, #1
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f798:	f000 fb54 	bl	800fe44 <tcp_slowtmr>
  }
}
 800f79c:	bf00      	nop
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	2402180d 	.word	0x2402180d

0800f7a4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d105      	bne.n	800f7c0 <tcp_remove_listener+0x1c>
 800f7b4:	4b0d      	ldr	r3, [pc, #52]	; (800f7ec <tcp_remove_listener+0x48>)
 800f7b6:	22ff      	movs	r2, #255	; 0xff
 800f7b8:	490d      	ldr	r1, [pc, #52]	; (800f7f0 <tcp_remove_listener+0x4c>)
 800f7ba:	480e      	ldr	r0, [pc, #56]	; (800f7f4 <tcp_remove_listener+0x50>)
 800f7bc:	f008 fc9e 	bl	80180fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	60fb      	str	r3, [r7, #12]
 800f7c4:	e00a      	b.n	800f7dc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d102      	bne.n	800f7d6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1f1      	bne.n	800f7c6 <tcp_remove_listener+0x22>
    }
  }
}
 800f7e2:	bf00      	nop
 800f7e4:	bf00      	nop
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	08019ee8 	.word	0x08019ee8
 800f7f0:	08019f70 	.word	0x08019f70
 800f7f4:	08019f2c 	.word	0x08019f2c

0800f7f8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <tcp_listen_closed+0x1c>
 800f806:	4b14      	ldr	r3, [pc, #80]	; (800f858 <tcp_listen_closed+0x60>)
 800f808:	f240 1211 	movw	r2, #273	; 0x111
 800f80c:	4913      	ldr	r1, [pc, #76]	; (800f85c <tcp_listen_closed+0x64>)
 800f80e:	4814      	ldr	r0, [pc, #80]	; (800f860 <tcp_listen_closed+0x68>)
 800f810:	f008 fc74 	bl	80180fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	7d1b      	ldrb	r3, [r3, #20]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d006      	beq.n	800f82a <tcp_listen_closed+0x32>
 800f81c:	4b0e      	ldr	r3, [pc, #56]	; (800f858 <tcp_listen_closed+0x60>)
 800f81e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f822:	4910      	ldr	r1, [pc, #64]	; (800f864 <tcp_listen_closed+0x6c>)
 800f824:	480e      	ldr	r0, [pc, #56]	; (800f860 <tcp_listen_closed+0x68>)
 800f826:	f008 fc69 	bl	80180fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f82a:	2301      	movs	r3, #1
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	e00b      	b.n	800f848 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f830:	4a0d      	ldr	r2, [pc, #52]	; (800f868 <tcp_listen_closed+0x70>)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6879      	ldr	r1, [r7, #4]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7ff ffb1 	bl	800f7a4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	3301      	adds	r3, #1
 800f846:	60fb      	str	r3, [r7, #12]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d9f0      	bls.n	800f830 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f84e:	bf00      	nop
 800f850:	bf00      	nop
 800f852:	3710      	adds	r7, #16
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	08019ee8 	.word	0x08019ee8
 800f85c:	08019f98 	.word	0x08019f98
 800f860:	08019f2c 	.word	0x08019f2c
 800f864:	08019fa4 	.word	0x08019fa4
 800f868:	0801bf48 	.word	0x0801bf48

0800f86c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f86c:	b5b0      	push	{r4, r5, r7, lr}
 800f86e:	b088      	sub	sp, #32
 800f870:	af04      	add	r7, sp, #16
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	460b      	mov	r3, r1
 800f876:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <tcp_close_shutdown+0x20>
 800f87e:	4b63      	ldr	r3, [pc, #396]	; (800fa0c <tcp_close_shutdown+0x1a0>)
 800f880:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f884:	4962      	ldr	r1, [pc, #392]	; (800fa10 <tcp_close_shutdown+0x1a4>)
 800f886:	4863      	ldr	r0, [pc, #396]	; (800fa14 <tcp_close_shutdown+0x1a8>)
 800f888:	f008 fc38 	bl	80180fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f88c:	78fb      	ldrb	r3, [r7, #3]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d066      	beq.n	800f960 <tcp_close_shutdown+0xf4>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7d1b      	ldrb	r3, [r3, #20]
 800f896:	2b04      	cmp	r3, #4
 800f898:	d003      	beq.n	800f8a2 <tcp_close_shutdown+0x36>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7d1b      	ldrb	r3, [r3, #20]
 800f89e:	2b07      	cmp	r3, #7
 800f8a0:	d15e      	bne.n	800f960 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d104      	bne.n	800f8b4 <tcp_close_shutdown+0x48>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f8b2:	d055      	beq.n	800f960 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	8b5b      	ldrh	r3, [r3, #26]
 800f8b8:	f003 0310 	and.w	r3, r3, #16
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d106      	bne.n	800f8ce <tcp_close_shutdown+0x62>
 800f8c0:	4b52      	ldr	r3, [pc, #328]	; (800fa0c <tcp_close_shutdown+0x1a0>)
 800f8c2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f8c6:	4954      	ldr	r1, [pc, #336]	; (800fa18 <tcp_close_shutdown+0x1ac>)
 800f8c8:	4852      	ldr	r0, [pc, #328]	; (800fa14 <tcp_close_shutdown+0x1a8>)
 800f8ca:	f008 fc17 	bl	80180fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f8d6:	687d      	ldr	r5, [r7, #4]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	8ad2      	ldrh	r2, [r2, #22]
 800f8e0:	6879      	ldr	r1, [r7, #4]
 800f8e2:	8b09      	ldrh	r1, [r1, #24]
 800f8e4:	9102      	str	r1, [sp, #8]
 800f8e6:	9201      	str	r2, [sp, #4]
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	462b      	mov	r3, r5
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	4601      	mov	r1, r0
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f004 fe9b 	bl	801462c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f001 f8d4 	bl	8010aa4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f8fc:	4b47      	ldr	r3, [pc, #284]	; (800fa1c <tcp_close_shutdown+0x1b0>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	429a      	cmp	r2, r3
 800f904:	d105      	bne.n	800f912 <tcp_close_shutdown+0xa6>
 800f906:	4b45      	ldr	r3, [pc, #276]	; (800fa1c <tcp_close_shutdown+0x1b0>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	4a43      	ldr	r2, [pc, #268]	; (800fa1c <tcp_close_shutdown+0x1b0>)
 800f90e:	6013      	str	r3, [r2, #0]
 800f910:	e013      	b.n	800f93a <tcp_close_shutdown+0xce>
 800f912:	4b42      	ldr	r3, [pc, #264]	; (800fa1c <tcp_close_shutdown+0x1b0>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	e00c      	b.n	800f934 <tcp_close_shutdown+0xc8>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	429a      	cmp	r2, r3
 800f922:	d104      	bne.n	800f92e <tcp_close_shutdown+0xc2>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	68da      	ldr	r2, [r3, #12]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	60da      	str	r2, [r3, #12]
 800f92c:	e005      	b.n	800f93a <tcp_close_shutdown+0xce>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	60fb      	str	r3, [r7, #12]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1ef      	bne.n	800f91a <tcp_close_shutdown+0xae>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	60da      	str	r2, [r3, #12]
 800f940:	4b37      	ldr	r3, [pc, #220]	; (800fa20 <tcp_close_shutdown+0x1b4>)
 800f942:	2201      	movs	r2, #1
 800f944:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f946:	4b37      	ldr	r3, [pc, #220]	; (800fa24 <tcp_close_shutdown+0x1b8>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d102      	bne.n	800f956 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f950:	f003 fd68 	bl	8013424 <tcp_trigger_input_pcb_close>
 800f954:	e002      	b.n	800f95c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7ff fed6 	bl	800f708 <tcp_free>
      }
      return ERR_OK;
 800f95c:	2300      	movs	r3, #0
 800f95e:	e050      	b.n	800fa02 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7d1b      	ldrb	r3, [r3, #20]
 800f964:	2b02      	cmp	r3, #2
 800f966:	d03b      	beq.n	800f9e0 <tcp_close_shutdown+0x174>
 800f968:	2b02      	cmp	r3, #2
 800f96a:	dc44      	bgt.n	800f9f6 <tcp_close_shutdown+0x18a>
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d002      	beq.n	800f976 <tcp_close_shutdown+0x10a>
 800f970:	2b01      	cmp	r3, #1
 800f972:	d02a      	beq.n	800f9ca <tcp_close_shutdown+0x15e>
 800f974:	e03f      	b.n	800f9f6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8adb      	ldrh	r3, [r3, #22]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d021      	beq.n	800f9c2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f97e:	4b2a      	ldr	r3, [pc, #168]	; (800fa28 <tcp_close_shutdown+0x1bc>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	429a      	cmp	r2, r3
 800f986:	d105      	bne.n	800f994 <tcp_close_shutdown+0x128>
 800f988:	4b27      	ldr	r3, [pc, #156]	; (800fa28 <tcp_close_shutdown+0x1bc>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	4a26      	ldr	r2, [pc, #152]	; (800fa28 <tcp_close_shutdown+0x1bc>)
 800f990:	6013      	str	r3, [r2, #0]
 800f992:	e013      	b.n	800f9bc <tcp_close_shutdown+0x150>
 800f994:	4b24      	ldr	r3, [pc, #144]	; (800fa28 <tcp_close_shutdown+0x1bc>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	60bb      	str	r3, [r7, #8]
 800f99a:	e00c      	b.n	800f9b6 <tcp_close_shutdown+0x14a>
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d104      	bne.n	800f9b0 <tcp_close_shutdown+0x144>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68da      	ldr	r2, [r3, #12]
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	60da      	str	r2, [r3, #12]
 800f9ae:	e005      	b.n	800f9bc <tcp_close_shutdown+0x150>
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	60bb      	str	r3, [r7, #8]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1ef      	bne.n	800f99c <tcp_close_shutdown+0x130>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff fea0 	bl	800f708 <tcp_free>
      break;
 800f9c8:	e01a      	b.n	800fa00 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7ff ff14 	bl	800f7f8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f9d0:	6879      	ldr	r1, [r7, #4]
 800f9d2:	4816      	ldr	r0, [pc, #88]	; (800fa2c <tcp_close_shutdown+0x1c0>)
 800f9d4:	f001 f8b6 	bl	8010b44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff feb1 	bl	800f740 <tcp_free_listen>
      break;
 800f9de:	e00f      	b.n	800fa00 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	480e      	ldr	r0, [pc, #56]	; (800fa1c <tcp_close_shutdown+0x1b0>)
 800f9e4:	f001 f8ae 	bl	8010b44 <tcp_pcb_remove>
 800f9e8:	4b0d      	ldr	r3, [pc, #52]	; (800fa20 <tcp_close_shutdown+0x1b4>)
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff fe8a 	bl	800f708 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f9f4:	e004      	b.n	800fa00 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f81a 	bl	800fa30 <tcp_close_shutdown_fin>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	e000      	b.n	800fa02 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3710      	adds	r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bdb0      	pop	{r4, r5, r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	08019ee8 	.word	0x08019ee8
 800fa10:	08019fbc 	.word	0x08019fbc
 800fa14:	08019f2c 	.word	0x08019f2c
 800fa18:	08019fdc 	.word	0x08019fdc
 800fa1c:	24024e98 	.word	0x24024e98
 800fa20:	24024e94 	.word	0x24024e94
 800fa24:	24024eac 	.word	0x24024eac
 800fa28:	24024ea4 	.word	0x24024ea4
 800fa2c:	24024ea0 	.word	0x24024ea0

0800fa30 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d106      	bne.n	800fa4c <tcp_close_shutdown_fin+0x1c>
 800fa3e:	4b2e      	ldr	r3, [pc, #184]	; (800faf8 <tcp_close_shutdown_fin+0xc8>)
 800fa40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fa44:	492d      	ldr	r1, [pc, #180]	; (800fafc <tcp_close_shutdown_fin+0xcc>)
 800fa46:	482e      	ldr	r0, [pc, #184]	; (800fb00 <tcp_close_shutdown_fin+0xd0>)
 800fa48:	f008 fb58 	bl	80180fc <iprintf>

  switch (pcb->state) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	7d1b      	ldrb	r3, [r3, #20]
 800fa50:	2b07      	cmp	r3, #7
 800fa52:	d020      	beq.n	800fa96 <tcp_close_shutdown_fin+0x66>
 800fa54:	2b07      	cmp	r3, #7
 800fa56:	dc2b      	bgt.n	800fab0 <tcp_close_shutdown_fin+0x80>
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	d002      	beq.n	800fa62 <tcp_close_shutdown_fin+0x32>
 800fa5c:	2b04      	cmp	r3, #4
 800fa5e:	d00d      	beq.n	800fa7c <tcp_close_shutdown_fin+0x4c>
 800fa60:	e026      	b.n	800fab0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f003 fef0 	bl	8013848 <tcp_send_fin>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fa6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d11f      	bne.n	800fab4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2205      	movs	r2, #5
 800fa78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa7a:	e01b      	b.n	800fab4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f003 fee3 	bl	8013848 <tcp_send_fin>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fa86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d114      	bne.n	800fab8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2205      	movs	r2, #5
 800fa92:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fa94:	e010      	b.n	800fab8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f003 fed6 	bl	8013848 <tcp_send_fin>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800faa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d109      	bne.n	800fabc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2209      	movs	r2, #9
 800faac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800faae:	e005      	b.n	800fabc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	e01c      	b.n	800faee <tcp_close_shutdown_fin+0xbe>
      break;
 800fab4:	bf00      	nop
 800fab6:	e002      	b.n	800fabe <tcp_close_shutdown_fin+0x8e>
      break;
 800fab8:	bf00      	nop
 800faba:	e000      	b.n	800fabe <tcp_close_shutdown_fin+0x8e>
      break;
 800fabc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d103      	bne.n	800face <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f003 fffc 	bl	8013ac4 <tcp_output>
 800facc:	e00d      	b.n	800faea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800face:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad6:	d108      	bne.n	800faea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	8b5b      	ldrh	r3, [r3, #26]
 800fadc:	f043 0308 	orr.w	r3, r3, #8
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e001      	b.n	800faee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800faea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	08019ee8 	.word	0x08019ee8
 800fafc:	08019f98 	.word	0x08019f98
 800fb00:	08019f2c 	.word	0x08019f2c

0800fb04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d109      	bne.n	800fb26 <tcp_close+0x22>
 800fb12:	4b0f      	ldr	r3, [pc, #60]	; (800fb50 <tcp_close+0x4c>)
 800fb14:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fb18:	490e      	ldr	r1, [pc, #56]	; (800fb54 <tcp_close+0x50>)
 800fb1a:	480f      	ldr	r0, [pc, #60]	; (800fb58 <tcp_close+0x54>)
 800fb1c:	f008 faee 	bl	80180fc <iprintf>
 800fb20:	f06f 030f 	mvn.w	r3, #15
 800fb24:	e00f      	b.n	800fb46 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7d1b      	ldrb	r3, [r3, #20]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d006      	beq.n	800fb3c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	8b5b      	ldrh	r3, [r3, #26]
 800fb32:	f043 0310 	orr.w	r3, r3, #16
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7ff fe94 	bl	800f86c <tcp_close_shutdown>
 800fb44:	4603      	mov	r3, r0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	08019ee8 	.word	0x08019ee8
 800fb54:	08019ff8 	.word	0x08019ff8
 800fb58:	08019f2c 	.word	0x08019f2c

0800fb5c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b08e      	sub	sp, #56	; 0x38
 800fb60:	af04      	add	r7, sp, #16
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d107      	bne.n	800fb7c <tcp_abandon+0x20>
 800fb6c:	4b52      	ldr	r3, [pc, #328]	; (800fcb8 <tcp_abandon+0x15c>)
 800fb6e:	f240 223d 	movw	r2, #573	; 0x23d
 800fb72:	4952      	ldr	r1, [pc, #328]	; (800fcbc <tcp_abandon+0x160>)
 800fb74:	4852      	ldr	r0, [pc, #328]	; (800fcc0 <tcp_abandon+0x164>)
 800fb76:	f008 fac1 	bl	80180fc <iprintf>
 800fb7a:	e099      	b.n	800fcb0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d106      	bne.n	800fb92 <tcp_abandon+0x36>
 800fb84:	4b4c      	ldr	r3, [pc, #304]	; (800fcb8 <tcp_abandon+0x15c>)
 800fb86:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fb8a:	494e      	ldr	r1, [pc, #312]	; (800fcc4 <tcp_abandon+0x168>)
 800fb8c:	484c      	ldr	r0, [pc, #304]	; (800fcc0 <tcp_abandon+0x164>)
 800fb8e:	f008 fab5 	bl	80180fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7d1b      	ldrb	r3, [r3, #20]
 800fb96:	2b0a      	cmp	r3, #10
 800fb98:	d107      	bne.n	800fbaa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fb9a:	6879      	ldr	r1, [r7, #4]
 800fb9c:	484a      	ldr	r0, [pc, #296]	; (800fcc8 <tcp_abandon+0x16c>)
 800fb9e:	f000 ffd1 	bl	8010b44 <tcp_pcb_remove>
    tcp_free(pcb);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f7ff fdb0 	bl	800f708 <tcp_free>
 800fba8:	e082      	b.n	800fcb0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbb6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbbc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbc4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	691b      	ldr	r3, [r3, #16]
 800fbca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	7d1b      	ldrb	r3, [r3, #20]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d126      	bne.n	800fc22 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	8adb      	ldrh	r3, [r3, #22]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d02e      	beq.n	800fc3a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fbdc:	4b3b      	ldr	r3, [pc, #236]	; (800fccc <tcp_abandon+0x170>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d105      	bne.n	800fbf2 <tcp_abandon+0x96>
 800fbe6:	4b39      	ldr	r3, [pc, #228]	; (800fccc <tcp_abandon+0x170>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	4a37      	ldr	r2, [pc, #220]	; (800fccc <tcp_abandon+0x170>)
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	e013      	b.n	800fc1a <tcp_abandon+0xbe>
 800fbf2:	4b36      	ldr	r3, [pc, #216]	; (800fccc <tcp_abandon+0x170>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	61fb      	str	r3, [r7, #28]
 800fbf8:	e00c      	b.n	800fc14 <tcp_abandon+0xb8>
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d104      	bne.n	800fc0e <tcp_abandon+0xb2>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	68da      	ldr	r2, [r3, #12]
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	60da      	str	r2, [r3, #12]
 800fc0c:	e005      	b.n	800fc1a <tcp_abandon+0xbe>
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	61fb      	str	r3, [r7, #28]
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1ef      	bne.n	800fbfa <tcp_abandon+0x9e>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	60da      	str	r2, [r3, #12]
 800fc20:	e00b      	b.n	800fc3a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	8adb      	ldrh	r3, [r3, #22]
 800fc2a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fc2c:	6879      	ldr	r1, [r7, #4]
 800fc2e:	4828      	ldr	r0, [pc, #160]	; (800fcd0 <tcp_abandon+0x174>)
 800fc30:	f000 ff88 	bl	8010b44 <tcp_pcb_remove>
 800fc34:	4b27      	ldr	r3, [pc, #156]	; (800fcd4 <tcp_abandon+0x178>)
 800fc36:	2201      	movs	r2, #1
 800fc38:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d004      	beq.n	800fc4c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 fd20 	bl	801068c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f000 fd17 	bl	801068c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d004      	beq.n	800fc70 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f000 fd0e 	bl	801068c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d00e      	beq.n	800fc94 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fc76:	6879      	ldr	r1, [r7, #4]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	3304      	adds	r3, #4
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	8b12      	ldrh	r2, [r2, #24]
 800fc80:	9202      	str	r2, [sp, #8]
 800fc82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc84:	9201      	str	r2, [sp, #4]
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	697a      	ldr	r2, [r7, #20]
 800fc8c:	69b9      	ldr	r1, [r7, #24]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f004 fccc 	bl	801462c <tcp_rst>
    }
    last_state = pcb->state;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	7d1b      	ldrb	r3, [r3, #20]
 800fc98:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7ff fd34 	bl	800f708 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d004      	beq.n	800fcb0 <tcp_abandon+0x154>
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	f06f 010c 	mvn.w	r1, #12
 800fcac:	68f8      	ldr	r0, [r7, #12]
 800fcae:	4798      	blx	r3
  }
}
 800fcb0:	3728      	adds	r7, #40	; 0x28
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	08019ee8 	.word	0x08019ee8
 800fcbc:	0801a02c 	.word	0x0801a02c
 800fcc0:	08019f2c 	.word	0x08019f2c
 800fcc4:	0801a048 	.word	0x0801a048
 800fcc8:	24024ea8 	.word	0x24024ea8
 800fccc:	24024ea4 	.word	0x24024ea4
 800fcd0:	24024e98 	.word	0x24024e98
 800fcd4:	24024e94 	.word	0x24024e94

0800fcd8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fce0:	2101      	movs	r1, #1
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7ff ff3a 	bl	800fb5c <tcp_abandon>
}
 800fce8:	bf00      	nop
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <tcp_update_rcv_ann_wnd+0x1c>
 800fcfe:	4b25      	ldr	r3, [pc, #148]	; (800fd94 <tcp_update_rcv_ann_wnd+0xa4>)
 800fd00:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fd04:	4924      	ldr	r1, [pc, #144]	; (800fd98 <tcp_update_rcv_ann_wnd+0xa8>)
 800fd06:	4825      	ldr	r0, [pc, #148]	; (800fd9c <tcp_update_rcv_ann_wnd+0xac>)
 800fd08:	f008 f9f8 	bl	80180fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fd14:	4413      	add	r3, r2
 800fd16:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fd20:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800fd24:	bf28      	it	cs
 800fd26:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800fd2a:	b292      	uxth	r2, r2
 800fd2c:	4413      	add	r3, r2
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	db08      	blt.n	800fd48 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	1ad3      	subs	r3, r2, r3
 800fd46:	e020      	b.n	800fd8a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dd03      	ble.n	800fd5e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fd5c:	e014      	b.n	800fd88 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd70:	d306      	bcc.n	800fd80 <tcp_update_rcv_ann_wnd+0x90>
 800fd72:	4b08      	ldr	r3, [pc, #32]	; (800fd94 <tcp_update_rcv_ann_wnd+0xa4>)
 800fd74:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fd78:	4909      	ldr	r1, [pc, #36]	; (800fda0 <tcp_update_rcv_ann_wnd+0xb0>)
 800fd7a:	4808      	ldr	r0, [pc, #32]	; (800fd9c <tcp_update_rcv_ann_wnd+0xac>)
 800fd7c:	f008 f9be 	bl	80180fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fd88:	2300      	movs	r3, #0
  }
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3710      	adds	r7, #16
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	08019ee8 	.word	0x08019ee8
 800fd98:	0801a144 	.word	0x0801a144
 800fd9c:	08019f2c 	.word	0x08019f2c
 800fda0:	0801a168 	.word	0x0801a168

0800fda4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	460b      	mov	r3, r1
 800fdae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d107      	bne.n	800fdc6 <tcp_recved+0x22>
 800fdb6:	4b1f      	ldr	r3, [pc, #124]	; (800fe34 <tcp_recved+0x90>)
 800fdb8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fdbc:	491e      	ldr	r1, [pc, #120]	; (800fe38 <tcp_recved+0x94>)
 800fdbe:	481f      	ldr	r0, [pc, #124]	; (800fe3c <tcp_recved+0x98>)
 800fdc0:	f008 f99c 	bl	80180fc <iprintf>
 800fdc4:	e032      	b.n	800fe2c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	7d1b      	ldrb	r3, [r3, #20]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d106      	bne.n	800fddc <tcp_recved+0x38>
 800fdce:	4b19      	ldr	r3, [pc, #100]	; (800fe34 <tcp_recved+0x90>)
 800fdd0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fdd4:	491a      	ldr	r1, [pc, #104]	; (800fe40 <tcp_recved+0x9c>)
 800fdd6:	4819      	ldr	r0, [pc, #100]	; (800fe3c <tcp_recved+0x98>)
 800fdd8:	f008 f990 	bl	80180fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fde0:	887b      	ldrh	r3, [r7, #2]
 800fde2:	4413      	add	r3, r2
 800fde4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fde6:	89fb      	ldrh	r3, [r7, #14]
 800fde8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdec:	d804      	bhi.n	800fdf8 <tcp_recved+0x54>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdf2:	89fa      	ldrh	r2, [r7, #14]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d204      	bcs.n	800fe02 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fdfe:	851a      	strh	r2, [r3, #40]	; 0x28
 800fe00:	e002      	b.n	800fe08 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	89fa      	ldrh	r2, [r7, #14]
 800fe06:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7ff ff71 	bl	800fcf0 <tcp_update_rcv_ann_wnd>
 800fe0e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fe16:	d309      	bcc.n	800fe2c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	8b5b      	ldrh	r3, [r3, #26]
 800fe1c:	f043 0302 	orr.w	r3, r3, #2
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f003 fe4c 	bl	8013ac4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	08019ee8 	.word	0x08019ee8
 800fe38:	0801a184 	.word	0x0801a184
 800fe3c:	08019f2c 	.word	0x08019f2c
 800fe40:	0801a19c 	.word	0x0801a19c

0800fe44 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fe44:	b5b0      	push	{r4, r5, r7, lr}
 800fe46:	b090      	sub	sp, #64	; 0x40
 800fe48:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fe50:	4b94      	ldr	r3, [pc, #592]	; (80100a4 <tcp_slowtmr+0x260>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	3301      	adds	r3, #1
 800fe56:	4a93      	ldr	r2, [pc, #588]	; (80100a4 <tcp_slowtmr+0x260>)
 800fe58:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fe5a:	4b93      	ldr	r3, [pc, #588]	; (80100a8 <tcp_slowtmr+0x264>)
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	4b91      	ldr	r3, [pc, #580]	; (80100a8 <tcp_slowtmr+0x264>)
 800fe64:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fe66:	2300      	movs	r3, #0
 800fe68:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fe6a:	4b90      	ldr	r3, [pc, #576]	; (80100ac <tcp_slowtmr+0x268>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fe70:	e2a6      	b.n	80103c0 <tcp_slowtmr+0x57c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fe72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe74:	7d1b      	ldrb	r3, [r3, #20]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d106      	bne.n	800fe88 <tcp_slowtmr+0x44>
 800fe7a:	4b8d      	ldr	r3, [pc, #564]	; (80100b0 <tcp_slowtmr+0x26c>)
 800fe7c:	f240 42be 	movw	r2, #1214	; 0x4be
 800fe80:	498c      	ldr	r1, [pc, #560]	; (80100b4 <tcp_slowtmr+0x270>)
 800fe82:	488d      	ldr	r0, [pc, #564]	; (80100b8 <tcp_slowtmr+0x274>)
 800fe84:	f008 f93a 	bl	80180fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fe88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8a:	7d1b      	ldrb	r3, [r3, #20]
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d106      	bne.n	800fe9e <tcp_slowtmr+0x5a>
 800fe90:	4b87      	ldr	r3, [pc, #540]	; (80100b0 <tcp_slowtmr+0x26c>)
 800fe92:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fe96:	4989      	ldr	r1, [pc, #548]	; (80100bc <tcp_slowtmr+0x278>)
 800fe98:	4887      	ldr	r0, [pc, #540]	; (80100b8 <tcp_slowtmr+0x274>)
 800fe9a:	f008 f92f 	bl	80180fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fe9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea0:	7d1b      	ldrb	r3, [r3, #20]
 800fea2:	2b0a      	cmp	r3, #10
 800fea4:	d106      	bne.n	800feb4 <tcp_slowtmr+0x70>
 800fea6:	4b82      	ldr	r3, [pc, #520]	; (80100b0 <tcp_slowtmr+0x26c>)
 800fea8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800feac:	4984      	ldr	r1, [pc, #528]	; (80100c0 <tcp_slowtmr+0x27c>)
 800feae:	4882      	ldr	r0, [pc, #520]	; (80100b8 <tcp_slowtmr+0x274>)
 800feb0:	f008 f924 	bl	80180fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800feb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb6:	7f9a      	ldrb	r2, [r3, #30]
 800feb8:	4b7b      	ldr	r3, [pc, #492]	; (80100a8 <tcp_slowtmr+0x264>)
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	429a      	cmp	r2, r3
 800febe:	d105      	bne.n	800fecc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800feca:	e279      	b.n	80103c0 <tcp_slowtmr+0x57c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fecc:	4b76      	ldr	r3, [pc, #472]	; (80100a8 <tcp_slowtmr+0x264>)
 800fece:	781a      	ldrb	r2, [r3, #0]
 800fed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fed4:	2300      	movs	r3, #0
 800fed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800feda:	2300      	movs	r3, #0
 800fedc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	7d1b      	ldrb	r3, [r3, #20]
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d10a      	bne.n	800fefe <tcp_slowtmr+0xba>
 800fee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800feee:	2b05      	cmp	r3, #5
 800fef0:	d905      	bls.n	800fefe <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fef6:	3301      	adds	r3, #1
 800fef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fefc:	e11e      	b.n	801013c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff04:	2b0b      	cmp	r3, #11
 800ff06:	d905      	bls.n	800ff14 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ff08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff12:	e113      	b.n	801013c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ff14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff16:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d075      	beq.n	801000a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d006      	beq.n	800ff34 <tcp_slowtmr+0xf0>
 800ff26:	4b62      	ldr	r3, [pc, #392]	; (80100b0 <tcp_slowtmr+0x26c>)
 800ff28:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ff2c:	4965      	ldr	r1, [pc, #404]	; (80100c4 <tcp_slowtmr+0x280>)
 800ff2e:	4862      	ldr	r0, [pc, #392]	; (80100b8 <tcp_slowtmr+0x274>)
 800ff30:	f008 f8e4 	bl	80180fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d106      	bne.n	800ff4a <tcp_slowtmr+0x106>
 800ff3c:	4b5c      	ldr	r3, [pc, #368]	; (80100b0 <tcp_slowtmr+0x26c>)
 800ff3e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ff42:	4961      	ldr	r1, [pc, #388]	; (80100c8 <tcp_slowtmr+0x284>)
 800ff44:	485c      	ldr	r0, [pc, #368]	; (80100b8 <tcp_slowtmr+0x274>)
 800ff46:	f008 f8d9 	bl	80180fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ff4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800ff50:	2b0b      	cmp	r3, #11
 800ff52:	d905      	bls.n	800ff60 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ff54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff58:	3301      	adds	r3, #1
 800ff5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff5e:	e0ed      	b.n	801013c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ff60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff62:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ff66:	3b01      	subs	r3, #1
 800ff68:	4a58      	ldr	r2, [pc, #352]	; (80100cc <tcp_slowtmr+0x288>)
 800ff6a:	5cd3      	ldrb	r3, [r2, r3]
 800ff6c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ff74:	7c7a      	ldrb	r2, [r7, #17]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d907      	bls.n	800ff8a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ff7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ff80:	3301      	adds	r3, #1
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ff8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ff90:	7c7a      	ldrb	r2, [r7, #17]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	f200 80d2 	bhi.w	801013c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ff98:	2301      	movs	r3, #1
 800ff9a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ff9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d108      	bne.n	800ffb8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ffa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffa8:	f004 fc34 	bl	8014814 <tcp_zero_window_probe>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d014      	beq.n	800ffdc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	623b      	str	r3, [r7, #32]
 800ffb6:	e011      	b.n	800ffdc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ffb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffc2:	f003 faf9 	bl	80135b8 <tcp_split_unsent_seg>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d107      	bne.n	800ffdc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ffcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffce:	f003 fd79 	bl	8013ac4 <tcp_output>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	f000 80ac 	beq.w	801013c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ffe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffee:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800fff2:	2b06      	cmp	r3, #6
 800fff4:	f200 80a2 	bhi.w	801013c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800fffe:	3301      	adds	r3, #1
 8010000:	b2da      	uxtb	r2, r3
 8010002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8010008:	e098      	b.n	801013c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801000a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010010:	2b00      	cmp	r3, #0
 8010012:	db0f      	blt.n	8010034 <tcp_slowtmr+0x1f0>
 8010014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010016:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801001a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801001e:	4293      	cmp	r3, r2
 8010020:	d008      	beq.n	8010034 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010024:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010028:	b29b      	uxth	r3, r3
 801002a:	3301      	adds	r3, #1
 801002c:	b29b      	uxth	r3, r3
 801002e:	b21a      	sxth	r2, r3
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010036:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801003a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010040:	429a      	cmp	r2, r3
 8010042:	db7b      	blt.n	801013c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010046:	f004 f82f 	bl	80140a8 <tcp_rexmit_rto_prepare>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d007      	beq.n	8010060 <tcp_slowtmr+0x21c>
 8010050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010054:	2b00      	cmp	r3, #0
 8010056:	d171      	bne.n	801013c <tcp_slowtmr+0x2f8>
 8010058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801005c:	2b00      	cmp	r3, #0
 801005e:	d06d      	beq.n	801013c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010062:	7d1b      	ldrb	r3, [r3, #20]
 8010064:	2b02      	cmp	r3, #2
 8010066:	d03a      	beq.n	80100de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801006e:	2b0c      	cmp	r3, #12
 8010070:	bf28      	it	cs
 8010072:	230c      	movcs	r3, #12
 8010074:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010078:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801007c:	10db      	asrs	r3, r3, #3
 801007e:	b21b      	sxth	r3, r3
 8010080:	461a      	mov	r2, r3
 8010082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010084:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010088:	4413      	add	r3, r2
 801008a:	7efa      	ldrb	r2, [r7, #27]
 801008c:	4910      	ldr	r1, [pc, #64]	; (80100d0 <tcp_slowtmr+0x28c>)
 801008e:	5c8a      	ldrb	r2, [r1, r2]
 8010090:	4093      	lsls	r3, r2
 8010092:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801009a:	4293      	cmp	r3, r2
 801009c:	dc1a      	bgt.n	80100d4 <tcp_slowtmr+0x290>
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	b21a      	sxth	r2, r3
 80100a2:	e019      	b.n	80100d8 <tcp_slowtmr+0x294>
 80100a4:	24024e9c 	.word	0x24024e9c
 80100a8:	2402180e 	.word	0x2402180e
 80100ac:	24024e98 	.word	0x24024e98
 80100b0:	08019ee8 	.word	0x08019ee8
 80100b4:	0801a22c 	.word	0x0801a22c
 80100b8:	08019f2c 	.word	0x08019f2c
 80100bc:	0801a258 	.word	0x0801a258
 80100c0:	0801a284 	.word	0x0801a284
 80100c4:	0801a2b4 	.word	0x0801a2b4
 80100c8:	0801a2e8 	.word	0x0801a2e8
 80100cc:	0801bf40 	.word	0x0801bf40
 80100d0:	0801bf30 	.word	0x0801bf30
 80100d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80100d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	2200      	movs	r2, #0
 80100e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80100f0:	4293      	cmp	r3, r2
 80100f2:	bf28      	it	cs
 80100f4:	4613      	movcs	r3, r2
 80100f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80100f8:	8a7b      	ldrh	r3, [r7, #18]
 80100fa:	085b      	lsrs	r3, r3, #1
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010100:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010106:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	b29b      	uxth	r3, r3
 8010112:	429a      	cmp	r2, r3
 8010114:	d206      	bcs.n	8010124 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	b29a      	uxth	r2, r3
 801011e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010120:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010126:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801012e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010130:	2200      	movs	r2, #0
 8010132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010138:	f004 f826 	bl	8014188 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801013c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013e:	7d1b      	ldrb	r3, [r3, #20]
 8010140:	2b06      	cmp	r3, #6
 8010142:	d111      	bne.n	8010168 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010146:	8b5b      	ldrh	r3, [r3, #26]
 8010148:	f003 0310 	and.w	r3, r3, #16
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00b      	beq.n	8010168 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010150:	4ba0      	ldr	r3, [pc, #640]	; (80103d4 <tcp_slowtmr+0x590>)
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010156:	6a1b      	ldr	r3, [r3, #32]
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	2b28      	cmp	r3, #40	; 0x28
 801015c:	d904      	bls.n	8010168 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801015e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010162:	3301      	adds	r3, #1
 8010164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016a:	7a5b      	ldrb	r3, [r3, #9]
 801016c:	f003 0308 	and.w	r3, r3, #8
 8010170:	2b00      	cmp	r3, #0
 8010172:	d053      	beq.n	801021c <tcp_slowtmr+0x3d8>
        ((pcb->state == ESTABLISHED) ||
 8010174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010176:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010178:	2b04      	cmp	r3, #4
 801017a:	d003      	beq.n	8010184 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801017c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010180:	2b07      	cmp	r3, #7
 8010182:	d14b      	bne.n	801021c <tcp_slowtmr+0x3d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010184:	4b93      	ldr	r3, [pc, #588]	; (80103d4 <tcp_slowtmr+0x590>)
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018a:	6a1b      	ldr	r3, [r3, #32]
 801018c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801018e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010190:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801019a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801019c:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 80101a0:	fb00 f303 	mul.w	r3, r0, r3
 80101a4:	440b      	add	r3, r1
 80101a6:	498c      	ldr	r1, [pc, #560]	; (80103d8 <tcp_slowtmr+0x594>)
 80101a8:	fba1 1303 	umull	r1, r3, r1, r3
 80101ac:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d90a      	bls.n	80101c8 <tcp_slowtmr+0x384>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80101b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101b6:	3301      	adds	r3, #1
 80101b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80101bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101c0:	3301      	adds	r3, #1
 80101c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80101c6:	e029      	b.n	801021c <tcp_slowtmr+0x3d8>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101c8:	4b82      	ldr	r3, [pc, #520]	; (80103d4 <tcp_slowtmr+0x590>)
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	6a1b      	ldr	r3, [r3, #32]
 80101d0:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80101d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80101d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101da:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80101de:	4618      	mov	r0, r3
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80101e6:	fb03 f300 	mul.w	r3, r3, r0
 80101ea:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80101ec:	497a      	ldr	r1, [pc, #488]	; (80103d8 <tcp_slowtmr+0x594>)
 80101ee:	fba1 1303 	umull	r1, r3, r1, r3
 80101f2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d911      	bls.n	801021c <tcp_slowtmr+0x3d8>
        err = tcp_keepalive(pcb);
 80101f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101fa:	f004 facb 	bl	8014794 <tcp_keepalive>
 80101fe:	4603      	mov	r3, r0
 8010200:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010204:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010208:	2b00      	cmp	r3, #0
 801020a:	d107      	bne.n	801021c <tcp_slowtmr+0x3d8>
          pcb->keep_cnt_sent++;
 801020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8010212:	3301      	adds	r3, #1
 8010214:	b2da      	uxtb	r2, r3
 8010216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010218:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801021c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010220:	2b00      	cmp	r3, #0
 8010222:	d011      	beq.n	8010248 <tcp_slowtmr+0x404>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010224:	4b6b      	ldr	r3, [pc, #428]	; (80103d4 <tcp_slowtmr+0x590>)
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022a:	6a1b      	ldr	r3, [r3, #32]
 801022c:	1ad2      	subs	r2, r2, r3
 801022e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010230:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010234:	4619      	mov	r1, r3
 8010236:	460b      	mov	r3, r1
 8010238:	005b      	lsls	r3, r3, #1
 801023a:	440b      	add	r3, r1
 801023c:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801023e:	429a      	cmp	r2, r3
 8010240:	d302      	bcc.n	8010248 <tcp_slowtmr+0x404>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010244:	f000 fde2 	bl	8010e0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024a:	7d1b      	ldrb	r3, [r3, #20]
 801024c:	2b03      	cmp	r3, #3
 801024e:	d10b      	bne.n	8010268 <tcp_slowtmr+0x424>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010250:	4b60      	ldr	r3, [pc, #384]	; (80103d4 <tcp_slowtmr+0x590>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010256:	6a1b      	ldr	r3, [r3, #32]
 8010258:	1ad3      	subs	r3, r2, r3
 801025a:	2b28      	cmp	r3, #40	; 0x28
 801025c:	d904      	bls.n	8010268 <tcp_slowtmr+0x424>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801025e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010262:	3301      	adds	r3, #1
 8010264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026a:	7d1b      	ldrb	r3, [r3, #20]
 801026c:	2b09      	cmp	r3, #9
 801026e:	d10b      	bne.n	8010288 <tcp_slowtmr+0x444>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010270:	4b58      	ldr	r3, [pc, #352]	; (80103d4 <tcp_slowtmr+0x590>)
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010276:	6a1b      	ldr	r3, [r3, #32]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	2bf0      	cmp	r3, #240	; 0xf0
 801027c:	d904      	bls.n	8010288 <tcp_slowtmr+0x444>
        ++pcb_remove;
 801027e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010282:	3301      	adds	r3, #1
 8010284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801028c:	2b00      	cmp	r3, #0
 801028e:	d060      	beq.n	8010352 <tcp_slowtmr+0x50e>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010296:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801029a:	f000 fc03 	bl	8010aa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801029e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d010      	beq.n	80102c6 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80102a4:	4b4d      	ldr	r3, [pc, #308]	; (80103dc <tcp_slowtmr+0x598>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d106      	bne.n	80102bc <tcp_slowtmr+0x478>
 80102ae:	4b4c      	ldr	r3, [pc, #304]	; (80103e0 <tcp_slowtmr+0x59c>)
 80102b0:	f240 526d 	movw	r2, #1389	; 0x56d
 80102b4:	494b      	ldr	r1, [pc, #300]	; (80103e4 <tcp_slowtmr+0x5a0>)
 80102b6:	484c      	ldr	r0, [pc, #304]	; (80103e8 <tcp_slowtmr+0x5a4>)
 80102b8:	f007 ff20 	bl	80180fc <iprintf>
        prev->next = pcb->next;
 80102bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102be:	68da      	ldr	r2, [r3, #12]
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	60da      	str	r2, [r3, #12]
 80102c4:	e00f      	b.n	80102e6 <tcp_slowtmr+0x4a2>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80102c6:	4b45      	ldr	r3, [pc, #276]	; (80103dc <tcp_slowtmr+0x598>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d006      	beq.n	80102de <tcp_slowtmr+0x49a>
 80102d0:	4b43      	ldr	r3, [pc, #268]	; (80103e0 <tcp_slowtmr+0x59c>)
 80102d2:	f240 5271 	movw	r2, #1393	; 0x571
 80102d6:	4945      	ldr	r1, [pc, #276]	; (80103ec <tcp_slowtmr+0x5a8>)
 80102d8:	4843      	ldr	r0, [pc, #268]	; (80103e8 <tcp_slowtmr+0x5a4>)
 80102da:	f007 ff0f 	bl	80180fc <iprintf>
        tcp_active_pcbs = pcb->next;
 80102de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	4a3e      	ldr	r2, [pc, #248]	; (80103dc <tcp_slowtmr+0x598>)
 80102e4:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80102e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d013      	beq.n	8010316 <tcp_slowtmr+0x4d2>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80102ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80102f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80102f6:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	3304      	adds	r3, #4
 80102fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102fe:	8ad2      	ldrh	r2, [r2, #22]
 8010300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010302:	8b09      	ldrh	r1, [r1, #24]
 8010304:	9102      	str	r1, [sp, #8]
 8010306:	9201      	str	r2, [sp, #4]
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	462b      	mov	r3, r5
 801030c:	4622      	mov	r2, r4
 801030e:	4601      	mov	r1, r0
 8010310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010312:	f004 f98b 	bl	801462c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010318:	691b      	ldr	r3, [r3, #16]
 801031a:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	7d1b      	ldrb	r3, [r3, #20]
 8010320:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010324:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801032c:	6838      	ldr	r0, [r7, #0]
 801032e:	f7ff f9eb 	bl	800f708 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010332:	4b2f      	ldr	r3, [pc, #188]	; (80103f0 <tcp_slowtmr+0x5ac>)
 8010334:	2200      	movs	r2, #0
 8010336:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d004      	beq.n	8010348 <tcp_slowtmr+0x504>
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f06f 010c 	mvn.w	r1, #12
 8010344:	68b8      	ldr	r0, [r7, #8]
 8010346:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010348:	4b29      	ldr	r3, [pc, #164]	; (80103f0 <tcp_slowtmr+0x5ac>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d037      	beq.n	80103c0 <tcp_slowtmr+0x57c>
        goto tcp_slowtmr_start;
 8010350:	e589      	b.n	800fe66 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010354:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801035c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035e:	7f1b      	ldrb	r3, [r3, #28]
 8010360:	3301      	adds	r3, #1
 8010362:	b2da      	uxtb	r2, r3
 8010364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010366:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036a:	7f1a      	ldrb	r2, [r3, #28]
 801036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036e:	7f5b      	ldrb	r3, [r3, #29]
 8010370:	429a      	cmp	r2, r3
 8010372:	d325      	bcc.n	80103c0 <tcp_slowtmr+0x57c>
        prev->polltmr = 0;
 8010374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010376:	2200      	movs	r2, #0
 8010378:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801037a:	4b1d      	ldr	r3, [pc, #116]	; (80103f0 <tcp_slowtmr+0x5ac>)
 801037c:	2200      	movs	r2, #0
 801037e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00b      	beq.n	80103a2 <tcp_slowtmr+0x55e>
 801038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010392:	6912      	ldr	r2, [r2, #16]
 8010394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010396:	4610      	mov	r0, r2
 8010398:	4798      	blx	r3
 801039a:	4603      	mov	r3, r0
 801039c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80103a0:	e002      	b.n	80103a8 <tcp_slowtmr+0x564>
 80103a2:	2300      	movs	r3, #0
 80103a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80103a8:	4b11      	ldr	r3, [pc, #68]	; (80103f0 <tcp_slowtmr+0x5ac>)
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d000      	beq.n	80103b2 <tcp_slowtmr+0x56e>
          goto tcp_slowtmr_start;
 80103b0:	e559      	b.n	800fe66 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80103b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d102      	bne.n	80103c0 <tcp_slowtmr+0x57c>
          tcp_output(prev);
 80103ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103bc:	f003 fb82 	bl	8013ac4 <tcp_output>
  while (pcb != NULL) {
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f47f ad55 	bne.w	800fe72 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80103c8:	2300      	movs	r3, #0
 80103ca:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80103cc:	4b09      	ldr	r3, [pc, #36]	; (80103f4 <tcp_slowtmr+0x5b0>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80103d2:	e064      	b.n	801049e <tcp_slowtmr+0x65a>
 80103d4:	24024e9c 	.word	0x24024e9c
 80103d8:	10624dd3 	.word	0x10624dd3
 80103dc:	24024e98 	.word	0x24024e98
 80103e0:	08019ee8 	.word	0x08019ee8
 80103e4:	0801a320 	.word	0x0801a320
 80103e8:	08019f2c 	.word	0x08019f2c
 80103ec:	0801a34c 	.word	0x0801a34c
 80103f0:	24024e94 	.word	0x24024e94
 80103f4:	24024ea8 	.word	0x24024ea8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80103f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fa:	7d1b      	ldrb	r3, [r3, #20]
 80103fc:	2b0a      	cmp	r3, #10
 80103fe:	d006      	beq.n	801040e <tcp_slowtmr+0x5ca>
 8010400:	4b2b      	ldr	r3, [pc, #172]	; (80104b0 <tcp_slowtmr+0x66c>)
 8010402:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010406:	492b      	ldr	r1, [pc, #172]	; (80104b4 <tcp_slowtmr+0x670>)
 8010408:	482b      	ldr	r0, [pc, #172]	; (80104b8 <tcp_slowtmr+0x674>)
 801040a:	f007 fe77 	bl	80180fc <iprintf>
    pcb_remove = 0;
 801040e:	2300      	movs	r3, #0
 8010410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010414:	4b29      	ldr	r3, [pc, #164]	; (80104bc <tcp_slowtmr+0x678>)
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	6a1b      	ldr	r3, [r3, #32]
 801041c:	1ad3      	subs	r3, r2, r3
 801041e:	2bf0      	cmp	r3, #240	; 0xf0
 8010420:	d904      	bls.n	801042c <tcp_slowtmr+0x5e8>
      ++pcb_remove;
 8010422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010426:	3301      	adds	r3, #1
 8010428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801042c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010430:	2b00      	cmp	r3, #0
 8010432:	d02f      	beq.n	8010494 <tcp_slowtmr+0x650>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010436:	f000 fb35 	bl	8010aa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801043a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043c:	2b00      	cmp	r3, #0
 801043e:	d010      	beq.n	8010462 <tcp_slowtmr+0x61e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010440:	4b1f      	ldr	r3, [pc, #124]	; (80104c0 <tcp_slowtmr+0x67c>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010446:	429a      	cmp	r2, r3
 8010448:	d106      	bne.n	8010458 <tcp_slowtmr+0x614>
 801044a:	4b19      	ldr	r3, [pc, #100]	; (80104b0 <tcp_slowtmr+0x66c>)
 801044c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010450:	491c      	ldr	r1, [pc, #112]	; (80104c4 <tcp_slowtmr+0x680>)
 8010452:	4819      	ldr	r0, [pc, #100]	; (80104b8 <tcp_slowtmr+0x674>)
 8010454:	f007 fe52 	bl	80180fc <iprintf>
        prev->next = pcb->next;
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	68da      	ldr	r2, [r3, #12]
 801045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045e:	60da      	str	r2, [r3, #12]
 8010460:	e00f      	b.n	8010482 <tcp_slowtmr+0x63e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010462:	4b17      	ldr	r3, [pc, #92]	; (80104c0 <tcp_slowtmr+0x67c>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010468:	429a      	cmp	r2, r3
 801046a:	d006      	beq.n	801047a <tcp_slowtmr+0x636>
 801046c:	4b10      	ldr	r3, [pc, #64]	; (80104b0 <tcp_slowtmr+0x66c>)
 801046e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010472:	4915      	ldr	r1, [pc, #84]	; (80104c8 <tcp_slowtmr+0x684>)
 8010474:	4810      	ldr	r0, [pc, #64]	; (80104b8 <tcp_slowtmr+0x674>)
 8010476:	f007 fe41 	bl	80180fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	4a10      	ldr	r2, [pc, #64]	; (80104c0 <tcp_slowtmr+0x67c>)
 8010480:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010484:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801048c:	69f8      	ldr	r0, [r7, #28]
 801048e:	f7ff f93b 	bl	800f708 <tcp_free>
 8010492:	e004      	b.n	801049e <tcp_slowtmr+0x65a>
    } else {
      prev = pcb;
 8010494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010496:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d1a9      	bne.n	80103f8 <tcp_slowtmr+0x5b4>
    }
  }
}
 80104a4:	bf00      	nop
 80104a6:	bf00      	nop
 80104a8:	3730      	adds	r7, #48	; 0x30
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bdb0      	pop	{r4, r5, r7, pc}
 80104ae:	bf00      	nop
 80104b0:	08019ee8 	.word	0x08019ee8
 80104b4:	0801a378 	.word	0x0801a378
 80104b8:	08019f2c 	.word	0x08019f2c
 80104bc:	24024e9c 	.word	0x24024e9c
 80104c0:	24024ea8 	.word	0x24024ea8
 80104c4:	0801a3a8 	.word	0x0801a3a8
 80104c8:	0801a3d0 	.word	0x0801a3d0

080104cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80104d2:	4b2d      	ldr	r3, [pc, #180]	; (8010588 <tcp_fasttmr+0xbc>)
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	3301      	adds	r3, #1
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	4b2b      	ldr	r3, [pc, #172]	; (8010588 <tcp_fasttmr+0xbc>)
 80104dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80104de:	4b2b      	ldr	r3, [pc, #172]	; (801058c <tcp_fasttmr+0xc0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80104e4:	e048      	b.n	8010578 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	7f9a      	ldrb	r2, [r3, #30]
 80104ea:	4b27      	ldr	r3, [pc, #156]	; (8010588 <tcp_fasttmr+0xbc>)
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d03f      	beq.n	8010572 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80104f2:	4b25      	ldr	r3, [pc, #148]	; (8010588 <tcp_fasttmr+0xbc>)
 80104f4:	781a      	ldrb	r2, [r3, #0]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	8b5b      	ldrh	r3, [r3, #26]
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	d010      	beq.n	8010528 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	8b5b      	ldrh	r3, [r3, #26]
 801050a:	f043 0302 	orr.w	r3, r3, #2
 801050e:	b29a      	uxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f003 fad5 	bl	8013ac4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	8b5b      	ldrh	r3, [r3, #26]
 801051e:	f023 0303 	bic.w	r3, r3, #3
 8010522:	b29a      	uxth	r2, r3
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	8b5b      	ldrh	r3, [r3, #26]
 801052c:	f003 0308 	and.w	r3, r3, #8
 8010530:	2b00      	cmp	r3, #0
 8010532:	d009      	beq.n	8010548 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	8b5b      	ldrh	r3, [r3, #26]
 8010538:	f023 0308 	bic.w	r3, r3, #8
 801053c:	b29a      	uxth	r2, r3
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7ff fa74 	bl	800fa30 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00a      	beq.n	801056c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010556:	4b0e      	ldr	r3, [pc, #56]	; (8010590 <tcp_fasttmr+0xc4>)
 8010558:	2200      	movs	r2, #0
 801055a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 f819 	bl	8010594 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010562:	4b0b      	ldr	r3, [pc, #44]	; (8010590 <tcp_fasttmr+0xc4>)
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d000      	beq.n	801056c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801056a:	e7b8      	b.n	80104de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	607b      	str	r3, [r7, #4]
 8010570:	e002      	b.n	8010578 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1b3      	bne.n	80104e6 <tcp_fasttmr+0x1a>
    }
  }
}
 801057e:	bf00      	nop
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	2402180e 	.word	0x2402180e
 801058c:	24024e98 	.word	0x24024e98
 8010590:	24024e94 	.word	0x24024e94

08010594 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010594:	b590      	push	{r4, r7, lr}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d109      	bne.n	80105b6 <tcp_process_refused_data+0x22>
 80105a2:	4b37      	ldr	r3, [pc, #220]	; (8010680 <tcp_process_refused_data+0xec>)
 80105a4:	f240 6209 	movw	r2, #1545	; 0x609
 80105a8:	4936      	ldr	r1, [pc, #216]	; (8010684 <tcp_process_refused_data+0xf0>)
 80105aa:	4837      	ldr	r0, [pc, #220]	; (8010688 <tcp_process_refused_data+0xf4>)
 80105ac:	f007 fda6 	bl	80180fc <iprintf>
 80105b0:	f06f 030f 	mvn.w	r3, #15
 80105b4:	e060      	b.n	8010678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105ba:	7b5b      	ldrb	r3, [r3, #13]
 80105bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d00b      	beq.n	80105ec <tcp_process_refused_data+0x58>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6918      	ldr	r0, [r3, #16]
 80105de:	2300      	movs	r3, #0
 80105e0:	68ba      	ldr	r2, [r7, #8]
 80105e2:	6879      	ldr	r1, [r7, #4]
 80105e4:	47a0      	blx	r4
 80105e6:	4603      	mov	r3, r0
 80105e8:	73fb      	strb	r3, [r7, #15]
 80105ea:	e007      	b.n	80105fc <tcp_process_refused_data+0x68>
 80105ec:	2300      	movs	r3, #0
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	6879      	ldr	r1, [r7, #4]
 80105f2:	2000      	movs	r0, #0
 80105f4:	f000 f8a4 	bl	8010740 <tcp_recv_null>
 80105f8:	4603      	mov	r3, r0
 80105fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80105fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d12a      	bne.n	801065a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010604:	7bbb      	ldrb	r3, [r7, #14]
 8010606:	f003 0320 	and.w	r3, r3, #32
 801060a:	2b00      	cmp	r3, #0
 801060c:	d033      	beq.n	8010676 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010612:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010616:	d005      	beq.n	8010624 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801061c:	3301      	adds	r3, #1
 801061e:	b29a      	uxth	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00b      	beq.n	8010646 <tcp_process_refused_data+0xb2>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6918      	ldr	r0, [r3, #16]
 8010638:	2300      	movs	r3, #0
 801063a:	2200      	movs	r2, #0
 801063c:	6879      	ldr	r1, [r7, #4]
 801063e:	47a0      	blx	r4
 8010640:	4603      	mov	r3, r0
 8010642:	73fb      	strb	r3, [r7, #15]
 8010644:	e001      	b.n	801064a <tcp_process_refused_data+0xb6>
 8010646:	2300      	movs	r3, #0
 8010648:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801064a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801064e:	f113 0f0d 	cmn.w	r3, #13
 8010652:	d110      	bne.n	8010676 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010654:	f06f 030c 	mvn.w	r3, #12
 8010658:	e00e      	b.n	8010678 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801065a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801065e:	f113 0f0d 	cmn.w	r3, #13
 8010662:	d102      	bne.n	801066a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010664:	f06f 030c 	mvn.w	r3, #12
 8010668:	e006      	b.n	8010678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	68ba      	ldr	r2, [r7, #8]
 801066e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010670:	f06f 0304 	mvn.w	r3, #4
 8010674:	e000      	b.n	8010678 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010676:	2300      	movs	r3, #0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3714      	adds	r7, #20
 801067c:	46bd      	mov	sp, r7
 801067e:	bd90      	pop	{r4, r7, pc}
 8010680:	08019ee8 	.word	0x08019ee8
 8010684:	0801a3f8 	.word	0x0801a3f8
 8010688:	08019f2c 	.word	0x08019f2c

0801068c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010694:	e007      	b.n	80106a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f000 f80a 	bl	80106b6 <tcp_seg_free>
    seg = next;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1f4      	bne.n	8010696 <tcp_segs_free+0xa>
  }
}
 80106ac:	bf00      	nop
 80106ae:	bf00      	nop
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b082      	sub	sp, #8
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d00c      	beq.n	80106de <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d004      	beq.n	80106d6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fe fd61 	bl	800f198 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80106d6:	6879      	ldr	r1, [r7, #4]
 80106d8:	2003      	movs	r0, #3
 80106da:	f7fd fe97 	bl	800e40c <memp_free>
  }
}
 80106de:	bf00      	nop
 80106e0:	3708      	adds	r7, #8
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
	...

080106e8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d106      	bne.n	8010704 <tcp_seg_copy+0x1c>
 80106f6:	4b0f      	ldr	r3, [pc, #60]	; (8010734 <tcp_seg_copy+0x4c>)
 80106f8:	f240 6282 	movw	r2, #1666	; 0x682
 80106fc:	490e      	ldr	r1, [pc, #56]	; (8010738 <tcp_seg_copy+0x50>)
 80106fe:	480f      	ldr	r0, [pc, #60]	; (801073c <tcp_seg_copy+0x54>)
 8010700:	f007 fcfc 	bl	80180fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010704:	2003      	movs	r0, #3
 8010706:	f7fd fe0b 	bl	800e320 <memp_malloc>
 801070a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d101      	bne.n	8010716 <tcp_seg_copy+0x2e>
    return NULL;
 8010712:	2300      	movs	r3, #0
 8010714:	e00a      	b.n	801072c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010716:	2210      	movs	r2, #16
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	68f8      	ldr	r0, [r7, #12]
 801071c:	f007 fcd8 	bl	80180d0 <memcpy>
  pbuf_ref(cseg->p);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	4618      	mov	r0, r3
 8010726:	f7fe fddd 	bl	800f2e4 <pbuf_ref>
  return cseg;
 801072a:	68fb      	ldr	r3, [r7, #12]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3710      	adds	r7, #16
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	08019ee8 	.word	0x08019ee8
 8010738:	0801a43c 	.word	0x0801a43c
 801073c:	08019f2c 	.word	0x08019f2c

08010740 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d109      	bne.n	8010768 <tcp_recv_null+0x28>
 8010754:	4b12      	ldr	r3, [pc, #72]	; (80107a0 <tcp_recv_null+0x60>)
 8010756:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801075a:	4912      	ldr	r1, [pc, #72]	; (80107a4 <tcp_recv_null+0x64>)
 801075c:	4812      	ldr	r0, [pc, #72]	; (80107a8 <tcp_recv_null+0x68>)
 801075e:	f007 fccd 	bl	80180fc <iprintf>
 8010762:	f06f 030f 	mvn.w	r3, #15
 8010766:	e016      	b.n	8010796 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d009      	beq.n	8010782 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	891b      	ldrh	r3, [r3, #8]
 8010772:	4619      	mov	r1, r3
 8010774:	68b8      	ldr	r0, [r7, #8]
 8010776:	f7ff fb15 	bl	800fda4 <tcp_recved>
    pbuf_free(p);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7fe fd0c 	bl	800f198 <pbuf_free>
 8010780:	e008      	b.n	8010794 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d104      	bne.n	8010794 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801078a:	68b8      	ldr	r0, [r7, #8]
 801078c:	f7ff f9ba 	bl	800fb04 <tcp_close>
 8010790:	4603      	mov	r3, r0
 8010792:	e000      	b.n	8010796 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010794:	2300      	movs	r3, #0
}
 8010796:	4618      	mov	r0, r3
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	08019ee8 	.word	0x08019ee8
 80107a4:	0801a458 	.word	0x0801a458
 80107a8:	08019f2c 	.word	0x08019f2c

080107ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b086      	sub	sp, #24
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	4603      	mov	r3, r0
 80107b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80107b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	db01      	blt.n	80107c2 <tcp_kill_prio+0x16>
 80107be:	79fb      	ldrb	r3, [r7, #7]
 80107c0:	e000      	b.n	80107c4 <tcp_kill_prio+0x18>
 80107c2:	237f      	movs	r3, #127	; 0x7f
 80107c4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80107c6:	7afb      	ldrb	r3, [r7, #11]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d034      	beq.n	8010836 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80107cc:	7afb      	ldrb	r3, [r7, #11]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80107d6:	2300      	movs	r3, #0
 80107d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80107da:	4b19      	ldr	r3, [pc, #100]	; (8010840 <tcp_kill_prio+0x94>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	617b      	str	r3, [r7, #20]
 80107e0:	e01f      	b.n	8010822 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	7d5b      	ldrb	r3, [r3, #21]
 80107e6:	7afa      	ldrb	r2, [r7, #11]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d80c      	bhi.n	8010806 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80107f0:	7afa      	ldrb	r2, [r7, #11]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d112      	bne.n	801081c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80107f6:	4b13      	ldr	r3, [pc, #76]	; (8010844 <tcp_kill_prio+0x98>)
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	429a      	cmp	r2, r3
 8010804:	d80a      	bhi.n	801081c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010806:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <tcp_kill_prio+0x98>)
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	6a1b      	ldr	r3, [r3, #32]
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	7d5b      	ldrb	r3, [r3, #21]
 801081a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	68db      	ldr	r3, [r3, #12]
 8010820:	617b      	str	r3, [r7, #20]
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1dc      	bne.n	80107e2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d004      	beq.n	8010838 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801082e:	6938      	ldr	r0, [r7, #16]
 8010830:	f7ff fa52 	bl	800fcd8 <tcp_abort>
 8010834:	e000      	b.n	8010838 <tcp_kill_prio+0x8c>
    return;
 8010836:	bf00      	nop
  }
}
 8010838:	3718      	adds	r7, #24
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	24024e98 	.word	0x24024e98
 8010844:	24024e9c 	.word	0x24024e9c

08010848 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b086      	sub	sp, #24
 801084c:	af00      	add	r7, sp, #0
 801084e:	4603      	mov	r3, r0
 8010850:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010852:	79fb      	ldrb	r3, [r7, #7]
 8010854:	2b08      	cmp	r3, #8
 8010856:	d009      	beq.n	801086c <tcp_kill_state+0x24>
 8010858:	79fb      	ldrb	r3, [r7, #7]
 801085a:	2b09      	cmp	r3, #9
 801085c:	d006      	beq.n	801086c <tcp_kill_state+0x24>
 801085e:	4b1a      	ldr	r3, [pc, #104]	; (80108c8 <tcp_kill_state+0x80>)
 8010860:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010864:	4919      	ldr	r1, [pc, #100]	; (80108cc <tcp_kill_state+0x84>)
 8010866:	481a      	ldr	r0, [pc, #104]	; (80108d0 <tcp_kill_state+0x88>)
 8010868:	f007 fc48 	bl	80180fc <iprintf>

  inactivity = 0;
 801086c:	2300      	movs	r3, #0
 801086e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010870:	2300      	movs	r3, #0
 8010872:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010874:	4b17      	ldr	r3, [pc, #92]	; (80108d4 <tcp_kill_state+0x8c>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	617b      	str	r3, [r7, #20]
 801087a:	e017      	b.n	80108ac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	7d1b      	ldrb	r3, [r3, #20]
 8010880:	79fa      	ldrb	r2, [r7, #7]
 8010882:	429a      	cmp	r2, r3
 8010884:	d10f      	bne.n	80108a6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010886:	4b14      	ldr	r3, [pc, #80]	; (80108d8 <tcp_kill_state+0x90>)
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	6a1b      	ldr	r3, [r3, #32]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	429a      	cmp	r2, r3
 8010894:	d807      	bhi.n	80108a6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010896:	4b10      	ldr	r3, [pc, #64]	; (80108d8 <tcp_kill_state+0x90>)
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	6a1b      	ldr	r3, [r3, #32]
 801089e:	1ad3      	subs	r3, r2, r3
 80108a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	617b      	str	r3, [r7, #20]
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1e4      	bne.n	801087c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d003      	beq.n	80108c0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80108b8:	2100      	movs	r1, #0
 80108ba:	6938      	ldr	r0, [r7, #16]
 80108bc:	f7ff f94e 	bl	800fb5c <tcp_abandon>
  }
}
 80108c0:	bf00      	nop
 80108c2:	3718      	adds	r7, #24
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	08019ee8 	.word	0x08019ee8
 80108cc:	0801a474 	.word	0x0801a474
 80108d0:	08019f2c 	.word	0x08019f2c
 80108d4:	24024e98 	.word	0x24024e98
 80108d8:	24024e9c 	.word	0x24024e9c

080108dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80108e2:	2300      	movs	r3, #0
 80108e4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80108ea:	4b12      	ldr	r3, [pc, #72]	; (8010934 <tcp_kill_timewait+0x58>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	60fb      	str	r3, [r7, #12]
 80108f0:	e012      	b.n	8010918 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80108f2:	4b11      	ldr	r3, [pc, #68]	; (8010938 <tcp_kill_timewait+0x5c>)
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	6a1b      	ldr	r3, [r3, #32]
 80108fa:	1ad3      	subs	r3, r2, r3
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d807      	bhi.n	8010912 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010902:	4b0d      	ldr	r3, [pc, #52]	; (8010938 <tcp_kill_timewait+0x5c>)
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	6a1b      	ldr	r3, [r3, #32]
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	60fb      	str	r3, [r7, #12]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1e9      	bne.n	80108f2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d002      	beq.n	801092a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010924:	68b8      	ldr	r0, [r7, #8]
 8010926:	f7ff f9d7 	bl	800fcd8 <tcp_abort>
  }
}
 801092a:	bf00      	nop
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	24024ea8 	.word	0x24024ea8
 8010938:	24024e9c 	.word	0x24024e9c

0801093c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010942:	4b10      	ldr	r3, [pc, #64]	; (8010984 <tcp_handle_closepend+0x48>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010948:	e014      	b.n	8010974 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	8b5b      	ldrh	r3, [r3, #26]
 8010954:	f003 0308 	and.w	r3, r3, #8
 8010958:	2b00      	cmp	r3, #0
 801095a:	d009      	beq.n	8010970 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	8b5b      	ldrh	r3, [r3, #26]
 8010960:	f023 0308 	bic.w	r3, r3, #8
 8010964:	b29a      	uxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ff f860 	bl	800fa30 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1e7      	bne.n	801094a <tcp_handle_closepend+0xe>
  }
}
 801097a:	bf00      	nop
 801097c:	bf00      	nop
 801097e:	3708      	adds	r7, #8
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	24024e98 	.word	0x24024e98

08010988 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b084      	sub	sp, #16
 801098c:	af00      	add	r7, sp, #0
 801098e:	4603      	mov	r3, r0
 8010990:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010992:	2001      	movs	r0, #1
 8010994:	f7fd fcc4 	bl	800e320 <memp_malloc>
 8010998:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d126      	bne.n	80109ee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80109a0:	f7ff ffcc 	bl	801093c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80109a4:	f7ff ff9a 	bl	80108dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109a8:	2001      	movs	r0, #1
 80109aa:	f7fd fcb9 	bl	800e320 <memp_malloc>
 80109ae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d11b      	bne.n	80109ee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80109b6:	2009      	movs	r0, #9
 80109b8:	f7ff ff46 	bl	8010848 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109bc:	2001      	movs	r0, #1
 80109be:	f7fd fcaf 	bl	800e320 <memp_malloc>
 80109c2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d111      	bne.n	80109ee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80109ca:	2008      	movs	r0, #8
 80109cc:	f7ff ff3c 	bl	8010848 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109d0:	2001      	movs	r0, #1
 80109d2:	f7fd fca5 	bl	800e320 <memp_malloc>
 80109d6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d107      	bne.n	80109ee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80109de:	79fb      	ldrb	r3, [r7, #7]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7ff fee3 	bl	80107ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109e6:	2001      	movs	r0, #1
 80109e8:	f7fd fc9a 	bl	800e320 <memp_malloc>
 80109ec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d047      	beq.n	8010a84 <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80109f4:	22a4      	movs	r2, #164	; 0xa4
 80109f6:	2100      	movs	r1, #0
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f007 fb77 	bl	80180ec <memset>
    pcb->prio = prio;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	79fa      	ldrb	r2, [r7, #7]
 8010a02:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010a0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010a14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	22ff      	movs	r2, #255	; 0xff
 8010a22:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010a2a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2206      	movs	r2, #6
 8010a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2206      	movs	r2, #6
 8010a38:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a40:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2201      	movs	r2, #1
 8010a46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010a4a:	4b11      	ldr	r3, [pc, #68]	; (8010a90 <tcp_alloc+0x108>)
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010a52:	4b10      	ldr	r3, [pc, #64]	; (8010a94 <tcp_alloc+0x10c>)
 8010a54:	781a      	ldrb	r2, [r3, #0]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010a60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	4a0c      	ldr	r2, [pc, #48]	; (8010a98 <tcp_alloc+0x110>)
 8010a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	4a0b      	ldr	r2, [pc, #44]	; (8010a9c <tcp_alloc+0x114>)
 8010a70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	4a0a      	ldr	r2, [pc, #40]	; (8010aa0 <tcp_alloc+0x118>)
 8010a78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2209      	movs	r2, #9
 8010a80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010a84:	68fb      	ldr	r3, [r7, #12]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	24024e9c 	.word	0x24024e9c
 8010a94:	2402180e 	.word	0x2402180e
 8010a98:	08010741 	.word	0x08010741
 8010a9c:	006ddd00 	.word	0x006ddd00
 8010aa0:	000124f8 	.word	0x000124f8

08010aa4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d107      	bne.n	8010ac2 <tcp_pcb_purge+0x1e>
 8010ab2:	4b21      	ldr	r3, [pc, #132]	; (8010b38 <tcp_pcb_purge+0x94>)
 8010ab4:	f640 0251 	movw	r2, #2129	; 0x851
 8010ab8:	4920      	ldr	r1, [pc, #128]	; (8010b3c <tcp_pcb_purge+0x98>)
 8010aba:	4821      	ldr	r0, [pc, #132]	; (8010b40 <tcp_pcb_purge+0x9c>)
 8010abc:	f007 fb1e 	bl	80180fc <iprintf>
 8010ac0:	e037      	b.n	8010b32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	7d1b      	ldrb	r3, [r3, #20]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d033      	beq.n	8010b32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010ace:	2b0a      	cmp	r3, #10
 8010ad0:	d02f      	beq.n	8010b32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d02b      	beq.n	8010b32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d007      	beq.n	8010af2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe fb56 	bl	800f198 <pbuf_free>
      pcb->refused_data = NULL;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d002      	beq.n	8010b00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f986 	bl	8010e0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b06:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7ff fdbd 	bl	801068c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7ff fdb8 	bl	801068c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	66da      	str	r2, [r3, #108]	; 0x6c
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	08019ee8 	.word	0x08019ee8
 8010b3c:	0801a534 	.word	0x0801a534
 8010b40:	08019f2c 	.word	0x08019f2c

08010b44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d106      	bne.n	8010b62 <tcp_pcb_remove+0x1e>
 8010b54:	4b3e      	ldr	r3, [pc, #248]	; (8010c50 <tcp_pcb_remove+0x10c>)
 8010b56:	f640 0283 	movw	r2, #2179	; 0x883
 8010b5a:	493e      	ldr	r1, [pc, #248]	; (8010c54 <tcp_pcb_remove+0x110>)
 8010b5c:	483e      	ldr	r0, [pc, #248]	; (8010c58 <tcp_pcb_remove+0x114>)
 8010b5e:	f007 facd 	bl	80180fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d106      	bne.n	8010b76 <tcp_pcb_remove+0x32>
 8010b68:	4b39      	ldr	r3, [pc, #228]	; (8010c50 <tcp_pcb_remove+0x10c>)
 8010b6a:	f640 0284 	movw	r2, #2180	; 0x884
 8010b6e:	493b      	ldr	r1, [pc, #236]	; (8010c5c <tcp_pcb_remove+0x118>)
 8010b70:	4839      	ldr	r0, [pc, #228]	; (8010c58 <tcp_pcb_remove+0x114>)
 8010b72:	f007 fac3 	bl	80180fc <iprintf>

  TCP_RMV(pcblist, pcb);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	683a      	ldr	r2, [r7, #0]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d105      	bne.n	8010b8c <tcp_pcb_remove+0x48>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	68da      	ldr	r2, [r3, #12]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	e013      	b.n	8010bb4 <tcp_pcb_remove+0x70>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	60fb      	str	r3, [r7, #12]
 8010b92:	e00c      	b.n	8010bae <tcp_pcb_remove+0x6a>
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	683a      	ldr	r2, [r7, #0]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d104      	bne.n	8010ba8 <tcp_pcb_remove+0x64>
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	68da      	ldr	r2, [r3, #12]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	60da      	str	r2, [r3, #12]
 8010ba6:	e005      	b.n	8010bb4 <tcp_pcb_remove+0x70>
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	60fb      	str	r3, [r7, #12]
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d1ef      	bne.n	8010b94 <tcp_pcb_remove+0x50>
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010bba:	6838      	ldr	r0, [r7, #0]
 8010bbc:	f7ff ff72 	bl	8010aa4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	7d1b      	ldrb	r3, [r3, #20]
 8010bc4:	2b0a      	cmp	r3, #10
 8010bc6:	d013      	beq.n	8010bf0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d00f      	beq.n	8010bf0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	8b5b      	ldrh	r3, [r3, #26]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d009      	beq.n	8010bf0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	8b5b      	ldrh	r3, [r3, #26]
 8010be0:	f043 0302 	orr.w	r3, r3, #2
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010bea:	6838      	ldr	r0, [r7, #0]
 8010bec:	f002 ff6a 	bl	8013ac4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	7d1b      	ldrb	r3, [r3, #20]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d020      	beq.n	8010c3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d006      	beq.n	8010c0e <tcp_pcb_remove+0xca>
 8010c00:	4b13      	ldr	r3, [pc, #76]	; (8010c50 <tcp_pcb_remove+0x10c>)
 8010c02:	f640 0293 	movw	r2, #2195	; 0x893
 8010c06:	4916      	ldr	r1, [pc, #88]	; (8010c60 <tcp_pcb_remove+0x11c>)
 8010c08:	4813      	ldr	r0, [pc, #76]	; (8010c58 <tcp_pcb_remove+0x114>)
 8010c0a:	f007 fa77 	bl	80180fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d006      	beq.n	8010c24 <tcp_pcb_remove+0xe0>
 8010c16:	4b0e      	ldr	r3, [pc, #56]	; (8010c50 <tcp_pcb_remove+0x10c>)
 8010c18:	f640 0294 	movw	r2, #2196	; 0x894
 8010c1c:	4911      	ldr	r1, [pc, #68]	; (8010c64 <tcp_pcb_remove+0x120>)
 8010c1e:	480e      	ldr	r0, [pc, #56]	; (8010c58 <tcp_pcb_remove+0x114>)
 8010c20:	f007 fa6c 	bl	80180fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d006      	beq.n	8010c3a <tcp_pcb_remove+0xf6>
 8010c2c:	4b08      	ldr	r3, [pc, #32]	; (8010c50 <tcp_pcb_remove+0x10c>)
 8010c2e:	f640 0296 	movw	r2, #2198	; 0x896
 8010c32:	490d      	ldr	r1, [pc, #52]	; (8010c68 <tcp_pcb_remove+0x124>)
 8010c34:	4808      	ldr	r0, [pc, #32]	; (8010c58 <tcp_pcb_remove+0x114>)
 8010c36:	f007 fa61 	bl	80180fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	2200      	movs	r2, #0
 8010c44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010c46:	bf00      	nop
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	08019ee8 	.word	0x08019ee8
 8010c54:	0801a550 	.word	0x0801a550
 8010c58:	08019f2c 	.word	0x08019f2c
 8010c5c:	0801a56c 	.word	0x0801a56c
 8010c60:	0801a58c 	.word	0x0801a58c
 8010c64:	0801a5a4 	.word	0x0801a5a4
 8010c68:	0801a5c0 	.word	0x0801a5c0

08010c6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d106      	bne.n	8010c88 <tcp_next_iss+0x1c>
 8010c7a:	4b0a      	ldr	r3, [pc, #40]	; (8010ca4 <tcp_next_iss+0x38>)
 8010c7c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010c80:	4909      	ldr	r1, [pc, #36]	; (8010ca8 <tcp_next_iss+0x3c>)
 8010c82:	480a      	ldr	r0, [pc, #40]	; (8010cac <tcp_next_iss+0x40>)
 8010c84:	f007 fa3a 	bl	80180fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010c88:	4b09      	ldr	r3, [pc, #36]	; (8010cb0 <tcp_next_iss+0x44>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	4b09      	ldr	r3, [pc, #36]	; (8010cb4 <tcp_next_iss+0x48>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4413      	add	r3, r2
 8010c92:	4a07      	ldr	r2, [pc, #28]	; (8010cb0 <tcp_next_iss+0x44>)
 8010c94:	6013      	str	r3, [r2, #0]
  return iss;
 8010c96:	4b06      	ldr	r3, [pc, #24]	; (8010cb0 <tcp_next_iss+0x44>)
 8010c98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	08019ee8 	.word	0x08019ee8
 8010ca8:	0801a5d8 	.word	0x0801a5d8
 8010cac:	08019f2c 	.word	0x08019f2c
 8010cb0:	2400002c 	.word	0x2400002c
 8010cb4:	24024e9c 	.word	0x24024e9c

08010cb8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
 8010cc4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d106      	bne.n	8010cda <tcp_eff_send_mss_netif+0x22>
 8010ccc:	4b14      	ldr	r3, [pc, #80]	; (8010d20 <tcp_eff_send_mss_netif+0x68>)
 8010cce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010cd2:	4914      	ldr	r1, [pc, #80]	; (8010d24 <tcp_eff_send_mss_netif+0x6c>)
 8010cd4:	4814      	ldr	r0, [pc, #80]	; (8010d28 <tcp_eff_send_mss_netif+0x70>)
 8010cd6:	f007 fa11 	bl	80180fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d101      	bne.n	8010ce4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010ce0:	89fb      	ldrh	r3, [r7, #14]
 8010ce2:	e019      	b.n	8010d18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010ce8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010cea:	8afb      	ldrh	r3, [r7, #22]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d012      	beq.n	8010d16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010cf0:	2328      	movs	r3, #40	; 0x28
 8010cf2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010cf4:	8afa      	ldrh	r2, [r7, #22]
 8010cf6:	8abb      	ldrh	r3, [r7, #20]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d904      	bls.n	8010d06 <tcp_eff_send_mss_netif+0x4e>
 8010cfc:	8afa      	ldrh	r2, [r7, #22]
 8010cfe:	8abb      	ldrh	r3, [r7, #20]
 8010d00:	1ad3      	subs	r3, r2, r3
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	e000      	b.n	8010d08 <tcp_eff_send_mss_netif+0x50>
 8010d06:	2300      	movs	r3, #0
 8010d08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010d0a:	8a7a      	ldrh	r2, [r7, #18]
 8010d0c:	89fb      	ldrh	r3, [r7, #14]
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	bf28      	it	cs
 8010d12:	4613      	movcs	r3, r2
 8010d14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010d16:	89fb      	ldrh	r3, [r7, #14]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3718      	adds	r7, #24
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	08019ee8 	.word	0x08019ee8
 8010d24:	0801a5f4 	.word	0x0801a5f4
 8010d28:	08019f2c 	.word	0x08019f2c

08010d2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d119      	bne.n	8010d74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010d40:	4b10      	ldr	r3, [pc, #64]	; (8010d84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010d42:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010d46:	4910      	ldr	r1, [pc, #64]	; (8010d88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010d48:	4810      	ldr	r0, [pc, #64]	; (8010d8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010d4a:	f007 f9d7 	bl	80180fc <iprintf>

  while (pcb != NULL) {
 8010d4e:	e011      	b.n	8010d74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d108      	bne.n	8010d6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f7fe ffb8 	bl	800fcd8 <tcp_abort>
      pcb = next;
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	60fb      	str	r3, [r7, #12]
 8010d6c:	e002      	b.n	8010d74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d1ea      	bne.n	8010d50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010d7a:	bf00      	nop
 8010d7c:	bf00      	nop
 8010d7e:	3710      	adds	r7, #16
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	08019ee8 	.word	0x08019ee8
 8010d88:	0801a61c 	.word	0x0801a61c
 8010d8c:	08019f2c 	.word	0x08019f2c

08010d90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d02a      	beq.n	8010df6 <tcp_netif_ip_addr_changed+0x66>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d026      	beq.n	8010df6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010da8:	4b15      	ldr	r3, [pc, #84]	; (8010e00 <tcp_netif_ip_addr_changed+0x70>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4619      	mov	r1, r3
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7ff ffbc 	bl	8010d2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010db4:	4b13      	ldr	r3, [pc, #76]	; (8010e04 <tcp_netif_ip_addr_changed+0x74>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4619      	mov	r1, r3
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f7ff ffb6 	bl	8010d2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d017      	beq.n	8010df6 <tcp_netif_ip_addr_changed+0x66>
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d013      	beq.n	8010df6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010dce:	4b0e      	ldr	r3, [pc, #56]	; (8010e08 <tcp_netif_ip_addr_changed+0x78>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	60fb      	str	r3, [r7, #12]
 8010dd4:	e00c      	b.n	8010df0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d103      	bne.n	8010dea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	60fb      	str	r3, [r7, #12]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1ef      	bne.n	8010dd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010df6:	bf00      	nop
 8010df8:	3710      	adds	r7, #16
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	24024e98 	.word	0x24024e98
 8010e04:	24024ea4 	.word	0x24024ea4
 8010e08:	24024ea0 	.word	0x24024ea0

08010e0c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d007      	beq.n	8010e2c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7ff fc33 	bl	801068c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010e34:	b590      	push	{r4, r7, lr}
 8010e36:	b08d      	sub	sp, #52	; 0x34
 8010e38:	af04      	add	r7, sp, #16
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d105      	bne.n	8010e50 <tcp_input+0x1c>
 8010e44:	4b9b      	ldr	r3, [pc, #620]	; (80110b4 <tcp_input+0x280>)
 8010e46:	2283      	movs	r2, #131	; 0x83
 8010e48:	499b      	ldr	r1, [pc, #620]	; (80110b8 <tcp_input+0x284>)
 8010e4a:	489c      	ldr	r0, [pc, #624]	; (80110bc <tcp_input+0x288>)
 8010e4c:	f007 f956 	bl	80180fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	4a9a      	ldr	r2, [pc, #616]	; (80110c0 <tcp_input+0x28c>)
 8010e56:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	895b      	ldrh	r3, [r3, #10]
 8010e5c:	2b13      	cmp	r3, #19
 8010e5e:	f240 83c4 	bls.w	80115ea <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010e62:	4b98      	ldr	r3, [pc, #608]	; (80110c4 <tcp_input+0x290>)
 8010e64:	695b      	ldr	r3, [r3, #20]
 8010e66:	4a97      	ldr	r2, [pc, #604]	; (80110c4 <tcp_input+0x290>)
 8010e68:	6812      	ldr	r2, [r2, #0]
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f006 f897 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f040 83ba 	bne.w	80115ee <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010e7a:	4b92      	ldr	r3, [pc, #584]	; (80110c4 <tcp_input+0x290>)
 8010e7c:	695b      	ldr	r3, [r3, #20]
 8010e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010e82:	2be0      	cmp	r3, #224	; 0xe0
 8010e84:	f000 83b3 	beq.w	80115ee <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010e88:	4b8d      	ldr	r3, [pc, #564]	; (80110c0 <tcp_input+0x28c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	899b      	ldrh	r3, [r3, #12]
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fc fcb5 	bl	800d800 <lwip_htons>
 8010e96:	4603      	mov	r3, r0
 8010e98:	0b1b      	lsrs	r3, r3, #12
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010ea2:	7cbb      	ldrb	r3, [r7, #18]
 8010ea4:	2b13      	cmp	r3, #19
 8010ea6:	f240 83a4 	bls.w	80115f2 <tcp_input+0x7be>
 8010eaa:	7cbb      	ldrb	r3, [r7, #18]
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	891b      	ldrh	r3, [r3, #8]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	f200 839d 	bhi.w	80115f2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010eb8:	7cbb      	ldrb	r3, [r7, #18]
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	3b14      	subs	r3, #20
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	4b81      	ldr	r3, [pc, #516]	; (80110c8 <tcp_input+0x294>)
 8010ec2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010ec4:	4b81      	ldr	r3, [pc, #516]	; (80110cc <tcp_input+0x298>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	895a      	ldrh	r2, [r3, #10]
 8010ece:	7cbb      	ldrb	r3, [r7, #18]
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d309      	bcc.n	8010eea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010ed6:	4b7c      	ldr	r3, [pc, #496]	; (80110c8 <tcp_input+0x294>)
 8010ed8:	881a      	ldrh	r2, [r3, #0]
 8010eda:	4b7d      	ldr	r3, [pc, #500]	; (80110d0 <tcp_input+0x29c>)
 8010edc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010ede:	7cbb      	ldrb	r3, [r7, #18]
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7fe f8d2 	bl	800f08c <pbuf_remove_header>
 8010ee8:	e04e      	b.n	8010f88 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d105      	bne.n	8010efe <tcp_input+0xca>
 8010ef2:	4b70      	ldr	r3, [pc, #448]	; (80110b4 <tcp_input+0x280>)
 8010ef4:	22c2      	movs	r2, #194	; 0xc2
 8010ef6:	4977      	ldr	r1, [pc, #476]	; (80110d4 <tcp_input+0x2a0>)
 8010ef8:	4870      	ldr	r0, [pc, #448]	; (80110bc <tcp_input+0x288>)
 8010efa:	f007 f8ff 	bl	80180fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010efe:	2114      	movs	r1, #20
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7fe f8c3 	bl	800f08c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	895a      	ldrh	r2, [r3, #10]
 8010f0a:	4b71      	ldr	r3, [pc, #452]	; (80110d0 <tcp_input+0x29c>)
 8010f0c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010f0e:	4b6e      	ldr	r3, [pc, #440]	; (80110c8 <tcp_input+0x294>)
 8010f10:	881a      	ldrh	r2, [r3, #0]
 8010f12:	4b6f      	ldr	r3, [pc, #444]	; (80110d0 <tcp_input+0x29c>)
 8010f14:	881b      	ldrh	r3, [r3, #0]
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010f1a:	4b6d      	ldr	r3, [pc, #436]	; (80110d0 <tcp_input+0x29c>)
 8010f1c:	881b      	ldrh	r3, [r3, #0]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7fe f8b3 	bl	800f08c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	895b      	ldrh	r3, [r3, #10]
 8010f2c:	8a3a      	ldrh	r2, [r7, #16]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	f200 8361 	bhi.w	80115f6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	4a64      	ldr	r2, [pc, #400]	; (80110cc <tcp_input+0x298>)
 8010f3c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	8a3a      	ldrh	r2, [r7, #16]
 8010f44:	4611      	mov	r1, r2
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fe f8a0 	bl	800f08c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	891a      	ldrh	r2, [r3, #8]
 8010f50:	8a3b      	ldrh	r3, [r7, #16]
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	895b      	ldrh	r3, [r3, #10]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d005      	beq.n	8010f6e <tcp_input+0x13a>
 8010f62:	4b54      	ldr	r3, [pc, #336]	; (80110b4 <tcp_input+0x280>)
 8010f64:	22df      	movs	r2, #223	; 0xdf
 8010f66:	495c      	ldr	r1, [pc, #368]	; (80110d8 <tcp_input+0x2a4>)
 8010f68:	4854      	ldr	r0, [pc, #336]	; (80110bc <tcp_input+0x288>)
 8010f6a:	f007 f8c7 	bl	80180fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	891a      	ldrh	r2, [r3, #8]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	891b      	ldrh	r3, [r3, #8]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d005      	beq.n	8010f88 <tcp_input+0x154>
 8010f7c:	4b4d      	ldr	r3, [pc, #308]	; (80110b4 <tcp_input+0x280>)
 8010f7e:	22e0      	movs	r2, #224	; 0xe0
 8010f80:	4956      	ldr	r1, [pc, #344]	; (80110dc <tcp_input+0x2a8>)
 8010f82:	484e      	ldr	r0, [pc, #312]	; (80110bc <tcp_input+0x288>)
 8010f84:	f007 f8ba 	bl	80180fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010f88:	4b4d      	ldr	r3, [pc, #308]	; (80110c0 <tcp_input+0x28c>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	881b      	ldrh	r3, [r3, #0]
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	4a4b      	ldr	r2, [pc, #300]	; (80110c0 <tcp_input+0x28c>)
 8010f92:	6814      	ldr	r4, [r2, #0]
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7fc fc33 	bl	800d800 <lwip_htons>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010f9e:	4b48      	ldr	r3, [pc, #288]	; (80110c0 <tcp_input+0x28c>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	885b      	ldrh	r3, [r3, #2]
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	4a46      	ldr	r2, [pc, #280]	; (80110c0 <tcp_input+0x28c>)
 8010fa8:	6814      	ldr	r4, [r2, #0]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fc fc28 	bl	800d800 <lwip_htons>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010fb4:	4b42      	ldr	r3, [pc, #264]	; (80110c0 <tcp_input+0x28c>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	4a41      	ldr	r2, [pc, #260]	; (80110c0 <tcp_input+0x28c>)
 8010fbc:	6814      	ldr	r4, [r2, #0]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fc fc33 	bl	800d82a <lwip_htonl>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	6063      	str	r3, [r4, #4]
 8010fc8:	6863      	ldr	r3, [r4, #4]
 8010fca:	4a45      	ldr	r2, [pc, #276]	; (80110e0 <tcp_input+0x2ac>)
 8010fcc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010fce:	4b3c      	ldr	r3, [pc, #240]	; (80110c0 <tcp_input+0x28c>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	689b      	ldr	r3, [r3, #8]
 8010fd4:	4a3a      	ldr	r2, [pc, #232]	; (80110c0 <tcp_input+0x28c>)
 8010fd6:	6814      	ldr	r4, [r2, #0]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fc fc26 	bl	800d82a <lwip_htonl>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	60a3      	str	r3, [r4, #8]
 8010fe2:	68a3      	ldr	r3, [r4, #8]
 8010fe4:	4a3f      	ldr	r2, [pc, #252]	; (80110e4 <tcp_input+0x2b0>)
 8010fe6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010fe8:	4b35      	ldr	r3, [pc, #212]	; (80110c0 <tcp_input+0x28c>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	89db      	ldrh	r3, [r3, #14]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	4a33      	ldr	r2, [pc, #204]	; (80110c0 <tcp_input+0x28c>)
 8010ff2:	6814      	ldr	r4, [r2, #0]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7fc fc03 	bl	800d800 <lwip_htons>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010ffe:	4b30      	ldr	r3, [pc, #192]	; (80110c0 <tcp_input+0x28c>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	899b      	ldrh	r3, [r3, #12]
 8011004:	b29b      	uxth	r3, r3
 8011006:	4618      	mov	r0, r3
 8011008:	f7fc fbfa 	bl	800d800 <lwip_htons>
 801100c:	4603      	mov	r3, r0
 801100e:	b2db      	uxtb	r3, r3
 8011010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011014:	b2da      	uxtb	r2, r3
 8011016:	4b34      	ldr	r3, [pc, #208]	; (80110e8 <tcp_input+0x2b4>)
 8011018:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	891a      	ldrh	r2, [r3, #8]
 801101e:	4b33      	ldr	r3, [pc, #204]	; (80110ec <tcp_input+0x2b8>)
 8011020:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011022:	4b31      	ldr	r3, [pc, #196]	; (80110e8 <tcp_input+0x2b4>)
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	f003 0303 	and.w	r3, r3, #3
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00c      	beq.n	8011048 <tcp_input+0x214>
    tcplen++;
 801102e:	4b2f      	ldr	r3, [pc, #188]	; (80110ec <tcp_input+0x2b8>)
 8011030:	881b      	ldrh	r3, [r3, #0]
 8011032:	3301      	adds	r3, #1
 8011034:	b29a      	uxth	r2, r3
 8011036:	4b2d      	ldr	r3, [pc, #180]	; (80110ec <tcp_input+0x2b8>)
 8011038:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	891a      	ldrh	r2, [r3, #8]
 801103e:	4b2b      	ldr	r3, [pc, #172]	; (80110ec <tcp_input+0x2b8>)
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	429a      	cmp	r2, r3
 8011044:	f200 82d9 	bhi.w	80115fa <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011048:	2300      	movs	r3, #0
 801104a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801104c:	4b28      	ldr	r3, [pc, #160]	; (80110f0 <tcp_input+0x2bc>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	61fb      	str	r3, [r7, #28]
 8011052:	e09d      	b.n	8011190 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	7d1b      	ldrb	r3, [r3, #20]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d105      	bne.n	8011068 <tcp_input+0x234>
 801105c:	4b15      	ldr	r3, [pc, #84]	; (80110b4 <tcp_input+0x280>)
 801105e:	22fb      	movs	r2, #251	; 0xfb
 8011060:	4924      	ldr	r1, [pc, #144]	; (80110f4 <tcp_input+0x2c0>)
 8011062:	4816      	ldr	r0, [pc, #88]	; (80110bc <tcp_input+0x288>)
 8011064:	f007 f84a 	bl	80180fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	7d1b      	ldrb	r3, [r3, #20]
 801106c:	2b0a      	cmp	r3, #10
 801106e:	d105      	bne.n	801107c <tcp_input+0x248>
 8011070:	4b10      	ldr	r3, [pc, #64]	; (80110b4 <tcp_input+0x280>)
 8011072:	22fc      	movs	r2, #252	; 0xfc
 8011074:	4920      	ldr	r1, [pc, #128]	; (80110f8 <tcp_input+0x2c4>)
 8011076:	4811      	ldr	r0, [pc, #68]	; (80110bc <tcp_input+0x288>)
 8011078:	f007 f840 	bl	80180fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	7d1b      	ldrb	r3, [r3, #20]
 8011080:	2b01      	cmp	r3, #1
 8011082:	d105      	bne.n	8011090 <tcp_input+0x25c>
 8011084:	4b0b      	ldr	r3, [pc, #44]	; (80110b4 <tcp_input+0x280>)
 8011086:	22fd      	movs	r2, #253	; 0xfd
 8011088:	491c      	ldr	r1, [pc, #112]	; (80110fc <tcp_input+0x2c8>)
 801108a:	480c      	ldr	r0, [pc, #48]	; (80110bc <tcp_input+0x288>)
 801108c:	f007 f836 	bl	80180fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	7a1b      	ldrb	r3, [r3, #8]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d033      	beq.n	8011100 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	7a1a      	ldrb	r2, [r3, #8]
 801109c:	4b09      	ldr	r3, [pc, #36]	; (80110c4 <tcp_input+0x290>)
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80110a4:	3301      	adds	r3, #1
 80110a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d029      	beq.n	8011100 <tcp_input+0x2cc>
      prev = pcb;
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	61bb      	str	r3, [r7, #24]
      continue;
 80110b0:	e06b      	b.n	801118a <tcp_input+0x356>
 80110b2:	bf00      	nop
 80110b4:	0801a650 	.word	0x0801a650
 80110b8:	0801a684 	.word	0x0801a684
 80110bc:	0801a69c 	.word	0x0801a69c
 80110c0:	24021820 	.word	0x24021820
 80110c4:	24021c8c 	.word	0x24021c8c
 80110c8:	24021824 	.word	0x24021824
 80110cc:	24021828 	.word	0x24021828
 80110d0:	24021826 	.word	0x24021826
 80110d4:	0801a6c4 	.word	0x0801a6c4
 80110d8:	0801a6d4 	.word	0x0801a6d4
 80110dc:	0801a6e0 	.word	0x0801a6e0
 80110e0:	24021830 	.word	0x24021830
 80110e4:	24021834 	.word	0x24021834
 80110e8:	2402183c 	.word	0x2402183c
 80110ec:	2402183a 	.word	0x2402183a
 80110f0:	24024e98 	.word	0x24024e98
 80110f4:	0801a700 	.word	0x0801a700
 80110f8:	0801a728 	.word	0x0801a728
 80110fc:	0801a754 	.word	0x0801a754
    }

    if (pcb->remote_port == tcphdr->src &&
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	8b1a      	ldrh	r2, [r3, #24]
 8011104:	4b94      	ldr	r3, [pc, #592]	; (8011358 <tcp_input+0x524>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	881b      	ldrh	r3, [r3, #0]
 801110a:	b29b      	uxth	r3, r3
 801110c:	429a      	cmp	r2, r3
 801110e:	d13a      	bne.n	8011186 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	8ada      	ldrh	r2, [r3, #22]
 8011114:	4b90      	ldr	r3, [pc, #576]	; (8011358 <tcp_input+0x524>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	885b      	ldrh	r3, [r3, #2]
 801111a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801111c:	429a      	cmp	r2, r3
 801111e:	d132      	bne.n	8011186 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	685a      	ldr	r2, [r3, #4]
 8011124:	4b8d      	ldr	r3, [pc, #564]	; (801135c <tcp_input+0x528>)
 8011126:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011128:	429a      	cmp	r2, r3
 801112a:	d12c      	bne.n	8011186 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	4b8a      	ldr	r3, [pc, #552]	; (801135c <tcp_input+0x528>)
 8011132:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011134:	429a      	cmp	r2, r3
 8011136:	d126      	bne.n	8011186 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	69fa      	ldr	r2, [r7, #28]
 801113e:	429a      	cmp	r2, r3
 8011140:	d106      	bne.n	8011150 <tcp_input+0x31c>
 8011142:	4b87      	ldr	r3, [pc, #540]	; (8011360 <tcp_input+0x52c>)
 8011144:	f240 120d 	movw	r2, #269	; 0x10d
 8011148:	4986      	ldr	r1, [pc, #536]	; (8011364 <tcp_input+0x530>)
 801114a:	4887      	ldr	r0, [pc, #540]	; (8011368 <tcp_input+0x534>)
 801114c:	f006 ffd6 	bl	80180fc <iprintf>
      if (prev != NULL) {
 8011150:	69bb      	ldr	r3, [r7, #24]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00a      	beq.n	801116c <tcp_input+0x338>
        prev->next = pcb->next;
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	68da      	ldr	r2, [r3, #12]
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801115e:	4b83      	ldr	r3, [pc, #524]	; (801136c <tcp_input+0x538>)
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	69fb      	ldr	r3, [r7, #28]
 8011164:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011166:	4a81      	ldr	r2, [pc, #516]	; (801136c <tcp_input+0x538>)
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	69fa      	ldr	r2, [r7, #28]
 8011172:	429a      	cmp	r2, r3
 8011174:	d111      	bne.n	801119a <tcp_input+0x366>
 8011176:	4b7a      	ldr	r3, [pc, #488]	; (8011360 <tcp_input+0x52c>)
 8011178:	f240 1215 	movw	r2, #277	; 0x115
 801117c:	497c      	ldr	r1, [pc, #496]	; (8011370 <tcp_input+0x53c>)
 801117e:	487a      	ldr	r0, [pc, #488]	; (8011368 <tcp_input+0x534>)
 8011180:	f006 ffbc 	bl	80180fc <iprintf>
      break;
 8011184:	e009      	b.n	801119a <tcp_input+0x366>
    }
    prev = pcb;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	61fb      	str	r3, [r7, #28]
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	2b00      	cmp	r3, #0
 8011194:	f47f af5e 	bne.w	8011054 <tcp_input+0x220>
 8011198:	e000      	b.n	801119c <tcp_input+0x368>
      break;
 801119a:	bf00      	nop
  }

  if (pcb == NULL) {
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f040 8095 	bne.w	80112ce <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80111a4:	4b73      	ldr	r3, [pc, #460]	; (8011374 <tcp_input+0x540>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	61fb      	str	r3, [r7, #28]
 80111aa:	e03f      	b.n	801122c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	7d1b      	ldrb	r3, [r3, #20]
 80111b0:	2b0a      	cmp	r3, #10
 80111b2:	d006      	beq.n	80111c2 <tcp_input+0x38e>
 80111b4:	4b6a      	ldr	r3, [pc, #424]	; (8011360 <tcp_input+0x52c>)
 80111b6:	f240 121f 	movw	r2, #287	; 0x11f
 80111ba:	496f      	ldr	r1, [pc, #444]	; (8011378 <tcp_input+0x544>)
 80111bc:	486a      	ldr	r0, [pc, #424]	; (8011368 <tcp_input+0x534>)
 80111be:	f006 ff9d 	bl	80180fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80111c2:	69fb      	ldr	r3, [r7, #28]
 80111c4:	7a1b      	ldrb	r3, [r3, #8]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d009      	beq.n	80111de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	7a1a      	ldrb	r2, [r3, #8]
 80111ce:	4b63      	ldr	r3, [pc, #396]	; (801135c <tcp_input+0x528>)
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80111d6:	3301      	adds	r3, #1
 80111d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80111da:	429a      	cmp	r2, r3
 80111dc:	d122      	bne.n	8011224 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	8b1a      	ldrh	r2, [r3, #24]
 80111e2:	4b5d      	ldr	r3, [pc, #372]	; (8011358 <tcp_input+0x524>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d11b      	bne.n	8011226 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	8ada      	ldrh	r2, [r3, #22]
 80111f2:	4b59      	ldr	r3, [pc, #356]	; (8011358 <tcp_input+0x524>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	885b      	ldrh	r3, [r3, #2]
 80111f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d113      	bne.n	8011226 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	685a      	ldr	r2, [r3, #4]
 8011202:	4b56      	ldr	r3, [pc, #344]	; (801135c <tcp_input+0x528>)
 8011204:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011206:	429a      	cmp	r2, r3
 8011208:	d10d      	bne.n	8011226 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	4b53      	ldr	r3, [pc, #332]	; (801135c <tcp_input+0x528>)
 8011210:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011212:	429a      	cmp	r2, r3
 8011214:	d107      	bne.n	8011226 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011216:	69f8      	ldr	r0, [r7, #28]
 8011218:	f000 fb54 	bl	80118c4 <tcp_timewait_input>
        }
        pbuf_free(p);
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7fd ffbb 	bl	800f198 <pbuf_free>
        return;
 8011222:	e1f0      	b.n	8011606 <tcp_input+0x7d2>
        continue;
 8011224:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	61fb      	str	r3, [r7, #28]
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1bc      	bne.n	80111ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011232:	2300      	movs	r3, #0
 8011234:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011236:	4b51      	ldr	r3, [pc, #324]	; (801137c <tcp_input+0x548>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	617b      	str	r3, [r7, #20]
 801123c:	e02a      	b.n	8011294 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	7a1b      	ldrb	r3, [r3, #8]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00c      	beq.n	8011260 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	7a1a      	ldrb	r2, [r3, #8]
 801124a:	4b44      	ldr	r3, [pc, #272]	; (801135c <tcp_input+0x528>)
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011252:	3301      	adds	r3, #1
 8011254:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011256:	429a      	cmp	r2, r3
 8011258:	d002      	beq.n	8011260 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	61bb      	str	r3, [r7, #24]
        continue;
 801125e:	e016      	b.n	801128e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	8ada      	ldrh	r2, [r3, #22]
 8011264:	4b3c      	ldr	r3, [pc, #240]	; (8011358 <tcp_input+0x524>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	885b      	ldrh	r3, [r3, #2]
 801126a:	b29b      	uxth	r3, r3
 801126c:	429a      	cmp	r2, r3
 801126e:	d10c      	bne.n	801128a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	681a      	ldr	r2, [r3, #0]
 8011274:	4b39      	ldr	r3, [pc, #228]	; (801135c <tcp_input+0x528>)
 8011276:	695b      	ldr	r3, [r3, #20]
 8011278:	429a      	cmp	r2, r3
 801127a:	d00f      	beq.n	801129c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d00d      	beq.n	801129e <tcp_input+0x46a>
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d009      	beq.n	801129e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	617b      	str	r3, [r7, #20]
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d1d1      	bne.n	801123e <tcp_input+0x40a>
 801129a:	e000      	b.n	801129e <tcp_input+0x46a>
            break;
 801129c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d014      	beq.n	80112ce <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00a      	beq.n	80112c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	68da      	ldr	r2, [r3, #12]
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80112b2:	4b32      	ldr	r3, [pc, #200]	; (801137c <tcp_input+0x548>)
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80112ba:	4a30      	ldr	r2, [pc, #192]	; (801137c <tcp_input+0x548>)
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80112c0:	6978      	ldr	r0, [r7, #20]
 80112c2:	f000 fa01 	bl	80116c8 <tcp_listen_input>
      }
      pbuf_free(p);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7fd ff66 	bl	800f198 <pbuf_free>
      return;
 80112cc:	e19b      	b.n	8011606 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80112ce:	69fb      	ldr	r3, [r7, #28]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f000 8160 	beq.w	8011596 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80112d6:	4b2a      	ldr	r3, [pc, #168]	; (8011380 <tcp_input+0x54c>)
 80112d8:	2200      	movs	r2, #0
 80112da:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	891a      	ldrh	r2, [r3, #8]
 80112e0:	4b27      	ldr	r3, [pc, #156]	; (8011380 <tcp_input+0x54c>)
 80112e2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80112e4:	4a26      	ldr	r2, [pc, #152]	; (8011380 <tcp_input+0x54c>)
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80112ea:	4b1b      	ldr	r3, [pc, #108]	; (8011358 <tcp_input+0x524>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4a24      	ldr	r2, [pc, #144]	; (8011380 <tcp_input+0x54c>)
 80112f0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80112f2:	4b24      	ldr	r3, [pc, #144]	; (8011384 <tcp_input+0x550>)
 80112f4:	2200      	movs	r2, #0
 80112f6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80112f8:	4b23      	ldr	r3, [pc, #140]	; (8011388 <tcp_input+0x554>)
 80112fa:	2200      	movs	r2, #0
 80112fc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80112fe:	4b23      	ldr	r3, [pc, #140]	; (801138c <tcp_input+0x558>)
 8011300:	2200      	movs	r2, #0
 8011302:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011304:	4b22      	ldr	r3, [pc, #136]	; (8011390 <tcp_input+0x55c>)
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	f003 0308 	and.w	r3, r3, #8
 801130c:	2b00      	cmp	r3, #0
 801130e:	d006      	beq.n	801131e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	7b5b      	ldrb	r3, [r3, #13]
 8011314:	f043 0301 	orr.w	r3, r3, #1
 8011318:	b2da      	uxtb	r2, r3
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011322:	2b00      	cmp	r3, #0
 8011324:	d038      	beq.n	8011398 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011326:	69f8      	ldr	r0, [r7, #28]
 8011328:	f7ff f934 	bl	8010594 <tcp_process_refused_data>
 801132c:	4603      	mov	r3, r0
 801132e:	f113 0f0d 	cmn.w	r3, #13
 8011332:	d007      	beq.n	8011344 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011338:	2b00      	cmp	r3, #0
 801133a:	d02d      	beq.n	8011398 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801133c:	4b15      	ldr	r3, [pc, #84]	; (8011394 <tcp_input+0x560>)
 801133e:	881b      	ldrh	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d029      	beq.n	8011398 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011348:	2b00      	cmp	r3, #0
 801134a:	f040 8104 	bne.w	8011556 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801134e:	69f8      	ldr	r0, [r7, #28]
 8011350:	f003 f9be 	bl	80146d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011354:	e0ff      	b.n	8011556 <tcp_input+0x722>
 8011356:	bf00      	nop
 8011358:	24021820 	.word	0x24021820
 801135c:	24021c8c 	.word	0x24021c8c
 8011360:	0801a650 	.word	0x0801a650
 8011364:	0801a77c 	.word	0x0801a77c
 8011368:	0801a69c 	.word	0x0801a69c
 801136c:	24024e98 	.word	0x24024e98
 8011370:	0801a7a8 	.word	0x0801a7a8
 8011374:	24024ea8 	.word	0x24024ea8
 8011378:	0801a7d4 	.word	0x0801a7d4
 801137c:	24024ea0 	.word	0x24024ea0
 8011380:	24021810 	.word	0x24021810
 8011384:	24021840 	.word	0x24021840
 8011388:	2402183d 	.word	0x2402183d
 801138c:	24021838 	.word	0x24021838
 8011390:	2402183c 	.word	0x2402183c
 8011394:	2402183a 	.word	0x2402183a
      }
    }
    tcp_input_pcb = pcb;
 8011398:	4a9c      	ldr	r2, [pc, #624]	; (801160c <tcp_input+0x7d8>)
 801139a:	69fb      	ldr	r3, [r7, #28]
 801139c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801139e:	69f8      	ldr	r0, [r7, #28]
 80113a0:	f000 fb0a 	bl	80119b8 <tcp_process>
 80113a4:	4603      	mov	r3, r0
 80113a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80113a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113ac:	f113 0f0d 	cmn.w	r3, #13
 80113b0:	f000 80d3 	beq.w	801155a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80113b4:	4b96      	ldr	r3, [pc, #600]	; (8011610 <tcp_input+0x7dc>)
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	f003 0308 	and.w	r3, r3, #8
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d015      	beq.n	80113ec <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d008      	beq.n	80113dc <tcp_input+0x5a8>
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113d0:	69fa      	ldr	r2, [r7, #28]
 80113d2:	6912      	ldr	r2, [r2, #16]
 80113d4:	f06f 010d 	mvn.w	r1, #13
 80113d8:	4610      	mov	r0, r2
 80113da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80113dc:	69f9      	ldr	r1, [r7, #28]
 80113de:	488d      	ldr	r0, [pc, #564]	; (8011614 <tcp_input+0x7e0>)
 80113e0:	f7ff fbb0 	bl	8010b44 <tcp_pcb_remove>
        tcp_free(pcb);
 80113e4:	69f8      	ldr	r0, [r7, #28]
 80113e6:	f7fe f98f 	bl	800f708 <tcp_free>
 80113ea:	e0c1      	b.n	8011570 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80113ec:	2300      	movs	r3, #0
 80113ee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80113f0:	4b89      	ldr	r3, [pc, #548]	; (8011618 <tcp_input+0x7e4>)
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d01d      	beq.n	8011434 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80113f8:	4b87      	ldr	r3, [pc, #540]	; (8011618 <tcp_input+0x7e4>)
 80113fa:	881b      	ldrh	r3, [r3, #0]
 80113fc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00a      	beq.n	801141e <tcp_input+0x5ea>
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801140e:	69fa      	ldr	r2, [r7, #28]
 8011410:	6910      	ldr	r0, [r2, #16]
 8011412:	89fa      	ldrh	r2, [r7, #14]
 8011414:	69f9      	ldr	r1, [r7, #28]
 8011416:	4798      	blx	r3
 8011418:	4603      	mov	r3, r0
 801141a:	74fb      	strb	r3, [r7, #19]
 801141c:	e001      	b.n	8011422 <tcp_input+0x5ee>
 801141e:	2300      	movs	r3, #0
 8011420:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011422:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011426:	f113 0f0d 	cmn.w	r3, #13
 801142a:	f000 8098 	beq.w	801155e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801142e:	4b7a      	ldr	r3, [pc, #488]	; (8011618 <tcp_input+0x7e4>)
 8011430:	2200      	movs	r2, #0
 8011432:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011434:	69f8      	ldr	r0, [r7, #28]
 8011436:	f000 f907 	bl	8011648 <tcp_input_delayed_close>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	f040 8090 	bne.w	8011562 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011442:	4b76      	ldr	r3, [pc, #472]	; (801161c <tcp_input+0x7e8>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d041      	beq.n	80114ce <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801144e:	2b00      	cmp	r3, #0
 8011450:	d006      	beq.n	8011460 <tcp_input+0x62c>
 8011452:	4b73      	ldr	r3, [pc, #460]	; (8011620 <tcp_input+0x7ec>)
 8011454:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011458:	4972      	ldr	r1, [pc, #456]	; (8011624 <tcp_input+0x7f0>)
 801145a:	4873      	ldr	r0, [pc, #460]	; (8011628 <tcp_input+0x7f4>)
 801145c:	f006 fe4e 	bl	80180fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	8b5b      	ldrh	r3, [r3, #26]
 8011464:	f003 0310 	and.w	r3, r3, #16
 8011468:	2b00      	cmp	r3, #0
 801146a:	d008      	beq.n	801147e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801146c:	4b6b      	ldr	r3, [pc, #428]	; (801161c <tcp_input+0x7e8>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4618      	mov	r0, r3
 8011472:	f7fd fe91 	bl	800f198 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011476:	69f8      	ldr	r0, [r7, #28]
 8011478:	f7fe fc2e 	bl	800fcd8 <tcp_abort>
            goto aborted;
 801147c:	e078      	b.n	8011570 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00c      	beq.n	80114a2 <tcp_input+0x66e>
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	6918      	ldr	r0, [r3, #16]
 8011492:	4b62      	ldr	r3, [pc, #392]	; (801161c <tcp_input+0x7e8>)
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	2300      	movs	r3, #0
 8011498:	69f9      	ldr	r1, [r7, #28]
 801149a:	47a0      	blx	r4
 801149c:	4603      	mov	r3, r0
 801149e:	74fb      	strb	r3, [r7, #19]
 80114a0:	e008      	b.n	80114b4 <tcp_input+0x680>
 80114a2:	4b5e      	ldr	r3, [pc, #376]	; (801161c <tcp_input+0x7e8>)
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	2300      	movs	r3, #0
 80114a8:	69f9      	ldr	r1, [r7, #28]
 80114aa:	2000      	movs	r0, #0
 80114ac:	f7ff f948 	bl	8010740 <tcp_recv_null>
 80114b0:	4603      	mov	r3, r0
 80114b2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80114b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114b8:	f113 0f0d 	cmn.w	r3, #13
 80114bc:	d053      	beq.n	8011566 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80114be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d003      	beq.n	80114ce <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80114c6:	4b55      	ldr	r3, [pc, #340]	; (801161c <tcp_input+0x7e8>)
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80114ce:	4b50      	ldr	r3, [pc, #320]	; (8011610 <tcp_input+0x7dc>)
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	f003 0320 	and.w	r3, r3, #32
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d030      	beq.n	801153c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d009      	beq.n	80114f6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114e6:	7b5a      	ldrb	r2, [r3, #13]
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114ec:	f042 0220 	orr.w	r2, r2, #32
 80114f0:	b2d2      	uxtb	r2, r2
 80114f2:	735a      	strb	r2, [r3, #13]
 80114f4:	e022      	b.n	801153c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80114fe:	d005      	beq.n	801150c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011500:	69fb      	ldr	r3, [r7, #28]
 8011502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011504:	3301      	adds	r3, #1
 8011506:	b29a      	uxth	r2, r3
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011512:	2b00      	cmp	r3, #0
 8011514:	d00b      	beq.n	801152e <tcp_input+0x6fa>
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	6918      	ldr	r0, [r3, #16]
 8011520:	2300      	movs	r3, #0
 8011522:	2200      	movs	r2, #0
 8011524:	69f9      	ldr	r1, [r7, #28]
 8011526:	47a0      	blx	r4
 8011528:	4603      	mov	r3, r0
 801152a:	74fb      	strb	r3, [r7, #19]
 801152c:	e001      	b.n	8011532 <tcp_input+0x6fe>
 801152e:	2300      	movs	r3, #0
 8011530:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011536:	f113 0f0d 	cmn.w	r3, #13
 801153a:	d016      	beq.n	801156a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801153c:	4b33      	ldr	r3, [pc, #204]	; (801160c <tcp_input+0x7d8>)
 801153e:	2200      	movs	r2, #0
 8011540:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011542:	69f8      	ldr	r0, [r7, #28]
 8011544:	f000 f880 	bl	8011648 <tcp_input_delayed_close>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10f      	bne.n	801156e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801154e:	69f8      	ldr	r0, [r7, #28]
 8011550:	f002 fab8 	bl	8013ac4 <tcp_output>
 8011554:	e00c      	b.n	8011570 <tcp_input+0x73c>
        goto aborted;
 8011556:	bf00      	nop
 8011558:	e00a      	b.n	8011570 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801155a:	bf00      	nop
 801155c:	e008      	b.n	8011570 <tcp_input+0x73c>
              goto aborted;
 801155e:	bf00      	nop
 8011560:	e006      	b.n	8011570 <tcp_input+0x73c>
          goto aborted;
 8011562:	bf00      	nop
 8011564:	e004      	b.n	8011570 <tcp_input+0x73c>
            goto aborted;
 8011566:	bf00      	nop
 8011568:	e002      	b.n	8011570 <tcp_input+0x73c>
              goto aborted;
 801156a:	bf00      	nop
 801156c:	e000      	b.n	8011570 <tcp_input+0x73c>
          goto aborted;
 801156e:	bf00      	nop
    tcp_input_pcb = NULL;
 8011570:	4b26      	ldr	r3, [pc, #152]	; (801160c <tcp_input+0x7d8>)
 8011572:	2200      	movs	r2, #0
 8011574:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011576:	4b29      	ldr	r3, [pc, #164]	; (801161c <tcp_input+0x7e8>)
 8011578:	2200      	movs	r2, #0
 801157a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801157c:	4b2b      	ldr	r3, [pc, #172]	; (801162c <tcp_input+0x7f8>)
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d03f      	beq.n	8011604 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011584:	4b29      	ldr	r3, [pc, #164]	; (801162c <tcp_input+0x7f8>)
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	4618      	mov	r0, r3
 801158a:	f7fd fe05 	bl	800f198 <pbuf_free>
      inseg.p = NULL;
 801158e:	4b27      	ldr	r3, [pc, #156]	; (801162c <tcp_input+0x7f8>)
 8011590:	2200      	movs	r2, #0
 8011592:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011594:	e036      	b.n	8011604 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011596:	4b26      	ldr	r3, [pc, #152]	; (8011630 <tcp_input+0x7fc>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	899b      	ldrh	r3, [r3, #12]
 801159c:	b29b      	uxth	r3, r3
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fc f92e 	bl	800d800 <lwip_htons>
 80115a4:	4603      	mov	r3, r0
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	f003 0304 	and.w	r3, r3, #4
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d118      	bne.n	80115e2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115b0:	4b20      	ldr	r3, [pc, #128]	; (8011634 <tcp_input+0x800>)
 80115b2:	6819      	ldr	r1, [r3, #0]
 80115b4:	4b20      	ldr	r3, [pc, #128]	; (8011638 <tcp_input+0x804>)
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	461a      	mov	r2, r3
 80115ba:	4b20      	ldr	r3, [pc, #128]	; (801163c <tcp_input+0x808>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115c0:	4b1b      	ldr	r3, [pc, #108]	; (8011630 <tcp_input+0x7fc>)
 80115c2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115c4:	885b      	ldrh	r3, [r3, #2]
 80115c6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115c8:	4a19      	ldr	r2, [pc, #100]	; (8011630 <tcp_input+0x7fc>)
 80115ca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115cc:	8812      	ldrh	r2, [r2, #0]
 80115ce:	b292      	uxth	r2, r2
 80115d0:	9202      	str	r2, [sp, #8]
 80115d2:	9301      	str	r3, [sp, #4]
 80115d4:	4b1a      	ldr	r3, [pc, #104]	; (8011640 <tcp_input+0x80c>)
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	4b1a      	ldr	r3, [pc, #104]	; (8011644 <tcp_input+0x810>)
 80115da:	4602      	mov	r2, r0
 80115dc:	2000      	movs	r0, #0
 80115de:	f003 f825 	bl	801462c <tcp_rst>
    pbuf_free(p);
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f7fd fdd8 	bl	800f198 <pbuf_free>
  return;
 80115e8:	e00c      	b.n	8011604 <tcp_input+0x7d0>
    goto dropped;
 80115ea:	bf00      	nop
 80115ec:	e006      	b.n	80115fc <tcp_input+0x7c8>
    goto dropped;
 80115ee:	bf00      	nop
 80115f0:	e004      	b.n	80115fc <tcp_input+0x7c8>
    goto dropped;
 80115f2:	bf00      	nop
 80115f4:	e002      	b.n	80115fc <tcp_input+0x7c8>
      goto dropped;
 80115f6:	bf00      	nop
 80115f8:	e000      	b.n	80115fc <tcp_input+0x7c8>
      goto dropped;
 80115fa:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f7fd fdcb 	bl	800f198 <pbuf_free>
 8011602:	e000      	b.n	8011606 <tcp_input+0x7d2>
  return;
 8011604:	bf00      	nop
}
 8011606:	3724      	adds	r7, #36	; 0x24
 8011608:	46bd      	mov	sp, r7
 801160a:	bd90      	pop	{r4, r7, pc}
 801160c:	24024eac 	.word	0x24024eac
 8011610:	2402183d 	.word	0x2402183d
 8011614:	24024e98 	.word	0x24024e98
 8011618:	24021838 	.word	0x24021838
 801161c:	24021840 	.word	0x24021840
 8011620:	0801a650 	.word	0x0801a650
 8011624:	0801a804 	.word	0x0801a804
 8011628:	0801a69c 	.word	0x0801a69c
 801162c:	24021810 	.word	0x24021810
 8011630:	24021820 	.word	0x24021820
 8011634:	24021834 	.word	0x24021834
 8011638:	2402183a 	.word	0x2402183a
 801163c:	24021830 	.word	0x24021830
 8011640:	24021c9c 	.word	0x24021c9c
 8011644:	24021ca0 	.word	0x24021ca0

08011648 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d106      	bne.n	8011664 <tcp_input_delayed_close+0x1c>
 8011656:	4b17      	ldr	r3, [pc, #92]	; (80116b4 <tcp_input_delayed_close+0x6c>)
 8011658:	f240 225a 	movw	r2, #602	; 0x25a
 801165c:	4916      	ldr	r1, [pc, #88]	; (80116b8 <tcp_input_delayed_close+0x70>)
 801165e:	4817      	ldr	r0, [pc, #92]	; (80116bc <tcp_input_delayed_close+0x74>)
 8011660:	f006 fd4c 	bl	80180fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011664:	4b16      	ldr	r3, [pc, #88]	; (80116c0 <tcp_input_delayed_close+0x78>)
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	f003 0310 	and.w	r3, r3, #16
 801166c:	2b00      	cmp	r3, #0
 801166e:	d01c      	beq.n	80116aa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	8b5b      	ldrh	r3, [r3, #26]
 8011674:	f003 0310 	and.w	r3, r3, #16
 8011678:	2b00      	cmp	r3, #0
 801167a:	d10d      	bne.n	8011698 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011682:	2b00      	cmp	r3, #0
 8011684:	d008      	beq.n	8011698 <tcp_input_delayed_close+0x50>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	6912      	ldr	r2, [r2, #16]
 8011690:	f06f 010e 	mvn.w	r1, #14
 8011694:	4610      	mov	r0, r2
 8011696:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011698:	6879      	ldr	r1, [r7, #4]
 801169a:	480a      	ldr	r0, [pc, #40]	; (80116c4 <tcp_input_delayed_close+0x7c>)
 801169c:	f7ff fa52 	bl	8010b44 <tcp_pcb_remove>
    tcp_free(pcb);
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f7fe f831 	bl	800f708 <tcp_free>
    return 1;
 80116a6:	2301      	movs	r3, #1
 80116a8:	e000      	b.n	80116ac <tcp_input_delayed_close+0x64>
  }
  return 0;
 80116aa:	2300      	movs	r3, #0
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	0801a650 	.word	0x0801a650
 80116b8:	0801a820 	.word	0x0801a820
 80116bc:	0801a69c 	.word	0x0801a69c
 80116c0:	2402183d 	.word	0x2402183d
 80116c4:	24024e98 	.word	0x24024e98

080116c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80116c8:	b590      	push	{r4, r7, lr}
 80116ca:	b08b      	sub	sp, #44	; 0x2c
 80116cc:	af04      	add	r7, sp, #16
 80116ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80116d0:	4b6f      	ldr	r3, [pc, #444]	; (8011890 <tcp_listen_input+0x1c8>)
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	f003 0304 	and.w	r3, r3, #4
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f040 80d2 	bne.w	8011882 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d106      	bne.n	80116f2 <tcp_listen_input+0x2a>
 80116e4:	4b6b      	ldr	r3, [pc, #428]	; (8011894 <tcp_listen_input+0x1cc>)
 80116e6:	f240 2281 	movw	r2, #641	; 0x281
 80116ea:	496b      	ldr	r1, [pc, #428]	; (8011898 <tcp_listen_input+0x1d0>)
 80116ec:	486b      	ldr	r0, [pc, #428]	; (801189c <tcp_listen_input+0x1d4>)
 80116ee:	f006 fd05 	bl	80180fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80116f2:	4b67      	ldr	r3, [pc, #412]	; (8011890 <tcp_listen_input+0x1c8>)
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	f003 0310 	and.w	r3, r3, #16
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d019      	beq.n	8011732 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116fe:	4b68      	ldr	r3, [pc, #416]	; (80118a0 <tcp_listen_input+0x1d8>)
 8011700:	6819      	ldr	r1, [r3, #0]
 8011702:	4b68      	ldr	r3, [pc, #416]	; (80118a4 <tcp_listen_input+0x1dc>)
 8011704:	881b      	ldrh	r3, [r3, #0]
 8011706:	461a      	mov	r2, r3
 8011708:	4b67      	ldr	r3, [pc, #412]	; (80118a8 <tcp_listen_input+0x1e0>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801170e:	4b67      	ldr	r3, [pc, #412]	; (80118ac <tcp_listen_input+0x1e4>)
 8011710:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011712:	885b      	ldrh	r3, [r3, #2]
 8011714:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011716:	4a65      	ldr	r2, [pc, #404]	; (80118ac <tcp_listen_input+0x1e4>)
 8011718:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801171a:	8812      	ldrh	r2, [r2, #0]
 801171c:	b292      	uxth	r2, r2
 801171e:	9202      	str	r2, [sp, #8]
 8011720:	9301      	str	r3, [sp, #4]
 8011722:	4b63      	ldr	r3, [pc, #396]	; (80118b0 <tcp_listen_input+0x1e8>)
 8011724:	9300      	str	r3, [sp, #0]
 8011726:	4b63      	ldr	r3, [pc, #396]	; (80118b4 <tcp_listen_input+0x1ec>)
 8011728:	4602      	mov	r2, r0
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f002 ff7e 	bl	801462c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011730:	e0a9      	b.n	8011886 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011732:	4b57      	ldr	r3, [pc, #348]	; (8011890 <tcp_listen_input+0x1c8>)
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	f003 0302 	and.w	r3, r3, #2
 801173a:	2b00      	cmp	r3, #0
 801173c:	f000 80a3 	beq.w	8011886 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	7d5b      	ldrb	r3, [r3, #21]
 8011744:	4618      	mov	r0, r3
 8011746:	f7ff f91f 	bl	8010988 <tcp_alloc>
 801174a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d111      	bne.n	8011776 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	699b      	ldr	r3, [r3, #24]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00a      	beq.n	8011770 <tcp_listen_input+0xa8>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	699b      	ldr	r3, [r3, #24]
 801175e:	687a      	ldr	r2, [r7, #4]
 8011760:	6910      	ldr	r0, [r2, #16]
 8011762:	f04f 32ff 	mov.w	r2, #4294967295
 8011766:	2100      	movs	r1, #0
 8011768:	4798      	blx	r3
 801176a:	4603      	mov	r3, r0
 801176c:	73bb      	strb	r3, [r7, #14]
      return;
 801176e:	e08b      	b.n	8011888 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011770:	23f0      	movs	r3, #240	; 0xf0
 8011772:	73bb      	strb	r3, [r7, #14]
      return;
 8011774:	e088      	b.n	8011888 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011776:	4b50      	ldr	r3, [pc, #320]	; (80118b8 <tcp_listen_input+0x1f0>)
 8011778:	695a      	ldr	r2, [r3, #20]
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801177e:	4b4e      	ldr	r3, [pc, #312]	; (80118b8 <tcp_listen_input+0x1f0>)
 8011780:	691a      	ldr	r2, [r3, #16]
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	8ada      	ldrh	r2, [r3, #22]
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801178e:	4b47      	ldr	r3, [pc, #284]	; (80118ac <tcp_listen_input+0x1e4>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	b29a      	uxth	r2, r3
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	2203      	movs	r2, #3
 801179e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80117a0:	4b41      	ldr	r3, [pc, #260]	; (80118a8 <tcp_listen_input+0x1e0>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	1c5a      	adds	r2, r3, #1
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80117b2:	6978      	ldr	r0, [r7, #20]
 80117b4:	f7ff fa5a 	bl	8010c6c <tcp_next_iss>
 80117b8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	693a      	ldr	r2, [r7, #16]
 80117be:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	693a      	ldr	r2, [r7, #16]
 80117c4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	693a      	ldr	r2, [r7, #16]
 80117d0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80117d2:	4b35      	ldr	r3, [pc, #212]	; (80118a8 <tcp_listen_input+0x1e0>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	1e5a      	subs	r2, r3, #1
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	691a      	ldr	r2, [r3, #16]
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	7a5b      	ldrb	r3, [r3, #9]
 80117ee:	f003 030c 	and.w	r3, r3, #12
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	7a1a      	ldrb	r2, [r3, #8]
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011800:	4b2e      	ldr	r3, [pc, #184]	; (80118bc <tcp_listen_input+0x1f4>)
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	60da      	str	r2, [r3, #12]
 8011808:	4a2c      	ldr	r2, [pc, #176]	; (80118bc <tcp_listen_input+0x1f4>)
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	6013      	str	r3, [r2, #0]
 801180e:	f003 f8cf 	bl	80149b0 <tcp_timer_needed>
 8011812:	4b2b      	ldr	r3, [pc, #172]	; (80118c0 <tcp_listen_input+0x1f8>)
 8011814:	2201      	movs	r2, #1
 8011816:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011818:	6978      	ldr	r0, [r7, #20]
 801181a:	f001 fd8d 	bl	8013338 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801181e:	4b23      	ldr	r3, [pc, #140]	; (80118ac <tcp_listen_input+0x1e4>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	89db      	ldrh	r3, [r3, #14]
 8011824:	b29a      	uxth	r2, r3
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	3304      	adds	r3, #4
 8011840:	4618      	mov	r0, r3
 8011842:	f005 f909 	bl	8016a58 <ip4_route>
 8011846:	4601      	mov	r1, r0
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	3304      	adds	r3, #4
 801184c:	461a      	mov	r2, r3
 801184e:	4620      	mov	r0, r4
 8011850:	f7ff fa32 	bl	8010cb8 <tcp_eff_send_mss_netif>
 8011854:	4603      	mov	r3, r0
 8011856:	461a      	mov	r2, r3
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801185c:	2112      	movs	r1, #18
 801185e:	6978      	ldr	r0, [r7, #20]
 8011860:	f002 f842 	bl	80138e8 <tcp_enqueue_flags>
 8011864:	4603      	mov	r3, r0
 8011866:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d004      	beq.n	801187a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011870:	2100      	movs	r1, #0
 8011872:	6978      	ldr	r0, [r7, #20]
 8011874:	f7fe f972 	bl	800fb5c <tcp_abandon>
      return;
 8011878:	e006      	b.n	8011888 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801187a:	6978      	ldr	r0, [r7, #20]
 801187c:	f002 f922 	bl	8013ac4 <tcp_output>
  return;
 8011880:	e001      	b.n	8011886 <tcp_listen_input+0x1be>
    return;
 8011882:	bf00      	nop
 8011884:	e000      	b.n	8011888 <tcp_listen_input+0x1c0>
  return;
 8011886:	bf00      	nop
}
 8011888:	371c      	adds	r7, #28
 801188a:	46bd      	mov	sp, r7
 801188c:	bd90      	pop	{r4, r7, pc}
 801188e:	bf00      	nop
 8011890:	2402183c 	.word	0x2402183c
 8011894:	0801a650 	.word	0x0801a650
 8011898:	0801a848 	.word	0x0801a848
 801189c:	0801a69c 	.word	0x0801a69c
 80118a0:	24021834 	.word	0x24021834
 80118a4:	2402183a 	.word	0x2402183a
 80118a8:	24021830 	.word	0x24021830
 80118ac:	24021820 	.word	0x24021820
 80118b0:	24021c9c 	.word	0x24021c9c
 80118b4:	24021ca0 	.word	0x24021ca0
 80118b8:	24021c8c 	.word	0x24021c8c
 80118bc:	24024e98 	.word	0x24024e98
 80118c0:	24024e94 	.word	0x24024e94

080118c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b086      	sub	sp, #24
 80118c8:	af04      	add	r7, sp, #16
 80118ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80118cc:	4b2f      	ldr	r3, [pc, #188]	; (801198c <tcp_timewait_input+0xc8>)
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	f003 0304 	and.w	r3, r3, #4
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d153      	bne.n	8011980 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d106      	bne.n	80118ec <tcp_timewait_input+0x28>
 80118de:	4b2c      	ldr	r3, [pc, #176]	; (8011990 <tcp_timewait_input+0xcc>)
 80118e0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80118e4:	492b      	ldr	r1, [pc, #172]	; (8011994 <tcp_timewait_input+0xd0>)
 80118e6:	482c      	ldr	r0, [pc, #176]	; (8011998 <tcp_timewait_input+0xd4>)
 80118e8:	f006 fc08 	bl	80180fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80118ec:	4b27      	ldr	r3, [pc, #156]	; (801198c <tcp_timewait_input+0xc8>)
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	f003 0302 	and.w	r3, r3, #2
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d02a      	beq.n	801194e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80118f8:	4b28      	ldr	r3, [pc, #160]	; (801199c <tcp_timewait_input+0xd8>)
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	2b00      	cmp	r3, #0
 8011904:	db2d      	blt.n	8011962 <tcp_timewait_input+0x9e>
 8011906:	4b25      	ldr	r3, [pc, #148]	; (801199c <tcp_timewait_input+0xd8>)
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190e:	6879      	ldr	r1, [r7, #4]
 8011910:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011912:	440b      	add	r3, r1
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	dc23      	bgt.n	8011962 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801191a:	4b21      	ldr	r3, [pc, #132]	; (80119a0 <tcp_timewait_input+0xdc>)
 801191c:	6819      	ldr	r1, [r3, #0]
 801191e:	4b21      	ldr	r3, [pc, #132]	; (80119a4 <tcp_timewait_input+0xe0>)
 8011920:	881b      	ldrh	r3, [r3, #0]
 8011922:	461a      	mov	r2, r3
 8011924:	4b1d      	ldr	r3, [pc, #116]	; (801199c <tcp_timewait_input+0xd8>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801192a:	4b1f      	ldr	r3, [pc, #124]	; (80119a8 <tcp_timewait_input+0xe4>)
 801192c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801192e:	885b      	ldrh	r3, [r3, #2]
 8011930:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011932:	4a1d      	ldr	r2, [pc, #116]	; (80119a8 <tcp_timewait_input+0xe4>)
 8011934:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011936:	8812      	ldrh	r2, [r2, #0]
 8011938:	b292      	uxth	r2, r2
 801193a:	9202      	str	r2, [sp, #8]
 801193c:	9301      	str	r3, [sp, #4]
 801193e:	4b1b      	ldr	r3, [pc, #108]	; (80119ac <tcp_timewait_input+0xe8>)
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	4b1b      	ldr	r3, [pc, #108]	; (80119b0 <tcp_timewait_input+0xec>)
 8011944:	4602      	mov	r2, r0
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f002 fe70 	bl	801462c <tcp_rst>
      return;
 801194c:	e01b      	b.n	8011986 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801194e:	4b0f      	ldr	r3, [pc, #60]	; (801198c <tcp_timewait_input+0xc8>)
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	2b00      	cmp	r3, #0
 8011958:	d003      	beq.n	8011962 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801195a:	4b16      	ldr	r3, [pc, #88]	; (80119b4 <tcp_timewait_input+0xf0>)
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011962:	4b10      	ldr	r3, [pc, #64]	; (80119a4 <tcp_timewait_input+0xe0>)
 8011964:	881b      	ldrh	r3, [r3, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00c      	beq.n	8011984 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	8b5b      	ldrh	r3, [r3, #26]
 801196e:	f043 0302 	orr.w	r3, r3, #2
 8011972:	b29a      	uxth	r2, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f002 f8a3 	bl	8013ac4 <tcp_output>
  }
  return;
 801197e:	e001      	b.n	8011984 <tcp_timewait_input+0xc0>
    return;
 8011980:	bf00      	nop
 8011982:	e000      	b.n	8011986 <tcp_timewait_input+0xc2>
  return;
 8011984:	bf00      	nop
}
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	2402183c 	.word	0x2402183c
 8011990:	0801a650 	.word	0x0801a650
 8011994:	0801a868 	.word	0x0801a868
 8011998:	0801a69c 	.word	0x0801a69c
 801199c:	24021830 	.word	0x24021830
 80119a0:	24021834 	.word	0x24021834
 80119a4:	2402183a 	.word	0x2402183a
 80119a8:	24021820 	.word	0x24021820
 80119ac:	24021c9c 	.word	0x24021c9c
 80119b0:	24021ca0 	.word	0x24021ca0
 80119b4:	24024e9c 	.word	0x24024e9c

080119b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80119b8:	b590      	push	{r4, r7, lr}
 80119ba:	b08d      	sub	sp, #52	; 0x34
 80119bc:	af04      	add	r7, sp, #16
 80119be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80119c0:	2300      	movs	r3, #0
 80119c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80119c4:	2300      	movs	r3, #0
 80119c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d106      	bne.n	80119dc <tcp_process+0x24>
 80119ce:	4ba5      	ldr	r3, [pc, #660]	; (8011c64 <tcp_process+0x2ac>)
 80119d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80119d4:	49a4      	ldr	r1, [pc, #656]	; (8011c68 <tcp_process+0x2b0>)
 80119d6:	48a5      	ldr	r0, [pc, #660]	; (8011c6c <tcp_process+0x2b4>)
 80119d8:	f006 fb90 	bl	80180fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80119dc:	4ba4      	ldr	r3, [pc, #656]	; (8011c70 <tcp_process+0x2b8>)
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	f003 0304 	and.w	r3, r3, #4
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d04e      	beq.n	8011a86 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	7d1b      	ldrb	r3, [r3, #20]
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	d108      	bne.n	8011a02 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119f4:	4b9f      	ldr	r3, [pc, #636]	; (8011c74 <tcp_process+0x2bc>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d123      	bne.n	8011a44 <tcp_process+0x8c>
        acceptable = 1;
 80119fc:	2301      	movs	r3, #1
 80119fe:	76fb      	strb	r3, [r7, #27]
 8011a00:	e020      	b.n	8011a44 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a06:	4b9c      	ldr	r3, [pc, #624]	; (8011c78 <tcp_process+0x2c0>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d102      	bne.n	8011a14 <tcp_process+0x5c>
        acceptable = 1;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	76fb      	strb	r3, [r7, #27]
 8011a12:	e017      	b.n	8011a44 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011a14:	4b98      	ldr	r3, [pc, #608]	; (8011c78 <tcp_process+0x2c0>)
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	db10      	blt.n	8011a44 <tcp_process+0x8c>
 8011a22:	4b95      	ldr	r3, [pc, #596]	; (8011c78 <tcp_process+0x2c0>)
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2a:	6879      	ldr	r1, [r7, #4]
 8011a2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a2e:	440b      	add	r3, r1
 8011a30:	1ad3      	subs	r3, r2, r3
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	dc06      	bgt.n	8011a44 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8b5b      	ldrh	r3, [r3, #26]
 8011a3a:	f043 0302 	orr.w	r3, r3, #2
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011a44:	7efb      	ldrb	r3, [r7, #27]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d01b      	beq.n	8011a82 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	7d1b      	ldrb	r3, [r3, #20]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d106      	bne.n	8011a60 <tcp_process+0xa8>
 8011a52:	4b84      	ldr	r3, [pc, #528]	; (8011c64 <tcp_process+0x2ac>)
 8011a54:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011a58:	4988      	ldr	r1, [pc, #544]	; (8011c7c <tcp_process+0x2c4>)
 8011a5a:	4884      	ldr	r0, [pc, #528]	; (8011c6c <tcp_process+0x2b4>)
 8011a5c:	f006 fb4e 	bl	80180fc <iprintf>
      recv_flags |= TF_RESET;
 8011a60:	4b87      	ldr	r3, [pc, #540]	; (8011c80 <tcp_process+0x2c8>)
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	f043 0308 	orr.w	r3, r3, #8
 8011a68:	b2da      	uxtb	r2, r3
 8011a6a:	4b85      	ldr	r3, [pc, #532]	; (8011c80 <tcp_process+0x2c8>)
 8011a6c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	8b5b      	ldrh	r3, [r3, #26]
 8011a72:	f023 0301 	bic.w	r3, r3, #1
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011a7c:	f06f 030d 	mvn.w	r3, #13
 8011a80:	e37a      	b.n	8012178 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011a82:	2300      	movs	r3, #0
 8011a84:	e378      	b.n	8012178 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011a86:	4b7a      	ldr	r3, [pc, #488]	; (8011c70 <tcp_process+0x2b8>)
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	f003 0302 	and.w	r3, r3, #2
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d010      	beq.n	8011ab4 <tcp_process+0xfc>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	7d1b      	ldrb	r3, [r3, #20]
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	d00c      	beq.n	8011ab4 <tcp_process+0xfc>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	7d1b      	ldrb	r3, [r3, #20]
 8011a9e:	2b03      	cmp	r3, #3
 8011aa0:	d008      	beq.n	8011ab4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8b5b      	ldrh	r3, [r3, #26]
 8011aa6:	f043 0302 	orr.w	r3, r3, #2
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	e361      	b.n	8012178 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	8b5b      	ldrh	r3, [r3, #26]
 8011ab8:	f003 0310 	and.w	r3, r3, #16
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d103      	bne.n	8011ac8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011ac0:	4b70      	ldr	r3, [pc, #448]	; (8011c84 <tcp_process+0x2cc>)
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  pcb->persist_probe = 0;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f001 fc2d 	bl	8013338 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	7d1b      	ldrb	r3, [r3, #20]
 8011ae2:	3b02      	subs	r3, #2
 8011ae4:	2b07      	cmp	r3, #7
 8011ae6:	f200 8337 	bhi.w	8012158 <tcp_process+0x7a0>
 8011aea:	a201      	add	r2, pc, #4	; (adr r2, 8011af0 <tcp_process+0x138>)
 8011aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af0:	08011b11 	.word	0x08011b11
 8011af4:	08011d41 	.word	0x08011d41
 8011af8:	08011eb9 	.word	0x08011eb9
 8011afc:	08011ee3 	.word	0x08011ee3
 8011b00:	08012007 	.word	0x08012007
 8011b04:	08011eb9 	.word	0x08011eb9
 8011b08:	08012093 	.word	0x08012093
 8011b0c:	08012123 	.word	0x08012123
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011b10:	4b57      	ldr	r3, [pc, #348]	; (8011c70 <tcp_process+0x2b8>)
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	f003 0310 	and.w	r3, r3, #16
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	f000 80e4 	beq.w	8011ce6 <tcp_process+0x32e>
 8011b1e:	4b54      	ldr	r3, [pc, #336]	; (8011c70 <tcp_process+0x2b8>)
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	f003 0302 	and.w	r3, r3, #2
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f000 80dd 	beq.w	8011ce6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b30:	1c5a      	adds	r2, r3, #1
 8011b32:	4b50      	ldr	r3, [pc, #320]	; (8011c74 <tcp_process+0x2bc>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	f040 80d5 	bne.w	8011ce6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011b3c:	4b4e      	ldr	r3, [pc, #312]	; (8011c78 <tcp_process+0x2c0>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	1c5a      	adds	r2, r3, #1
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011b4e:	4b49      	ldr	r3, [pc, #292]	; (8011c74 <tcp_process+0x2bc>)
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011b56:	4b4c      	ldr	r3, [pc, #304]	; (8011c88 <tcp_process+0x2d0>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	89db      	ldrh	r3, [r3, #14]
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011b70:	4b41      	ldr	r3, [pc, #260]	; (8011c78 <tcp_process+0x2c0>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	1e5a      	subs	r2, r3, #1
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2204      	movs	r2, #4
 8011b7e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	3304      	adds	r3, #4
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f004 ff65 	bl	8016a58 <ip4_route>
 8011b8e:	4601      	mov	r1, r0
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	3304      	adds	r3, #4
 8011b94:	461a      	mov	r2, r3
 8011b96:	4620      	mov	r0, r4
 8011b98:	f7ff f88e 	bl	8010cb8 <tcp_eff_send_mss_netif>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ba8:	009a      	lsls	r2, r3, #2
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bae:	005b      	lsls	r3, r3, #1
 8011bb0:	f241 111c 	movw	r1, #4380	; 0x111c
 8011bb4:	428b      	cmp	r3, r1
 8011bb6:	bf38      	it	cc
 8011bb8:	460b      	movcc	r3, r1
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d204      	bcs.n	8011bc8 <tcp_process+0x210>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	e00d      	b.n	8011be4 <tcp_process+0x22c>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bcc:	005b      	lsls	r3, r3, #1
 8011bce:	f241 121c 	movw	r2, #4380	; 0x111c
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d904      	bls.n	8011be0 <tcp_process+0x228>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bda:	005b      	lsls	r3, r3, #1
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	e001      	b.n	8011be4 <tcp_process+0x22c>
 8011be0:	f241 131c 	movw	r3, #4380	; 0x111c
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d106      	bne.n	8011c02 <tcp_process+0x24a>
 8011bf4:	4b1b      	ldr	r3, [pc, #108]	; (8011c64 <tcp_process+0x2ac>)
 8011bf6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011bfa:	4924      	ldr	r1, [pc, #144]	; (8011c8c <tcp_process+0x2d4>)
 8011bfc:	481b      	ldr	r0, [pc, #108]	; (8011c6c <tcp_process+0x2b4>)
 8011bfe:	f006 fa7d 	bl	80180fc <iprintf>
        --pcb->snd_queuelen;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c08:	3b01      	subs	r3, #1
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c16:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d111      	bne.n	8011c42 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c22:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <tcp_process+0x280>
 8011c2a:	4b0e      	ldr	r3, [pc, #56]	; (8011c64 <tcp_process+0x2ac>)
 8011c2c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011c30:	4917      	ldr	r1, [pc, #92]	; (8011c90 <tcp_process+0x2d8>)
 8011c32:	480e      	ldr	r0, [pc, #56]	; (8011c6c <tcp_process+0x2b4>)
 8011c34:	f006 fa62 	bl	80180fc <iprintf>
          pcb->unsent = rseg->next;
 8011c38:	69fb      	ldr	r3, [r7, #28]
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8011c40:	e003      	b.n	8011c4a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011c4a:	69f8      	ldr	r0, [r7, #28]
 8011c4c:	f7fe fd33 	bl	80106b6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d11d      	bne.n	8011c94 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c5e:	861a      	strh	r2, [r3, #48]	; 0x30
 8011c60:	e01f      	b.n	8011ca2 <tcp_process+0x2ea>
 8011c62:	bf00      	nop
 8011c64:	0801a650 	.word	0x0801a650
 8011c68:	0801a888 	.word	0x0801a888
 8011c6c:	0801a69c 	.word	0x0801a69c
 8011c70:	2402183c 	.word	0x2402183c
 8011c74:	24021834 	.word	0x24021834
 8011c78:	24021830 	.word	0x24021830
 8011c7c:	0801a8a4 	.word	0x0801a8a4
 8011c80:	2402183d 	.word	0x2402183d
 8011c84:	24024e9c 	.word	0x24024e9c
 8011c88:	24021820 	.word	0x24021820
 8011c8c:	0801a8c4 	.word	0x0801a8c4
 8011c90:	0801a8dc 	.word	0x0801a8dc
        } else {
          pcb->rtime = 0;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d00a      	beq.n	8011cc2 <tcp_process+0x30a>
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	6910      	ldr	r0, [r2, #16]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	6879      	ldr	r1, [r7, #4]
 8011cba:	4798      	blx	r3
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	76bb      	strb	r3, [r7, #26]
 8011cc0:	e001      	b.n	8011cc6 <tcp_process+0x30e>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011cc6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011cca:	f113 0f0d 	cmn.w	r3, #13
 8011cce:	d102      	bne.n	8011cd6 <tcp_process+0x31e>
          return ERR_ABRT;
 8011cd0:	f06f 030c 	mvn.w	r3, #12
 8011cd4:	e250      	b.n	8012178 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	8b5b      	ldrh	r3, [r3, #26]
 8011cda:	f043 0302 	orr.w	r3, r3, #2
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011ce4:	e23a      	b.n	801215c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011ce6:	4b9d      	ldr	r3, [pc, #628]	; (8011f5c <tcp_process+0x5a4>)
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	f003 0310 	and.w	r3, r3, #16
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f000 8234 	beq.w	801215c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cf4:	4b9a      	ldr	r3, [pc, #616]	; (8011f60 <tcp_process+0x5a8>)
 8011cf6:	6819      	ldr	r1, [r3, #0]
 8011cf8:	4b9a      	ldr	r3, [pc, #616]	; (8011f64 <tcp_process+0x5ac>)
 8011cfa:	881b      	ldrh	r3, [r3, #0]
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	4b9a      	ldr	r3, [pc, #616]	; (8011f68 <tcp_process+0x5b0>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d04:	4b99      	ldr	r3, [pc, #612]	; (8011f6c <tcp_process+0x5b4>)
 8011d06:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d08:	885b      	ldrh	r3, [r3, #2]
 8011d0a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d0c:	4a97      	ldr	r2, [pc, #604]	; (8011f6c <tcp_process+0x5b4>)
 8011d0e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d10:	8812      	ldrh	r2, [r2, #0]
 8011d12:	b292      	uxth	r2, r2
 8011d14:	9202      	str	r2, [sp, #8]
 8011d16:	9301      	str	r3, [sp, #4]
 8011d18:	4b95      	ldr	r3, [pc, #596]	; (8011f70 <tcp_process+0x5b8>)
 8011d1a:	9300      	str	r3, [sp, #0]
 8011d1c:	4b95      	ldr	r3, [pc, #596]	; (8011f74 <tcp_process+0x5bc>)
 8011d1e:	4602      	mov	r2, r0
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f002 fc83 	bl	801462c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011d2c:	2b05      	cmp	r3, #5
 8011d2e:	f200 8215 	bhi.w	801215c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2200      	movs	r2, #0
 8011d36:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f002 fa4d 	bl	80141d8 <tcp_rexmit_rto>
      break;
 8011d3e:	e20d      	b.n	801215c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011d40:	4b86      	ldr	r3, [pc, #536]	; (8011f5c <tcp_process+0x5a4>)
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	f003 0310 	and.w	r3, r3, #16
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f000 80a1 	beq.w	8011e90 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d4e:	4b84      	ldr	r3, [pc, #528]	; (8011f60 <tcp_process+0x5a8>)
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d56:	1ad3      	subs	r3, r2, r3
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	db7e      	blt.n	8011e5c <tcp_process+0x4a4>
 8011d5e:	4b80      	ldr	r3, [pc, #512]	; (8011f60 <tcp_process+0x5a8>)
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d66:	1ad3      	subs	r3, r2, r3
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	dc77      	bgt.n	8011e5c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2204      	movs	r2, #4
 8011d70:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d102      	bne.n	8011d80 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011d7a:	23fa      	movs	r3, #250	; 0xfa
 8011d7c:	76bb      	strb	r3, [r7, #26]
 8011d7e:	e01d      	b.n	8011dbc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d84:	699b      	ldr	r3, [r3, #24]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d106      	bne.n	8011d98 <tcp_process+0x3e0>
 8011d8a:	4b7b      	ldr	r3, [pc, #492]	; (8011f78 <tcp_process+0x5c0>)
 8011d8c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011d90:	497a      	ldr	r1, [pc, #488]	; (8011f7c <tcp_process+0x5c4>)
 8011d92:	487b      	ldr	r0, [pc, #492]	; (8011f80 <tcp_process+0x5c8>)
 8011d94:	f006 f9b2 	bl	80180fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d9c:	699b      	ldr	r3, [r3, #24]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d00a      	beq.n	8011db8 <tcp_process+0x400>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011da6:	699b      	ldr	r3, [r3, #24]
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	6910      	ldr	r0, [r2, #16]
 8011dac:	2200      	movs	r2, #0
 8011dae:	6879      	ldr	r1, [r7, #4]
 8011db0:	4798      	blx	r3
 8011db2:	4603      	mov	r3, r0
 8011db4:	76bb      	strb	r3, [r7, #26]
 8011db6:	e001      	b.n	8011dbc <tcp_process+0x404>
 8011db8:	23f0      	movs	r3, #240	; 0xf0
 8011dba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011dbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00a      	beq.n	8011dda <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011dc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011dc8:	f113 0f0d 	cmn.w	r3, #13
 8011dcc:	d002      	beq.n	8011dd4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7fd ff82 	bl	800fcd8 <tcp_abort>
            }
            return ERR_ABRT;
 8011dd4:	f06f 030c 	mvn.w	r3, #12
 8011dd8:	e1ce      	b.n	8012178 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 fae0 	bl	80123a0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011de0:	4b68      	ldr	r3, [pc, #416]	; (8011f84 <tcp_process+0x5cc>)
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d005      	beq.n	8011df4 <tcp_process+0x43c>
            recv_acked--;
 8011de8:	4b66      	ldr	r3, [pc, #408]	; (8011f84 <tcp_process+0x5cc>)
 8011dea:	881b      	ldrh	r3, [r3, #0]
 8011dec:	3b01      	subs	r3, #1
 8011dee:	b29a      	uxth	r2, r3
 8011df0:	4b64      	ldr	r3, [pc, #400]	; (8011f84 <tcp_process+0x5cc>)
 8011df2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011df8:	009a      	lsls	r2, r3, #2
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	f241 111c 	movw	r1, #4380	; 0x111c
 8011e04:	428b      	cmp	r3, r1
 8011e06:	bf38      	it	cc
 8011e08:	460b      	movcc	r3, r1
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d204      	bcs.n	8011e18 <tcp_process+0x460>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	e00d      	b.n	8011e34 <tcp_process+0x47c>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e1c:	005b      	lsls	r3, r3, #1
 8011e1e:	f241 121c 	movw	r2, #4380	; 0x111c
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d904      	bls.n	8011e30 <tcp_process+0x478>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	b29b      	uxth	r3, r3
 8011e2e:	e001      	b.n	8011e34 <tcp_process+0x47c>
 8011e30:	f241 131c 	movw	r3, #4380	; 0x111c
 8011e34:	687a      	ldr	r2, [r7, #4]
 8011e36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011e3a:	4b53      	ldr	r3, [pc, #332]	; (8011f88 <tcp_process+0x5d0>)
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	f003 0320 	and.w	r3, r3, #32
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d037      	beq.n	8011eb6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	8b5b      	ldrh	r3, [r3, #26]
 8011e4a:	f043 0302 	orr.w	r3, r3, #2
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2207      	movs	r2, #7
 8011e58:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011e5a:	e02c      	b.n	8011eb6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e5c:	4b40      	ldr	r3, [pc, #256]	; (8011f60 <tcp_process+0x5a8>)
 8011e5e:	6819      	ldr	r1, [r3, #0]
 8011e60:	4b40      	ldr	r3, [pc, #256]	; (8011f64 <tcp_process+0x5ac>)
 8011e62:	881b      	ldrh	r3, [r3, #0]
 8011e64:	461a      	mov	r2, r3
 8011e66:	4b40      	ldr	r3, [pc, #256]	; (8011f68 <tcp_process+0x5b0>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e6c:	4b3f      	ldr	r3, [pc, #252]	; (8011f6c <tcp_process+0x5b4>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e70:	885b      	ldrh	r3, [r3, #2]
 8011e72:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e74:	4a3d      	ldr	r2, [pc, #244]	; (8011f6c <tcp_process+0x5b4>)
 8011e76:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e78:	8812      	ldrh	r2, [r2, #0]
 8011e7a:	b292      	uxth	r2, r2
 8011e7c:	9202      	str	r2, [sp, #8]
 8011e7e:	9301      	str	r3, [sp, #4]
 8011e80:	4b3b      	ldr	r3, [pc, #236]	; (8011f70 <tcp_process+0x5b8>)
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	4b3b      	ldr	r3, [pc, #236]	; (8011f74 <tcp_process+0x5bc>)
 8011e86:	4602      	mov	r2, r0
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f002 fbcf 	bl	801462c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011e8e:	e167      	b.n	8012160 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011e90:	4b32      	ldr	r3, [pc, #200]	; (8011f5c <tcp_process+0x5a4>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f003 0302 	and.w	r3, r3, #2
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 8161 	beq.w	8012160 <tcp_process+0x7a8>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ea2:	1e5a      	subs	r2, r3, #1
 8011ea4:	4b30      	ldr	r3, [pc, #192]	; (8011f68 <tcp_process+0x5b0>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	f040 8159 	bne.w	8012160 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f002 f9b4 	bl	801421c <tcp_rexmit>
      break;
 8011eb4:	e154      	b.n	8012160 <tcp_process+0x7a8>
 8011eb6:	e153      	b.n	8012160 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 fa71 	bl	80123a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011ebe:	4b32      	ldr	r3, [pc, #200]	; (8011f88 <tcp_process+0x5d0>)
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	f003 0320 	and.w	r3, r3, #32
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f000 814c 	beq.w	8012164 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	8b5b      	ldrh	r3, [r3, #26]
 8011ed0:	f043 0302 	orr.w	r3, r3, #2
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2207      	movs	r2, #7
 8011ede:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ee0:	e140      	b.n	8012164 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f000 fa5c 	bl	80123a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011ee8:	4b27      	ldr	r3, [pc, #156]	; (8011f88 <tcp_process+0x5d0>)
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	f003 0320 	and.w	r3, r3, #32
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d071      	beq.n	8011fd8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ef4:	4b19      	ldr	r3, [pc, #100]	; (8011f5c <tcp_process+0x5a4>)
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	f003 0310 	and.w	r3, r3, #16
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d060      	beq.n	8011fc2 <tcp_process+0x60a>
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f04:	4b16      	ldr	r3, [pc, #88]	; (8011f60 <tcp_process+0x5a8>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d15a      	bne.n	8011fc2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d156      	bne.n	8011fc2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	8b5b      	ldrh	r3, [r3, #26]
 8011f18:	f043 0302 	orr.w	r3, r3, #2
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7fe fdbe 	bl	8010aa4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011f28:	4b18      	ldr	r3, [pc, #96]	; (8011f8c <tcp_process+0x5d4>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d105      	bne.n	8011f3e <tcp_process+0x586>
 8011f32:	4b16      	ldr	r3, [pc, #88]	; (8011f8c <tcp_process+0x5d4>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	4a14      	ldr	r2, [pc, #80]	; (8011f8c <tcp_process+0x5d4>)
 8011f3a:	6013      	str	r3, [r2, #0]
 8011f3c:	e02e      	b.n	8011f9c <tcp_process+0x5e4>
 8011f3e:	4b13      	ldr	r3, [pc, #76]	; (8011f8c <tcp_process+0x5d4>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	617b      	str	r3, [r7, #20]
 8011f44:	e027      	b.n	8011f96 <tcp_process+0x5de>
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	68db      	ldr	r3, [r3, #12]
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d11f      	bne.n	8011f90 <tcp_process+0x5d8>
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	68da      	ldr	r2, [r3, #12]
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	60da      	str	r2, [r3, #12]
 8011f58:	e020      	b.n	8011f9c <tcp_process+0x5e4>
 8011f5a:	bf00      	nop
 8011f5c:	2402183c 	.word	0x2402183c
 8011f60:	24021834 	.word	0x24021834
 8011f64:	2402183a 	.word	0x2402183a
 8011f68:	24021830 	.word	0x24021830
 8011f6c:	24021820 	.word	0x24021820
 8011f70:	24021c9c 	.word	0x24021c9c
 8011f74:	24021ca0 	.word	0x24021ca0
 8011f78:	0801a650 	.word	0x0801a650
 8011f7c:	0801a8f0 	.word	0x0801a8f0
 8011f80:	0801a69c 	.word	0x0801a69c
 8011f84:	24021838 	.word	0x24021838
 8011f88:	2402183d 	.word	0x2402183d
 8011f8c:	24024e98 	.word	0x24024e98
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	617b      	str	r3, [r7, #20]
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d1d4      	bne.n	8011f46 <tcp_process+0x58e>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	60da      	str	r2, [r3, #12]
 8011fa2:	4b77      	ldr	r3, [pc, #476]	; (8012180 <tcp_process+0x7c8>)
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	220a      	movs	r2, #10
 8011fac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011fae:	4b75      	ldr	r3, [pc, #468]	; (8012184 <tcp_process+0x7cc>)
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	60da      	str	r2, [r3, #12]
 8011fb6:	4a73      	ldr	r2, [pc, #460]	; (8012184 <tcp_process+0x7cc>)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	f002 fcf8 	bl	80149b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011fc0:	e0d2      	b.n	8012168 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	8b5b      	ldrh	r3, [r3, #26]
 8011fc6:	f043 0302 	orr.w	r3, r3, #2
 8011fca:	b29a      	uxth	r2, r3
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2208      	movs	r2, #8
 8011fd4:	751a      	strb	r2, [r3, #20]
      break;
 8011fd6:	e0c7      	b.n	8012168 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fd8:	4b6b      	ldr	r3, [pc, #428]	; (8012188 <tcp_process+0x7d0>)
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	f003 0310 	and.w	r3, r3, #16
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	f000 80c1 	beq.w	8012168 <tcp_process+0x7b0>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fea:	4b68      	ldr	r3, [pc, #416]	; (801218c <tcp_process+0x7d4>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	f040 80ba 	bne.w	8012168 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f040 80b5 	bne.w	8012168 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2206      	movs	r2, #6
 8012002:	751a      	strb	r2, [r3, #20]
      break;
 8012004:	e0b0      	b.n	8012168 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 f9ca 	bl	80123a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801200c:	4b60      	ldr	r3, [pc, #384]	; (8012190 <tcp_process+0x7d8>)
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	f003 0320 	and.w	r3, r3, #32
 8012014:	2b00      	cmp	r3, #0
 8012016:	f000 80a9 	beq.w	801216c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	8b5b      	ldrh	r3, [r3, #26]
 801201e:	f043 0302 	orr.w	r3, r3, #2
 8012022:	b29a      	uxth	r2, r3
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7fe fd3b 	bl	8010aa4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801202e:	4b59      	ldr	r3, [pc, #356]	; (8012194 <tcp_process+0x7dc>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	429a      	cmp	r2, r3
 8012036:	d105      	bne.n	8012044 <tcp_process+0x68c>
 8012038:	4b56      	ldr	r3, [pc, #344]	; (8012194 <tcp_process+0x7dc>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	4a55      	ldr	r2, [pc, #340]	; (8012194 <tcp_process+0x7dc>)
 8012040:	6013      	str	r3, [r2, #0]
 8012042:	e013      	b.n	801206c <tcp_process+0x6b4>
 8012044:	4b53      	ldr	r3, [pc, #332]	; (8012194 <tcp_process+0x7dc>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	613b      	str	r3, [r7, #16]
 801204a:	e00c      	b.n	8012066 <tcp_process+0x6ae>
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	429a      	cmp	r2, r3
 8012054:	d104      	bne.n	8012060 <tcp_process+0x6a8>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	68da      	ldr	r2, [r3, #12]
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	60da      	str	r2, [r3, #12]
 801205e:	e005      	b.n	801206c <tcp_process+0x6b4>
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	613b      	str	r3, [r7, #16]
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d1ef      	bne.n	801204c <tcp_process+0x694>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	60da      	str	r2, [r3, #12]
 8012072:	4b43      	ldr	r3, [pc, #268]	; (8012180 <tcp_process+0x7c8>)
 8012074:	2201      	movs	r2, #1
 8012076:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	220a      	movs	r2, #10
 801207c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801207e:	4b41      	ldr	r3, [pc, #260]	; (8012184 <tcp_process+0x7cc>)
 8012080:	681a      	ldr	r2, [r3, #0]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	60da      	str	r2, [r3, #12]
 8012086:	4a3f      	ldr	r2, [pc, #252]	; (8012184 <tcp_process+0x7cc>)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6013      	str	r3, [r2, #0]
 801208c:	f002 fc90 	bl	80149b0 <tcp_timer_needed>
      }
      break;
 8012090:	e06c      	b.n	801216c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 f984 	bl	80123a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012098:	4b3b      	ldr	r3, [pc, #236]	; (8012188 <tcp_process+0x7d0>)
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	f003 0310 	and.w	r3, r3, #16
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d065      	beq.n	8012170 <tcp_process+0x7b8>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120a8:	4b38      	ldr	r3, [pc, #224]	; (801218c <tcp_process+0x7d4>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d15f      	bne.n	8012170 <tcp_process+0x7b8>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d15b      	bne.n	8012170 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7fe fcf3 	bl	8010aa4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80120be:	4b35      	ldr	r3, [pc, #212]	; (8012194 <tcp_process+0x7dc>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d105      	bne.n	80120d4 <tcp_process+0x71c>
 80120c8:	4b32      	ldr	r3, [pc, #200]	; (8012194 <tcp_process+0x7dc>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	4a31      	ldr	r2, [pc, #196]	; (8012194 <tcp_process+0x7dc>)
 80120d0:	6013      	str	r3, [r2, #0]
 80120d2:	e013      	b.n	80120fc <tcp_process+0x744>
 80120d4:	4b2f      	ldr	r3, [pc, #188]	; (8012194 <tcp_process+0x7dc>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	60fb      	str	r3, [r7, #12]
 80120da:	e00c      	b.n	80120f6 <tcp_process+0x73e>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d104      	bne.n	80120f0 <tcp_process+0x738>
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	68da      	ldr	r2, [r3, #12]
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	60da      	str	r2, [r3, #12]
 80120ee:	e005      	b.n	80120fc <tcp_process+0x744>
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	60fb      	str	r3, [r7, #12]
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1ef      	bne.n	80120dc <tcp_process+0x724>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2200      	movs	r2, #0
 8012100:	60da      	str	r2, [r3, #12]
 8012102:	4b1f      	ldr	r3, [pc, #124]	; (8012180 <tcp_process+0x7c8>)
 8012104:	2201      	movs	r2, #1
 8012106:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	220a      	movs	r2, #10
 801210c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801210e:	4b1d      	ldr	r3, [pc, #116]	; (8012184 <tcp_process+0x7cc>)
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	60da      	str	r2, [r3, #12]
 8012116:	4a1b      	ldr	r2, [pc, #108]	; (8012184 <tcp_process+0x7cc>)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6013      	str	r3, [r2, #0]
 801211c:	f002 fc48 	bl	80149b0 <tcp_timer_needed>
      }
      break;
 8012120:	e026      	b.n	8012170 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 f93c 	bl	80123a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012128:	4b17      	ldr	r3, [pc, #92]	; (8012188 <tcp_process+0x7d0>)
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	f003 0310 	and.w	r3, r3, #16
 8012130:	2b00      	cmp	r3, #0
 8012132:	d01f      	beq.n	8012174 <tcp_process+0x7bc>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012138:	4b14      	ldr	r3, [pc, #80]	; (801218c <tcp_process+0x7d4>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	429a      	cmp	r2, r3
 801213e:	d119      	bne.n	8012174 <tcp_process+0x7bc>
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012144:	2b00      	cmp	r3, #0
 8012146:	d115      	bne.n	8012174 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012148:	4b11      	ldr	r3, [pc, #68]	; (8012190 <tcp_process+0x7d8>)
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f043 0310 	orr.w	r3, r3, #16
 8012150:	b2da      	uxtb	r2, r3
 8012152:	4b0f      	ldr	r3, [pc, #60]	; (8012190 <tcp_process+0x7d8>)
 8012154:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012156:	e00d      	b.n	8012174 <tcp_process+0x7bc>
    default:
      break;
 8012158:	bf00      	nop
 801215a:	e00c      	b.n	8012176 <tcp_process+0x7be>
      break;
 801215c:	bf00      	nop
 801215e:	e00a      	b.n	8012176 <tcp_process+0x7be>
      break;
 8012160:	bf00      	nop
 8012162:	e008      	b.n	8012176 <tcp_process+0x7be>
      break;
 8012164:	bf00      	nop
 8012166:	e006      	b.n	8012176 <tcp_process+0x7be>
      break;
 8012168:	bf00      	nop
 801216a:	e004      	b.n	8012176 <tcp_process+0x7be>
      break;
 801216c:	bf00      	nop
 801216e:	e002      	b.n	8012176 <tcp_process+0x7be>
      break;
 8012170:	bf00      	nop
 8012172:	e000      	b.n	8012176 <tcp_process+0x7be>
      break;
 8012174:	bf00      	nop
  }
  return ERR_OK;
 8012176:	2300      	movs	r3, #0
}
 8012178:	4618      	mov	r0, r3
 801217a:	3724      	adds	r7, #36	; 0x24
 801217c:	46bd      	mov	sp, r7
 801217e:	bd90      	pop	{r4, r7, pc}
 8012180:	24024e94 	.word	0x24024e94
 8012184:	24024ea8 	.word	0x24024ea8
 8012188:	2402183c 	.word	0x2402183c
 801218c:	24021834 	.word	0x24021834
 8012190:	2402183d 	.word	0x2402183d
 8012194:	24024e98 	.word	0x24024e98

08012198 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012198:	b590      	push	{r4, r7, lr}
 801219a:	b085      	sub	sp, #20
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d106      	bne.n	80121b6 <tcp_oos_insert_segment+0x1e>
 80121a8:	4b3b      	ldr	r3, [pc, #236]	; (8012298 <tcp_oos_insert_segment+0x100>)
 80121aa:	f240 421f 	movw	r2, #1055	; 0x41f
 80121ae:	493b      	ldr	r1, [pc, #236]	; (801229c <tcp_oos_insert_segment+0x104>)
 80121b0:	483b      	ldr	r0, [pc, #236]	; (80122a0 <tcp_oos_insert_segment+0x108>)
 80121b2:	f005 ffa3 	bl	80180fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	899b      	ldrh	r3, [r3, #12]
 80121bc:	b29b      	uxth	r3, r3
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fb fb1e 	bl	800d800 <lwip_htons>
 80121c4:	4603      	mov	r3, r0
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	f003 0301 	and.w	r3, r3, #1
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d028      	beq.n	8012222 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80121d0:	6838      	ldr	r0, [r7, #0]
 80121d2:	f7fe fa5b 	bl	801068c <tcp_segs_free>
    next = NULL;
 80121d6:	2300      	movs	r3, #0
 80121d8:	603b      	str	r3, [r7, #0]
 80121da:	e056      	b.n	801228a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	899b      	ldrh	r3, [r3, #12]
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fb fb0b 	bl	800d800 <lwip_htons>
 80121ea:	4603      	mov	r3, r0
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	f003 0301 	and.w	r3, r3, #1
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00d      	beq.n	8012212 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	899b      	ldrh	r3, [r3, #12]
 80121fc:	b29c      	uxth	r4, r3
 80121fe:	2001      	movs	r0, #1
 8012200:	f7fb fafe 	bl	800d800 <lwip_htons>
 8012204:	4603      	mov	r3, r0
 8012206:	461a      	mov	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	4322      	orrs	r2, r4
 801220e:	b292      	uxth	r2, r2
 8012210:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801221c:	68f8      	ldr	r0, [r7, #12]
 801221e:	f7fe fa4a 	bl	80106b6 <tcp_seg_free>
    while (next &&
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d00e      	beq.n	8012246 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	891b      	ldrh	r3, [r3, #8]
 801222c:	461a      	mov	r2, r3
 801222e:	4b1d      	ldr	r3, [pc, #116]	; (80122a4 <tcp_oos_insert_segment+0x10c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	441a      	add	r2, r3
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	68db      	ldr	r3, [r3, #12]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	6839      	ldr	r1, [r7, #0]
 801223c:	8909      	ldrh	r1, [r1, #8]
 801223e:	440b      	add	r3, r1
 8012240:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012242:	2b00      	cmp	r3, #0
 8012244:	daca      	bge.n	80121dc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d01e      	beq.n	801228a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	891b      	ldrh	r3, [r3, #8]
 8012250:	461a      	mov	r2, r3
 8012252:	4b14      	ldr	r3, [pc, #80]	; (80122a4 <tcp_oos_insert_segment+0x10c>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	441a      	add	r2, r3
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012260:	2b00      	cmp	r3, #0
 8012262:	dd12      	ble.n	801228a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	b29a      	uxth	r2, r3
 801226c:	4b0d      	ldr	r3, [pc, #52]	; (80122a4 <tcp_oos_insert_segment+0x10c>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	b29b      	uxth	r3, r3
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	b29a      	uxth	r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	685a      	ldr	r2, [r3, #4]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	891b      	ldrh	r3, [r3, #8]
 8012282:	4619      	mov	r1, r3
 8012284:	4610      	mov	r0, r2
 8012286:	f7fc fe01 	bl	800ee8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	683a      	ldr	r2, [r7, #0]
 801228e:	601a      	str	r2, [r3, #0]
}
 8012290:	bf00      	nop
 8012292:	3714      	adds	r7, #20
 8012294:	46bd      	mov	sp, r7
 8012296:	bd90      	pop	{r4, r7, pc}
 8012298:	0801a650 	.word	0x0801a650
 801229c:	0801a910 	.word	0x0801a910
 80122a0:	0801a69c 	.word	0x0801a69c
 80122a4:	24021830 	.word	0x24021830

080122a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80122a8:	b5b0      	push	{r4, r5, r7, lr}
 80122aa:	b086      	sub	sp, #24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80122b6:	e03e      	b.n	8012336 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fc fff4 	bl	800f2b4 <pbuf_clen>
 80122cc:	4603      	mov	r3, r0
 80122ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122d6:	8a7a      	ldrh	r2, [r7, #18]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d906      	bls.n	80122ea <tcp_free_acked_segments+0x42>
 80122dc:	4b2a      	ldr	r3, [pc, #168]	; (8012388 <tcp_free_acked_segments+0xe0>)
 80122de:	f240 4257 	movw	r2, #1111	; 0x457
 80122e2:	492a      	ldr	r1, [pc, #168]	; (801238c <tcp_free_acked_segments+0xe4>)
 80122e4:	482a      	ldr	r0, [pc, #168]	; (8012390 <tcp_free_acked_segments+0xe8>)
 80122e6:	f005 ff09 	bl	80180fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80122f0:	8a7b      	ldrh	r3, [r7, #18]
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	891a      	ldrh	r2, [r3, #8]
 8012300:	4b24      	ldr	r3, [pc, #144]	; (8012394 <tcp_free_acked_segments+0xec>)
 8012302:	881b      	ldrh	r3, [r3, #0]
 8012304:	4413      	add	r3, r2
 8012306:	b29a      	uxth	r2, r3
 8012308:	4b22      	ldr	r3, [pc, #136]	; (8012394 <tcp_free_acked_segments+0xec>)
 801230a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801230c:	6978      	ldr	r0, [r7, #20]
 801230e:	f7fe f9d2 	bl	80106b6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012318:	2b00      	cmp	r3, #0
 801231a:	d00c      	beq.n	8012336 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d109      	bne.n	8012336 <tcp_free_acked_segments+0x8e>
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d106      	bne.n	8012336 <tcp_free_acked_segments+0x8e>
 8012328:	4b17      	ldr	r3, [pc, #92]	; (8012388 <tcp_free_acked_segments+0xe0>)
 801232a:	f240 4261 	movw	r2, #1121	; 0x461
 801232e:	491a      	ldr	r1, [pc, #104]	; (8012398 <tcp_free_acked_segments+0xf0>)
 8012330:	4817      	ldr	r0, [pc, #92]	; (8012390 <tcp_free_acked_segments+0xe8>)
 8012332:	f005 fee3 	bl	80180fc <iprintf>
  while (seg_list != NULL &&
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d020      	beq.n	801237e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	4618      	mov	r0, r3
 8012344:	f7fb fa71 	bl	800d82a <lwip_htonl>
 8012348:	4604      	mov	r4, r0
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	891b      	ldrh	r3, [r3, #8]
 801234e:	461d      	mov	r5, r3
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	899b      	ldrh	r3, [r3, #12]
 8012356:	b29b      	uxth	r3, r3
 8012358:	4618      	mov	r0, r3
 801235a:	f7fb fa51 	bl	800d800 <lwip_htons>
 801235e:	4603      	mov	r3, r0
 8012360:	b2db      	uxtb	r3, r3
 8012362:	f003 0303 	and.w	r3, r3, #3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <tcp_free_acked_segments+0xc6>
 801236a:	2301      	movs	r3, #1
 801236c:	e000      	b.n	8012370 <tcp_free_acked_segments+0xc8>
 801236e:	2300      	movs	r3, #0
 8012370:	442b      	add	r3, r5
 8012372:	18e2      	adds	r2, r4, r3
 8012374:	4b09      	ldr	r3, [pc, #36]	; (801239c <tcp_free_acked_segments+0xf4>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801237a:	2b00      	cmp	r3, #0
 801237c:	dd9c      	ble.n	80122b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801237e:	68bb      	ldr	r3, [r7, #8]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3718      	adds	r7, #24
 8012384:	46bd      	mov	sp, r7
 8012386:	bdb0      	pop	{r4, r5, r7, pc}
 8012388:	0801a650 	.word	0x0801a650
 801238c:	0801a938 	.word	0x0801a938
 8012390:	0801a69c 	.word	0x0801a69c
 8012394:	24021838 	.word	0x24021838
 8012398:	0801a960 	.word	0x0801a960
 801239c:	24021834 	.word	0x24021834

080123a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80123a0:	b5b0      	push	{r4, r5, r7, lr}
 80123a2:	b094      	sub	sp, #80	; 0x50
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d106      	bne.n	80123c0 <tcp_receive+0x20>
 80123b2:	4ba6      	ldr	r3, [pc, #664]	; (801264c <tcp_receive+0x2ac>)
 80123b4:	f240 427b 	movw	r2, #1147	; 0x47b
 80123b8:	49a5      	ldr	r1, [pc, #660]	; (8012650 <tcp_receive+0x2b0>)
 80123ba:	48a6      	ldr	r0, [pc, #664]	; (8012654 <tcp_receive+0x2b4>)
 80123bc:	f005 fe9e 	bl	80180fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	7d1b      	ldrb	r3, [r3, #20]
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d806      	bhi.n	80123d6 <tcp_receive+0x36>
 80123c8:	4ba0      	ldr	r3, [pc, #640]	; (801264c <tcp_receive+0x2ac>)
 80123ca:	f240 427c 	movw	r2, #1148	; 0x47c
 80123ce:	49a2      	ldr	r1, [pc, #648]	; (8012658 <tcp_receive+0x2b8>)
 80123d0:	48a0      	ldr	r0, [pc, #640]	; (8012654 <tcp_receive+0x2b4>)
 80123d2:	f005 fe93 	bl	80180fc <iprintf>

  if (flags & TCP_ACK) {
 80123d6:	4ba1      	ldr	r3, [pc, #644]	; (801265c <tcp_receive+0x2bc>)
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	f003 0310 	and.w	r3, r3, #16
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f000 8263 	beq.w	80128aa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123ea:	461a      	mov	r2, r3
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123f0:	4413      	add	r3, r2
 80123f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80123f8:	4b99      	ldr	r3, [pc, #612]	; (8012660 <tcp_receive+0x2c0>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	1ad3      	subs	r3, r2, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	db1b      	blt.n	801243a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012406:	4b96      	ldr	r3, [pc, #600]	; (8012660 <tcp_receive+0x2c0>)
 8012408:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801240a:	429a      	cmp	r2, r3
 801240c:	d106      	bne.n	801241c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012412:	4b94      	ldr	r3, [pc, #592]	; (8012664 <tcp_receive+0x2c4>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	2b00      	cmp	r3, #0
 801241a:	db0e      	blt.n	801243a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012420:	4b90      	ldr	r3, [pc, #576]	; (8012664 <tcp_receive+0x2c4>)
 8012422:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012424:	429a      	cmp	r2, r3
 8012426:	d125      	bne.n	8012474 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012428:	4b8f      	ldr	r3, [pc, #572]	; (8012668 <tcp_receive+0x2c8>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	89db      	ldrh	r3, [r3, #14]
 801242e:	b29a      	uxth	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012436:	429a      	cmp	r2, r3
 8012438:	d91c      	bls.n	8012474 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801243a:	4b8b      	ldr	r3, [pc, #556]	; (8012668 <tcp_receive+0x2c8>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	89db      	ldrh	r3, [r3, #14]
 8012440:	b29a      	uxth	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012454:	429a      	cmp	r2, r3
 8012456:	d205      	bcs.n	8012464 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012464:	4b7e      	ldr	r3, [pc, #504]	; (8012660 <tcp_receive+0x2c0>)
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801246c:	4b7d      	ldr	r3, [pc, #500]	; (8012664 <tcp_receive+0x2c4>)
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012474:	4b7b      	ldr	r3, [pc, #492]	; (8012664 <tcp_receive+0x2c4>)
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801247c:	1ad3      	subs	r3, r2, r3
 801247e:	2b00      	cmp	r3, #0
 8012480:	dc58      	bgt.n	8012534 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012482:	4b7a      	ldr	r3, [pc, #488]	; (801266c <tcp_receive+0x2cc>)
 8012484:	881b      	ldrh	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d14b      	bne.n	8012522 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012494:	4413      	add	r3, r2
 8012496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012498:	429a      	cmp	r2, r3
 801249a:	d142      	bne.n	8012522 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	db3d      	blt.n	8012522 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80124aa:	4b6e      	ldr	r3, [pc, #440]	; (8012664 <tcp_receive+0x2c4>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d137      	bne.n	8012522 <tcp_receive+0x182>
              found_dupack = 1;
 80124b2:	2301      	movs	r3, #1
 80124b4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80124bc:	2bff      	cmp	r3, #255	; 0xff
 80124be:	d007      	beq.n	80124d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80124c6:	3301      	adds	r3, #1
 80124c8:	b2da      	uxtb	r2, r3
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80124d6:	2b03      	cmp	r3, #3
 80124d8:	d91b      	bls.n	8012512 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124e4:	4413      	add	r3, r2
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d30a      	bcc.n	8012508 <tcp_receive+0x168>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124fc:	4413      	add	r3, r2
 80124fe:	b29a      	uxth	r2, r3
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012506:	e004      	b.n	8012512 <tcp_receive+0x172>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801250e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012518:	2b02      	cmp	r3, #2
 801251a:	d902      	bls.n	8012522 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f001 fee9 	bl	80142f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012524:	2b00      	cmp	r3, #0
 8012526:	f040 8160 	bne.w	80127ea <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2200      	movs	r2, #0
 801252e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012532:	e15a      	b.n	80127ea <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012534:	4b4b      	ldr	r3, [pc, #300]	; (8012664 <tcp_receive+0x2c4>)
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801253c:	1ad3      	subs	r3, r2, r3
 801253e:	3b01      	subs	r3, #1
 8012540:	2b00      	cmp	r3, #0
 8012542:	f2c0 814d 	blt.w	80127e0 <tcp_receive+0x440>
 8012546:	4b47      	ldr	r3, [pc, #284]	; (8012664 <tcp_receive+0x2c4>)
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801254e:	1ad3      	subs	r3, r2, r3
 8012550:	2b00      	cmp	r3, #0
 8012552:	f300 8145 	bgt.w	80127e0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	8b5b      	ldrh	r3, [r3, #26]
 801255a:	f003 0304 	and.w	r3, r3, #4
 801255e:	2b00      	cmp	r3, #0
 8012560:	d010      	beq.n	8012584 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	8b5b      	ldrh	r3, [r3, #26]
 8012566:	f023 0304 	bic.w	r3, r3, #4
 801256a:	b29a      	uxth	r2, r3
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2200      	movs	r2, #0
 8012580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012592:	10db      	asrs	r3, r3, #3
 8012594:	b21b      	sxth	r3, r3
 8012596:	b29a      	uxth	r2, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801259e:	b29b      	uxth	r3, r3
 80125a0:	4413      	add	r3, r2
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	b21a      	sxth	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80125ac:	4b2d      	ldr	r3, [pc, #180]	; (8012664 <tcp_receive+0x2c4>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	b29a      	uxth	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125b6:	b29b      	uxth	r3, r3
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2200      	movs	r2, #0
 80125c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80125c4:	4b27      	ldr	r3, [pc, #156]	; (8012664 <tcp_receive+0x2c4>)
 80125c6:	681a      	ldr	r2, [r3, #0]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	7d1b      	ldrb	r3, [r3, #20]
 80125d0:	2b03      	cmp	r3, #3
 80125d2:	f240 8096 	bls.w	8012702 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d244      	bcs.n	8012670 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	8b5b      	ldrh	r3, [r3, #26]
 80125ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d001      	beq.n	80125f6 <tcp_receive+0x256>
 80125f2:	2301      	movs	r3, #1
 80125f4:	e000      	b.n	80125f8 <tcp_receive+0x258>
 80125f6:	2302      	movs	r3, #2
 80125f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80125fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012600:	b29a      	uxth	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012606:	fb12 f303 	smulbb	r3, r2, r3
 801260a:	b29b      	uxth	r3, r3
 801260c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801260e:	4293      	cmp	r3, r2
 8012610:	bf28      	it	cs
 8012612:	4613      	movcs	r3, r2
 8012614:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801261c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801261e:	4413      	add	r3, r2
 8012620:	b29a      	uxth	r2, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012628:	429a      	cmp	r2, r3
 801262a:	d309      	bcc.n	8012640 <tcp_receive+0x2a0>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012634:	4413      	add	r3, r2
 8012636:	b29a      	uxth	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801263e:	e060      	b.n	8012702 <tcp_receive+0x362>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012646:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801264a:	e05a      	b.n	8012702 <tcp_receive+0x362>
 801264c:	0801a650 	.word	0x0801a650
 8012650:	0801a980 	.word	0x0801a980
 8012654:	0801a69c 	.word	0x0801a69c
 8012658:	0801a99c 	.word	0x0801a99c
 801265c:	2402183c 	.word	0x2402183c
 8012660:	24021830 	.word	0x24021830
 8012664:	24021834 	.word	0x24021834
 8012668:	24021820 	.word	0x24021820
 801266c:	2402183a 	.word	0x2402183a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012678:	4413      	add	r3, r2
 801267a:	b29a      	uxth	r2, r3
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012682:	429a      	cmp	r2, r3
 8012684:	d309      	bcc.n	801269a <tcp_receive+0x2fa>
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801268c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801268e:	4413      	add	r3, r2
 8012690:	b29a      	uxth	r2, r3
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012698:	e004      	b.n	80126a4 <tcp_receive+0x304>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d326      	bcc.n	8012702 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126c0:	1ad3      	subs	r3, r2, r3
 80126c2:	b29a      	uxth	r2, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126d4:	4413      	add	r3, r2
 80126d6:	b29a      	uxth	r2, r3
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80126de:	429a      	cmp	r2, r3
 80126e0:	d30a      	bcc.n	80126f8 <tcp_receive+0x358>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126ec:	4413      	add	r3, r2
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80126f6:	e004      	b.n	8012702 <tcp_receive+0x362>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801270a:	4a98      	ldr	r2, [pc, #608]	; (801296c <tcp_receive+0x5cc>)
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7ff fdcb 	bl	80122a8 <tcp_free_acked_segments>
 8012712:	4602      	mov	r2, r0
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012720:	4a93      	ldr	r2, [pc, #588]	; (8012970 <tcp_receive+0x5d0>)
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f7ff fdc0 	bl	80122a8 <tcp_free_acked_segments>
 8012728:	4602      	mov	r2, r0
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012732:	2b00      	cmp	r3, #0
 8012734:	d104      	bne.n	8012740 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801273c:	861a      	strh	r2, [r3, #48]	; 0x30
 801273e:	e002      	b.n	8012746 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2200      	movs	r2, #0
 8012744:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2200      	movs	r2, #0
 801274a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012750:	2b00      	cmp	r3, #0
 8012752:	d103      	bne.n	801275c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2200      	movs	r2, #0
 8012758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012762:	4b84      	ldr	r3, [pc, #528]	; (8012974 <tcp_receive+0x5d4>)
 8012764:	881b      	ldrh	r3, [r3, #0]
 8012766:	4413      	add	r3, r2
 8012768:	b29a      	uxth	r2, r3
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	8b5b      	ldrh	r3, [r3, #26]
 8012774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012778:	2b00      	cmp	r3, #0
 801277a:	d035      	beq.n	80127e8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012780:	2b00      	cmp	r3, #0
 8012782:	d118      	bne.n	80127b6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012788:	2b00      	cmp	r3, #0
 801278a:	d00c      	beq.n	80127a6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012794:	68db      	ldr	r3, [r3, #12]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	f7fb f846 	bl	800d82a <lwip_htonl>
 801279e:	4603      	mov	r3, r0
 80127a0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dc20      	bgt.n	80127e8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	8b5b      	ldrh	r3, [r3, #26]
 80127aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127ae:	b29a      	uxth	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80127b4:	e018      	b.n	80127e8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fb f831 	bl	800d82a <lwip_htonl>
 80127c8:	4603      	mov	r3, r0
 80127ca:	1ae3      	subs	r3, r4, r3
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	dc0b      	bgt.n	80127e8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	8b5b      	ldrh	r3, [r3, #26]
 80127d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127d8:	b29a      	uxth	r2, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80127de:	e003      	b.n	80127e8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f001 ff75 	bl	80146d0 <tcp_send_empty_ack>
 80127e6:	e000      	b.n	80127ea <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80127e8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d05b      	beq.n	80128aa <tcp_receive+0x50a>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127f6:	4b60      	ldr	r3, [pc, #384]	; (8012978 <tcp_receive+0x5d8>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	da54      	bge.n	80128aa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012800:	4b5e      	ldr	r3, [pc, #376]	; (801297c <tcp_receive+0x5dc>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	b29a      	uxth	r2, r3
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801280a:	b29b      	uxth	r3, r3
 801280c:	1ad3      	subs	r3, r2, r3
 801280e:	b29b      	uxth	r3, r3
 8012810:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012814:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801281e:	10db      	asrs	r3, r3, #3
 8012820:	b21b      	sxth	r3, r3
 8012822:	b29b      	uxth	r3, r3
 8012824:	1ad3      	subs	r3, r2, r3
 8012826:	b29b      	uxth	r3, r3
 8012828:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012832:	b29a      	uxth	r2, r3
 8012834:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012838:	4413      	add	r3, r2
 801283a:	b29b      	uxth	r3, r3
 801283c:	b21a      	sxth	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012842:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012846:	2b00      	cmp	r3, #0
 8012848:	da05      	bge.n	8012856 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801284a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801284e:	425b      	negs	r3, r3
 8012850:	b29b      	uxth	r3, r3
 8012852:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012856:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012860:	109b      	asrs	r3, r3, #2
 8012862:	b21b      	sxth	r3, r3
 8012864:	b29b      	uxth	r3, r3
 8012866:	1ad3      	subs	r3, r2, r3
 8012868:	b29b      	uxth	r3, r3
 801286a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012874:	b29a      	uxth	r2, r3
 8012876:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801287a:	4413      	add	r3, r2
 801287c:	b29b      	uxth	r3, r3
 801287e:	b21a      	sxth	r2, r3
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801288a:	10db      	asrs	r3, r3, #3
 801288c:	b21b      	sxth	r3, r3
 801288e:	b29a      	uxth	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012896:	b29b      	uxth	r3, r3
 8012898:	4413      	add	r3, r2
 801289a:	b29b      	uxth	r3, r3
 801289c:	b21a      	sxth	r2, r3
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2200      	movs	r2, #0
 80128a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80128aa:	4b35      	ldr	r3, [pc, #212]	; (8012980 <tcp_receive+0x5e0>)
 80128ac:	881b      	ldrh	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 84e1 	beq.w	8013276 <tcp_receive+0xed6>
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	7d1b      	ldrb	r3, [r3, #20]
 80128b8:	2b06      	cmp	r3, #6
 80128ba:	f200 84dc 	bhi.w	8013276 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128c2:	4b30      	ldr	r3, [pc, #192]	; (8012984 <tcp_receive+0x5e4>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	1ad3      	subs	r3, r2, r3
 80128c8:	3b01      	subs	r3, #1
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	f2c0 808e 	blt.w	80129ec <tcp_receive+0x64c>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128d4:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <tcp_receive+0x5e0>)
 80128d6:	881b      	ldrh	r3, [r3, #0]
 80128d8:	4619      	mov	r1, r3
 80128da:	4b2a      	ldr	r3, [pc, #168]	; (8012984 <tcp_receive+0x5e4>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	440b      	add	r3, r1
 80128e0:	1ad3      	subs	r3, r2, r3
 80128e2:	3301      	adds	r3, #1
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	f300 8081 	bgt.w	80129ec <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80128ea:	4b27      	ldr	r3, [pc, #156]	; (8012988 <tcp_receive+0x5e8>)
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128f4:	4b23      	ldr	r3, [pc, #140]	; (8012984 <tcp_receive+0x5e4>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	1ad3      	subs	r3, r2, r3
 80128fa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80128fc:	4b22      	ldr	r3, [pc, #136]	; (8012988 <tcp_receive+0x5e8>)
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d106      	bne.n	8012912 <tcp_receive+0x572>
 8012904:	4b21      	ldr	r3, [pc, #132]	; (801298c <tcp_receive+0x5ec>)
 8012906:	f240 5294 	movw	r2, #1428	; 0x594
 801290a:	4921      	ldr	r1, [pc, #132]	; (8012990 <tcp_receive+0x5f0>)
 801290c:	4821      	ldr	r0, [pc, #132]	; (8012994 <tcp_receive+0x5f4>)
 801290e:	f005 fbf5 	bl	80180fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012918:	4293      	cmp	r3, r2
 801291a:	d906      	bls.n	801292a <tcp_receive+0x58a>
 801291c:	4b1b      	ldr	r3, [pc, #108]	; (801298c <tcp_receive+0x5ec>)
 801291e:	f240 5295 	movw	r2, #1429	; 0x595
 8012922:	491d      	ldr	r1, [pc, #116]	; (8012998 <tcp_receive+0x5f8>)
 8012924:	481b      	ldr	r0, [pc, #108]	; (8012994 <tcp_receive+0x5f4>)
 8012926:	f005 fbe9 	bl	80180fc <iprintf>
      off = (u16_t)off32;
 801292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012930:	4b15      	ldr	r3, [pc, #84]	; (8012988 <tcp_receive+0x5e8>)
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	891b      	ldrh	r3, [r3, #8]
 8012936:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801293a:	429a      	cmp	r2, r3
 801293c:	d906      	bls.n	801294c <tcp_receive+0x5ac>
 801293e:	4b13      	ldr	r3, [pc, #76]	; (801298c <tcp_receive+0x5ec>)
 8012940:	f240 5297 	movw	r2, #1431	; 0x597
 8012944:	4915      	ldr	r1, [pc, #84]	; (801299c <tcp_receive+0x5fc>)
 8012946:	4813      	ldr	r0, [pc, #76]	; (8012994 <tcp_receive+0x5f4>)
 8012948:	f005 fbd8 	bl	80180fc <iprintf>
      inseg.len -= off;
 801294c:	4b0e      	ldr	r3, [pc, #56]	; (8012988 <tcp_receive+0x5e8>)
 801294e:	891a      	ldrh	r2, [r3, #8]
 8012950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	b29a      	uxth	r2, r3
 8012958:	4b0b      	ldr	r3, [pc, #44]	; (8012988 <tcp_receive+0x5e8>)
 801295a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801295c:	4b0a      	ldr	r3, [pc, #40]	; (8012988 <tcp_receive+0x5e8>)
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	891a      	ldrh	r2, [r3, #8]
 8012962:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801296a:	e029      	b.n	80129c0 <tcp_receive+0x620>
 801296c:	0801a9b8 	.word	0x0801a9b8
 8012970:	0801a9c0 	.word	0x0801a9c0
 8012974:	24021838 	.word	0x24021838
 8012978:	24021834 	.word	0x24021834
 801297c:	24024e9c 	.word	0x24024e9c
 8012980:	2402183a 	.word	0x2402183a
 8012984:	24021830 	.word	0x24021830
 8012988:	24021810 	.word	0x24021810
 801298c:	0801a650 	.word	0x0801a650
 8012990:	0801a9c8 	.word	0x0801a9c8
 8012994:	0801a69c 	.word	0x0801a69c
 8012998:	0801a9d8 	.word	0x0801a9d8
 801299c:	0801a9e8 	.word	0x0801a9e8
        off -= p->len;
 80129a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129a2:	895b      	ldrh	r3, [r3, #10]
 80129a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129a8:	1ad3      	subs	r3, r2, r3
 80129aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80129ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80129b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80129b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129b6:	2200      	movs	r2, #0
 80129b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80129ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80129c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129c2:	895b      	ldrh	r3, [r3, #10]
 80129c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d8e9      	bhi.n	80129a0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80129cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129d0:	4619      	mov	r1, r3
 80129d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80129d4:	f7fc fb5a 	bl	800f08c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129dc:	4a91      	ldr	r2, [pc, #580]	; (8012c24 <tcp_receive+0x884>)
 80129de:	6013      	str	r3, [r2, #0]
 80129e0:	4b91      	ldr	r3, [pc, #580]	; (8012c28 <tcp_receive+0x888>)
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	4a8f      	ldr	r2, [pc, #572]	; (8012c24 <tcp_receive+0x884>)
 80129e6:	6812      	ldr	r2, [r2, #0]
 80129e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80129ea:	e00d      	b.n	8012a08 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80129ec:	4b8d      	ldr	r3, [pc, #564]	; (8012c24 <tcp_receive+0x884>)
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129f4:	1ad3      	subs	r3, r2, r3
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	da06      	bge.n	8012a08 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	8b5b      	ldrh	r3, [r3, #26]
 80129fe:	f043 0302 	orr.w	r3, r3, #2
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012a08:	4b86      	ldr	r3, [pc, #536]	; (8012c24 <tcp_receive+0x884>)
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f2c0 842a 	blt.w	801326c <tcp_receive+0xecc>
 8012a18:	4b82      	ldr	r3, [pc, #520]	; (8012c24 <tcp_receive+0x884>)
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a20:	6879      	ldr	r1, [r7, #4]
 8012a22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a24:	440b      	add	r3, r1
 8012a26:	1ad3      	subs	r3, r2, r3
 8012a28:	3301      	adds	r3, #1
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	f300 841e 	bgt.w	801326c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a34:	4b7b      	ldr	r3, [pc, #492]	; (8012c24 <tcp_receive+0x884>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	f040 829a 	bne.w	8012f72 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012a3e:	4b7a      	ldr	r3, [pc, #488]	; (8012c28 <tcp_receive+0x888>)
 8012a40:	891c      	ldrh	r4, [r3, #8]
 8012a42:	4b79      	ldr	r3, [pc, #484]	; (8012c28 <tcp_receive+0x888>)
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	899b      	ldrh	r3, [r3, #12]
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fa fed8 	bl	800d800 <lwip_htons>
 8012a50:	4603      	mov	r3, r0
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	f003 0303 	and.w	r3, r3, #3
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <tcp_receive+0x6c0>
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	e000      	b.n	8012a62 <tcp_receive+0x6c2>
 8012a60:	2300      	movs	r3, #0
 8012a62:	4423      	add	r3, r4
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	4b71      	ldr	r3, [pc, #452]	; (8012c2c <tcp_receive+0x88c>)
 8012a68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a6e:	4b6f      	ldr	r3, [pc, #444]	; (8012c2c <tcp_receive+0x88c>)
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d275      	bcs.n	8012b62 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a76:	4b6c      	ldr	r3, [pc, #432]	; (8012c28 <tcp_receive+0x888>)
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	899b      	ldrh	r3, [r3, #12]
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fa febe 	bl	800d800 <lwip_htons>
 8012a84:	4603      	mov	r3, r0
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	f003 0301 	and.w	r3, r3, #1
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d01f      	beq.n	8012ad0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012a90:	4b65      	ldr	r3, [pc, #404]	; (8012c28 <tcp_receive+0x888>)
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	899b      	ldrh	r3, [r3, #12]
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	b21b      	sxth	r3, r3
 8012a9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012a9e:	b21c      	sxth	r4, r3
 8012aa0:	4b61      	ldr	r3, [pc, #388]	; (8012c28 <tcp_receive+0x888>)
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	899b      	ldrh	r3, [r3, #12]
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7fa fea9 	bl	800d800 <lwip_htons>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fa fea0 	bl	800d800 <lwip_htons>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	b21b      	sxth	r3, r3
 8012ac4:	4323      	orrs	r3, r4
 8012ac6:	b21a      	sxth	r2, r3
 8012ac8:	4b57      	ldr	r3, [pc, #348]	; (8012c28 <tcp_receive+0x888>)
 8012aca:	68db      	ldr	r3, [r3, #12]
 8012acc:	b292      	uxth	r2, r2
 8012ace:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ad4:	4b54      	ldr	r3, [pc, #336]	; (8012c28 <tcp_receive+0x888>)
 8012ad6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012ad8:	4b53      	ldr	r3, [pc, #332]	; (8012c28 <tcp_receive+0x888>)
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	899b      	ldrh	r3, [r3, #12]
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f7fa fe8d 	bl	800d800 <lwip_htons>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	f003 0302 	and.w	r3, r3, #2
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d005      	beq.n	8012afe <tcp_receive+0x75e>
            inseg.len -= 1;
 8012af2:	4b4d      	ldr	r3, [pc, #308]	; (8012c28 <tcp_receive+0x888>)
 8012af4:	891b      	ldrh	r3, [r3, #8]
 8012af6:	3b01      	subs	r3, #1
 8012af8:	b29a      	uxth	r2, r3
 8012afa:	4b4b      	ldr	r3, [pc, #300]	; (8012c28 <tcp_receive+0x888>)
 8012afc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012afe:	4b4a      	ldr	r3, [pc, #296]	; (8012c28 <tcp_receive+0x888>)
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	4a49      	ldr	r2, [pc, #292]	; (8012c28 <tcp_receive+0x888>)
 8012b04:	8912      	ldrh	r2, [r2, #8]
 8012b06:	4611      	mov	r1, r2
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7fc f9bf 	bl	800ee8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012b0e:	4b46      	ldr	r3, [pc, #280]	; (8012c28 <tcp_receive+0x888>)
 8012b10:	891c      	ldrh	r4, [r3, #8]
 8012b12:	4b45      	ldr	r3, [pc, #276]	; (8012c28 <tcp_receive+0x888>)
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	899b      	ldrh	r3, [r3, #12]
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fa fe70 	bl	800d800 <lwip_htons>
 8012b20:	4603      	mov	r3, r0
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	f003 0303 	and.w	r3, r3, #3
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d001      	beq.n	8012b30 <tcp_receive+0x790>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	e000      	b.n	8012b32 <tcp_receive+0x792>
 8012b30:	2300      	movs	r3, #0
 8012b32:	4423      	add	r3, r4
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	4b3d      	ldr	r3, [pc, #244]	; (8012c2c <tcp_receive+0x88c>)
 8012b38:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012b3a:	4b3c      	ldr	r3, [pc, #240]	; (8012c2c <tcp_receive+0x88c>)
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	4b38      	ldr	r3, [pc, #224]	; (8012c24 <tcp_receive+0x884>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	441a      	add	r2, r3
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4a:	6879      	ldr	r1, [r7, #4]
 8012b4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b4e:	440b      	add	r3, r1
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d006      	beq.n	8012b62 <tcp_receive+0x7c2>
 8012b54:	4b36      	ldr	r3, [pc, #216]	; (8012c30 <tcp_receive+0x890>)
 8012b56:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012b5a:	4936      	ldr	r1, [pc, #216]	; (8012c34 <tcp_receive+0x894>)
 8012b5c:	4836      	ldr	r0, [pc, #216]	; (8012c38 <tcp_receive+0x898>)
 8012b5e:	f005 facd 	bl	80180fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	f000 80e7 	beq.w	8012d3a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012b6c:	4b2e      	ldr	r3, [pc, #184]	; (8012c28 <tcp_receive+0x888>)
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	899b      	ldrh	r3, [r3, #12]
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fa fe43 	bl	800d800 <lwip_htons>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	f003 0301 	and.w	r3, r3, #1
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d010      	beq.n	8012ba8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012b86:	e00a      	b.n	8012b9e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b8c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	f7fd fd8c 	bl	80106b6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d1f0      	bne.n	8012b88 <tcp_receive+0x7e8>
 8012ba6:	e0c8      	b.n	8012d3a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012bae:	e052      	b.n	8012c56 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bb2:	68db      	ldr	r3, [r3, #12]
 8012bb4:	899b      	ldrh	r3, [r3, #12]
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7fa fe21 	bl	800d800 <lwip_htons>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	f003 0301 	and.w	r3, r3, #1
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d03d      	beq.n	8012c46 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012bca:	4b17      	ldr	r3, [pc, #92]	; (8012c28 <tcp_receive+0x888>)
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	899b      	ldrh	r3, [r3, #12]
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fa fe14 	bl	800d800 <lwip_htons>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d130      	bne.n	8012c46 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012be4:	4b10      	ldr	r3, [pc, #64]	; (8012c28 <tcp_receive+0x888>)
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	899b      	ldrh	r3, [r3, #12]
 8012bea:	b29c      	uxth	r4, r3
 8012bec:	2001      	movs	r0, #1
 8012bee:	f7fa fe07 	bl	800d800 <lwip_htons>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	4b0c      	ldr	r3, [pc, #48]	; (8012c28 <tcp_receive+0x888>)
 8012bf8:	68db      	ldr	r3, [r3, #12]
 8012bfa:	4322      	orrs	r2, r4
 8012bfc:	b292      	uxth	r2, r2
 8012bfe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012c00:	4b09      	ldr	r3, [pc, #36]	; (8012c28 <tcp_receive+0x888>)
 8012c02:	891c      	ldrh	r4, [r3, #8]
 8012c04:	4b08      	ldr	r3, [pc, #32]	; (8012c28 <tcp_receive+0x888>)
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	899b      	ldrh	r3, [r3, #12]
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fa fdf7 	bl	800d800 <lwip_htons>
 8012c12:	4603      	mov	r3, r0
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	f003 0303 	and.w	r3, r3, #3
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d00e      	beq.n	8012c3c <tcp_receive+0x89c>
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e00d      	b.n	8012c3e <tcp_receive+0x89e>
 8012c22:	bf00      	nop
 8012c24:	24021830 	.word	0x24021830
 8012c28:	24021810 	.word	0x24021810
 8012c2c:	2402183a 	.word	0x2402183a
 8012c30:	0801a650 	.word	0x0801a650
 8012c34:	0801a9f8 	.word	0x0801a9f8
 8012c38:	0801a69c 	.word	0x0801a69c
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	4423      	add	r3, r4
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	4b98      	ldr	r3, [pc, #608]	; (8012ea4 <tcp_receive+0xb04>)
 8012c44:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c48:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012c50:	6938      	ldr	r0, [r7, #16]
 8012c52:	f7fd fd30 	bl	80106b6 <tcp_seg_free>
            while (next &&
 8012c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d00e      	beq.n	8012c7a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012c5c:	4b91      	ldr	r3, [pc, #580]	; (8012ea4 <tcp_receive+0xb04>)
 8012c5e:	881b      	ldrh	r3, [r3, #0]
 8012c60:	461a      	mov	r2, r3
 8012c62:	4b91      	ldr	r3, [pc, #580]	; (8012ea8 <tcp_receive+0xb08>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	441a      	add	r2, r3
 8012c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c70:	8909      	ldrh	r1, [r1, #8]
 8012c72:	440b      	add	r3, r1
 8012c74:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	da9a      	bge.n	8012bb0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d059      	beq.n	8012d34 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012c80:	4b88      	ldr	r3, [pc, #544]	; (8012ea4 <tcp_receive+0xb04>)
 8012c82:	881b      	ldrh	r3, [r3, #0]
 8012c84:	461a      	mov	r2, r3
 8012c86:	4b88      	ldr	r3, [pc, #544]	; (8012ea8 <tcp_receive+0xb08>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	441a      	add	r2, r3
 8012c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	dd4d      	ble.n	8012d34 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	b29a      	uxth	r2, r3
 8012ca0:	4b81      	ldr	r3, [pc, #516]	; (8012ea8 <tcp_receive+0xb08>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	1ad3      	subs	r3, r2, r3
 8012ca8:	b29a      	uxth	r2, r3
 8012caa:	4b80      	ldr	r3, [pc, #512]	; (8012eac <tcp_receive+0xb0c>)
 8012cac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012cae:	4b7f      	ldr	r3, [pc, #508]	; (8012eac <tcp_receive+0xb0c>)
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	899b      	ldrh	r3, [r3, #12]
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7fa fda2 	bl	800d800 <lwip_htons>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	f003 0302 	and.w	r3, r3, #2
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d005      	beq.n	8012cd4 <tcp_receive+0x934>
                inseg.len -= 1;
 8012cc8:	4b78      	ldr	r3, [pc, #480]	; (8012eac <tcp_receive+0xb0c>)
 8012cca:	891b      	ldrh	r3, [r3, #8]
 8012ccc:	3b01      	subs	r3, #1
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	4b76      	ldr	r3, [pc, #472]	; (8012eac <tcp_receive+0xb0c>)
 8012cd2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012cd4:	4b75      	ldr	r3, [pc, #468]	; (8012eac <tcp_receive+0xb0c>)
 8012cd6:	685b      	ldr	r3, [r3, #4]
 8012cd8:	4a74      	ldr	r2, [pc, #464]	; (8012eac <tcp_receive+0xb0c>)
 8012cda:	8912      	ldrh	r2, [r2, #8]
 8012cdc:	4611      	mov	r1, r2
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7fc f8d4 	bl	800ee8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012ce4:	4b71      	ldr	r3, [pc, #452]	; (8012eac <tcp_receive+0xb0c>)
 8012ce6:	891c      	ldrh	r4, [r3, #8]
 8012ce8:	4b70      	ldr	r3, [pc, #448]	; (8012eac <tcp_receive+0xb0c>)
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	899b      	ldrh	r3, [r3, #12]
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7fa fd85 	bl	800d800 <lwip_htons>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	f003 0303 	and.w	r3, r3, #3
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d001      	beq.n	8012d06 <tcp_receive+0x966>
 8012d02:	2301      	movs	r3, #1
 8012d04:	e000      	b.n	8012d08 <tcp_receive+0x968>
 8012d06:	2300      	movs	r3, #0
 8012d08:	4423      	add	r3, r4
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	4b65      	ldr	r3, [pc, #404]	; (8012ea4 <tcp_receive+0xb04>)
 8012d0e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012d10:	4b64      	ldr	r3, [pc, #400]	; (8012ea4 <tcp_receive+0xb04>)
 8012d12:	881b      	ldrh	r3, [r3, #0]
 8012d14:	461a      	mov	r2, r3
 8012d16:	4b64      	ldr	r3, [pc, #400]	; (8012ea8 <tcp_receive+0xb08>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	441a      	add	r2, r3
 8012d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d006      	beq.n	8012d34 <tcp_receive+0x994>
 8012d26:	4b62      	ldr	r3, [pc, #392]	; (8012eb0 <tcp_receive+0xb10>)
 8012d28:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012d2c:	4961      	ldr	r1, [pc, #388]	; (8012eb4 <tcp_receive+0xb14>)
 8012d2e:	4862      	ldr	r0, [pc, #392]	; (8012eb8 <tcp_receive+0xb18>)
 8012d30:	f005 f9e4 	bl	80180fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d38:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012d3a:	4b5a      	ldr	r3, [pc, #360]	; (8012ea4 <tcp_receive+0xb04>)
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	461a      	mov	r2, r3
 8012d40:	4b59      	ldr	r3, [pc, #356]	; (8012ea8 <tcp_receive+0xb08>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	441a      	add	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d4e:	4b55      	ldr	r3, [pc, #340]	; (8012ea4 <tcp_receive+0xb04>)
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d206      	bcs.n	8012d64 <tcp_receive+0x9c4>
 8012d56:	4b56      	ldr	r3, [pc, #344]	; (8012eb0 <tcp_receive+0xb10>)
 8012d58:	f240 6207 	movw	r2, #1543	; 0x607
 8012d5c:	4957      	ldr	r1, [pc, #348]	; (8012ebc <tcp_receive+0xb1c>)
 8012d5e:	4856      	ldr	r0, [pc, #344]	; (8012eb8 <tcp_receive+0xb18>)
 8012d60:	f005 f9cc 	bl	80180fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d68:	4b4e      	ldr	r3, [pc, #312]	; (8012ea4 <tcp_receive+0xb04>)
 8012d6a:	881b      	ldrh	r3, [r3, #0]
 8012d6c:	1ad3      	subs	r3, r2, r3
 8012d6e:	b29a      	uxth	r2, r3
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7fc ffbb 	bl	800fcf0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012d7a:	4b4c      	ldr	r3, [pc, #304]	; (8012eac <tcp_receive+0xb0c>)
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	891b      	ldrh	r3, [r3, #8]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d006      	beq.n	8012d92 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012d84:	4b49      	ldr	r3, [pc, #292]	; (8012eac <tcp_receive+0xb0c>)
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	4a4d      	ldr	r2, [pc, #308]	; (8012ec0 <tcp_receive+0xb20>)
 8012d8a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012d8c:	4b47      	ldr	r3, [pc, #284]	; (8012eac <tcp_receive+0xb0c>)
 8012d8e:	2200      	movs	r2, #0
 8012d90:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012d92:	4b46      	ldr	r3, [pc, #280]	; (8012eac <tcp_receive+0xb0c>)
 8012d94:	68db      	ldr	r3, [r3, #12]
 8012d96:	899b      	ldrh	r3, [r3, #12]
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fa fd30 	bl	800d800 <lwip_htons>
 8012da0:	4603      	mov	r3, r0
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	f003 0301 	and.w	r3, r3, #1
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f000 80b8 	beq.w	8012f1e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012dae:	4b45      	ldr	r3, [pc, #276]	; (8012ec4 <tcp_receive+0xb24>)
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	f043 0320 	orr.w	r3, r3, #32
 8012db6:	b2da      	uxtb	r2, r3
 8012db8:	4b42      	ldr	r3, [pc, #264]	; (8012ec4 <tcp_receive+0xb24>)
 8012dba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012dbc:	e0af      	b.n	8012f1e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dc2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dc8:	68db      	ldr	r3, [r3, #12]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	4a36      	ldr	r2, [pc, #216]	; (8012ea8 <tcp_receive+0xb08>)
 8012dce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	891b      	ldrh	r3, [r3, #8]
 8012dd4:	461c      	mov	r4, r3
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	899b      	ldrh	r3, [r3, #12]
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fa fd0e 	bl	800d800 <lwip_htons>
 8012de4:	4603      	mov	r3, r0
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	f003 0303 	and.w	r3, r3, #3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d001      	beq.n	8012df4 <tcp_receive+0xa54>
 8012df0:	2301      	movs	r3, #1
 8012df2:	e000      	b.n	8012df6 <tcp_receive+0xa56>
 8012df4:	2300      	movs	r3, #0
 8012df6:	191a      	adds	r2, r3, r4
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dfc:	441a      	add	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e06:	461c      	mov	r4, r3
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	891b      	ldrh	r3, [r3, #8]
 8012e0c:	461d      	mov	r5, r3
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	899b      	ldrh	r3, [r3, #12]
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fa fcf2 	bl	800d800 <lwip_htons>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	f003 0303 	and.w	r3, r3, #3
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d001      	beq.n	8012e2c <tcp_receive+0xa8c>
 8012e28:	2301      	movs	r3, #1
 8012e2a:	e000      	b.n	8012e2e <tcp_receive+0xa8e>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	442b      	add	r3, r5
 8012e30:	429c      	cmp	r4, r3
 8012e32:	d206      	bcs.n	8012e42 <tcp_receive+0xaa2>
 8012e34:	4b1e      	ldr	r3, [pc, #120]	; (8012eb0 <tcp_receive+0xb10>)
 8012e36:	f240 622b 	movw	r2, #1579	; 0x62b
 8012e3a:	4923      	ldr	r1, [pc, #140]	; (8012ec8 <tcp_receive+0xb28>)
 8012e3c:	481e      	ldr	r0, [pc, #120]	; (8012eb8 <tcp_receive+0xb18>)
 8012e3e:	f005 f95d 	bl	80180fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	891b      	ldrh	r3, [r3, #8]
 8012e46:	461c      	mov	r4, r3
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	899b      	ldrh	r3, [r3, #12]
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7fa fcd5 	bl	800d800 <lwip_htons>
 8012e56:	4603      	mov	r3, r0
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	f003 0303 	and.w	r3, r3, #3
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d001      	beq.n	8012e66 <tcp_receive+0xac6>
 8012e62:	2301      	movs	r3, #1
 8012e64:	e000      	b.n	8012e68 <tcp_receive+0xac8>
 8012e66:	2300      	movs	r3, #0
 8012e68:	1919      	adds	r1, r3, r4
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e6e:	b28b      	uxth	r3, r1
 8012e70:	1ad3      	subs	r3, r2, r3
 8012e72:	b29a      	uxth	r2, r3
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7fc ff39 	bl	800fcf0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	891b      	ldrh	r3, [r3, #8]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d028      	beq.n	8012eda <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012e88:	4b0d      	ldr	r3, [pc, #52]	; (8012ec0 <tcp_receive+0xb20>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d01d      	beq.n	8012ecc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012e90:	4b0b      	ldr	r3, [pc, #44]	; (8012ec0 <tcp_receive+0xb20>)
 8012e92:	681a      	ldr	r2, [r3, #0]
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	4619      	mov	r1, r3
 8012e9a:	4610      	mov	r0, r2
 8012e9c:	f7fc fa4a 	bl	800f334 <pbuf_cat>
 8012ea0:	e018      	b.n	8012ed4 <tcp_receive+0xb34>
 8012ea2:	bf00      	nop
 8012ea4:	2402183a 	.word	0x2402183a
 8012ea8:	24021830 	.word	0x24021830
 8012eac:	24021810 	.word	0x24021810
 8012eb0:	0801a650 	.word	0x0801a650
 8012eb4:	0801aa30 	.word	0x0801aa30
 8012eb8:	0801a69c 	.word	0x0801a69c
 8012ebc:	0801aa6c 	.word	0x0801aa6c
 8012ec0:	24021840 	.word	0x24021840
 8012ec4:	2402183d 	.word	0x2402183d
 8012ec8:	0801aa8c 	.word	0x0801aa8c
            } else {
              recv_data = cseg->p;
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	4a70      	ldr	r2, [pc, #448]	; (8013094 <tcp_receive+0xcf4>)
 8012ed2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	899b      	ldrh	r3, [r3, #12]
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fa fc8c 	bl	800d800 <lwip_htons>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	f003 0301 	and.w	r3, r3, #1
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00d      	beq.n	8012f10 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012ef4:	4b68      	ldr	r3, [pc, #416]	; (8013098 <tcp_receive+0xcf8>)
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	f043 0320 	orr.w	r3, r3, #32
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	4b66      	ldr	r3, [pc, #408]	; (8013098 <tcp_receive+0xcf8>)
 8012f00:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	7d1b      	ldrb	r3, [r3, #20]
 8012f06:	2b04      	cmp	r3, #4
 8012f08:	d102      	bne.n	8012f10 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2207      	movs	r2, #7
 8012f0e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012f18:	68b8      	ldr	r0, [r7, #8]
 8012f1a:	f7fd fbcc 	bl	80106b6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d008      	beq.n	8012f38 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f2a:	68db      	ldr	r3, [r3, #12]
 8012f2c:	685a      	ldr	r2, [r3, #4]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012f32:	429a      	cmp	r2, r3
 8012f34:	f43f af43 	beq.w	8012dbe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	8b5b      	ldrh	r3, [r3, #26]
 8012f3c:	f003 0301 	and.w	r3, r3, #1
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00e      	beq.n	8012f62 <tcp_receive+0xbc2>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	8b5b      	ldrh	r3, [r3, #26]
 8012f48:	f023 0301 	bic.w	r3, r3, #1
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	835a      	strh	r2, [r3, #26]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	8b5b      	ldrh	r3, [r3, #26]
 8012f56:	f043 0302 	orr.w	r3, r3, #2
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012f60:	e188      	b.n	8013274 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	8b5b      	ldrh	r3, [r3, #26]
 8012f66:	f043 0301 	orr.w	r3, r3, #1
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012f70:	e180      	b.n	8013274 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d106      	bne.n	8012f88 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012f7a:	4848      	ldr	r0, [pc, #288]	; (801309c <tcp_receive+0xcfc>)
 8012f7c:	f7fd fbb4 	bl	80106e8 <tcp_seg_copy>
 8012f80:	4602      	mov	r2, r0
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	675a      	str	r2, [r3, #116]	; 0x74
 8012f86:	e16d      	b.n	8013264 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8012f92:	e157      	b.n	8013244 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	685a      	ldr	r2, [r3, #4]
 8012f9a:	4b41      	ldr	r3, [pc, #260]	; (80130a0 <tcp_receive+0xd00>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d11d      	bne.n	8012fde <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012fa2:	4b3e      	ldr	r3, [pc, #248]	; (801309c <tcp_receive+0xcfc>)
 8012fa4:	891a      	ldrh	r2, [r3, #8]
 8012fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa8:	891b      	ldrh	r3, [r3, #8]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	f240 814f 	bls.w	801324e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012fb0:	483a      	ldr	r0, [pc, #232]	; (801309c <tcp_receive+0xcfc>)
 8012fb2:	f7fd fb99 	bl	80106e8 <tcp_seg_copy>
 8012fb6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	f000 8149 	beq.w	8013252 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d003      	beq.n	8012fce <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fc8:	697a      	ldr	r2, [r7, #20]
 8012fca:	601a      	str	r2, [r3, #0]
 8012fcc:	e002      	b.n	8012fd4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	697a      	ldr	r2, [r7, #20]
 8012fd2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012fd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012fd6:	6978      	ldr	r0, [r7, #20]
 8012fd8:	f7ff f8de 	bl	8012198 <tcp_oos_insert_segment>
                }
                break;
 8012fdc:	e139      	b.n	8013252 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d117      	bne.n	8013014 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012fe4:	4b2e      	ldr	r3, [pc, #184]	; (80130a0 <tcp_receive+0xd00>)
 8012fe6:	681a      	ldr	r2, [r3, #0]
 8012fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fea:	68db      	ldr	r3, [r3, #12]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	1ad3      	subs	r3, r2, r3
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	da57      	bge.n	80130a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ff4:	4829      	ldr	r0, [pc, #164]	; (801309c <tcp_receive+0xcfc>)
 8012ff6:	f7fd fb77 	bl	80106e8 <tcp_seg_copy>
 8012ffa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f000 8129 	beq.w	8013256 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	69ba      	ldr	r2, [r7, #24]
 8013008:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801300a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801300c:	69b8      	ldr	r0, [r7, #24]
 801300e:	f7ff f8c3 	bl	8012198 <tcp_oos_insert_segment>
                  }
                  break;
 8013012:	e120      	b.n	8013256 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013014:	4b22      	ldr	r3, [pc, #136]	; (80130a0 <tcp_receive+0xd00>)
 8013016:	681a      	ldr	r2, [r3, #0]
 8013018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801301a:	68db      	ldr	r3, [r3, #12]
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	1ad3      	subs	r3, r2, r3
 8013020:	3b01      	subs	r3, #1
 8013022:	2b00      	cmp	r3, #0
 8013024:	db3e      	blt.n	80130a4 <tcp_receive+0xd04>
 8013026:	4b1e      	ldr	r3, [pc, #120]	; (80130a0 <tcp_receive+0xd00>)
 8013028:	681a      	ldr	r2, [r3, #0]
 801302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302c:	68db      	ldr	r3, [r3, #12]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	1ad3      	subs	r3, r2, r3
 8013032:	3301      	adds	r3, #1
 8013034:	2b00      	cmp	r3, #0
 8013036:	dc35      	bgt.n	80130a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013038:	4818      	ldr	r0, [pc, #96]	; (801309c <tcp_receive+0xcfc>)
 801303a:	f7fd fb55 	bl	80106e8 <tcp_seg_copy>
 801303e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013040:	69fb      	ldr	r3, [r7, #28]
 8013042:	2b00      	cmp	r3, #0
 8013044:	f000 8109 	beq.w	801325a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801304a:	68db      	ldr	r3, [r3, #12]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013050:	8912      	ldrh	r2, [r2, #8]
 8013052:	441a      	add	r2, r3
 8013054:	4b12      	ldr	r3, [pc, #72]	; (80130a0 <tcp_receive+0xd00>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	1ad3      	subs	r3, r2, r3
 801305a:	2b00      	cmp	r3, #0
 801305c:	dd12      	ble.n	8013084 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801305e:	4b10      	ldr	r3, [pc, #64]	; (80130a0 <tcp_receive+0xd00>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	b29a      	uxth	r2, r3
 8013064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	b29b      	uxth	r3, r3
 801306c:	1ad3      	subs	r3, r2, r3
 801306e:	b29a      	uxth	r2, r3
 8013070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013072:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013076:	685a      	ldr	r2, [r3, #4]
 8013078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801307a:	891b      	ldrh	r3, [r3, #8]
 801307c:	4619      	mov	r1, r3
 801307e:	4610      	mov	r0, r2
 8013080:	f7fb ff04 	bl	800ee8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013086:	69fa      	ldr	r2, [r7, #28]
 8013088:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801308a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801308c:	69f8      	ldr	r0, [r7, #28]
 801308e:	f7ff f883 	bl	8012198 <tcp_oos_insert_segment>
                  }
                  break;
 8013092:	e0e2      	b.n	801325a <tcp_receive+0xeba>
 8013094:	24021840 	.word	0x24021840
 8013098:	2402183d 	.word	0x2402183d
 801309c:	24021810 	.word	0x24021810
 80130a0:	24021830 	.word	0x24021830
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80130a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f040 80c6 	bne.w	801323e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80130b2:	4b80      	ldr	r3, [pc, #512]	; (80132b4 <tcp_receive+0xf14>)
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b8:	68db      	ldr	r3, [r3, #12]
 80130ba:	685b      	ldr	r3, [r3, #4]
 80130bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80130be:	2b00      	cmp	r3, #0
 80130c0:	f340 80bd 	ble.w	801323e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80130c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	899b      	ldrh	r3, [r3, #12]
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fa fb97 	bl	800d800 <lwip_htons>
 80130d2:	4603      	mov	r3, r0
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	f003 0301 	and.w	r3, r3, #1
 80130da:	2b00      	cmp	r3, #0
 80130dc:	f040 80bf 	bne.w	801325e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80130e0:	4875      	ldr	r0, [pc, #468]	; (80132b8 <tcp_receive+0xf18>)
 80130e2:	f7fd fb01 	bl	80106e8 <tcp_seg_copy>
 80130e6:	4602      	mov	r2, r0
 80130e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80130ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f000 80b6 	beq.w	8013262 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80130f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130fe:	8912      	ldrh	r2, [r2, #8]
 8013100:	441a      	add	r2, r3
 8013102:	4b6c      	ldr	r3, [pc, #432]	; (80132b4 <tcp_receive+0xf14>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	1ad3      	subs	r3, r2, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	dd12      	ble.n	8013132 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801310c:	4b69      	ldr	r3, [pc, #420]	; (80132b4 <tcp_receive+0xf14>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	b29a      	uxth	r2, r3
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	68db      	ldr	r3, [r3, #12]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	b29b      	uxth	r3, r3
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	b29a      	uxth	r2, r3
 801311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013120:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013124:	685a      	ldr	r2, [r3, #4]
 8013126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013128:	891b      	ldrh	r3, [r3, #8]
 801312a:	4619      	mov	r1, r3
 801312c:	4610      	mov	r0, r2
 801312e:	f7fb fead 	bl	800ee8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013132:	4b62      	ldr	r3, [pc, #392]	; (80132bc <tcp_receive+0xf1c>)
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	461a      	mov	r2, r3
 8013138:	4b5e      	ldr	r3, [pc, #376]	; (80132b4 <tcp_receive+0xf14>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	441a      	add	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013142:	6879      	ldr	r1, [r7, #4]
 8013144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013146:	440b      	add	r3, r1
 8013148:	1ad3      	subs	r3, r2, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	f340 8089 	ble.w	8013262 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	68db      	ldr	r3, [r3, #12]
 8013156:	899b      	ldrh	r3, [r3, #12]
 8013158:	b29b      	uxth	r3, r3
 801315a:	4618      	mov	r0, r3
 801315c:	f7fa fb50 	bl	800d800 <lwip_htons>
 8013160:	4603      	mov	r3, r0
 8013162:	b2db      	uxtb	r3, r3
 8013164:	f003 0301 	and.w	r3, r3, #1
 8013168:	2b00      	cmp	r3, #0
 801316a:	d022      	beq.n	80131b2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	68db      	ldr	r3, [r3, #12]
 8013172:	899b      	ldrh	r3, [r3, #12]
 8013174:	b29b      	uxth	r3, r3
 8013176:	b21b      	sxth	r3, r3
 8013178:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801317c:	b21c      	sxth	r4, r3
 801317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	899b      	ldrh	r3, [r3, #12]
 8013186:	b29b      	uxth	r3, r3
 8013188:	4618      	mov	r0, r3
 801318a:	f7fa fb39 	bl	800d800 <lwip_htons>
 801318e:	4603      	mov	r3, r0
 8013190:	b2db      	uxtb	r3, r3
 8013192:	b29b      	uxth	r3, r3
 8013194:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013198:	b29b      	uxth	r3, r3
 801319a:	4618      	mov	r0, r3
 801319c:	f7fa fb30 	bl	800d800 <lwip_htons>
 80131a0:	4603      	mov	r3, r0
 80131a2:	b21b      	sxth	r3, r3
 80131a4:	4323      	orrs	r3, r4
 80131a6:	b21a      	sxth	r2, r3
 80131a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	b292      	uxth	r2, r2
 80131b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b6:	b29a      	uxth	r2, r3
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131bc:	4413      	add	r3, r2
 80131be:	b299      	uxth	r1, r3
 80131c0:	4b3c      	ldr	r3, [pc, #240]	; (80132b4 <tcp_receive+0xf14>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	b29a      	uxth	r2, r3
 80131c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	1a8a      	subs	r2, r1, r2
 80131cc:	b292      	uxth	r2, r2
 80131ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80131d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	685a      	ldr	r2, [r3, #4]
 80131d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	891b      	ldrh	r3, [r3, #8]
 80131dc:	4619      	mov	r1, r3
 80131de:	4610      	mov	r0, r2
 80131e0:	f7fb fe54 	bl	800ee8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80131e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	891c      	ldrh	r4, [r3, #8]
 80131ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	899b      	ldrh	r3, [r3, #12]
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fa fb03 	bl	800d800 <lwip_htons>
 80131fa:	4603      	mov	r3, r0
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	f003 0303 	and.w	r3, r3, #3
 8013202:	2b00      	cmp	r3, #0
 8013204:	d001      	beq.n	801320a <tcp_receive+0xe6a>
 8013206:	2301      	movs	r3, #1
 8013208:	e000      	b.n	801320c <tcp_receive+0xe6c>
 801320a:	2300      	movs	r3, #0
 801320c:	4423      	add	r3, r4
 801320e:	b29a      	uxth	r2, r3
 8013210:	4b2a      	ldr	r3, [pc, #168]	; (80132bc <tcp_receive+0xf1c>)
 8013212:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013214:	4b29      	ldr	r3, [pc, #164]	; (80132bc <tcp_receive+0xf1c>)
 8013216:	881b      	ldrh	r3, [r3, #0]
 8013218:	461a      	mov	r2, r3
 801321a:	4b26      	ldr	r3, [pc, #152]	; (80132b4 <tcp_receive+0xf14>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	441a      	add	r2, r3
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013224:	6879      	ldr	r1, [r7, #4]
 8013226:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013228:	440b      	add	r3, r1
 801322a:	429a      	cmp	r2, r3
 801322c:	d019      	beq.n	8013262 <tcp_receive+0xec2>
 801322e:	4b24      	ldr	r3, [pc, #144]	; (80132c0 <tcp_receive+0xf20>)
 8013230:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013234:	4923      	ldr	r1, [pc, #140]	; (80132c4 <tcp_receive+0xf24>)
 8013236:	4824      	ldr	r0, [pc, #144]	; (80132c8 <tcp_receive+0xf28>)
 8013238:	f004 ff60 	bl	80180fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801323c:	e011      	b.n	8013262 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	63bb      	str	r3, [r7, #56]	; 0x38
 8013244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013246:	2b00      	cmp	r3, #0
 8013248:	f47f aea4 	bne.w	8012f94 <tcp_receive+0xbf4>
 801324c:	e00a      	b.n	8013264 <tcp_receive+0xec4>
                break;
 801324e:	bf00      	nop
 8013250:	e008      	b.n	8013264 <tcp_receive+0xec4>
                break;
 8013252:	bf00      	nop
 8013254:	e006      	b.n	8013264 <tcp_receive+0xec4>
                  break;
 8013256:	bf00      	nop
 8013258:	e004      	b.n	8013264 <tcp_receive+0xec4>
                  break;
 801325a:	bf00      	nop
 801325c:	e002      	b.n	8013264 <tcp_receive+0xec4>
                  break;
 801325e:	bf00      	nop
 8013260:	e000      	b.n	8013264 <tcp_receive+0xec4>
                break;
 8013262:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f001 fa33 	bl	80146d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801326a:	e003      	b.n	8013274 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f001 fa2f 	bl	80146d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013272:	e01a      	b.n	80132aa <tcp_receive+0xf0a>
 8013274:	e019      	b.n	80132aa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013276:	4b0f      	ldr	r3, [pc, #60]	; (80132b4 <tcp_receive+0xf14>)
 8013278:	681a      	ldr	r2, [r3, #0]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801327e:	1ad3      	subs	r3, r2, r3
 8013280:	2b00      	cmp	r3, #0
 8013282:	db0a      	blt.n	801329a <tcp_receive+0xefa>
 8013284:	4b0b      	ldr	r3, [pc, #44]	; (80132b4 <tcp_receive+0xf14>)
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328c:	6879      	ldr	r1, [r7, #4]
 801328e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013290:	440b      	add	r3, r1
 8013292:	1ad3      	subs	r3, r2, r3
 8013294:	3301      	adds	r3, #1
 8013296:	2b00      	cmp	r3, #0
 8013298:	dd07      	ble.n	80132aa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	8b5b      	ldrh	r3, [r3, #26]
 801329e:	f043 0302 	orr.w	r3, r3, #2
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80132a8:	e7ff      	b.n	80132aa <tcp_receive+0xf0a>
 80132aa:	bf00      	nop
 80132ac:	3750      	adds	r7, #80	; 0x50
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bdb0      	pop	{r4, r5, r7, pc}
 80132b2:	bf00      	nop
 80132b4:	24021830 	.word	0x24021830
 80132b8:	24021810 	.word	0x24021810
 80132bc:	2402183a 	.word	0x2402183a
 80132c0:	0801a650 	.word	0x0801a650
 80132c4:	0801a9f8 	.word	0x0801a9f8
 80132c8:	0801a69c 	.word	0x0801a69c

080132cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80132d2:	4b15      	ldr	r3, [pc, #84]	; (8013328 <tcp_get_next_optbyte+0x5c>)
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	1c5a      	adds	r2, r3, #1
 80132d8:	b291      	uxth	r1, r2
 80132da:	4a13      	ldr	r2, [pc, #76]	; (8013328 <tcp_get_next_optbyte+0x5c>)
 80132dc:	8011      	strh	r1, [r2, #0]
 80132de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80132e0:	4b12      	ldr	r3, [pc, #72]	; (801332c <tcp_get_next_optbyte+0x60>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d004      	beq.n	80132f2 <tcp_get_next_optbyte+0x26>
 80132e8:	4b11      	ldr	r3, [pc, #68]	; (8013330 <tcp_get_next_optbyte+0x64>)
 80132ea:	881b      	ldrh	r3, [r3, #0]
 80132ec:	88fa      	ldrh	r2, [r7, #6]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d208      	bcs.n	8013304 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80132f2:	4b10      	ldr	r3, [pc, #64]	; (8013334 <tcp_get_next_optbyte+0x68>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	3314      	adds	r3, #20
 80132f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80132fa:	88fb      	ldrh	r3, [r7, #6]
 80132fc:	683a      	ldr	r2, [r7, #0]
 80132fe:	4413      	add	r3, r2
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	e00b      	b.n	801331c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013304:	88fb      	ldrh	r3, [r7, #6]
 8013306:	b2da      	uxtb	r2, r3
 8013308:	4b09      	ldr	r3, [pc, #36]	; (8013330 <tcp_get_next_optbyte+0x64>)
 801330a:	881b      	ldrh	r3, [r3, #0]
 801330c:	b2db      	uxtb	r3, r3
 801330e:	1ad3      	subs	r3, r2, r3
 8013310:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013312:	4b06      	ldr	r3, [pc, #24]	; (801332c <tcp_get_next_optbyte+0x60>)
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	797b      	ldrb	r3, [r7, #5]
 8013318:	4413      	add	r3, r2
 801331a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801331c:	4618      	mov	r0, r3
 801331e:	370c      	adds	r7, #12
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr
 8013328:	2402182c 	.word	0x2402182c
 801332c:	24021828 	.word	0x24021828
 8013330:	24021826 	.word	0x24021826
 8013334:	24021820 	.word	0x24021820

08013338 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d106      	bne.n	8013354 <tcp_parseopt+0x1c>
 8013346:	4b32      	ldr	r3, [pc, #200]	; (8013410 <tcp_parseopt+0xd8>)
 8013348:	f240 727d 	movw	r2, #1917	; 0x77d
 801334c:	4931      	ldr	r1, [pc, #196]	; (8013414 <tcp_parseopt+0xdc>)
 801334e:	4832      	ldr	r0, [pc, #200]	; (8013418 <tcp_parseopt+0xe0>)
 8013350:	f004 fed4 	bl	80180fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013354:	4b31      	ldr	r3, [pc, #196]	; (801341c <tcp_parseopt+0xe4>)
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d055      	beq.n	8013408 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801335c:	4b30      	ldr	r3, [pc, #192]	; (8013420 <tcp_parseopt+0xe8>)
 801335e:	2200      	movs	r2, #0
 8013360:	801a      	strh	r2, [r3, #0]
 8013362:	e045      	b.n	80133f0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013364:	f7ff ffb2 	bl	80132cc <tcp_get_next_optbyte>
 8013368:	4603      	mov	r3, r0
 801336a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801336c:	7bfb      	ldrb	r3, [r7, #15]
 801336e:	2b02      	cmp	r3, #2
 8013370:	d006      	beq.n	8013380 <tcp_parseopt+0x48>
 8013372:	2b02      	cmp	r3, #2
 8013374:	dc2b      	bgt.n	80133ce <tcp_parseopt+0x96>
 8013376:	2b00      	cmp	r3, #0
 8013378:	d041      	beq.n	80133fe <tcp_parseopt+0xc6>
 801337a:	2b01      	cmp	r3, #1
 801337c:	d127      	bne.n	80133ce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801337e:	e037      	b.n	80133f0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013380:	f7ff ffa4 	bl	80132cc <tcp_get_next_optbyte>
 8013384:	4603      	mov	r3, r0
 8013386:	2b04      	cmp	r3, #4
 8013388:	d13b      	bne.n	8013402 <tcp_parseopt+0xca>
 801338a:	4b25      	ldr	r3, [pc, #148]	; (8013420 <tcp_parseopt+0xe8>)
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	3301      	adds	r3, #1
 8013390:	4a22      	ldr	r2, [pc, #136]	; (801341c <tcp_parseopt+0xe4>)
 8013392:	8812      	ldrh	r2, [r2, #0]
 8013394:	4293      	cmp	r3, r2
 8013396:	da34      	bge.n	8013402 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013398:	f7ff ff98 	bl	80132cc <tcp_get_next_optbyte>
 801339c:	4603      	mov	r3, r0
 801339e:	b29b      	uxth	r3, r3
 80133a0:	021b      	lsls	r3, r3, #8
 80133a2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80133a4:	f7ff ff92 	bl	80132cc <tcp_get_next_optbyte>
 80133a8:	4603      	mov	r3, r0
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	89bb      	ldrh	r3, [r7, #12]
 80133ae:	4313      	orrs	r3, r2
 80133b0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80133b2:	89bb      	ldrh	r3, [r7, #12]
 80133b4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80133b8:	d804      	bhi.n	80133c4 <tcp_parseopt+0x8c>
 80133ba:	89bb      	ldrh	r3, [r7, #12]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d001      	beq.n	80133c4 <tcp_parseopt+0x8c>
 80133c0:	89ba      	ldrh	r2, [r7, #12]
 80133c2:	e001      	b.n	80133c8 <tcp_parseopt+0x90>
 80133c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80133cc:	e010      	b.n	80133f0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80133ce:	f7ff ff7d 	bl	80132cc <tcp_get_next_optbyte>
 80133d2:	4603      	mov	r3, r0
 80133d4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80133d6:	7afb      	ldrb	r3, [r7, #11]
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d914      	bls.n	8013406 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80133dc:	7afb      	ldrb	r3, [r7, #11]
 80133de:	b29a      	uxth	r2, r3
 80133e0:	4b0f      	ldr	r3, [pc, #60]	; (8013420 <tcp_parseopt+0xe8>)
 80133e2:	881b      	ldrh	r3, [r3, #0]
 80133e4:	4413      	add	r3, r2
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	3b02      	subs	r3, #2
 80133ea:	b29a      	uxth	r2, r3
 80133ec:	4b0c      	ldr	r3, [pc, #48]	; (8013420 <tcp_parseopt+0xe8>)
 80133ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80133f0:	4b0b      	ldr	r3, [pc, #44]	; (8013420 <tcp_parseopt+0xe8>)
 80133f2:	881a      	ldrh	r2, [r3, #0]
 80133f4:	4b09      	ldr	r3, [pc, #36]	; (801341c <tcp_parseopt+0xe4>)
 80133f6:	881b      	ldrh	r3, [r3, #0]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d3b3      	bcc.n	8013364 <tcp_parseopt+0x2c>
 80133fc:	e004      	b.n	8013408 <tcp_parseopt+0xd0>
          return;
 80133fe:	bf00      	nop
 8013400:	e002      	b.n	8013408 <tcp_parseopt+0xd0>
            return;
 8013402:	bf00      	nop
 8013404:	e000      	b.n	8013408 <tcp_parseopt+0xd0>
            return;
 8013406:	bf00      	nop
      }
    }
  }
}
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	0801a650 	.word	0x0801a650
 8013414:	0801aab4 	.word	0x0801aab4
 8013418:	0801a69c 	.word	0x0801a69c
 801341c:	24021824 	.word	0x24021824
 8013420:	2402182c 	.word	0x2402182c

08013424 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013424:	b480      	push	{r7}
 8013426:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013428:	4b05      	ldr	r3, [pc, #20]	; (8013440 <tcp_trigger_input_pcb_close+0x1c>)
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	f043 0310 	orr.w	r3, r3, #16
 8013430:	b2da      	uxtb	r2, r3
 8013432:	4b03      	ldr	r3, [pc, #12]	; (8013440 <tcp_trigger_input_pcb_close+0x1c>)
 8013434:	701a      	strb	r2, [r3, #0]
}
 8013436:	bf00      	nop
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr
 8013440:	2402183d 	.word	0x2402183d

08013444 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b084      	sub	sp, #16
 8013448:	af00      	add	r7, sp, #0
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	60b9      	str	r1, [r7, #8]
 801344e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d00a      	beq.n	801346c <tcp_route+0x28>
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	7a1b      	ldrb	r3, [r3, #8]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d006      	beq.n	801346c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	7a1b      	ldrb	r3, [r3, #8]
 8013462:	4618      	mov	r0, r3
 8013464:	f7fb fb0a 	bl	800ea7c <netif_get_by_index>
 8013468:	4603      	mov	r3, r0
 801346a:	e003      	b.n	8013474 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f003 faf3 	bl	8016a58 <ip4_route>
 8013472:	4603      	mov	r3, r0
  }
}
 8013474:	4618      	mov	r0, r3
 8013476:	3710      	adds	r7, #16
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801347c:	b590      	push	{r4, r7, lr}
 801347e:	b087      	sub	sp, #28
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	603b      	str	r3, [r7, #0]
 8013488:	4613      	mov	r3, r2
 801348a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d105      	bne.n	801349e <tcp_create_segment+0x22>
 8013492:	4b44      	ldr	r3, [pc, #272]	; (80135a4 <tcp_create_segment+0x128>)
 8013494:	22a3      	movs	r2, #163	; 0xa3
 8013496:	4944      	ldr	r1, [pc, #272]	; (80135a8 <tcp_create_segment+0x12c>)
 8013498:	4844      	ldr	r0, [pc, #272]	; (80135ac <tcp_create_segment+0x130>)
 801349a:	f004 fe2f 	bl	80180fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d105      	bne.n	80134b0 <tcp_create_segment+0x34>
 80134a4:	4b3f      	ldr	r3, [pc, #252]	; (80135a4 <tcp_create_segment+0x128>)
 80134a6:	22a4      	movs	r2, #164	; 0xa4
 80134a8:	4941      	ldr	r1, [pc, #260]	; (80135b0 <tcp_create_segment+0x134>)
 80134aa:	4840      	ldr	r0, [pc, #256]	; (80135ac <tcp_create_segment+0x130>)
 80134ac:	f004 fe26 	bl	80180fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80134b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	f003 0304 	and.w	r3, r3, #4
 80134bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80134be:	2003      	movs	r0, #3
 80134c0:	f7fa ff2e 	bl	800e320 <memp_malloc>
 80134c4:	6138      	str	r0, [r7, #16]
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d104      	bne.n	80134d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80134cc:	68b8      	ldr	r0, [r7, #8]
 80134ce:	f7fb fe63 	bl	800f198 <pbuf_free>
    return NULL;
 80134d2:	2300      	movs	r3, #0
 80134d4:	e061      	b.n	801359a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80134dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	2200      	movs	r2, #0
 80134e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	68ba      	ldr	r2, [r7, #8]
 80134e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	891a      	ldrh	r2, [r3, #8]
 80134ee:	7dfb      	ldrb	r3, [r7, #23]
 80134f0:	b29b      	uxth	r3, r3
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d205      	bcs.n	8013502 <tcp_create_segment+0x86>
 80134f6:	4b2b      	ldr	r3, [pc, #172]	; (80135a4 <tcp_create_segment+0x128>)
 80134f8:	22b0      	movs	r2, #176	; 0xb0
 80134fa:	492e      	ldr	r1, [pc, #184]	; (80135b4 <tcp_create_segment+0x138>)
 80134fc:	482b      	ldr	r0, [pc, #172]	; (80135ac <tcp_create_segment+0x130>)
 80134fe:	f004 fdfd 	bl	80180fc <iprintf>
  seg->len = p->tot_len - optlen;
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	891a      	ldrh	r2, [r3, #8]
 8013506:	7dfb      	ldrb	r3, [r7, #23]
 8013508:	b29b      	uxth	r3, r3
 801350a:	1ad3      	subs	r3, r2, r3
 801350c:	b29a      	uxth	r2, r3
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013512:	2114      	movs	r1, #20
 8013514:	68b8      	ldr	r0, [r7, #8]
 8013516:	f7fb fda9 	bl	800f06c <pbuf_add_header>
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d004      	beq.n	801352a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013520:	6938      	ldr	r0, [r7, #16]
 8013522:	f7fd f8c8 	bl	80106b6 <tcp_seg_free>
    return NULL;
 8013526:	2300      	movs	r3, #0
 8013528:	e037      	b.n	801359a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	685a      	ldr	r2, [r3, #4]
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	8ada      	ldrh	r2, [r3, #22]
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	68dc      	ldr	r4, [r3, #12]
 801353c:	4610      	mov	r0, r2
 801353e:	f7fa f95f 	bl	800d800 <lwip_htons>
 8013542:	4603      	mov	r3, r0
 8013544:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	8b1a      	ldrh	r2, [r3, #24]
 801354a:	693b      	ldr	r3, [r7, #16]
 801354c:	68dc      	ldr	r4, [r3, #12]
 801354e:	4610      	mov	r0, r2
 8013550:	f7fa f956 	bl	800d800 <lwip_htons>
 8013554:	4603      	mov	r3, r0
 8013556:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	68dc      	ldr	r4, [r3, #12]
 801355c:	6838      	ldr	r0, [r7, #0]
 801355e:	f7fa f964 	bl	800d82a <lwip_htonl>
 8013562:	4603      	mov	r3, r0
 8013564:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013566:	7dfb      	ldrb	r3, [r7, #23]
 8013568:	089b      	lsrs	r3, r3, #2
 801356a:	b2db      	uxtb	r3, r3
 801356c:	b29b      	uxth	r3, r3
 801356e:	3305      	adds	r3, #5
 8013570:	b29b      	uxth	r3, r3
 8013572:	031b      	lsls	r3, r3, #12
 8013574:	b29a      	uxth	r2, r3
 8013576:	79fb      	ldrb	r3, [r7, #7]
 8013578:	b29b      	uxth	r3, r3
 801357a:	4313      	orrs	r3, r2
 801357c:	b29a      	uxth	r2, r3
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	68dc      	ldr	r4, [r3, #12]
 8013582:	4610      	mov	r0, r2
 8013584:	f7fa f93c 	bl	800d800 <lwip_htons>
 8013588:	4603      	mov	r3, r0
 801358a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	2200      	movs	r2, #0
 8013592:	749a      	strb	r2, [r3, #18]
 8013594:	2200      	movs	r2, #0
 8013596:	74da      	strb	r2, [r3, #19]
  return seg;
 8013598:	693b      	ldr	r3, [r7, #16]
}
 801359a:	4618      	mov	r0, r3
 801359c:	371c      	adds	r7, #28
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd90      	pop	{r4, r7, pc}
 80135a2:	bf00      	nop
 80135a4:	0801aad0 	.word	0x0801aad0
 80135a8:	0801ab04 	.word	0x0801ab04
 80135ac:	0801ab24 	.word	0x0801ab24
 80135b0:	0801ab4c 	.word	0x0801ab4c
 80135b4:	0801ab70 	.word	0x0801ab70

080135b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80135b8:	b590      	push	{r4, r7, lr}
 80135ba:	b08b      	sub	sp, #44	; 0x2c
 80135bc:	af02      	add	r7, sp, #8
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	460b      	mov	r3, r1
 80135c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80135c4:	2300      	movs	r3, #0
 80135c6:	61fb      	str	r3, [r7, #28]
 80135c8:	2300      	movs	r3, #0
 80135ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80135cc:	2300      	movs	r3, #0
 80135ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d106      	bne.n	80135e4 <tcp_split_unsent_seg+0x2c>
 80135d6:	4b95      	ldr	r3, [pc, #596]	; (801382c <tcp_split_unsent_seg+0x274>)
 80135d8:	f240 324b 	movw	r2, #843	; 0x34b
 80135dc:	4994      	ldr	r1, [pc, #592]	; (8013830 <tcp_split_unsent_seg+0x278>)
 80135de:	4895      	ldr	r0, [pc, #596]	; (8013834 <tcp_split_unsent_seg+0x27c>)
 80135e0:	f004 fd8c 	bl	80180fc <iprintf>

  useg = pcb->unsent;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d102      	bne.n	80135f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80135f0:	f04f 33ff 	mov.w	r3, #4294967295
 80135f4:	e116      	b.n	8013824 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80135f6:	887b      	ldrh	r3, [r7, #2]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d109      	bne.n	8013610 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80135fc:	4b8b      	ldr	r3, [pc, #556]	; (801382c <tcp_split_unsent_seg+0x274>)
 80135fe:	f240 3253 	movw	r2, #851	; 0x353
 8013602:	498d      	ldr	r1, [pc, #564]	; (8013838 <tcp_split_unsent_seg+0x280>)
 8013604:	488b      	ldr	r0, [pc, #556]	; (8013834 <tcp_split_unsent_seg+0x27c>)
 8013606:	f004 fd79 	bl	80180fc <iprintf>
    return ERR_VAL;
 801360a:	f06f 0305 	mvn.w	r3, #5
 801360e:	e109      	b.n	8013824 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	891b      	ldrh	r3, [r3, #8]
 8013614:	887a      	ldrh	r2, [r7, #2]
 8013616:	429a      	cmp	r2, r3
 8013618:	d301      	bcc.n	801361e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801361a:	2300      	movs	r3, #0
 801361c:	e102      	b.n	8013824 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013622:	887a      	ldrh	r2, [r7, #2]
 8013624:	429a      	cmp	r2, r3
 8013626:	d906      	bls.n	8013636 <tcp_split_unsent_seg+0x7e>
 8013628:	4b80      	ldr	r3, [pc, #512]	; (801382c <tcp_split_unsent_seg+0x274>)
 801362a:	f240 325b 	movw	r2, #859	; 0x35b
 801362e:	4983      	ldr	r1, [pc, #524]	; (801383c <tcp_split_unsent_seg+0x284>)
 8013630:	4880      	ldr	r0, [pc, #512]	; (8013834 <tcp_split_unsent_seg+0x27c>)
 8013632:	f004 fd63 	bl	80180fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	891b      	ldrh	r3, [r3, #8]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d106      	bne.n	801364c <tcp_split_unsent_seg+0x94>
 801363e:	4b7b      	ldr	r3, [pc, #492]	; (801382c <tcp_split_unsent_seg+0x274>)
 8013640:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013644:	497e      	ldr	r1, [pc, #504]	; (8013840 <tcp_split_unsent_seg+0x288>)
 8013646:	487b      	ldr	r0, [pc, #492]	; (8013834 <tcp_split_unsent_seg+0x27c>)
 8013648:	f004 fd58 	bl	80180fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	7a9b      	ldrb	r3, [r3, #10]
 8013650:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013652:	7bfb      	ldrb	r3, [r7, #15]
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	b2db      	uxtb	r3, r3
 8013658:	f003 0304 	and.w	r3, r3, #4
 801365c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	891a      	ldrh	r2, [r3, #8]
 8013662:	887b      	ldrh	r3, [r7, #2]
 8013664:	1ad3      	subs	r3, r2, r3
 8013666:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013668:	7bbb      	ldrb	r3, [r7, #14]
 801366a:	b29a      	uxth	r2, r3
 801366c:	89bb      	ldrh	r3, [r7, #12]
 801366e:	4413      	add	r3, r2
 8013670:	b29b      	uxth	r3, r3
 8013672:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013676:	4619      	mov	r1, r3
 8013678:	2036      	movs	r0, #54	; 0x36
 801367a:	f7fb faa9 	bl	800ebd0 <pbuf_alloc>
 801367e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	2b00      	cmp	r3, #0
 8013684:	f000 80b7 	beq.w	80137f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	891a      	ldrh	r2, [r3, #8]
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	891b      	ldrh	r3, [r3, #8]
 8013692:	1ad3      	subs	r3, r2, r3
 8013694:	b29a      	uxth	r2, r3
 8013696:	887b      	ldrh	r3, [r7, #2]
 8013698:	4413      	add	r3, r2
 801369a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	6858      	ldr	r0, [r3, #4]
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	685a      	ldr	r2, [r3, #4]
 80136a4:	7bbb      	ldrb	r3, [r7, #14]
 80136a6:	18d1      	adds	r1, r2, r3
 80136a8:	897b      	ldrh	r3, [r7, #10]
 80136aa:	89ba      	ldrh	r2, [r7, #12]
 80136ac:	f7fb ff7a 	bl	800f5a4 <pbuf_copy_partial>
 80136b0:	4603      	mov	r3, r0
 80136b2:	461a      	mov	r2, r3
 80136b4:	89bb      	ldrh	r3, [r7, #12]
 80136b6:	4293      	cmp	r3, r2
 80136b8:	f040 809f 	bne.w	80137fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80136bc:	697b      	ldr	r3, [r7, #20]
 80136be:	68db      	ldr	r3, [r3, #12]
 80136c0:	899b      	ldrh	r3, [r3, #12]
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7fa f89b 	bl	800d800 <lwip_htons>
 80136ca:	4603      	mov	r3, r0
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80136d4:	2300      	movs	r3, #0
 80136d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80136d8:	7efb      	ldrb	r3, [r7, #27]
 80136da:	f003 0308 	and.w	r3, r3, #8
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d007      	beq.n	80136f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80136e2:	7efb      	ldrb	r3, [r7, #27]
 80136e4:	f023 0308 	bic.w	r3, r3, #8
 80136e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80136ea:	7ebb      	ldrb	r3, [r7, #26]
 80136ec:	f043 0308 	orr.w	r3, r3, #8
 80136f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80136f2:	7efb      	ldrb	r3, [r7, #27]
 80136f4:	f003 0301 	and.w	r3, r3, #1
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d007      	beq.n	801370c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80136fc:	7efb      	ldrb	r3, [r7, #27]
 80136fe:	f023 0301 	bic.w	r3, r3, #1
 8013702:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013704:	7ebb      	ldrb	r3, [r7, #26]
 8013706:	f043 0301 	orr.w	r3, r3, #1
 801370a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	4618      	mov	r0, r3
 8013714:	f7fa f889 	bl	800d82a <lwip_htonl>
 8013718:	4602      	mov	r2, r0
 801371a:	887b      	ldrh	r3, [r7, #2]
 801371c:	18d1      	adds	r1, r2, r3
 801371e:	7eba      	ldrb	r2, [r7, #26]
 8013720:	7bfb      	ldrb	r3, [r7, #15]
 8013722:	9300      	str	r3, [sp, #0]
 8013724:	460b      	mov	r3, r1
 8013726:	6939      	ldr	r1, [r7, #16]
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f7ff fea7 	bl	801347c <tcp_create_segment>
 801372e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d063      	beq.n	80137fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	4618      	mov	r0, r3
 801373c:	f7fb fdba 	bl	800f2b4 <pbuf_clen>
 8013740:	4603      	mov	r3, r0
 8013742:	461a      	mov	r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801374a:	1a9b      	subs	r3, r3, r2
 801374c:	b29a      	uxth	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	6858      	ldr	r0, [r3, #4]
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	891a      	ldrh	r2, [r3, #8]
 801375e:	89bb      	ldrh	r3, [r7, #12]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	b29b      	uxth	r3, r3
 8013764:	4619      	mov	r1, r3
 8013766:	f7fb fb91 	bl	800ee8c <pbuf_realloc>
  useg->len -= remainder;
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	891a      	ldrh	r2, [r3, #8]
 801376e:	89bb      	ldrh	r3, [r7, #12]
 8013770:	1ad3      	subs	r3, r2, r3
 8013772:	b29a      	uxth	r2, r3
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	899b      	ldrh	r3, [r3, #12]
 801377e:	b29c      	uxth	r4, r3
 8013780:	7efb      	ldrb	r3, [r7, #27]
 8013782:	b29b      	uxth	r3, r3
 8013784:	4618      	mov	r0, r3
 8013786:	f7fa f83b 	bl	800d800 <lwip_htons>
 801378a:	4603      	mov	r3, r0
 801378c:	461a      	mov	r2, r3
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	4322      	orrs	r2, r4
 8013794:	b292      	uxth	r2, r2
 8013796:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	4618      	mov	r0, r3
 801379e:	f7fb fd89 	bl	800f2b4 <pbuf_clen>
 80137a2:	4603      	mov	r3, r0
 80137a4:	461a      	mov	r2, r3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137ac:	4413      	add	r3, r2
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80137b6:	69fb      	ldr	r3, [r7, #28]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fb fd7a 	bl	800f2b4 <pbuf_clen>
 80137c0:	4603      	mov	r3, r0
 80137c2:	461a      	mov	r2, r3
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137ca:	4413      	add	r3, r2
 80137cc:	b29a      	uxth	r2, r3
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	681a      	ldr	r2, [r3, #0]
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	69fa      	ldr	r2, [r7, #28]
 80137e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d103      	bne.n	80137f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2200      	movs	r2, #0
 80137ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	e016      	b.n	8013824 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80137f6:	bf00      	nop
 80137f8:	e002      	b.n	8013800 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80137fa:	bf00      	nop
 80137fc:	e000      	b.n	8013800 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80137fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d006      	beq.n	8013814 <tcp_split_unsent_seg+0x25c>
 8013806:	4b09      	ldr	r3, [pc, #36]	; (801382c <tcp_split_unsent_seg+0x274>)
 8013808:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801380c:	490d      	ldr	r1, [pc, #52]	; (8013844 <tcp_split_unsent_seg+0x28c>)
 801380e:	4809      	ldr	r0, [pc, #36]	; (8013834 <tcp_split_unsent_seg+0x27c>)
 8013810:	f004 fc74 	bl	80180fc <iprintf>
  if (p != NULL) {
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d002      	beq.n	8013820 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801381a:	6938      	ldr	r0, [r7, #16]
 801381c:	f7fb fcbc 	bl	800f198 <pbuf_free>
  }

  return ERR_MEM;
 8013820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013824:	4618      	mov	r0, r3
 8013826:	3724      	adds	r7, #36	; 0x24
 8013828:	46bd      	mov	sp, r7
 801382a:	bd90      	pop	{r4, r7, pc}
 801382c:	0801aad0 	.word	0x0801aad0
 8013830:	0801ae64 	.word	0x0801ae64
 8013834:	0801ab24 	.word	0x0801ab24
 8013838:	0801ae88 	.word	0x0801ae88
 801383c:	0801aeac 	.word	0x0801aeac
 8013840:	0801aebc 	.word	0x0801aebc
 8013844:	0801aecc 	.word	0x0801aecc

08013848 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013848:	b590      	push	{r4, r7, lr}
 801384a:	b085      	sub	sp, #20
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d106      	bne.n	8013864 <tcp_send_fin+0x1c>
 8013856:	4b21      	ldr	r3, [pc, #132]	; (80138dc <tcp_send_fin+0x94>)
 8013858:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801385c:	4920      	ldr	r1, [pc, #128]	; (80138e0 <tcp_send_fin+0x98>)
 801385e:	4821      	ldr	r0, [pc, #132]	; (80138e4 <tcp_send_fin+0x9c>)
 8013860:	f004 fc4c 	bl	80180fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013868:	2b00      	cmp	r3, #0
 801386a:	d02e      	beq.n	80138ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013870:	60fb      	str	r3, [r7, #12]
 8013872:	e002      	b.n	801387a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1f8      	bne.n	8013874 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	899b      	ldrh	r3, [r3, #12]
 8013888:	b29b      	uxth	r3, r3
 801388a:	4618      	mov	r0, r3
 801388c:	f7f9 ffb8 	bl	800d800 <lwip_htons>
 8013890:	4603      	mov	r3, r0
 8013892:	b2db      	uxtb	r3, r3
 8013894:	f003 0307 	and.w	r3, r3, #7
 8013898:	2b00      	cmp	r3, #0
 801389a:	d116      	bne.n	80138ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	899b      	ldrh	r3, [r3, #12]
 80138a2:	b29c      	uxth	r4, r3
 80138a4:	2001      	movs	r0, #1
 80138a6:	f7f9 ffab 	bl	800d800 <lwip_htons>
 80138aa:	4603      	mov	r3, r0
 80138ac:	461a      	mov	r2, r3
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	4322      	orrs	r2, r4
 80138b4:	b292      	uxth	r2, r2
 80138b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	8b5b      	ldrh	r3, [r3, #26]
 80138bc:	f043 0320 	orr.w	r3, r3, #32
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80138c6:	2300      	movs	r3, #0
 80138c8:	e004      	b.n	80138d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80138ca:	2101      	movs	r1, #1
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 f80b 	bl	80138e8 <tcp_enqueue_flags>
 80138d2:	4603      	mov	r3, r0
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3714      	adds	r7, #20
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd90      	pop	{r4, r7, pc}
 80138dc:	0801aad0 	.word	0x0801aad0
 80138e0:	0801aed8 	.word	0x0801aed8
 80138e4:	0801ab24 	.word	0x0801ab24

080138e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b08a      	sub	sp, #40	; 0x28
 80138ec:	af02      	add	r7, sp, #8
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	460b      	mov	r3, r1
 80138f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80138f4:	2300      	movs	r3, #0
 80138f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80138f8:	2300      	movs	r3, #0
 80138fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80138fc:	78fb      	ldrb	r3, [r7, #3]
 80138fe:	f003 0303 	and.w	r3, r3, #3
 8013902:	2b00      	cmp	r3, #0
 8013904:	d106      	bne.n	8013914 <tcp_enqueue_flags+0x2c>
 8013906:	4b67      	ldr	r3, [pc, #412]	; (8013aa4 <tcp_enqueue_flags+0x1bc>)
 8013908:	f240 4211 	movw	r2, #1041	; 0x411
 801390c:	4966      	ldr	r1, [pc, #408]	; (8013aa8 <tcp_enqueue_flags+0x1c0>)
 801390e:	4867      	ldr	r0, [pc, #412]	; (8013aac <tcp_enqueue_flags+0x1c4>)
 8013910:	f004 fbf4 	bl	80180fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d106      	bne.n	8013928 <tcp_enqueue_flags+0x40>
 801391a:	4b62      	ldr	r3, [pc, #392]	; (8013aa4 <tcp_enqueue_flags+0x1bc>)
 801391c:	f240 4213 	movw	r2, #1043	; 0x413
 8013920:	4963      	ldr	r1, [pc, #396]	; (8013ab0 <tcp_enqueue_flags+0x1c8>)
 8013922:	4862      	ldr	r0, [pc, #392]	; (8013aac <tcp_enqueue_flags+0x1c4>)
 8013924:	f004 fbea 	bl	80180fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013928:	78fb      	ldrb	r3, [r7, #3]
 801392a:	f003 0302 	and.w	r3, r3, #2
 801392e:	2b00      	cmp	r3, #0
 8013930:	d001      	beq.n	8013936 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013932:	2301      	movs	r3, #1
 8013934:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013936:	7ffb      	ldrb	r3, [r7, #31]
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	b2db      	uxtb	r3, r3
 801393c:	f003 0304 	and.w	r3, r3, #4
 8013940:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013942:	7dfb      	ldrb	r3, [r7, #23]
 8013944:	b29b      	uxth	r3, r3
 8013946:	f44f 7220 	mov.w	r2, #640	; 0x280
 801394a:	4619      	mov	r1, r3
 801394c:	2036      	movs	r0, #54	; 0x36
 801394e:	f7fb f93f 	bl	800ebd0 <pbuf_alloc>
 8013952:	6138      	str	r0, [r7, #16]
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d109      	bne.n	801396e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	8b5b      	ldrh	r3, [r3, #26]
 801395e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013962:	b29a      	uxth	r2, r3
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013968:	f04f 33ff 	mov.w	r3, #4294967295
 801396c:	e095      	b.n	8013a9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	895a      	ldrh	r2, [r3, #10]
 8013972:	7dfb      	ldrb	r3, [r7, #23]
 8013974:	b29b      	uxth	r3, r3
 8013976:	429a      	cmp	r2, r3
 8013978:	d206      	bcs.n	8013988 <tcp_enqueue_flags+0xa0>
 801397a:	4b4a      	ldr	r3, [pc, #296]	; (8013aa4 <tcp_enqueue_flags+0x1bc>)
 801397c:	f240 4239 	movw	r2, #1081	; 0x439
 8013980:	494c      	ldr	r1, [pc, #304]	; (8013ab4 <tcp_enqueue_flags+0x1cc>)
 8013982:	484a      	ldr	r0, [pc, #296]	; (8013aac <tcp_enqueue_flags+0x1c4>)
 8013984:	f004 fbba 	bl	80180fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801398c:	78fa      	ldrb	r2, [r7, #3]
 801398e:	7ffb      	ldrb	r3, [r7, #31]
 8013990:	9300      	str	r3, [sp, #0]
 8013992:	460b      	mov	r3, r1
 8013994:	6939      	ldr	r1, [r7, #16]
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7ff fd70 	bl	801347c <tcp_create_segment>
 801399c:	60f8      	str	r0, [r7, #12]
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d109      	bne.n	80139b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	8b5b      	ldrh	r3, [r3, #26]
 80139a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139ac:	b29a      	uxth	r2, r3
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80139b2:	f04f 33ff 	mov.w	r3, #4294967295
 80139b6:	e070      	b.n	8013a9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	68db      	ldr	r3, [r3, #12]
 80139bc:	f003 0303 	and.w	r3, r3, #3
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d006      	beq.n	80139d2 <tcp_enqueue_flags+0xea>
 80139c4:	4b37      	ldr	r3, [pc, #220]	; (8013aa4 <tcp_enqueue_flags+0x1bc>)
 80139c6:	f240 4242 	movw	r2, #1090	; 0x442
 80139ca:	493b      	ldr	r1, [pc, #236]	; (8013ab8 <tcp_enqueue_flags+0x1d0>)
 80139cc:	4837      	ldr	r0, [pc, #220]	; (8013aac <tcp_enqueue_flags+0x1c4>)
 80139ce:	f004 fb95 	bl	80180fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	891b      	ldrh	r3, [r3, #8]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d006      	beq.n	80139e8 <tcp_enqueue_flags+0x100>
 80139da:	4b32      	ldr	r3, [pc, #200]	; (8013aa4 <tcp_enqueue_flags+0x1bc>)
 80139dc:	f240 4243 	movw	r2, #1091	; 0x443
 80139e0:	4936      	ldr	r1, [pc, #216]	; (8013abc <tcp_enqueue_flags+0x1d4>)
 80139e2:	4832      	ldr	r0, [pc, #200]	; (8013aac <tcp_enqueue_flags+0x1c4>)
 80139e4:	f004 fb8a 	bl	80180fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d103      	bne.n	80139f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	68fa      	ldr	r2, [r7, #12]
 80139f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80139f6:	e00d      	b.n	8013a14 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139fc:	61bb      	str	r3, [r7, #24]
 80139fe:	e002      	b.n	8013a06 <tcp_enqueue_flags+0x11e>
 8013a00:	69bb      	ldr	r3, [r7, #24]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	61bb      	str	r3, [r7, #24]
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d1f8      	bne.n	8013a00 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	68fa      	ldr	r2, [r7, #12]
 8013a12:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2200      	movs	r2, #0
 8013a18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013a1c:	78fb      	ldrb	r3, [r7, #3]
 8013a1e:	f003 0302 	and.w	r3, r3, #2
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d104      	bne.n	8013a30 <tcp_enqueue_flags+0x148>
 8013a26:	78fb      	ldrb	r3, [r7, #3]
 8013a28:	f003 0301 	and.w	r3, r3, #1
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d004      	beq.n	8013a3a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a34:	1c5a      	adds	r2, r3, #1
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013a3a:	78fb      	ldrb	r3, [r7, #3]
 8013a3c:	f003 0301 	and.w	r3, r3, #1
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d006      	beq.n	8013a52 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	8b5b      	ldrh	r3, [r3, #26]
 8013a48:	f043 0320 	orr.w	r3, r3, #32
 8013a4c:	b29a      	uxth	r2, r3
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7fb fc2c 	bl	800f2b4 <pbuf_clen>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	461a      	mov	r2, r3
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a66:	4413      	add	r3, r2
 8013a68:	b29a      	uxth	r2, r3
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00e      	beq.n	8013a98 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d10a      	bne.n	8013a98 <tcp_enqueue_flags+0x1b0>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d106      	bne.n	8013a98 <tcp_enqueue_flags+0x1b0>
 8013a8a:	4b06      	ldr	r3, [pc, #24]	; (8013aa4 <tcp_enqueue_flags+0x1bc>)
 8013a8c:	f240 4265 	movw	r2, #1125	; 0x465
 8013a90:	490b      	ldr	r1, [pc, #44]	; (8013ac0 <tcp_enqueue_flags+0x1d8>)
 8013a92:	4806      	ldr	r0, [pc, #24]	; (8013aac <tcp_enqueue_flags+0x1c4>)
 8013a94:	f004 fb32 	bl	80180fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013a98:	2300      	movs	r3, #0
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	3720      	adds	r7, #32
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	0801aad0 	.word	0x0801aad0
 8013aa8:	0801aef4 	.word	0x0801aef4
 8013aac:	0801ab24 	.word	0x0801ab24
 8013ab0:	0801af4c 	.word	0x0801af4c
 8013ab4:	0801af6c 	.word	0x0801af6c
 8013ab8:	0801afa8 	.word	0x0801afa8
 8013abc:	0801afc0 	.word	0x0801afc0
 8013ac0:	0801afec 	.word	0x0801afec

08013ac4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013ac4:	b5b0      	push	{r4, r5, r7, lr}
 8013ac6:	b08a      	sub	sp, #40	; 0x28
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d106      	bne.n	8013ae0 <tcp_output+0x1c>
 8013ad2:	4b9e      	ldr	r3, [pc, #632]	; (8013d4c <tcp_output+0x288>)
 8013ad4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013ad8:	499d      	ldr	r1, [pc, #628]	; (8013d50 <tcp_output+0x28c>)
 8013ada:	489e      	ldr	r0, [pc, #632]	; (8013d54 <tcp_output+0x290>)
 8013adc:	f004 fb0e 	bl	80180fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	7d1b      	ldrb	r3, [r3, #20]
 8013ae4:	2b01      	cmp	r3, #1
 8013ae6:	d106      	bne.n	8013af6 <tcp_output+0x32>
 8013ae8:	4b98      	ldr	r3, [pc, #608]	; (8013d4c <tcp_output+0x288>)
 8013aea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013aee:	499a      	ldr	r1, [pc, #616]	; (8013d58 <tcp_output+0x294>)
 8013af0:	4898      	ldr	r0, [pc, #608]	; (8013d54 <tcp_output+0x290>)
 8013af2:	f004 fb03 	bl	80180fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013af6:	4b99      	ldr	r3, [pc, #612]	; (8013d5c <tcp_output+0x298>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d101      	bne.n	8013b04 <tcp_output+0x40>
    return ERR_OK;
 8013b00:	2300      	movs	r3, #0
 8013b02:	e1ce      	b.n	8013ea2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b10:	4293      	cmp	r3, r2
 8013b12:	bf28      	it	cs
 8013b14:	4613      	movcs	r3, r2
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d10b      	bne.n	8013b3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	8b5b      	ldrh	r3, [r3, #26]
 8013b2a:	f003 0302 	and.w	r3, r3, #2
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f000 81aa 	beq.w	8013e88 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f000 fdcb 	bl	80146d0 <tcp_send_empty_ack>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	e1b1      	b.n	8013ea2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013b3e:	6879      	ldr	r1, [r7, #4]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	3304      	adds	r3, #4
 8013b44:	461a      	mov	r2, r3
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f7ff fc7c 	bl	8013444 <tcp_route>
 8013b4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d102      	bne.n	8013b5a <tcp_output+0x96>
    return ERR_RTE;
 8013b54:	f06f 0303 	mvn.w	r3, #3
 8013b58:	e1a3      	b.n	8013ea2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d003      	beq.n	8013b68 <tcp_output+0xa4>
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d111      	bne.n	8013b8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d002      	beq.n	8013b74 <tcp_output+0xb0>
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	3304      	adds	r3, #4
 8013b72:	e000      	b.n	8013b76 <tcp_output+0xb2>
 8013b74:	2300      	movs	r3, #0
 8013b76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d102      	bne.n	8013b84 <tcp_output+0xc0>
      return ERR_RTE;
 8013b7e:	f06f 0303 	mvn.w	r3, #3
 8013b82:	e18e      	b.n	8013ea2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013b84:	693b      	ldr	r3, [r7, #16]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	685b      	ldr	r3, [r3, #4]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7f9 fe49 	bl	800d82a <lwip_htonl>
 8013b98:	4602      	mov	r2, r0
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b9e:	1ad3      	subs	r3, r2, r3
 8013ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ba2:	8912      	ldrh	r2, [r2, #8]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	69ba      	ldr	r2, [r7, #24]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d227      	bcs.n	8013bfc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013bb2:	461a      	mov	r2, r3
 8013bb4:	69bb      	ldr	r3, [r7, #24]
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	d114      	bne.n	8013be4 <tcp_output+0x120>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d110      	bne.n	8013be4 <tcp_output+0x120>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d10b      	bne.n	8013be4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2201      	movs	r2, #1
 8013bd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      pcb->persist_probe = 0;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2200      	movs	r2, #0
 8013be0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f003 0302 	and.w	r3, r3, #2
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f000 814d 	beq.w	8013e8c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 fd6c 	bl	80146d0 <tcp_send_empty_ack>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	e152      	b.n	8013ea2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c08:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013c0a:	6a3b      	ldr	r3, [r7, #32]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	f000 811c 	beq.w	8013e4a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013c12:	e002      	b.n	8013c1a <tcp_output+0x156>
 8013c14:	6a3b      	ldr	r3, [r7, #32]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	623b      	str	r3, [r7, #32]
 8013c1a:	6a3b      	ldr	r3, [r7, #32]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d1f8      	bne.n	8013c14 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013c22:	e112      	b.n	8013e4a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	899b      	ldrh	r3, [r3, #12]
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7f9 fde7 	bl	800d800 <lwip_htons>
 8013c32:	4603      	mov	r3, r0
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	f003 0304 	and.w	r3, r3, #4
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d006      	beq.n	8013c4c <tcp_output+0x188>
 8013c3e:	4b43      	ldr	r3, [pc, #268]	; (8013d4c <tcp_output+0x288>)
 8013c40:	f240 5236 	movw	r2, #1334	; 0x536
 8013c44:	4946      	ldr	r1, [pc, #280]	; (8013d60 <tcp_output+0x29c>)
 8013c46:	4843      	ldr	r0, [pc, #268]	; (8013d54 <tcp_output+0x290>)
 8013c48:	f004 fa58 	bl	80180fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d01f      	beq.n	8013c94 <tcp_output+0x1d0>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	8b5b      	ldrh	r3, [r3, #26]
 8013c58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d119      	bne.n	8013c94 <tcp_output+0x1d0>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d00b      	beq.n	8013c80 <tcp_output+0x1bc>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d110      	bne.n	8013c94 <tcp_output+0x1d0>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c76:	891a      	ldrh	r2, [r3, #8]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d209      	bcs.n	8013c94 <tcp_output+0x1d0>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d004      	beq.n	8013c94 <tcp_output+0x1d0>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c90:	2b08      	cmp	r3, #8
 8013c92:	d901      	bls.n	8013c98 <tcp_output+0x1d4>
 8013c94:	2301      	movs	r3, #1
 8013c96:	e000      	b.n	8013c9a <tcp_output+0x1d6>
 8013c98:	2300      	movs	r3, #0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d106      	bne.n	8013cac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	8b5b      	ldrh	r3, [r3, #26]
 8013ca2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	f000 80e4 	beq.w	8013e74 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	7d1b      	ldrb	r3, [r3, #20]
 8013cb0:	2b02      	cmp	r3, #2
 8013cb2:	d00d      	beq.n	8013cd0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	899b      	ldrh	r3, [r3, #12]
 8013cba:	b29c      	uxth	r4, r3
 8013cbc:	2010      	movs	r0, #16
 8013cbe:	f7f9 fd9f 	bl	800d800 <lwip_htons>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc8:	68db      	ldr	r3, [r3, #12]
 8013cca:	4322      	orrs	r2, r4
 8013ccc:	b292      	uxth	r2, r2
 8013cce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	6879      	ldr	r1, [r7, #4]
 8013cd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cd6:	f000 f909 	bl	8013eec <tcp_output_segment>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d009      	beq.n	8013cfa <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	8b5b      	ldrh	r3, [r3, #26]
 8013cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cee:	b29a      	uxth	r2, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	835a      	strh	r2, [r3, #26]
      return err;
 8013cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cf8:	e0d3      	b.n	8013ea2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	7d1b      	ldrb	r3, [r3, #20]
 8013d06:	2b02      	cmp	r3, #2
 8013d08:	d006      	beq.n	8013d18 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8b5b      	ldrh	r3, [r3, #26]
 8013d0e:	f023 0303 	bic.w	r3, r3, #3
 8013d12:	b29a      	uxth	r2, r3
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7f9 fd83 	bl	800d82a <lwip_htonl>
 8013d24:	4604      	mov	r4, r0
 8013d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d28:	891b      	ldrh	r3, [r3, #8]
 8013d2a:	461d      	mov	r5, r3
 8013d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	899b      	ldrh	r3, [r3, #12]
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f9 fd63 	bl	800d800 <lwip_htons>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	f003 0303 	and.w	r3, r3, #3
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00e      	beq.n	8013d64 <tcp_output+0x2a0>
 8013d46:	2301      	movs	r3, #1
 8013d48:	e00d      	b.n	8013d66 <tcp_output+0x2a2>
 8013d4a:	bf00      	nop
 8013d4c:	0801aad0 	.word	0x0801aad0
 8013d50:	0801b014 	.word	0x0801b014
 8013d54:	0801ab24 	.word	0x0801ab24
 8013d58:	0801b02c 	.word	0x0801b02c
 8013d5c:	24024eac 	.word	0x24024eac
 8013d60:	0801b054 	.word	0x0801b054
 8013d64:	2300      	movs	r3, #0
 8013d66:	442b      	add	r3, r5
 8013d68:	4423      	add	r3, r4
 8013d6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	1ad3      	subs	r3, r2, r3
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	da02      	bge.n	8013d7e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68ba      	ldr	r2, [r7, #8]
 8013d7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	891b      	ldrh	r3, [r3, #8]
 8013d82:	461c      	mov	r4, r3
 8013d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d86:	68db      	ldr	r3, [r3, #12]
 8013d88:	899b      	ldrh	r3, [r3, #12]
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7f9 fd37 	bl	800d800 <lwip_htons>
 8013d92:	4603      	mov	r3, r0
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	f003 0303 	and.w	r3, r3, #3
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d001      	beq.n	8013da2 <tcp_output+0x2de>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	e000      	b.n	8013da4 <tcp_output+0x2e0>
 8013da2:	2300      	movs	r3, #0
 8013da4:	4423      	add	r3, r4
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d049      	beq.n	8013e3e <tcp_output+0x37a>
      seg->next = NULL;
 8013daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dac:	2200      	movs	r2, #0
 8013dae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d105      	bne.n	8013dc4 <tcp_output+0x300>
        pcb->unacked = seg;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dbc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc0:	623b      	str	r3, [r7, #32]
 8013dc2:	e03f      	b.n	8013e44 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7f9 fd2d 	bl	800d82a <lwip_htonl>
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	6a3b      	ldr	r3, [r7, #32]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7f9 fd26 	bl	800d82a <lwip_htonl>
 8013dde:	4603      	mov	r3, r0
 8013de0:	1ae3      	subs	r3, r4, r3
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	da24      	bge.n	8013e30 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	3370      	adds	r3, #112	; 0x70
 8013dea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013dec:	e002      	b.n	8013df4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d011      	beq.n	8013e20 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	685b      	ldr	r3, [r3, #4]
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f9 fd10 	bl	800d82a <lwip_htonl>
 8013e0a:	4604      	mov	r4, r0
 8013e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7f9 fd09 	bl	800d82a <lwip_htonl>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	dbe6      	blt.n	8013dee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013e20:	69fb      	ldr	r3, [r7, #28]
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e26:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013e28:	69fb      	ldr	r3, [r7, #28]
 8013e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e2c:	601a      	str	r2, [r3, #0]
 8013e2e:	e009      	b.n	8013e44 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013e30:	6a3b      	ldr	r3, [r7, #32]
 8013e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e34:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013e36:	6a3b      	ldr	r3, [r7, #32]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	623b      	str	r3, [r7, #32]
 8013e3c:	e002      	b.n	8013e44 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e40:	f7fc fc39 	bl	80106b6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e48:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d012      	beq.n	8013e76 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	68db      	ldr	r3, [r3, #12]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7f9 fce7 	bl	800d82a <lwip_htonl>
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e62:	1ad3      	subs	r3, r2, r3
 8013e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e66:	8912      	ldrh	r2, [r2, #8]
 8013e68:	4413      	add	r3, r2
  while (seg != NULL &&
 8013e6a:	69ba      	ldr	r2, [r7, #24]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	f4bf aed9 	bcs.w	8013c24 <tcp_output+0x160>
 8013e72:	e000      	b.n	8013e76 <tcp_output+0x3b2>
      break;
 8013e74:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d108      	bne.n	8013e90 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2200      	movs	r2, #0
 8013e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013e86:	e004      	b.n	8013e92 <tcp_output+0x3ce>
    goto output_done;
 8013e88:	bf00      	nop
 8013e8a:	e002      	b.n	8013e92 <tcp_output+0x3ce>
    goto output_done;
 8013e8c:	bf00      	nop
 8013e8e:	e000      	b.n	8013e92 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013e90:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	8b5b      	ldrh	r3, [r3, #26]
 8013e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013e9a:	b29a      	uxth	r2, r3
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013ea0:	2300      	movs	r3, #0
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3728      	adds	r7, #40	; 0x28
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8013eaa:	bf00      	nop

08013eac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d106      	bne.n	8013ec8 <tcp_output_segment_busy+0x1c>
 8013eba:	4b09      	ldr	r3, [pc, #36]	; (8013ee0 <tcp_output_segment_busy+0x34>)
 8013ebc:	f240 529a 	movw	r2, #1434	; 0x59a
 8013ec0:	4908      	ldr	r1, [pc, #32]	; (8013ee4 <tcp_output_segment_busy+0x38>)
 8013ec2:	4809      	ldr	r0, [pc, #36]	; (8013ee8 <tcp_output_segment_busy+0x3c>)
 8013ec4:	f004 f91a 	bl	80180fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	7b9b      	ldrb	r3, [r3, #14]
 8013ece:	2b01      	cmp	r3, #1
 8013ed0:	d001      	beq.n	8013ed6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	e000      	b.n	8013ed8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013ed6:	2300      	movs	r3, #0
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	0801aad0 	.word	0x0801aad0
 8013ee4:	0801b06c 	.word	0x0801b06c
 8013ee8:	0801ab24 	.word	0x0801ab24

08013eec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013eec:	b5b0      	push	{r4, r5, r7, lr}
 8013eee:	b08c      	sub	sp, #48	; 0x30
 8013ef0:	af04      	add	r7, sp, #16
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d106      	bne.n	8013f0c <tcp_output_segment+0x20>
 8013efe:	4b63      	ldr	r3, [pc, #396]	; (801408c <tcp_output_segment+0x1a0>)
 8013f00:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013f04:	4962      	ldr	r1, [pc, #392]	; (8014090 <tcp_output_segment+0x1a4>)
 8013f06:	4863      	ldr	r0, [pc, #396]	; (8014094 <tcp_output_segment+0x1a8>)
 8013f08:	f004 f8f8 	bl	80180fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d106      	bne.n	8013f20 <tcp_output_segment+0x34>
 8013f12:	4b5e      	ldr	r3, [pc, #376]	; (801408c <tcp_output_segment+0x1a0>)
 8013f14:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013f18:	495f      	ldr	r1, [pc, #380]	; (8014098 <tcp_output_segment+0x1ac>)
 8013f1a:	485e      	ldr	r0, [pc, #376]	; (8014094 <tcp_output_segment+0x1a8>)
 8013f1c:	f004 f8ee 	bl	80180fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d106      	bne.n	8013f34 <tcp_output_segment+0x48>
 8013f26:	4b59      	ldr	r3, [pc, #356]	; (801408c <tcp_output_segment+0x1a0>)
 8013f28:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013f2c:	495b      	ldr	r1, [pc, #364]	; (801409c <tcp_output_segment+0x1b0>)
 8013f2e:	4859      	ldr	r0, [pc, #356]	; (8014094 <tcp_output_segment+0x1a8>)
 8013f30:	f004 f8e4 	bl	80180fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	f7ff ffb9 	bl	8013eac <tcp_output_segment_busy>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d001      	beq.n	8013f44 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013f40:	2300      	movs	r3, #0
 8013f42:	e09f      	b.n	8014084 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	68dc      	ldr	r4, [r3, #12]
 8013f4c:	4610      	mov	r0, r2
 8013f4e:	f7f9 fc6c 	bl	800d82a <lwip_htonl>
 8013f52:	4603      	mov	r3, r0
 8013f54:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	68dc      	ldr	r4, [r3, #12]
 8013f5e:	4610      	mov	r0, r2
 8013f60:	f7f9 fc4e 	bl	800d800 <lwip_htons>
 8013f64:	4603      	mov	r3, r0
 8013f66:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f6c:	68ba      	ldr	r2, [r7, #8]
 8013f6e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f70:	441a      	add	r2, r3
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	3314      	adds	r3, #20
 8013f7c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	7a9b      	ldrb	r3, [r3, #10]
 8013f82:	f003 0301 	and.w	r3, r3, #1
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d015      	beq.n	8013fb6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	3304      	adds	r3, #4
 8013f8e:	461a      	mov	r2, r3
 8013f90:	6879      	ldr	r1, [r7, #4]
 8013f92:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013f96:	f7fc fe8f 	bl	8010cb8 <tcp_eff_send_mss_netif>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013f9e:	8b7b      	ldrh	r3, [r7, #26]
 8013fa0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7f9 fc40 	bl	800d82a <lwip_htonl>
 8013faa:	4602      	mov	r2, r0
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	3304      	adds	r3, #4
 8013fb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	da02      	bge.n	8013fc6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d10c      	bne.n	8013fe8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013fce:	4b34      	ldr	r3, [pc, #208]	; (80140a0 <tcp_output_segment+0x1b4>)
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7f9 fc24 	bl	800d82a <lwip_htonl>
 8013fe2:	4602      	mov	r2, r0
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	68da      	ldr	r2, [r3, #12]
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	8959      	ldrh	r1, [r3, #10]
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	8b3a      	ldrh	r2, [r7, #24]
 8014002:	1a8a      	subs	r2, r1, r2
 8014004:	b292      	uxth	r2, r2
 8014006:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	8919      	ldrh	r1, [r3, #8]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	8b3a      	ldrh	r2, [r7, #24]
 8014014:	1a8a      	subs	r2, r1, r2
 8014016:	b292      	uxth	r2, r2
 8014018:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	68fa      	ldr	r2, [r7, #12]
 8014020:	68d2      	ldr	r2, [r2, #12]
 8014022:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	2200      	movs	r2, #0
 801402a:	741a      	strb	r2, [r3, #16]
 801402c:	2200      	movs	r2, #0
 801402e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	f103 0214 	add.w	r2, r3, #20
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	7a9b      	ldrb	r3, [r3, #10]
 801403c:	009b      	lsls	r3, r3, #2
 801403e:	f003 0304 	and.w	r3, r3, #4
 8014042:	4413      	add	r3, r2
 8014044:	69fa      	ldr	r2, [r7, #28]
 8014046:	429a      	cmp	r2, r3
 8014048:	d006      	beq.n	8014058 <tcp_output_segment+0x16c>
 801404a:	4b10      	ldr	r3, [pc, #64]	; (801408c <tcp_output_segment+0x1a0>)
 801404c:	f240 621c 	movw	r2, #1564	; 0x61c
 8014050:	4914      	ldr	r1, [pc, #80]	; (80140a4 <tcp_output_segment+0x1b8>)
 8014052:	4810      	ldr	r0, [pc, #64]	; (8014094 <tcp_output_segment+0x1a8>)
 8014054:	f004 f852 	bl	80180fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	6858      	ldr	r0, [r3, #4]
 801405c:	68b9      	ldr	r1, [r7, #8]
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	1d1c      	adds	r4, r3, #4
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	7add      	ldrb	r5, [r3, #11]
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	7a9b      	ldrb	r3, [r3, #10]
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	9202      	str	r2, [sp, #8]
 801406e:	2206      	movs	r2, #6
 8014070:	9201      	str	r2, [sp, #4]
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	462b      	mov	r3, r5
 8014076:	4622      	mov	r2, r4
 8014078:	f002 feba 	bl	8016df0 <ip4_output_if>
 801407c:	4603      	mov	r3, r0
 801407e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3720      	adds	r7, #32
 8014088:	46bd      	mov	sp, r7
 801408a:	bdb0      	pop	{r4, r5, r7, pc}
 801408c:	0801aad0 	.word	0x0801aad0
 8014090:	0801b094 	.word	0x0801b094
 8014094:	0801ab24 	.word	0x0801ab24
 8014098:	0801b0b4 	.word	0x0801b0b4
 801409c:	0801b0d4 	.word	0x0801b0d4
 80140a0:	24024e9c 	.word	0x24024e9c
 80140a4:	0801b0f8 	.word	0x0801b0f8

080140a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80140a8:	b5b0      	push	{r4, r5, r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d106      	bne.n	80140c4 <tcp_rexmit_rto_prepare+0x1c>
 80140b6:	4b31      	ldr	r3, [pc, #196]	; (801417c <tcp_rexmit_rto_prepare+0xd4>)
 80140b8:	f240 6263 	movw	r2, #1635	; 0x663
 80140bc:	4930      	ldr	r1, [pc, #192]	; (8014180 <tcp_rexmit_rto_prepare+0xd8>)
 80140be:	4831      	ldr	r0, [pc, #196]	; (8014184 <tcp_rexmit_rto_prepare+0xdc>)
 80140c0:	f004 f81c 	bl	80180fc <iprintf>

  if (pcb->unacked == NULL) {
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d102      	bne.n	80140d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80140cc:	f06f 0305 	mvn.w	r3, #5
 80140d0:	e050      	b.n	8014174 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140d6:	60fb      	str	r3, [r7, #12]
 80140d8:	e00b      	b.n	80140f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f7ff fee6 	bl	8013eac <tcp_output_segment_busy>
 80140e0:	4603      	mov	r3, r0
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d002      	beq.n	80140ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80140e6:	f06f 0305 	mvn.w	r3, #5
 80140ea:	e043      	b.n	8014174 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	60fb      	str	r3, [r7, #12]
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1ef      	bne.n	80140da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	f7ff fed6 	bl	8013eac <tcp_output_segment_busy>
 8014100:	4603      	mov	r3, r0
 8014102:	2b00      	cmp	r3, #0
 8014104:	d002      	beq.n	801410c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014106:	f06f 0305 	mvn.w	r3, #5
 801410a:	e033      	b.n	8014174 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2200      	movs	r2, #0
 8014120:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	8b5b      	ldrh	r3, [r3, #26]
 8014126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801412a:	b29a      	uxth	r2, r3
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	4618      	mov	r0, r3
 8014138:	f7f9 fb77 	bl	800d82a <lwip_htonl>
 801413c:	4604      	mov	r4, r0
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	891b      	ldrh	r3, [r3, #8]
 8014142:	461d      	mov	r5, r3
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	68db      	ldr	r3, [r3, #12]
 8014148:	899b      	ldrh	r3, [r3, #12]
 801414a:	b29b      	uxth	r3, r3
 801414c:	4618      	mov	r0, r3
 801414e:	f7f9 fb57 	bl	800d800 <lwip_htons>
 8014152:	4603      	mov	r3, r0
 8014154:	b2db      	uxtb	r3, r3
 8014156:	f003 0303 	and.w	r3, r3, #3
 801415a:	2b00      	cmp	r3, #0
 801415c:	d001      	beq.n	8014162 <tcp_rexmit_rto_prepare+0xba>
 801415e:	2301      	movs	r3, #1
 8014160:	e000      	b.n	8014164 <tcp_rexmit_rto_prepare+0xbc>
 8014162:	2300      	movs	r3, #0
 8014164:	442b      	add	r3, r5
 8014166:	18e2      	adds	r2, r4, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2200      	movs	r2, #0
 8014170:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bdb0      	pop	{r4, r5, r7, pc}
 801417c:	0801aad0 	.word	0x0801aad0
 8014180:	0801b10c 	.word	0x0801b10c
 8014184:	0801ab24 	.word	0x0801ab24

08014188 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d106      	bne.n	80141a4 <tcp_rexmit_rto_commit+0x1c>
 8014196:	4b0d      	ldr	r3, [pc, #52]	; (80141cc <tcp_rexmit_rto_commit+0x44>)
 8014198:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801419c:	490c      	ldr	r1, [pc, #48]	; (80141d0 <tcp_rexmit_rto_commit+0x48>)
 801419e:	480d      	ldr	r0, [pc, #52]	; (80141d4 <tcp_rexmit_rto_commit+0x4c>)
 80141a0:	f003 ffac 	bl	80180fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80141aa:	2bff      	cmp	r3, #255	; 0xff
 80141ac:	d007      	beq.n	80141be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80141b4:	3301      	adds	r3, #1
 80141b6:	b2da      	uxtb	r2, r3
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f7ff fc80 	bl	8013ac4 <tcp_output>
}
 80141c4:	bf00      	nop
 80141c6:	3708      	adds	r7, #8
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	0801aad0 	.word	0x0801aad0
 80141d0:	0801b130 	.word	0x0801b130
 80141d4:	0801ab24 	.word	0x0801ab24

080141d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d106      	bne.n	80141f4 <tcp_rexmit_rto+0x1c>
 80141e6:	4b0a      	ldr	r3, [pc, #40]	; (8014210 <tcp_rexmit_rto+0x38>)
 80141e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80141ec:	4909      	ldr	r1, [pc, #36]	; (8014214 <tcp_rexmit_rto+0x3c>)
 80141ee:	480a      	ldr	r0, [pc, #40]	; (8014218 <tcp_rexmit_rto+0x40>)
 80141f0:	f003 ff84 	bl	80180fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f7ff ff57 	bl	80140a8 <tcp_rexmit_rto_prepare>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d102      	bne.n	8014206 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f7ff ffc1 	bl	8014188 <tcp_rexmit_rto_commit>
  }
}
 8014206:	bf00      	nop
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	0801aad0 	.word	0x0801aad0
 8014214:	0801b154 	.word	0x0801b154
 8014218:	0801ab24 	.word	0x0801ab24

0801421c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801421c:	b590      	push	{r4, r7, lr}
 801421e:	b085      	sub	sp, #20
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d106      	bne.n	8014238 <tcp_rexmit+0x1c>
 801422a:	4b2f      	ldr	r3, [pc, #188]	; (80142e8 <tcp_rexmit+0xcc>)
 801422c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014230:	492e      	ldr	r1, [pc, #184]	; (80142ec <tcp_rexmit+0xd0>)
 8014232:	482f      	ldr	r0, [pc, #188]	; (80142f0 <tcp_rexmit+0xd4>)
 8014234:	f003 ff62 	bl	80180fc <iprintf>

  if (pcb->unacked == NULL) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801423c:	2b00      	cmp	r3, #0
 801423e:	d102      	bne.n	8014246 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014240:	f06f 0305 	mvn.w	r3, #5
 8014244:	e04c      	b.n	80142e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801424a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801424c:	68b8      	ldr	r0, [r7, #8]
 801424e:	f7ff fe2d 	bl	8013eac <tcp_output_segment_busy>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d002      	beq.n	801425e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014258:	f06f 0305 	mvn.w	r3, #5
 801425c:	e040      	b.n	80142e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	336c      	adds	r3, #108	; 0x6c
 801426a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801426c:	e002      	b.n	8014274 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d011      	beq.n	80142a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	68db      	ldr	r3, [r3, #12]
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	4618      	mov	r0, r3
 8014286:	f7f9 fad0 	bl	800d82a <lwip_htonl>
 801428a:	4604      	mov	r4, r0
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	685b      	ldr	r3, [r3, #4]
 8014292:	4618      	mov	r0, r3
 8014294:	f7f9 fac9 	bl	800d82a <lwip_htonl>
 8014298:	4603      	mov	r3, r0
 801429a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801429c:	2b00      	cmp	r3, #0
 801429e:	dbe6      	blt.n	801426e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	68ba      	ldr	r2, [r7, #8]
 80142ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d103      	bne.n	80142be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2200      	movs	r2, #0
 80142ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80142c4:	2bff      	cmp	r3, #255	; 0xff
 80142c6:	d007      	beq.n	80142d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80142ce:	3301      	adds	r3, #1
 80142d0:	b2da      	uxtb	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80142de:	2300      	movs	r3, #0
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3714      	adds	r7, #20
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd90      	pop	{r4, r7, pc}
 80142e8:	0801aad0 	.word	0x0801aad0
 80142ec:	0801b170 	.word	0x0801b170
 80142f0:	0801ab24 	.word	0x0801ab24

080142f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d106      	bne.n	8014310 <tcp_rexmit_fast+0x1c>
 8014302:	4b2a      	ldr	r3, [pc, #168]	; (80143ac <tcp_rexmit_fast+0xb8>)
 8014304:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014308:	4929      	ldr	r1, [pc, #164]	; (80143b0 <tcp_rexmit_fast+0xbc>)
 801430a:	482a      	ldr	r0, [pc, #168]	; (80143b4 <tcp_rexmit_fast+0xc0>)
 801430c:	f003 fef6 	bl	80180fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014314:	2b00      	cmp	r3, #0
 8014316:	d045      	beq.n	80143a4 <tcp_rexmit_fast+0xb0>
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	8b5b      	ldrh	r3, [r3, #26]
 801431c:	f003 0304 	and.w	r3, r3, #4
 8014320:	2b00      	cmp	r3, #0
 8014322:	d13f      	bne.n	80143a4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f7ff ff79 	bl	801421c <tcp_rexmit>
 801432a:	4603      	mov	r3, r0
 801432c:	2b00      	cmp	r3, #0
 801432e:	d139      	bne.n	80143a4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801433c:	4293      	cmp	r3, r2
 801433e:	bf28      	it	cs
 8014340:	4613      	movcs	r3, r2
 8014342:	b29b      	uxth	r3, r3
 8014344:	2b00      	cmp	r3, #0
 8014346:	da00      	bge.n	801434a <tcp_rexmit_fast+0x56>
 8014348:	3301      	adds	r3, #1
 801434a:	105b      	asrs	r3, r3, #1
 801434c:	b29a      	uxth	r2, r3
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801435a:	461a      	mov	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	429a      	cmp	r2, r3
 8014364:	d206      	bcs.n	8014374 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	b29a      	uxth	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801437e:	4619      	mov	r1, r3
 8014380:	0049      	lsls	r1, r1, #1
 8014382:	440b      	add	r3, r1
 8014384:	b29b      	uxth	r3, r3
 8014386:	4413      	add	r3, r2
 8014388:	b29a      	uxth	r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	8b5b      	ldrh	r3, [r3, #26]
 8014394:	f043 0304 	orr.w	r3, r3, #4
 8014398:	b29a      	uxth	r2, r3
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80143a4:	bf00      	nop
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	0801aad0 	.word	0x0801aad0
 80143b0:	0801b188 	.word	0x0801b188
 80143b4:	0801ab24 	.word	0x0801ab24

080143b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b086      	sub	sp, #24
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	607b      	str	r3, [r7, #4]
 80143c2:	460b      	mov	r3, r1
 80143c4:	817b      	strh	r3, [r7, #10]
 80143c6:	4613      	mov	r3, r2
 80143c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80143ca:	897a      	ldrh	r2, [r7, #10]
 80143cc:	893b      	ldrh	r3, [r7, #8]
 80143ce:	4413      	add	r3, r2
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	3314      	adds	r3, #20
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143da:	4619      	mov	r1, r3
 80143dc:	2022      	movs	r0, #34	; 0x22
 80143de:	f7fa fbf7 	bl	800ebd0 <pbuf_alloc>
 80143e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d04d      	beq.n	8014486 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80143ea:	897b      	ldrh	r3, [r7, #10]
 80143ec:	3313      	adds	r3, #19
 80143ee:	697a      	ldr	r2, [r7, #20]
 80143f0:	8952      	ldrh	r2, [r2, #10]
 80143f2:	4293      	cmp	r3, r2
 80143f4:	db06      	blt.n	8014404 <tcp_output_alloc_header_common+0x4c>
 80143f6:	4b26      	ldr	r3, [pc, #152]	; (8014490 <tcp_output_alloc_header_common+0xd8>)
 80143f8:	f240 7223 	movw	r2, #1827	; 0x723
 80143fc:	4925      	ldr	r1, [pc, #148]	; (8014494 <tcp_output_alloc_header_common+0xdc>)
 80143fe:	4826      	ldr	r0, [pc, #152]	; (8014498 <tcp_output_alloc_header_common+0xe0>)
 8014400:	f003 fe7c 	bl	80180fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801440a:	8c3b      	ldrh	r3, [r7, #32]
 801440c:	4618      	mov	r0, r3
 801440e:	f7f9 f9f7 	bl	800d800 <lwip_htons>
 8014412:	4603      	mov	r3, r0
 8014414:	461a      	mov	r2, r3
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801441a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801441c:	4618      	mov	r0, r3
 801441e:	f7f9 f9ef 	bl	800d800 <lwip_htons>
 8014422:	4603      	mov	r3, r0
 8014424:	461a      	mov	r2, r3
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801442a:	693b      	ldr	r3, [r7, #16]
 801442c:	687a      	ldr	r2, [r7, #4]
 801442e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014430:	68f8      	ldr	r0, [r7, #12]
 8014432:	f7f9 f9fa 	bl	800d82a <lwip_htonl>
 8014436:	4602      	mov	r2, r0
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801443c:	897b      	ldrh	r3, [r7, #10]
 801443e:	089b      	lsrs	r3, r3, #2
 8014440:	b29b      	uxth	r3, r3
 8014442:	3305      	adds	r3, #5
 8014444:	b29b      	uxth	r3, r3
 8014446:	031b      	lsls	r3, r3, #12
 8014448:	b29a      	uxth	r2, r3
 801444a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801444e:	b29b      	uxth	r3, r3
 8014450:	4313      	orrs	r3, r2
 8014452:	b29b      	uxth	r3, r3
 8014454:	4618      	mov	r0, r3
 8014456:	f7f9 f9d3 	bl	800d800 <lwip_htons>
 801445a:	4603      	mov	r3, r0
 801445c:	461a      	mov	r2, r3
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014462:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014464:	4618      	mov	r0, r3
 8014466:	f7f9 f9cb 	bl	800d800 <lwip_htons>
 801446a:	4603      	mov	r3, r0
 801446c:	461a      	mov	r2, r3
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	2200      	movs	r2, #0
 8014476:	741a      	strb	r2, [r3, #16]
 8014478:	2200      	movs	r2, #0
 801447a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	2200      	movs	r2, #0
 8014480:	749a      	strb	r2, [r3, #18]
 8014482:	2200      	movs	r2, #0
 8014484:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014486:	697b      	ldr	r3, [r7, #20]
}
 8014488:	4618      	mov	r0, r3
 801448a:	3718      	adds	r7, #24
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	0801aad0 	.word	0x0801aad0
 8014494:	0801b1a8 	.word	0x0801b1a8
 8014498:	0801ab24 	.word	0x0801ab24

0801449c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801449c:	b5b0      	push	{r4, r5, r7, lr}
 801449e:	b08a      	sub	sp, #40	; 0x28
 80144a0:	af04      	add	r7, sp, #16
 80144a2:	60f8      	str	r0, [r7, #12]
 80144a4:	607b      	str	r3, [r7, #4]
 80144a6:	460b      	mov	r3, r1
 80144a8:	817b      	strh	r3, [r7, #10]
 80144aa:	4613      	mov	r3, r2
 80144ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d106      	bne.n	80144c2 <tcp_output_alloc_header+0x26>
 80144b4:	4b15      	ldr	r3, [pc, #84]	; (801450c <tcp_output_alloc_header+0x70>)
 80144b6:	f240 7242 	movw	r2, #1858	; 0x742
 80144ba:	4915      	ldr	r1, [pc, #84]	; (8014510 <tcp_output_alloc_header+0x74>)
 80144bc:	4815      	ldr	r0, [pc, #84]	; (8014514 <tcp_output_alloc_header+0x78>)
 80144be:	f003 fe1d 	bl	80180fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	8adb      	ldrh	r3, [r3, #22]
 80144ca:	68fa      	ldr	r2, [r7, #12]
 80144cc:	8b12      	ldrh	r2, [r2, #24]
 80144ce:	68f9      	ldr	r1, [r7, #12]
 80144d0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80144d2:	893d      	ldrh	r5, [r7, #8]
 80144d4:	897c      	ldrh	r4, [r7, #10]
 80144d6:	9103      	str	r1, [sp, #12]
 80144d8:	2110      	movs	r1, #16
 80144da:	9102      	str	r1, [sp, #8]
 80144dc:	9201      	str	r2, [sp, #4]
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	462a      	mov	r2, r5
 80144e4:	4621      	mov	r1, r4
 80144e6:	f7ff ff67 	bl	80143b8 <tcp_output_alloc_header_common>
 80144ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d006      	beq.n	8014500 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144f6:	68fa      	ldr	r2, [r7, #12]
 80144f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80144fa:	441a      	add	r2, r3
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014500:	697b      	ldr	r3, [r7, #20]
}
 8014502:	4618      	mov	r0, r3
 8014504:	3718      	adds	r7, #24
 8014506:	46bd      	mov	sp, r7
 8014508:	bdb0      	pop	{r4, r5, r7, pc}
 801450a:	bf00      	nop
 801450c:	0801aad0 	.word	0x0801aad0
 8014510:	0801b1d8 	.word	0x0801b1d8
 8014514:	0801ab24 	.word	0x0801ab24

08014518 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b088      	sub	sp, #32
 801451c:	af00      	add	r7, sp, #0
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	60b9      	str	r1, [r7, #8]
 8014522:	4611      	mov	r1, r2
 8014524:	461a      	mov	r2, r3
 8014526:	460b      	mov	r3, r1
 8014528:	71fb      	strb	r3, [r7, #7]
 801452a:	4613      	mov	r3, r2
 801452c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801452e:	2300      	movs	r3, #0
 8014530:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d106      	bne.n	8014546 <tcp_output_fill_options+0x2e>
 8014538:	4b13      	ldr	r3, [pc, #76]	; (8014588 <tcp_output_fill_options+0x70>)
 801453a:	f240 7256 	movw	r2, #1878	; 0x756
 801453e:	4913      	ldr	r1, [pc, #76]	; (801458c <tcp_output_fill_options+0x74>)
 8014540:	4813      	ldr	r0, [pc, #76]	; (8014590 <tcp_output_fill_options+0x78>)
 8014542:	f003 fddb 	bl	80180fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801454c:	69bb      	ldr	r3, [r7, #24]
 801454e:	3314      	adds	r3, #20
 8014550:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014552:	69bb      	ldr	r3, [r7, #24]
 8014554:	f103 0214 	add.w	r2, r3, #20
 8014558:	8bfb      	ldrh	r3, [r7, #30]
 801455a:	009b      	lsls	r3, r3, #2
 801455c:	4619      	mov	r1, r3
 801455e:	79fb      	ldrb	r3, [r7, #7]
 8014560:	009b      	lsls	r3, r3, #2
 8014562:	f003 0304 	and.w	r3, r3, #4
 8014566:	440b      	add	r3, r1
 8014568:	4413      	add	r3, r2
 801456a:	697a      	ldr	r2, [r7, #20]
 801456c:	429a      	cmp	r2, r3
 801456e:	d006      	beq.n	801457e <tcp_output_fill_options+0x66>
 8014570:	4b05      	ldr	r3, [pc, #20]	; (8014588 <tcp_output_fill_options+0x70>)
 8014572:	f240 7275 	movw	r2, #1909	; 0x775
 8014576:	4907      	ldr	r1, [pc, #28]	; (8014594 <tcp_output_fill_options+0x7c>)
 8014578:	4805      	ldr	r0, [pc, #20]	; (8014590 <tcp_output_fill_options+0x78>)
 801457a:	f003 fdbf 	bl	80180fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801457e:	bf00      	nop
 8014580:	3720      	adds	r7, #32
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	0801aad0 	.word	0x0801aad0
 801458c:	0801b200 	.word	0x0801b200
 8014590:	0801ab24 	.word	0x0801ab24
 8014594:	0801b0f8 	.word	0x0801b0f8

08014598 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b08a      	sub	sp, #40	; 0x28
 801459c:	af04      	add	r7, sp, #16
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	607a      	str	r2, [r7, #4]
 80145a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d106      	bne.n	80145ba <tcp_output_control_segment+0x22>
 80145ac:	4b1c      	ldr	r3, [pc, #112]	; (8014620 <tcp_output_control_segment+0x88>)
 80145ae:	f240 7287 	movw	r2, #1927	; 0x787
 80145b2:	491c      	ldr	r1, [pc, #112]	; (8014624 <tcp_output_control_segment+0x8c>)
 80145b4:	481c      	ldr	r0, [pc, #112]	; (8014628 <tcp_output_control_segment+0x90>)
 80145b6:	f003 fda1 	bl	80180fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80145ba:	683a      	ldr	r2, [r7, #0]
 80145bc:	6879      	ldr	r1, [r7, #4]
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f7fe ff40 	bl	8013444 <tcp_route>
 80145c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d102      	bne.n	80145d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80145cc:	23fc      	movs	r3, #252	; 0xfc
 80145ce:	75fb      	strb	r3, [r7, #23]
 80145d0:	e01c      	b.n	801460c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d006      	beq.n	80145e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	7adb      	ldrb	r3, [r3, #11]
 80145dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	7a9b      	ldrb	r3, [r3, #10]
 80145e2:	757b      	strb	r3, [r7, #21]
 80145e4:	e003      	b.n	80145ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80145e6:	23ff      	movs	r3, #255	; 0xff
 80145e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80145ea:	2300      	movs	r3, #0
 80145ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80145ee:	7dba      	ldrb	r2, [r7, #22]
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	9302      	str	r3, [sp, #8]
 80145f4:	2306      	movs	r3, #6
 80145f6:	9301      	str	r3, [sp, #4]
 80145f8:	7d7b      	ldrb	r3, [r7, #21]
 80145fa:	9300      	str	r3, [sp, #0]
 80145fc:	4613      	mov	r3, r2
 80145fe:	683a      	ldr	r2, [r7, #0]
 8014600:	6879      	ldr	r1, [r7, #4]
 8014602:	68b8      	ldr	r0, [r7, #8]
 8014604:	f002 fbf4 	bl	8016df0 <ip4_output_if>
 8014608:	4603      	mov	r3, r0
 801460a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801460c:	68b8      	ldr	r0, [r7, #8]
 801460e:	f7fa fdc3 	bl	800f198 <pbuf_free>
  return err;
 8014612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014616:	4618      	mov	r0, r3
 8014618:	3718      	adds	r7, #24
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	0801aad0 	.word	0x0801aad0
 8014624:	0801b228 	.word	0x0801b228
 8014628:	0801ab24 	.word	0x0801ab24

0801462c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801462c:	b590      	push	{r4, r7, lr}
 801462e:	b08b      	sub	sp, #44	; 0x2c
 8014630:	af04      	add	r7, sp, #16
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	60b9      	str	r1, [r7, #8]
 8014636:	607a      	str	r2, [r7, #4]
 8014638:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d106      	bne.n	801464e <tcp_rst+0x22>
 8014640:	4b1f      	ldr	r3, [pc, #124]	; (80146c0 <tcp_rst+0x94>)
 8014642:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014646:	491f      	ldr	r1, [pc, #124]	; (80146c4 <tcp_rst+0x98>)
 8014648:	481f      	ldr	r0, [pc, #124]	; (80146c8 <tcp_rst+0x9c>)
 801464a:	f003 fd57 	bl	80180fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014650:	2b00      	cmp	r3, #0
 8014652:	d106      	bne.n	8014662 <tcp_rst+0x36>
 8014654:	4b1a      	ldr	r3, [pc, #104]	; (80146c0 <tcp_rst+0x94>)
 8014656:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801465a:	491c      	ldr	r1, [pc, #112]	; (80146cc <tcp_rst+0xa0>)
 801465c:	481a      	ldr	r0, [pc, #104]	; (80146c8 <tcp_rst+0x9c>)
 801465e:	f003 fd4d 	bl	80180fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014662:	2300      	movs	r3, #0
 8014664:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014666:	f246 0308 	movw	r3, #24584	; 0x6008
 801466a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801466c:	7dfb      	ldrb	r3, [r7, #23]
 801466e:	b29c      	uxth	r4, r3
 8014670:	68b8      	ldr	r0, [r7, #8]
 8014672:	f7f9 f8da 	bl	800d82a <lwip_htonl>
 8014676:	4602      	mov	r2, r0
 8014678:	8abb      	ldrh	r3, [r7, #20]
 801467a:	9303      	str	r3, [sp, #12]
 801467c:	2314      	movs	r3, #20
 801467e:	9302      	str	r3, [sp, #8]
 8014680:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014682:	9301      	str	r3, [sp, #4]
 8014684:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014686:	9300      	str	r3, [sp, #0]
 8014688:	4613      	mov	r3, r2
 801468a:	2200      	movs	r2, #0
 801468c:	4621      	mov	r1, r4
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f7ff fe92 	bl	80143b8 <tcp_output_alloc_header_common>
 8014694:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d00c      	beq.n	80146b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801469c:	7dfb      	ldrb	r3, [r7, #23]
 801469e:	2200      	movs	r2, #0
 80146a0:	6939      	ldr	r1, [r7, #16]
 80146a2:	68f8      	ldr	r0, [r7, #12]
 80146a4:	f7ff ff38 	bl	8014518 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80146a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146aa:	683a      	ldr	r2, [r7, #0]
 80146ac:	6939      	ldr	r1, [r7, #16]
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f7ff ff72 	bl	8014598 <tcp_output_control_segment>
 80146b4:	e000      	b.n	80146b8 <tcp_rst+0x8c>
    return;
 80146b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80146b8:	371c      	adds	r7, #28
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd90      	pop	{r4, r7, pc}
 80146be:	bf00      	nop
 80146c0:	0801aad0 	.word	0x0801aad0
 80146c4:	0801b254 	.word	0x0801b254
 80146c8:	0801ab24 	.word	0x0801ab24
 80146cc:	0801b270 	.word	0x0801b270

080146d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80146d0:	b590      	push	{r4, r7, lr}
 80146d2:	b087      	sub	sp, #28
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80146d8:	2300      	movs	r3, #0
 80146da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d106      	bne.n	80146f4 <tcp_send_empty_ack+0x24>
 80146e6:	4b28      	ldr	r3, [pc, #160]	; (8014788 <tcp_send_empty_ack+0xb8>)
 80146e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80146ec:	4927      	ldr	r1, [pc, #156]	; (801478c <tcp_send_empty_ack+0xbc>)
 80146ee:	4828      	ldr	r0, [pc, #160]	; (8014790 <tcp_send_empty_ack+0xc0>)
 80146f0:	f003 fd04 	bl	80180fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80146f4:	7dfb      	ldrb	r3, [r7, #23]
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	f003 0304 	and.w	r3, r3, #4
 80146fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014700:	7d7b      	ldrb	r3, [r7, #21]
 8014702:	b29c      	uxth	r4, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014708:	4618      	mov	r0, r3
 801470a:	f7f9 f88e 	bl	800d82a <lwip_htonl>
 801470e:	4603      	mov	r3, r0
 8014710:	2200      	movs	r2, #0
 8014712:	4621      	mov	r1, r4
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7ff fec1 	bl	801449c <tcp_output_alloc_header>
 801471a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d109      	bne.n	8014736 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	8b5b      	ldrh	r3, [r3, #26]
 8014726:	f043 0303 	orr.w	r3, r3, #3
 801472a:	b29a      	uxth	r2, r3
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014730:	f06f 0301 	mvn.w	r3, #1
 8014734:	e023      	b.n	801477e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014736:	7dbb      	ldrb	r3, [r7, #22]
 8014738:	7dfa      	ldrb	r2, [r7, #23]
 801473a:	6939      	ldr	r1, [r7, #16]
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f7ff feeb 	bl	8014518 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	3304      	adds	r3, #4
 8014748:	6939      	ldr	r1, [r7, #16]
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f7ff ff24 	bl	8014598 <tcp_output_control_segment>
 8014750:	4603      	mov	r3, r0
 8014752:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d007      	beq.n	801476c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	8b5b      	ldrh	r3, [r3, #26]
 8014760:	f043 0303 	orr.w	r3, r3, #3
 8014764:	b29a      	uxth	r2, r3
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	835a      	strh	r2, [r3, #26]
 801476a:	e006      	b.n	801477a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	8b5b      	ldrh	r3, [r3, #26]
 8014770:	f023 0303 	bic.w	r3, r3, #3
 8014774:	b29a      	uxth	r2, r3
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801477a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801477e:	4618      	mov	r0, r3
 8014780:	371c      	adds	r7, #28
 8014782:	46bd      	mov	sp, r7
 8014784:	bd90      	pop	{r4, r7, pc}
 8014786:	bf00      	nop
 8014788:	0801aad0 	.word	0x0801aad0
 801478c:	0801b28c 	.word	0x0801b28c
 8014790:	0801ab24 	.word	0x0801ab24

08014794 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014794:	b590      	push	{r4, r7, lr}
 8014796:	b087      	sub	sp, #28
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801479c:	2300      	movs	r3, #0
 801479e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_keepalive+0x20>
 80147a6:	4b18      	ldr	r3, [pc, #96]	; (8014808 <tcp_keepalive+0x74>)
 80147a8:	f640 0224 	movw	r2, #2084	; 0x824
 80147ac:	4917      	ldr	r1, [pc, #92]	; (801480c <tcp_keepalive+0x78>)
 80147ae:	4818      	ldr	r0, [pc, #96]	; (8014810 <tcp_keepalive+0x7c>)
 80147b0:	f003 fca4 	bl	80180fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80147b4:	7dfb      	ldrb	r3, [r7, #23]
 80147b6:	b29c      	uxth	r4, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147bc:	3b01      	subs	r3, #1
 80147be:	4618      	mov	r0, r3
 80147c0:	f7f9 f833 	bl	800d82a <lwip_htonl>
 80147c4:	4603      	mov	r3, r0
 80147c6:	2200      	movs	r2, #0
 80147c8:	4621      	mov	r1, r4
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f7ff fe66 	bl	801449c <tcp_output_alloc_header>
 80147d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d102      	bne.n	80147de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80147d8:	f04f 33ff 	mov.w	r3, #4294967295
 80147dc:	e010      	b.n	8014800 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80147de:	7dfb      	ldrb	r3, [r7, #23]
 80147e0:	2200      	movs	r2, #0
 80147e2:	6939      	ldr	r1, [r7, #16]
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f7ff fe97 	bl	8014518 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	3304      	adds	r3, #4
 80147f0:	6939      	ldr	r1, [r7, #16]
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f7ff fed0 	bl	8014598 <tcp_output_control_segment>
 80147f8:	4603      	mov	r3, r0
 80147fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80147fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014800:	4618      	mov	r0, r3
 8014802:	371c      	adds	r7, #28
 8014804:	46bd      	mov	sp, r7
 8014806:	bd90      	pop	{r4, r7, pc}
 8014808:	0801aad0 	.word	0x0801aad0
 801480c:	0801b2ac 	.word	0x0801b2ac
 8014810:	0801ab24 	.word	0x0801ab24

08014814 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014814:	b590      	push	{r4, r7, lr}
 8014816:	b08b      	sub	sp, #44	; 0x2c
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801481c:	2300      	movs	r3, #0
 801481e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d106      	bne.n	8014836 <tcp_zero_window_probe+0x22>
 8014828:	4b4c      	ldr	r3, [pc, #304]	; (801495c <tcp_zero_window_probe+0x148>)
 801482a:	f640 024f 	movw	r2, #2127	; 0x84f
 801482e:	494c      	ldr	r1, [pc, #304]	; (8014960 <tcp_zero_window_probe+0x14c>)
 8014830:	484c      	ldr	r0, [pc, #304]	; (8014964 <tcp_zero_window_probe+0x150>)
 8014832:	f003 fc63 	bl	80180fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801483a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801483c:	6a3b      	ldr	r3, [r7, #32]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d101      	bne.n	8014846 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014842:	2300      	movs	r3, #0
 8014844:	e086      	b.n	8014954 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801484c:	2bff      	cmp	r3, #255	; 0xff
 801484e:	d007      	beq.n	8014860 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8014856:	3301      	adds	r3, #1
 8014858:	b2da      	uxtb	r2, r3
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014860:	6a3b      	ldr	r3, [r7, #32]
 8014862:	68db      	ldr	r3, [r3, #12]
 8014864:	899b      	ldrh	r3, [r3, #12]
 8014866:	b29b      	uxth	r3, r3
 8014868:	4618      	mov	r0, r3
 801486a:	f7f8 ffc9 	bl	800d800 <lwip_htons>
 801486e:	4603      	mov	r3, r0
 8014870:	b2db      	uxtb	r3, r3
 8014872:	f003 0301 	and.w	r3, r3, #1
 8014876:	2b00      	cmp	r3, #0
 8014878:	d005      	beq.n	8014886 <tcp_zero_window_probe+0x72>
 801487a:	6a3b      	ldr	r3, [r7, #32]
 801487c:	891b      	ldrh	r3, [r3, #8]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d101      	bne.n	8014886 <tcp_zero_window_probe+0x72>
 8014882:	2301      	movs	r3, #1
 8014884:	e000      	b.n	8014888 <tcp_zero_window_probe+0x74>
 8014886:	2300      	movs	r3, #0
 8014888:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801488a:	7ffb      	ldrb	r3, [r7, #31]
 801488c:	2b00      	cmp	r3, #0
 801488e:	bf0c      	ite	eq
 8014890:	2301      	moveq	r3, #1
 8014892:	2300      	movne	r3, #0
 8014894:	b2db      	uxtb	r3, r3
 8014896:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801489c:	b299      	uxth	r1, r3
 801489e:	6a3b      	ldr	r3, [r7, #32]
 80148a0:	68db      	ldr	r3, [r3, #12]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	8bba      	ldrh	r2, [r7, #28]
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7ff fdf8 	bl	801449c <tcp_output_alloc_header>
 80148ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80148ae:	69bb      	ldr	r3, [r7, #24]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d102      	bne.n	80148ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80148b4:	f04f 33ff 	mov.w	r3, #4294967295
 80148b8:	e04c      	b.n	8014954 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80148c0:	7ffb      	ldrb	r3, [r7, #31]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d011      	beq.n	80148ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	899b      	ldrh	r3, [r3, #12]
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	b21b      	sxth	r3, r3
 80148ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80148d2:	b21c      	sxth	r4, r3
 80148d4:	2011      	movs	r0, #17
 80148d6:	f7f8 ff93 	bl	800d800 <lwip_htons>
 80148da:	4603      	mov	r3, r0
 80148dc:	b21b      	sxth	r3, r3
 80148de:	4323      	orrs	r3, r4
 80148e0:	b21b      	sxth	r3, r3
 80148e2:	b29a      	uxth	r2, r3
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	819a      	strh	r2, [r3, #12]
 80148e8:	e010      	b.n	801490c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	3314      	adds	r3, #20
 80148f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80148f2:	6a3b      	ldr	r3, [r7, #32]
 80148f4:	6858      	ldr	r0, [r3, #4]
 80148f6:	6a3b      	ldr	r3, [r7, #32]
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	891a      	ldrh	r2, [r3, #8]
 80148fc:	6a3b      	ldr	r3, [r7, #32]
 80148fe:	891b      	ldrh	r3, [r3, #8]
 8014900:	1ad3      	subs	r3, r2, r3
 8014902:	b29b      	uxth	r3, r3
 8014904:	2201      	movs	r2, #1
 8014906:	6939      	ldr	r1, [r7, #16]
 8014908:	f7fa fe4c 	bl	800f5a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801490c:	6a3b      	ldr	r3, [r7, #32]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	4618      	mov	r0, r3
 8014914:	f7f8 ff89 	bl	800d82a <lwip_htonl>
 8014918:	4603      	mov	r3, r0
 801491a:	3301      	adds	r3, #1
 801491c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	2b00      	cmp	r3, #0
 8014928:	da02      	bge.n	8014930 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	68fa      	ldr	r2, [r7, #12]
 801492e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014934:	2200      	movs	r2, #0
 8014936:	69b9      	ldr	r1, [r7, #24]
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7ff fded 	bl	8014518 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	3304      	adds	r3, #4
 8014944:	69b9      	ldr	r1, [r7, #24]
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f7ff fe26 	bl	8014598 <tcp_output_control_segment>
 801494c:	4603      	mov	r3, r0
 801494e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014950:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014954:	4618      	mov	r0, r3
 8014956:	372c      	adds	r7, #44	; 0x2c
 8014958:	46bd      	mov	sp, r7
 801495a:	bd90      	pop	{r4, r7, pc}
 801495c:	0801aad0 	.word	0x0801aad0
 8014960:	0801b2c8 	.word	0x0801b2c8
 8014964:	0801ab24 	.word	0x0801ab24

08014968 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014970:	f7fa ff02 	bl	800f778 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014974:	4b0a      	ldr	r3, [pc, #40]	; (80149a0 <tcpip_tcp_timer+0x38>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d103      	bne.n	8014984 <tcpip_tcp_timer+0x1c>
 801497c:	4b09      	ldr	r3, [pc, #36]	; (80149a4 <tcpip_tcp_timer+0x3c>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d005      	beq.n	8014990 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014984:	2200      	movs	r2, #0
 8014986:	4908      	ldr	r1, [pc, #32]	; (80149a8 <tcpip_tcp_timer+0x40>)
 8014988:	20fa      	movs	r0, #250	; 0xfa
 801498a:	f000 f8f3 	bl	8014b74 <sys_timeout>
 801498e:	e003      	b.n	8014998 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014990:	4b06      	ldr	r3, [pc, #24]	; (80149ac <tcpip_tcp_timer+0x44>)
 8014992:	2200      	movs	r2, #0
 8014994:	601a      	str	r2, [r3, #0]
  }
}
 8014996:	bf00      	nop
 8014998:	bf00      	nop
 801499a:	3708      	adds	r7, #8
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	24024e98 	.word	0x24024e98
 80149a4:	24024ea8 	.word	0x24024ea8
 80149a8:	08014969 	.word	0x08014969
 80149ac:	2402184c 	.word	0x2402184c

080149b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80149b4:	4b0a      	ldr	r3, [pc, #40]	; (80149e0 <tcp_timer_needed+0x30>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d10f      	bne.n	80149dc <tcp_timer_needed+0x2c>
 80149bc:	4b09      	ldr	r3, [pc, #36]	; (80149e4 <tcp_timer_needed+0x34>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d103      	bne.n	80149cc <tcp_timer_needed+0x1c>
 80149c4:	4b08      	ldr	r3, [pc, #32]	; (80149e8 <tcp_timer_needed+0x38>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d007      	beq.n	80149dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80149cc:	4b04      	ldr	r3, [pc, #16]	; (80149e0 <tcp_timer_needed+0x30>)
 80149ce:	2201      	movs	r2, #1
 80149d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80149d2:	2200      	movs	r2, #0
 80149d4:	4905      	ldr	r1, [pc, #20]	; (80149ec <tcp_timer_needed+0x3c>)
 80149d6:	20fa      	movs	r0, #250	; 0xfa
 80149d8:	f000 f8cc 	bl	8014b74 <sys_timeout>
  }
}
 80149dc:	bf00      	nop
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	2402184c 	.word	0x2402184c
 80149e4:	24024e98 	.word	0x24024e98
 80149e8:	24024ea8 	.word	0x24024ea8
 80149ec:	08014969 	.word	0x08014969

080149f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	60b9      	str	r1, [r7, #8]
 80149fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80149fc:	200b      	movs	r0, #11
 80149fe:	f7f9 fc8f 	bl	800e320 <memp_malloc>
 8014a02:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d109      	bne.n	8014a1e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d151      	bne.n	8014ab4 <sys_timeout_abs+0xc4>
 8014a10:	4b2a      	ldr	r3, [pc, #168]	; (8014abc <sys_timeout_abs+0xcc>)
 8014a12:	22be      	movs	r2, #190	; 0xbe
 8014a14:	492a      	ldr	r1, [pc, #168]	; (8014ac0 <sys_timeout_abs+0xd0>)
 8014a16:	482b      	ldr	r0, [pc, #172]	; (8014ac4 <sys_timeout_abs+0xd4>)
 8014a18:	f003 fb70 	bl	80180fc <iprintf>
    return;
 8014a1c:	e04a      	b.n	8014ab4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	2200      	movs	r2, #0
 8014a22:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	68ba      	ldr	r2, [r7, #8]
 8014a28:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	68fa      	ldr	r2, [r7, #12]
 8014a34:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014a36:	4b24      	ldr	r3, [pc, #144]	; (8014ac8 <sys_timeout_abs+0xd8>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d103      	bne.n	8014a46 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014a3e:	4a22      	ldr	r2, [pc, #136]	; (8014ac8 <sys_timeout_abs+0xd8>)
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	6013      	str	r3, [r2, #0]
    return;
 8014a44:	e037      	b.n	8014ab6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014a46:	693b      	ldr	r3, [r7, #16]
 8014a48:	685a      	ldr	r2, [r3, #4]
 8014a4a:	4b1f      	ldr	r3, [pc, #124]	; (8014ac8 <sys_timeout_abs+0xd8>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	0fdb      	lsrs	r3, r3, #31
 8014a54:	f003 0301 	and.w	r3, r3, #1
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d007      	beq.n	8014a6e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014a5e:	4b1a      	ldr	r3, [pc, #104]	; (8014ac8 <sys_timeout_abs+0xd8>)
 8014a60:	681a      	ldr	r2, [r3, #0]
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014a66:	4a18      	ldr	r2, [pc, #96]	; (8014ac8 <sys_timeout_abs+0xd8>)
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	6013      	str	r3, [r2, #0]
 8014a6c:	e023      	b.n	8014ab6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014a6e:	4b16      	ldr	r3, [pc, #88]	; (8014ac8 <sys_timeout_abs+0xd8>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	617b      	str	r3, [r7, #20]
 8014a74:	e01a      	b.n	8014aac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00b      	beq.n	8014a96 <sys_timeout_abs+0xa6>
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	685a      	ldr	r2, [r3, #4]
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	685b      	ldr	r3, [r3, #4]
 8014a88:	1ad3      	subs	r3, r2, r3
 8014a8a:	0fdb      	lsrs	r3, r3, #31
 8014a8c:	f003 0301 	and.w	r3, r3, #1
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d007      	beq.n	8014aa6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	681a      	ldr	r2, [r3, #0]
 8014a9a:	693b      	ldr	r3, [r7, #16]
 8014a9c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	693a      	ldr	r2, [r7, #16]
 8014aa2:	601a      	str	r2, [r3, #0]
        break;
 8014aa4:	e007      	b.n	8014ab6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	617b      	str	r3, [r7, #20]
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d1e1      	bne.n	8014a76 <sys_timeout_abs+0x86>
 8014ab2:	e000      	b.n	8014ab6 <sys_timeout_abs+0xc6>
    return;
 8014ab4:	bf00      	nop
      }
    }
  }
}
 8014ab6:	3718      	adds	r7, #24
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	0801b2ec 	.word	0x0801b2ec
 8014ac0:	0801b320 	.word	0x0801b320
 8014ac4:	0801b360 	.word	0x0801b360
 8014ac8:	24021844 	.word	0x24021844

08014acc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	4798      	blx	r3

  now = sys_now();
 8014ade:	f7f5 f82f 	bl	8009b40 <sys_now>
 8014ae2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	4b0f      	ldr	r3, [pc, #60]	; (8014b28 <lwip_cyclic_timer+0x5c>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	4413      	add	r3, r2
 8014aee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014af0:	68fa      	ldr	r2, [r7, #12]
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	1ad3      	subs	r3, r2, r3
 8014af6:	0fdb      	lsrs	r3, r3, #31
 8014af8:	f003 0301 	and.w	r3, r3, #1
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d009      	beq.n	8014b16 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	681a      	ldr	r2, [r3, #0]
 8014b06:	693b      	ldr	r3, [r7, #16]
 8014b08:	4413      	add	r3, r2
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	4907      	ldr	r1, [pc, #28]	; (8014b2c <lwip_cyclic_timer+0x60>)
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7ff ff6e 	bl	80149f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014b14:	e004      	b.n	8014b20 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	4904      	ldr	r1, [pc, #16]	; (8014b2c <lwip_cyclic_timer+0x60>)
 8014b1a:	68f8      	ldr	r0, [r7, #12]
 8014b1c:	f7ff ff68 	bl	80149f0 <sys_timeout_abs>
}
 8014b20:	bf00      	nop
 8014b22:	3718      	adds	r7, #24
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	24021848 	.word	0x24021848
 8014b2c:	08014acd 	.word	0x08014acd

08014b30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014b36:	2301      	movs	r3, #1
 8014b38:	607b      	str	r3, [r7, #4]
 8014b3a:	e00e      	b.n	8014b5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014b3c:	4a0b      	ldr	r2, [pc, #44]	; (8014b6c <sys_timeouts_init+0x3c>)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	00db      	lsls	r3, r3, #3
 8014b48:	4a08      	ldr	r2, [pc, #32]	; (8014b6c <sys_timeouts_init+0x3c>)
 8014b4a:	4413      	add	r3, r2
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	4908      	ldr	r1, [pc, #32]	; (8014b70 <sys_timeouts_init+0x40>)
 8014b50:	f000 f810 	bl	8014b74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	3301      	adds	r3, #1
 8014b58:	607b      	str	r3, [r7, #4]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2b02      	cmp	r3, #2
 8014b5e:	d9ed      	bls.n	8014b3c <sys_timeouts_init+0xc>
  }
}
 8014b60:	bf00      	nop
 8014b62:	bf00      	nop
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	0801bf58 	.word	0x0801bf58
 8014b70:	08014acd 	.word	0x08014acd

08014b74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b086      	sub	sp, #24
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014b86:	d306      	bcc.n	8014b96 <sys_timeout+0x22>
 8014b88:	4b0a      	ldr	r3, [pc, #40]	; (8014bb4 <sys_timeout+0x40>)
 8014b8a:	f240 1229 	movw	r2, #297	; 0x129
 8014b8e:	490a      	ldr	r1, [pc, #40]	; (8014bb8 <sys_timeout+0x44>)
 8014b90:	480a      	ldr	r0, [pc, #40]	; (8014bbc <sys_timeout+0x48>)
 8014b92:	f003 fab3 	bl	80180fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014b96:	f7f4 ffd3 	bl	8009b40 <sys_now>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014ba2:	687a      	ldr	r2, [r7, #4]
 8014ba4:	68b9      	ldr	r1, [r7, #8]
 8014ba6:	6978      	ldr	r0, [r7, #20]
 8014ba8:	f7ff ff22 	bl	80149f0 <sys_timeout_abs>
#endif
}
 8014bac:	bf00      	nop
 8014bae:	3718      	adds	r7, #24
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}
 8014bb4:	0801b2ec 	.word	0x0801b2ec
 8014bb8:	0801b388 	.word	0x0801b388
 8014bbc:	0801b360 	.word	0x0801b360

08014bc0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014bc6:	f7f4 ffbb 	bl	8009b40 <sys_now>
 8014bca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014bcc:	4b17      	ldr	r3, [pc, #92]	; (8014c2c <sys_check_timeouts+0x6c>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d022      	beq.n	8014c1e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	68fa      	ldr	r2, [r7, #12]
 8014bde:	1ad3      	subs	r3, r2, r3
 8014be0:	0fdb      	lsrs	r3, r3, #31
 8014be2:	f003 0301 	and.w	r3, r3, #1
 8014be6:	b2db      	uxtb	r3, r3
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d11a      	bne.n	8014c22 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	4a0e      	ldr	r2, [pc, #56]	; (8014c2c <sys_check_timeouts+0x6c>)
 8014bf2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	689b      	ldr	r3, [r3, #8]
 8014bf8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	685b      	ldr	r3, [r3, #4]
 8014c04:	4a0a      	ldr	r2, [pc, #40]	; (8014c30 <sys_check_timeouts+0x70>)
 8014c06:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014c08:	68b9      	ldr	r1, [r7, #8]
 8014c0a:	200b      	movs	r0, #11
 8014c0c:	f7f9 fbfe 	bl	800e40c <memp_free>
    if (handler != NULL) {
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d0da      	beq.n	8014bcc <sys_check_timeouts+0xc>
      handler(arg);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6838      	ldr	r0, [r7, #0]
 8014c1a:	4798      	blx	r3
  do {
 8014c1c:	e7d6      	b.n	8014bcc <sys_check_timeouts+0xc>
      return;
 8014c1e:	bf00      	nop
 8014c20:	e000      	b.n	8014c24 <sys_check_timeouts+0x64>
      return;
 8014c22:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014c24:	3710      	adds	r7, #16
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	24021844 	.word	0x24021844
 8014c30:	24021848 	.word	0x24021848

08014c34 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014c3a:	4b16      	ldr	r3, [pc, #88]	; (8014c94 <sys_timeouts_sleeptime+0x60>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d102      	bne.n	8014c48 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014c42:	f04f 33ff 	mov.w	r3, #4294967295
 8014c46:	e020      	b.n	8014c8a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014c48:	f7f4 ff7a 	bl	8009b40 <sys_now>
 8014c4c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014c4e:	4b11      	ldr	r3, [pc, #68]	; (8014c94 <sys_timeouts_sleeptime+0x60>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	685a      	ldr	r2, [r3, #4]
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	1ad3      	subs	r3, r2, r3
 8014c58:	0fdb      	lsrs	r3, r3, #31
 8014c5a:	f003 0301 	and.w	r3, r3, #1
 8014c5e:	b2db      	uxtb	r3, r3
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d001      	beq.n	8014c68 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014c64:	2300      	movs	r3, #0
 8014c66:	e010      	b.n	8014c8a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014c68:	4b0a      	ldr	r3, [pc, #40]	; (8014c94 <sys_timeouts_sleeptime+0x60>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	685a      	ldr	r2, [r3, #4]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	1ad3      	subs	r3, r2, r3
 8014c72:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	da06      	bge.n	8014c88 <sys_timeouts_sleeptime+0x54>
 8014c7a:	4b07      	ldr	r3, [pc, #28]	; (8014c98 <sys_timeouts_sleeptime+0x64>)
 8014c7c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014c80:	4906      	ldr	r1, [pc, #24]	; (8014c9c <sys_timeouts_sleeptime+0x68>)
 8014c82:	4807      	ldr	r0, [pc, #28]	; (8014ca0 <sys_timeouts_sleeptime+0x6c>)
 8014c84:	f003 fa3a 	bl	80180fc <iprintf>
    return ret;
 8014c88:	683b      	ldr	r3, [r7, #0]
  }
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3708      	adds	r7, #8
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop
 8014c94:	24021844 	.word	0x24021844
 8014c98:	0801b2ec 	.word	0x0801b2ec
 8014c9c:	0801b3c0 	.word	0x0801b3c0
 8014ca0:	0801b360 	.word	0x0801b360

08014ca4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014ca8:	4b04      	ldr	r3, [pc, #16]	; (8014cbc <udp_init+0x18>)
 8014caa:	f24e 22b8 	movw	r2, #58040	; 0xe2b8
 8014cae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014cb0:	bf00      	nop
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb8:	4770      	bx	lr
 8014cba:	bf00      	nop
 8014cbc:	24000030 	.word	0x24000030

08014cc0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014cca:	4b17      	ldr	r3, [pc, #92]	; (8014d28 <udp_new_port+0x68>)
 8014ccc:	881b      	ldrh	r3, [r3, #0]
 8014cce:	1c5a      	adds	r2, r3, #1
 8014cd0:	b291      	uxth	r1, r2
 8014cd2:	4a15      	ldr	r2, [pc, #84]	; (8014d28 <udp_new_port+0x68>)
 8014cd4:	8011      	strh	r1, [r2, #0]
 8014cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	d103      	bne.n	8014ce6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014cde:	4b12      	ldr	r3, [pc, #72]	; (8014d28 <udp_new_port+0x68>)
 8014ce0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014ce4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ce6:	4b11      	ldr	r3, [pc, #68]	; (8014d2c <udp_new_port+0x6c>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	603b      	str	r3, [r7, #0]
 8014cec:	e011      	b.n	8014d12 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	8a5a      	ldrh	r2, [r3, #18]
 8014cf2:	4b0d      	ldr	r3, [pc, #52]	; (8014d28 <udp_new_port+0x68>)
 8014cf4:	881b      	ldrh	r3, [r3, #0]
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d108      	bne.n	8014d0c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014cfa:	88fb      	ldrh	r3, [r7, #6]
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	80fb      	strh	r3, [r7, #6]
 8014d00:	88fb      	ldrh	r3, [r7, #6]
 8014d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d06:	d3e0      	bcc.n	8014cca <udp_new_port+0xa>
        return 0;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	e007      	b.n	8014d1c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	603b      	str	r3, [r7, #0]
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d1ea      	bne.n	8014cee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014d18:	4b03      	ldr	r3, [pc, #12]	; (8014d28 <udp_new_port+0x68>)
 8014d1a:	881b      	ldrh	r3, [r3, #0]
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	370c      	adds	r7, #12
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr
 8014d28:	24000030 	.word	0x24000030
 8014d2c:	24024eb0 	.word	0x24024eb0

08014d30 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b084      	sub	sp, #16
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	60f8      	str	r0, [r7, #12]
 8014d38:	60b9      	str	r1, [r7, #8]
 8014d3a:	4613      	mov	r3, r2
 8014d3c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d105      	bne.n	8014d50 <udp_input_local_match+0x20>
 8014d44:	4b27      	ldr	r3, [pc, #156]	; (8014de4 <udp_input_local_match+0xb4>)
 8014d46:	2287      	movs	r2, #135	; 0x87
 8014d48:	4927      	ldr	r1, [pc, #156]	; (8014de8 <udp_input_local_match+0xb8>)
 8014d4a:	4828      	ldr	r0, [pc, #160]	; (8014dec <udp_input_local_match+0xbc>)
 8014d4c:	f003 f9d6 	bl	80180fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d105      	bne.n	8014d62 <udp_input_local_match+0x32>
 8014d56:	4b23      	ldr	r3, [pc, #140]	; (8014de4 <udp_input_local_match+0xb4>)
 8014d58:	2288      	movs	r2, #136	; 0x88
 8014d5a:	4925      	ldr	r1, [pc, #148]	; (8014df0 <udp_input_local_match+0xc0>)
 8014d5c:	4823      	ldr	r0, [pc, #140]	; (8014dec <udp_input_local_match+0xbc>)
 8014d5e:	f003 f9cd 	bl	80180fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	7a1b      	ldrb	r3, [r3, #8]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00b      	beq.n	8014d82 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	7a1a      	ldrb	r2, [r3, #8]
 8014d6e:	4b21      	ldr	r3, [pc, #132]	; (8014df4 <udp_input_local_match+0xc4>)
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d76:	3301      	adds	r3, #1
 8014d78:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d001      	beq.n	8014d82 <udp_input_local_match+0x52>
    return 0;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	e02b      	b.n	8014dda <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014d82:	79fb      	ldrb	r3, [r7, #7]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d018      	beq.n	8014dba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d013      	beq.n	8014db6 <udp_input_local_match+0x86>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d00f      	beq.n	8014db6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014d96:	4b17      	ldr	r3, [pc, #92]	; (8014df4 <udp_input_local_match+0xc4>)
 8014d98:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d9e:	d00a      	beq.n	8014db6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	681a      	ldr	r2, [r3, #0]
 8014da4:	4b13      	ldr	r3, [pc, #76]	; (8014df4 <udp_input_local_match+0xc4>)
 8014da6:	695b      	ldr	r3, [r3, #20]
 8014da8:	405a      	eors	r2, r3
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	3308      	adds	r3, #8
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d110      	bne.n	8014dd8 <udp_input_local_match+0xa8>
          return 1;
 8014db6:	2301      	movs	r3, #1
 8014db8:	e00f      	b.n	8014dda <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d009      	beq.n	8014dd4 <udp_input_local_match+0xa4>
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d005      	beq.n	8014dd4 <udp_input_local_match+0xa4>
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	4b09      	ldr	r3, [pc, #36]	; (8014df4 <udp_input_local_match+0xc4>)
 8014dce:	695b      	ldr	r3, [r3, #20]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d101      	bne.n	8014dd8 <udp_input_local_match+0xa8>
        return 1;
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	e000      	b.n	8014dda <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014dd8:	2300      	movs	r3, #0
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3710      	adds	r7, #16
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	0801b3d4 	.word	0x0801b3d4
 8014de8:	0801b404 	.word	0x0801b404
 8014dec:	0801b428 	.word	0x0801b428
 8014df0:	0801b450 	.word	0x0801b450
 8014df4:	24021c8c 	.word	0x24021c8c

08014df8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014df8:	b590      	push	{r4, r7, lr}
 8014dfa:	b08d      	sub	sp, #52	; 0x34
 8014dfc:	af02      	add	r7, sp, #8
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014e02:	2300      	movs	r3, #0
 8014e04:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d105      	bne.n	8014e18 <udp_input+0x20>
 8014e0c:	4b7c      	ldr	r3, [pc, #496]	; (8015000 <udp_input+0x208>)
 8014e0e:	22cf      	movs	r2, #207	; 0xcf
 8014e10:	497c      	ldr	r1, [pc, #496]	; (8015004 <udp_input+0x20c>)
 8014e12:	487d      	ldr	r0, [pc, #500]	; (8015008 <udp_input+0x210>)
 8014e14:	f003 f972 	bl	80180fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d105      	bne.n	8014e2a <udp_input+0x32>
 8014e1e:	4b78      	ldr	r3, [pc, #480]	; (8015000 <udp_input+0x208>)
 8014e20:	22d0      	movs	r2, #208	; 0xd0
 8014e22:	497a      	ldr	r1, [pc, #488]	; (801500c <udp_input+0x214>)
 8014e24:	4878      	ldr	r0, [pc, #480]	; (8015008 <udp_input+0x210>)
 8014e26:	f003 f969 	bl	80180fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	895b      	ldrh	r3, [r3, #10]
 8014e2e:	2b07      	cmp	r3, #7
 8014e30:	d803      	bhi.n	8014e3a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7fa f9b0 	bl	800f198 <pbuf_free>
    goto end;
 8014e38:	e0de      	b.n	8014ff8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014e40:	4b73      	ldr	r3, [pc, #460]	; (8015010 <udp_input+0x218>)
 8014e42:	695b      	ldr	r3, [r3, #20]
 8014e44:	4a72      	ldr	r2, [pc, #456]	; (8015010 <udp_input+0x218>)
 8014e46:	6812      	ldr	r2, [r2, #0]
 8014e48:	4611      	mov	r1, r2
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f002 f8a8 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8014e50:	4603      	mov	r3, r0
 8014e52:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	881b      	ldrh	r3, [r3, #0]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7f8 fcd0 	bl	800d800 <lwip_htons>
 8014e60:	4603      	mov	r3, r0
 8014e62:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	885b      	ldrh	r3, [r3, #2]
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7f8 fcc8 	bl	800d800 <lwip_htons>
 8014e70:	4603      	mov	r3, r0
 8014e72:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014e74:	2300      	movs	r3, #0
 8014e76:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014e80:	4b64      	ldr	r3, [pc, #400]	; (8015014 <udp_input+0x21c>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	627b      	str	r3, [r7, #36]	; 0x24
 8014e86:	e054      	b.n	8014f32 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8a:	8a5b      	ldrh	r3, [r3, #18]
 8014e8c:	89fa      	ldrh	r2, [r7, #14]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d14a      	bne.n	8014f28 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014e92:	7cfb      	ldrb	r3, [r7, #19]
 8014e94:	461a      	mov	r2, r3
 8014e96:	6839      	ldr	r1, [r7, #0]
 8014e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e9a:	f7ff ff49 	bl	8014d30 <udp_input_local_match>
 8014e9e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d041      	beq.n	8014f28 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea6:	7c1b      	ldrb	r3, [r3, #16]
 8014ea8:	f003 0304 	and.w	r3, r3, #4
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d11d      	bne.n	8014eec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d102      	bne.n	8014ebc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb8:	61fb      	str	r3, [r7, #28]
 8014eba:	e017      	b.n	8014eec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014ebc:	7cfb      	ldrb	r3, [r7, #19]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d014      	beq.n	8014eec <udp_input+0xf4>
 8014ec2:	4b53      	ldr	r3, [pc, #332]	; (8015010 <udp_input+0x218>)
 8014ec4:	695b      	ldr	r3, [r3, #20]
 8014ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eca:	d10f      	bne.n	8014eec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014ecc:	69fb      	ldr	r3, [r7, #28]
 8014ece:	681a      	ldr	r2, [r3, #0]
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	3304      	adds	r3, #4
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d008      	beq.n	8014eec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014edc:	681a      	ldr	r2, [r3, #0]
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	3304      	adds	r3, #4
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d101      	bne.n	8014eec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eee:	8a9b      	ldrh	r3, [r3, #20]
 8014ef0:	8a3a      	ldrh	r2, [r7, #16]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d118      	bne.n	8014f28 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d005      	beq.n	8014f0a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f00:	685a      	ldr	r2, [r3, #4]
 8014f02:	4b43      	ldr	r3, [pc, #268]	; (8015010 <udp_input+0x218>)
 8014f04:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d10e      	bne.n	8014f28 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014f0a:	6a3b      	ldr	r3, [r7, #32]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d014      	beq.n	8014f3a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f12:	68da      	ldr	r2, [r3, #12]
 8014f14:	6a3b      	ldr	r3, [r7, #32]
 8014f16:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014f18:	4b3e      	ldr	r3, [pc, #248]	; (8015014 <udp_input+0x21c>)
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f1e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014f20:	4a3c      	ldr	r2, [pc, #240]	; (8015014 <udp_input+0x21c>)
 8014f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f24:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014f26:	e008      	b.n	8014f3a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2e:	68db      	ldr	r3, [r3, #12]
 8014f30:	627b      	str	r3, [r7, #36]	; 0x24
 8014f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d1a7      	bne.n	8014e88 <udp_input+0x90>
 8014f38:	e000      	b.n	8014f3c <udp_input+0x144>
        break;
 8014f3a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d101      	bne.n	8014f46 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014f42:	69fb      	ldr	r3, [r7, #28]
 8014f44:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d002      	beq.n	8014f52 <udp_input+0x15a>
    for_us = 1;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	76fb      	strb	r3, [r7, #27]
 8014f50:	e00a      	b.n	8014f68 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	3304      	adds	r3, #4
 8014f56:	681a      	ldr	r2, [r3, #0]
 8014f58:	4b2d      	ldr	r3, [pc, #180]	; (8015010 <udp_input+0x218>)
 8014f5a:	695b      	ldr	r3, [r3, #20]
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	bf0c      	ite	eq
 8014f60:	2301      	moveq	r3, #1
 8014f62:	2300      	movne	r3, #0
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014f68:	7efb      	ldrb	r3, [r7, #27]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d041      	beq.n	8014ff2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014f6e:	2108      	movs	r1, #8
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f7fa f88b 	bl	800f08c <pbuf_remove_header>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00a      	beq.n	8014f92 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014f7c:	4b20      	ldr	r3, [pc, #128]	; (8015000 <udp_input+0x208>)
 8014f7e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014f82:	4925      	ldr	r1, [pc, #148]	; (8015018 <udp_input+0x220>)
 8014f84:	4820      	ldr	r0, [pc, #128]	; (8015008 <udp_input+0x210>)
 8014f86:	f003 f8b9 	bl	80180fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f7fa f904 	bl	800f198 <pbuf_free>
      goto end;
 8014f90:	e032      	b.n	8014ff8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d012      	beq.n	8014fbe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f9a:	6a1b      	ldr	r3, [r3, #32]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d00a      	beq.n	8014fb6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa2:	6a1c      	ldr	r4, [r3, #32]
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014fa8:	8a3b      	ldrh	r3, [r7, #16]
 8014faa:	9300      	str	r3, [sp, #0]
 8014fac:	4b1b      	ldr	r3, [pc, #108]	; (801501c <udp_input+0x224>)
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014fb2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014fb4:	e021      	b.n	8014ffa <udp_input+0x202>
        pbuf_free(p);
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f7fa f8ee 	bl	800f198 <pbuf_free>
        goto end;
 8014fbc:	e01c      	b.n	8014ff8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014fbe:	7cfb      	ldrb	r3, [r7, #19]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d112      	bne.n	8014fea <udp_input+0x1f2>
 8014fc4:	4b12      	ldr	r3, [pc, #72]	; (8015010 <udp_input+0x218>)
 8014fc6:	695b      	ldr	r3, [r3, #20]
 8014fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014fcc:	2be0      	cmp	r3, #224	; 0xe0
 8014fce:	d00c      	beq.n	8014fea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014fd0:	4b0f      	ldr	r3, [pc, #60]	; (8015010 <udp_input+0x218>)
 8014fd2:	899b      	ldrh	r3, [r3, #12]
 8014fd4:	3308      	adds	r3, #8
 8014fd6:	b29b      	uxth	r3, r3
 8014fd8:	b21b      	sxth	r3, r3
 8014fda:	4619      	mov	r1, r3
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f7fa f8c8 	bl	800f172 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014fe2:	2103      	movs	r1, #3
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f001 fca3 	bl	8016930 <icmp_dest_unreach>
      pbuf_free(p);
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	f7fa f8d4 	bl	800f198 <pbuf_free>
  return;
 8014ff0:	e003      	b.n	8014ffa <udp_input+0x202>
    pbuf_free(p);
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f7fa f8d0 	bl	800f198 <pbuf_free>
  return;
 8014ff8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014ffa:	372c      	adds	r7, #44	; 0x2c
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd90      	pop	{r4, r7, pc}
 8015000:	0801b3d4 	.word	0x0801b3d4
 8015004:	0801b478 	.word	0x0801b478
 8015008:	0801b428 	.word	0x0801b428
 801500c:	0801b490 	.word	0x0801b490
 8015010:	24021c8c 	.word	0x24021c8c
 8015014:	24024eb0 	.word	0x24024eb0
 8015018:	0801b4ac 	.word	0x0801b4ac
 801501c:	24021c9c 	.word	0x24021c9c

08015020 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b082      	sub	sp, #8
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d109      	bne.n	8015044 <udp_send+0x24>
 8015030:	4b11      	ldr	r3, [pc, #68]	; (8015078 <udp_send+0x58>)
 8015032:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015036:	4911      	ldr	r1, [pc, #68]	; (801507c <udp_send+0x5c>)
 8015038:	4811      	ldr	r0, [pc, #68]	; (8015080 <udp_send+0x60>)
 801503a:	f003 f85f 	bl	80180fc <iprintf>
 801503e:	f06f 030f 	mvn.w	r3, #15
 8015042:	e015      	b.n	8015070 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d109      	bne.n	801505e <udp_send+0x3e>
 801504a:	4b0b      	ldr	r3, [pc, #44]	; (8015078 <udp_send+0x58>)
 801504c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015050:	490c      	ldr	r1, [pc, #48]	; (8015084 <udp_send+0x64>)
 8015052:	480b      	ldr	r0, [pc, #44]	; (8015080 <udp_send+0x60>)
 8015054:	f003 f852 	bl	80180fc <iprintf>
 8015058:	f06f 030f 	mvn.w	r3, #15
 801505c:	e008      	b.n	8015070 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	1d1a      	adds	r2, r3, #4
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	8a9b      	ldrh	r3, [r3, #20]
 8015066:	6839      	ldr	r1, [r7, #0]
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f000 f80d 	bl	8015088 <udp_sendto>
 801506e:	4603      	mov	r3, r0
}
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}
 8015078:	0801b3d4 	.word	0x0801b3d4
 801507c:	0801b4c8 	.word	0x0801b4c8
 8015080:	0801b428 	.word	0x0801b428
 8015084:	0801b4e0 	.word	0x0801b4e0

08015088 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b088      	sub	sp, #32
 801508c:	af02      	add	r7, sp, #8
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	607a      	str	r2, [r7, #4]
 8015094:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d109      	bne.n	80150b0 <udp_sendto+0x28>
 801509c:	4b36      	ldr	r3, [pc, #216]	; (8015178 <udp_sendto+0xf0>)
 801509e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80150a2:	4936      	ldr	r1, [pc, #216]	; (801517c <udp_sendto+0xf4>)
 80150a4:	4836      	ldr	r0, [pc, #216]	; (8015180 <udp_sendto+0xf8>)
 80150a6:	f003 f829 	bl	80180fc <iprintf>
 80150aa:	f06f 030f 	mvn.w	r3, #15
 80150ae:	e05e      	b.n	801516e <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d109      	bne.n	80150ca <udp_sendto+0x42>
 80150b6:	4b30      	ldr	r3, [pc, #192]	; (8015178 <udp_sendto+0xf0>)
 80150b8:	f240 2219 	movw	r2, #537	; 0x219
 80150bc:	4931      	ldr	r1, [pc, #196]	; (8015184 <udp_sendto+0xfc>)
 80150be:	4830      	ldr	r0, [pc, #192]	; (8015180 <udp_sendto+0xf8>)
 80150c0:	f003 f81c 	bl	80180fc <iprintf>
 80150c4:	f06f 030f 	mvn.w	r3, #15
 80150c8:	e051      	b.n	801516e <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d109      	bne.n	80150e4 <udp_sendto+0x5c>
 80150d0:	4b29      	ldr	r3, [pc, #164]	; (8015178 <udp_sendto+0xf0>)
 80150d2:	f240 221a 	movw	r2, #538	; 0x21a
 80150d6:	492c      	ldr	r1, [pc, #176]	; (8015188 <udp_sendto+0x100>)
 80150d8:	4829      	ldr	r0, [pc, #164]	; (8015180 <udp_sendto+0xf8>)
 80150da:	f003 f80f 	bl	80180fc <iprintf>
 80150de:	f06f 030f 	mvn.w	r3, #15
 80150e2:	e044      	b.n	801516e <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	7a1b      	ldrb	r3, [r3, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d006      	beq.n	80150fa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	7a1b      	ldrb	r3, [r3, #8]
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7f9 fcc3 	bl	800ea7c <netif_get_by_index>
 80150f6:	6178      	str	r0, [r7, #20]
 80150f8:	e029      	b.n	801514e <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 80150fa:	2300      	movs	r3, #0
 80150fc:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015106:	2be0      	cmp	r3, #224	; 0xe0
 8015108:	d11a      	bne.n	8015140 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	7f1b      	ldrb	r3, [r3, #28]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d006      	beq.n	8015120 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	7f1b      	ldrb	r3, [r3, #28]
 8015116:	4618      	mov	r0, r3
 8015118:	f7f9 fcb0 	bl	800ea7c <netif_get_by_index>
 801511c:	6178      	str	r0, [r7, #20]
 801511e:	e00f      	b.n	8015140 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	699b      	ldr	r3, [r3, #24]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d00b      	beq.n	8015140 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	699a      	ldr	r2, [r3, #24]
 801512c:	4b17      	ldr	r3, [pc, #92]	; (801518c <udp_sendto+0x104>)
 801512e:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8015130:	429a      	cmp	r2, r3
 8015132:	d005      	beq.n	8015140 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	3318      	adds	r3, #24
 8015138:	4618      	mov	r0, r3
 801513a:	f001 fc8d 	bl	8016a58 <ip4_route>
 801513e:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d103      	bne.n	801514e <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f001 fc86 	bl	8016a58 <ip4_route>
 801514c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d102      	bne.n	801515a <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015154:	f06f 0303 	mvn.w	r3, #3
 8015158:	e009      	b.n	801516e <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801515a:	887a      	ldrh	r2, [r7, #2]
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	9300      	str	r3, [sp, #0]
 8015160:	4613      	mov	r3, r2
 8015162:	687a      	ldr	r2, [r7, #4]
 8015164:	68b9      	ldr	r1, [r7, #8]
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f000 f812 	bl	8015190 <udp_sendto_if>
 801516c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801516e:	4618      	mov	r0, r3
 8015170:	3718      	adds	r7, #24
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	0801b3d4 	.word	0x0801b3d4
 801517c:	0801b4f8 	.word	0x0801b4f8
 8015180:	0801b428 	.word	0x0801b428
 8015184:	0801b510 	.word	0x0801b510
 8015188:	0801b52c 	.word	0x0801b52c
 801518c:	0801bf74 	.word	0x0801bf74

08015190 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b088      	sub	sp, #32
 8015194:	af02      	add	r7, sp, #8
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
 801519c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d109      	bne.n	80151b8 <udp_sendto_if+0x28>
 80151a4:	4b2e      	ldr	r3, [pc, #184]	; (8015260 <udp_sendto_if+0xd0>)
 80151a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151aa:	492e      	ldr	r1, [pc, #184]	; (8015264 <udp_sendto_if+0xd4>)
 80151ac:	482e      	ldr	r0, [pc, #184]	; (8015268 <udp_sendto_if+0xd8>)
 80151ae:	f002 ffa5 	bl	80180fc <iprintf>
 80151b2:	f06f 030f 	mvn.w	r3, #15
 80151b6:	e04f      	b.n	8015258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d109      	bne.n	80151d2 <udp_sendto_if+0x42>
 80151be:	4b28      	ldr	r3, [pc, #160]	; (8015260 <udp_sendto_if+0xd0>)
 80151c0:	f240 2281 	movw	r2, #641	; 0x281
 80151c4:	4929      	ldr	r1, [pc, #164]	; (801526c <udp_sendto_if+0xdc>)
 80151c6:	4828      	ldr	r0, [pc, #160]	; (8015268 <udp_sendto_if+0xd8>)
 80151c8:	f002 ff98 	bl	80180fc <iprintf>
 80151cc:	f06f 030f 	mvn.w	r3, #15
 80151d0:	e042      	b.n	8015258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d109      	bne.n	80151ec <udp_sendto_if+0x5c>
 80151d8:	4b21      	ldr	r3, [pc, #132]	; (8015260 <udp_sendto_if+0xd0>)
 80151da:	f240 2282 	movw	r2, #642	; 0x282
 80151de:	4924      	ldr	r1, [pc, #144]	; (8015270 <udp_sendto_if+0xe0>)
 80151e0:	4821      	ldr	r0, [pc, #132]	; (8015268 <udp_sendto_if+0xd8>)
 80151e2:	f002 ff8b 	bl	80180fc <iprintf>
 80151e6:	f06f 030f 	mvn.w	r3, #15
 80151ea:	e035      	b.n	8015258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80151ec:	6a3b      	ldr	r3, [r7, #32]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d109      	bne.n	8015206 <udp_sendto_if+0x76>
 80151f2:	4b1b      	ldr	r3, [pc, #108]	; (8015260 <udp_sendto_if+0xd0>)
 80151f4:	f240 2283 	movw	r2, #643	; 0x283
 80151f8:	491e      	ldr	r1, [pc, #120]	; (8015274 <udp_sendto_if+0xe4>)
 80151fa:	481b      	ldr	r0, [pc, #108]	; (8015268 <udp_sendto_if+0xd8>)
 80151fc:	f002 ff7e 	bl	80180fc <iprintf>
 8015200:	f06f 030f 	mvn.w	r3, #15
 8015204:	e028      	b.n	8015258 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d009      	beq.n	8015220 <udp_sendto_if+0x90>
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d005      	beq.n	8015220 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801521c:	2be0      	cmp	r3, #224	; 0xe0
 801521e:	d103      	bne.n	8015228 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015220:	6a3b      	ldr	r3, [r7, #32]
 8015222:	3304      	adds	r3, #4
 8015224:	617b      	str	r3, [r7, #20]
 8015226:	e00b      	b.n	8015240 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	6a3b      	ldr	r3, [r7, #32]
 801522e:	3304      	adds	r3, #4
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	429a      	cmp	r2, r3
 8015234:	d002      	beq.n	801523c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015236:	f06f 0303 	mvn.w	r3, #3
 801523a:	e00d      	b.n	8015258 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015240:	887a      	ldrh	r2, [r7, #2]
 8015242:	697b      	ldr	r3, [r7, #20]
 8015244:	9301      	str	r3, [sp, #4]
 8015246:	6a3b      	ldr	r3, [r7, #32]
 8015248:	9300      	str	r3, [sp, #0]
 801524a:	4613      	mov	r3, r2
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	68b9      	ldr	r1, [r7, #8]
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f000 f811 	bl	8015278 <udp_sendto_if_src>
 8015256:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015258:	4618      	mov	r0, r3
 801525a:	3718      	adds	r7, #24
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	0801b3d4 	.word	0x0801b3d4
 8015264:	0801b548 	.word	0x0801b548
 8015268:	0801b428 	.word	0x0801b428
 801526c:	0801b564 	.word	0x0801b564
 8015270:	0801b580 	.word	0x0801b580
 8015274:	0801b5a0 	.word	0x0801b5a0

08015278 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b08c      	sub	sp, #48	; 0x30
 801527c:	af04      	add	r7, sp, #16
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	607a      	str	r2, [r7, #4]
 8015284:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d109      	bne.n	80152a0 <udp_sendto_if_src+0x28>
 801528c:	4b73      	ldr	r3, [pc, #460]	; (801545c <udp_sendto_if_src+0x1e4>)
 801528e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015292:	4973      	ldr	r1, [pc, #460]	; (8015460 <udp_sendto_if_src+0x1e8>)
 8015294:	4873      	ldr	r0, [pc, #460]	; (8015464 <udp_sendto_if_src+0x1ec>)
 8015296:	f002 ff31 	bl	80180fc <iprintf>
 801529a:	f06f 030f 	mvn.w	r3, #15
 801529e:	e0d8      	b.n	8015452 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d109      	bne.n	80152ba <udp_sendto_if_src+0x42>
 80152a6:	4b6d      	ldr	r3, [pc, #436]	; (801545c <udp_sendto_if_src+0x1e4>)
 80152a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80152ac:	496e      	ldr	r1, [pc, #440]	; (8015468 <udp_sendto_if_src+0x1f0>)
 80152ae:	486d      	ldr	r0, [pc, #436]	; (8015464 <udp_sendto_if_src+0x1ec>)
 80152b0:	f002 ff24 	bl	80180fc <iprintf>
 80152b4:	f06f 030f 	mvn.w	r3, #15
 80152b8:	e0cb      	b.n	8015452 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d109      	bne.n	80152d4 <udp_sendto_if_src+0x5c>
 80152c0:	4b66      	ldr	r3, [pc, #408]	; (801545c <udp_sendto_if_src+0x1e4>)
 80152c2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80152c6:	4969      	ldr	r1, [pc, #420]	; (801546c <udp_sendto_if_src+0x1f4>)
 80152c8:	4866      	ldr	r0, [pc, #408]	; (8015464 <udp_sendto_if_src+0x1ec>)
 80152ca:	f002 ff17 	bl	80180fc <iprintf>
 80152ce:	f06f 030f 	mvn.w	r3, #15
 80152d2:	e0be      	b.n	8015452 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80152d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d109      	bne.n	80152ee <udp_sendto_if_src+0x76>
 80152da:	4b60      	ldr	r3, [pc, #384]	; (801545c <udp_sendto_if_src+0x1e4>)
 80152dc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80152e0:	4963      	ldr	r1, [pc, #396]	; (8015470 <udp_sendto_if_src+0x1f8>)
 80152e2:	4860      	ldr	r0, [pc, #384]	; (8015464 <udp_sendto_if_src+0x1ec>)
 80152e4:	f002 ff0a 	bl	80180fc <iprintf>
 80152e8:	f06f 030f 	mvn.w	r3, #15
 80152ec:	e0b1      	b.n	8015452 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80152ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d109      	bne.n	8015308 <udp_sendto_if_src+0x90>
 80152f4:	4b59      	ldr	r3, [pc, #356]	; (801545c <udp_sendto_if_src+0x1e4>)
 80152f6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80152fa:	495e      	ldr	r1, [pc, #376]	; (8015474 <udp_sendto_if_src+0x1fc>)
 80152fc:	4859      	ldr	r0, [pc, #356]	; (8015464 <udp_sendto_if_src+0x1ec>)
 80152fe:	f002 fefd 	bl	80180fc <iprintf>
 8015302:	f06f 030f 	mvn.w	r3, #15
 8015306:	e0a4      	b.n	8015452 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	8a5b      	ldrh	r3, [r3, #18]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d10f      	bne.n	8015330 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015310:	68f9      	ldr	r1, [r7, #12]
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	8a5b      	ldrh	r3, [r3, #18]
 8015316:	461a      	mov	r2, r3
 8015318:	68f8      	ldr	r0, [r7, #12]
 801531a:	f000 f8af 	bl	801547c <udp_bind>
 801531e:	4603      	mov	r3, r0
 8015320:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015322:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d002      	beq.n	8015330 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801532a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801532e:	e090      	b.n	8015452 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	891b      	ldrh	r3, [r3, #8]
 8015334:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015338:	4293      	cmp	r3, r2
 801533a:	d902      	bls.n	8015342 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801533c:	f04f 33ff 	mov.w	r3, #4294967295
 8015340:	e087      	b.n	8015452 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015342:	2108      	movs	r1, #8
 8015344:	68b8      	ldr	r0, [r7, #8]
 8015346:	f7f9 fe91 	bl	800f06c <pbuf_add_header>
 801534a:	4603      	mov	r3, r0
 801534c:	2b00      	cmp	r3, #0
 801534e:	d015      	beq.n	801537c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015350:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015354:	2108      	movs	r1, #8
 8015356:	2022      	movs	r0, #34	; 0x22
 8015358:	f7f9 fc3a 	bl	800ebd0 <pbuf_alloc>
 801535c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d102      	bne.n	801536a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015364:	f04f 33ff 	mov.w	r3, #4294967295
 8015368:	e073      	b.n	8015452 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	891b      	ldrh	r3, [r3, #8]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d006      	beq.n	8015380 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015372:	68b9      	ldr	r1, [r7, #8]
 8015374:	69f8      	ldr	r0, [r7, #28]
 8015376:	f7fa f833 	bl	800f3e0 <pbuf_chain>
 801537a:	e001      	b.n	8015380 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	895b      	ldrh	r3, [r3, #10]
 8015384:	2b07      	cmp	r3, #7
 8015386:	d806      	bhi.n	8015396 <udp_sendto_if_src+0x11e>
 8015388:	4b34      	ldr	r3, [pc, #208]	; (801545c <udp_sendto_if_src+0x1e4>)
 801538a:	f240 320d 	movw	r2, #781	; 0x30d
 801538e:	493a      	ldr	r1, [pc, #232]	; (8015478 <udp_sendto_if_src+0x200>)
 8015390:	4834      	ldr	r0, [pc, #208]	; (8015464 <udp_sendto_if_src+0x1ec>)
 8015392:	f002 feb3 	bl	80180fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015396:	69fb      	ldr	r3, [r7, #28]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	8a5b      	ldrh	r3, [r3, #18]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7f8 fa2d 	bl	800d800 <lwip_htons>
 80153a6:	4603      	mov	r3, r0
 80153a8:	461a      	mov	r2, r3
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80153ae:	887b      	ldrh	r3, [r7, #2]
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7f8 fa25 	bl	800d800 <lwip_htons>
 80153b6:	4603      	mov	r3, r0
 80153b8:	461a      	mov	r2, r3
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	2200      	movs	r2, #0
 80153c2:	719a      	strb	r2, [r3, #6]
 80153c4:	2200      	movs	r2, #0
 80153c6:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	7c1b      	ldrb	r3, [r3, #16]
 80153cc:	f003 0308 	and.w	r3, r3, #8
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d00c      	beq.n	80153ee <udp_sendto_if_src+0x176>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153dc:	2be0      	cmp	r3, #224	; 0xe0
 80153de:	d106      	bne.n	80153ee <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	7b5b      	ldrb	r3, [r3, #13]
 80153e4:	f043 0304 	orr.w	r3, r3, #4
 80153e8:	b2da      	uxtb	r2, r3
 80153ea:	69fb      	ldr	r3, [r7, #28]
 80153ec:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80153ee:	69fb      	ldr	r3, [r7, #28]
 80153f0:	891b      	ldrh	r3, [r3, #8]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7f8 fa04 	bl	800d800 <lwip_htons>
 80153f8:	4603      	mov	r3, r0
 80153fa:	461a      	mov	r2, r3
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015400:	2311      	movs	r3, #17
 8015402:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801540c:	2be0      	cmp	r3, #224	; 0xe0
 801540e:	d102      	bne.n	8015416 <udp_sendto_if_src+0x19e>
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	7f5b      	ldrb	r3, [r3, #29]
 8015414:	e001      	b.n	801541a <udp_sendto_if_src+0x1a2>
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	7adb      	ldrb	r3, [r3, #11]
 801541a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	7a9b      	ldrb	r3, [r3, #10]
 8015420:	7cb9      	ldrb	r1, [r7, #18]
 8015422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015424:	9202      	str	r2, [sp, #8]
 8015426:	7cfa      	ldrb	r2, [r7, #19]
 8015428:	9201      	str	r2, [sp, #4]
 801542a:	9300      	str	r3, [sp, #0]
 801542c:	460b      	mov	r3, r1
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015432:	69f8      	ldr	r0, [r7, #28]
 8015434:	f001 fd06 	bl	8016e44 <ip4_output_if_src>
 8015438:	4603      	mov	r3, r0
 801543a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801543c:	69fa      	ldr	r2, [r7, #28]
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	429a      	cmp	r2, r3
 8015442:	d004      	beq.n	801544e <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8015444:	69f8      	ldr	r0, [r7, #28]
 8015446:	f7f9 fea7 	bl	800f198 <pbuf_free>
    q = NULL;
 801544a:	2300      	movs	r3, #0
 801544c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801544e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015452:	4618      	mov	r0, r3
 8015454:	3720      	adds	r7, #32
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	0801b3d4 	.word	0x0801b3d4
 8015460:	0801b5c0 	.word	0x0801b5c0
 8015464:	0801b428 	.word	0x0801b428
 8015468:	0801b5e0 	.word	0x0801b5e0
 801546c:	0801b600 	.word	0x0801b600
 8015470:	0801b624 	.word	0x0801b624
 8015474:	0801b648 	.word	0x0801b648
 8015478:	0801b66c 	.word	0x0801b66c

0801547c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b086      	sub	sp, #24
 8015480:	af00      	add	r7, sp, #0
 8015482:	60f8      	str	r0, [r7, #12]
 8015484:	60b9      	str	r1, [r7, #8]
 8015486:	4613      	mov	r3, r2
 8015488:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d101      	bne.n	8015494 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015490:	4b39      	ldr	r3, [pc, #228]	; (8015578 <udp_bind+0xfc>)
 8015492:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d109      	bne.n	80154ae <udp_bind+0x32>
 801549a:	4b38      	ldr	r3, [pc, #224]	; (801557c <udp_bind+0x100>)
 801549c:	f240 32b7 	movw	r2, #951	; 0x3b7
 80154a0:	4937      	ldr	r1, [pc, #220]	; (8015580 <udp_bind+0x104>)
 80154a2:	4838      	ldr	r0, [pc, #224]	; (8015584 <udp_bind+0x108>)
 80154a4:	f002 fe2a 	bl	80180fc <iprintf>
 80154a8:	f06f 030f 	mvn.w	r3, #15
 80154ac:	e060      	b.n	8015570 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80154ae:	2300      	movs	r3, #0
 80154b0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154b2:	4b35      	ldr	r3, [pc, #212]	; (8015588 <udp_bind+0x10c>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	617b      	str	r3, [r7, #20]
 80154b8:	e009      	b.n	80154ce <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	429a      	cmp	r2, r3
 80154c0:	d102      	bne.n	80154c8 <udp_bind+0x4c>
      rebind = 1;
 80154c2:	2301      	movs	r3, #1
 80154c4:	74fb      	strb	r3, [r7, #19]
      break;
 80154c6:	e005      	b.n	80154d4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	68db      	ldr	r3, [r3, #12]
 80154cc:	617b      	str	r3, [r7, #20]
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d1f2      	bne.n	80154ba <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80154d4:	88fb      	ldrh	r3, [r7, #6]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d109      	bne.n	80154ee <udp_bind+0x72>
    port = udp_new_port();
 80154da:	f7ff fbf1 	bl	8014cc0 <udp_new_port>
 80154de:	4603      	mov	r3, r0
 80154e0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80154e2:	88fb      	ldrh	r3, [r7, #6]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d12c      	bne.n	8015542 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80154e8:	f06f 0307 	mvn.w	r3, #7
 80154ec:	e040      	b.n	8015570 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154ee:	4b26      	ldr	r3, [pc, #152]	; (8015588 <udp_bind+0x10c>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	617b      	str	r3, [r7, #20]
 80154f4:	e022      	b.n	801553c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d01b      	beq.n	8015536 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	8a5b      	ldrh	r3, [r3, #18]
 8015502:	88fa      	ldrh	r2, [r7, #6]
 8015504:	429a      	cmp	r2, r3
 8015506:	d116      	bne.n	8015536 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015510:	429a      	cmp	r2, r3
 8015512:	d00d      	beq.n	8015530 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d00a      	beq.n	8015530 <udp_bind+0xb4>
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d006      	beq.n	8015530 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015522:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015524:	2b00      	cmp	r3, #0
 8015526:	d003      	beq.n	8015530 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d102      	bne.n	8015536 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015530:	f06f 0307 	mvn.w	r3, #7
 8015534:	e01c      	b.n	8015570 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	617b      	str	r3, [r7, #20]
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d1d9      	bne.n	80154f6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d002      	beq.n	801554e <udp_bind+0xd2>
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	e000      	b.n	8015550 <udp_bind+0xd4>
 801554e:	2300      	movs	r3, #0
 8015550:	68fa      	ldr	r2, [r7, #12]
 8015552:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	88fa      	ldrh	r2, [r7, #6]
 8015558:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801555a:	7cfb      	ldrb	r3, [r7, #19]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d106      	bne.n	801556e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015560:	4b09      	ldr	r3, [pc, #36]	; (8015588 <udp_bind+0x10c>)
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015568:	4a07      	ldr	r2, [pc, #28]	; (8015588 <udp_bind+0x10c>)
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801556e:	2300      	movs	r3, #0
}
 8015570:	4618      	mov	r0, r3
 8015572:	3718      	adds	r7, #24
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	0801bf70 	.word	0x0801bf70
 801557c:	0801b3d4 	.word	0x0801b3d4
 8015580:	0801b69c 	.word	0x0801b69c
 8015584:	0801b428 	.word	0x0801b428
 8015588:	24024eb0 	.word	0x24024eb0

0801558c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b086      	sub	sp, #24
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	4613      	mov	r3, r2
 8015598:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d109      	bne.n	80155b4 <udp_connect+0x28>
 80155a0:	4b2c      	ldr	r3, [pc, #176]	; (8015654 <udp_connect+0xc8>)
 80155a2:	f240 4235 	movw	r2, #1077	; 0x435
 80155a6:	492c      	ldr	r1, [pc, #176]	; (8015658 <udp_connect+0xcc>)
 80155a8:	482c      	ldr	r0, [pc, #176]	; (801565c <udp_connect+0xd0>)
 80155aa:	f002 fda7 	bl	80180fc <iprintf>
 80155ae:	f06f 030f 	mvn.w	r3, #15
 80155b2:	e04b      	b.n	801564c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d109      	bne.n	80155ce <udp_connect+0x42>
 80155ba:	4b26      	ldr	r3, [pc, #152]	; (8015654 <udp_connect+0xc8>)
 80155bc:	f240 4236 	movw	r2, #1078	; 0x436
 80155c0:	4927      	ldr	r1, [pc, #156]	; (8015660 <udp_connect+0xd4>)
 80155c2:	4826      	ldr	r0, [pc, #152]	; (801565c <udp_connect+0xd0>)
 80155c4:	f002 fd9a 	bl	80180fc <iprintf>
 80155c8:	f06f 030f 	mvn.w	r3, #15
 80155cc:	e03e      	b.n	801564c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	8a5b      	ldrh	r3, [r3, #18]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d10f      	bne.n	80155f6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80155d6:	68f9      	ldr	r1, [r7, #12]
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	8a5b      	ldrh	r3, [r3, #18]
 80155dc:	461a      	mov	r2, r3
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f7ff ff4c 	bl	801547c <udp_bind>
 80155e4:	4603      	mov	r3, r0
 80155e6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80155e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d002      	beq.n	80155f6 <udp_connect+0x6a>
      return err;
 80155f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155f4:	e02a      	b.n	801564c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d002      	beq.n	8015602 <udp_connect+0x76>
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	e000      	b.n	8015604 <udp_connect+0x78>
 8015602:	2300      	movs	r3, #0
 8015604:	68fa      	ldr	r2, [r7, #12]
 8015606:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	88fa      	ldrh	r2, [r7, #6]
 801560c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	7c1b      	ldrb	r3, [r3, #16]
 8015612:	f043 0304 	orr.w	r3, r3, #4
 8015616:	b2da      	uxtb	r2, r3
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801561c:	4b11      	ldr	r3, [pc, #68]	; (8015664 <udp_connect+0xd8>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	617b      	str	r3, [r7, #20]
 8015622:	e008      	b.n	8015636 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015624:	68fa      	ldr	r2, [r7, #12]
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	429a      	cmp	r2, r3
 801562a:	d101      	bne.n	8015630 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801562c:	2300      	movs	r3, #0
 801562e:	e00d      	b.n	801564c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	617b      	str	r3, [r7, #20]
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d1f3      	bne.n	8015624 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801563c:	4b09      	ldr	r3, [pc, #36]	; (8015664 <udp_connect+0xd8>)
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015644:	4a07      	ldr	r2, [pc, #28]	; (8015664 <udp_connect+0xd8>)
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801564a:	2300      	movs	r3, #0
}
 801564c:	4618      	mov	r0, r3
 801564e:	3718      	adds	r7, #24
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}
 8015654:	0801b3d4 	.word	0x0801b3d4
 8015658:	0801b6b4 	.word	0x0801b6b4
 801565c:	0801b428 	.word	0x0801b428
 8015660:	0801b6d0 	.word	0x0801b6d0
 8015664:	24024eb0 	.word	0x24024eb0

08015668 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801566e:	2000      	movs	r0, #0
 8015670:	f7f8 fe56 	bl	800e320 <memp_malloc>
 8015674:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d00a      	beq.n	8015692 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801567c:	2228      	movs	r2, #40	; 0x28
 801567e:	2100      	movs	r1, #0
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f002 fd33 	bl	80180ec <memset>
    pcb->ttl = UDP_TTL;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	22ff      	movs	r2, #255	; 0xff
 801568a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	22ff      	movs	r2, #255	; 0xff
 8015690:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015692:	687b      	ldr	r3, [r7, #4]
}
 8015694:	4618      	mov	r0, r3
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}

0801569c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801569c:	b480      	push	{r7}
 801569e:	b085      	sub	sp, #20
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
 80156a4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d01e      	beq.n	80156ea <udp_netif_ip_addr_changed+0x4e>
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d01a      	beq.n	80156ea <udp_netif_ip_addr_changed+0x4e>
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d017      	beq.n	80156ea <udp_netif_ip_addr_changed+0x4e>
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d013      	beq.n	80156ea <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80156c2:	4b0d      	ldr	r3, [pc, #52]	; (80156f8 <udp_netif_ip_addr_changed+0x5c>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	60fb      	str	r3, [r7, #12]
 80156c8:	e00c      	b.n	80156e4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	681a      	ldr	r2, [r3, #0]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d103      	bne.n	80156de <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	68db      	ldr	r3, [r3, #12]
 80156e2:	60fb      	str	r3, [r7, #12]
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d1ef      	bne.n	80156ca <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80156ea:	bf00      	nop
 80156ec:	3714      	adds	r7, #20
 80156ee:	46bd      	mov	sp, r7
 80156f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f4:	4770      	bx	lr
 80156f6:	bf00      	nop
 80156f8:	24024eb0 	.word	0x24024eb0

080156fc <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d11e      	bne.n	8015748 <free_etharp_q+0x4c>
 801570a:	4b13      	ldr	r3, [pc, #76]	; (8015758 <free_etharp_q+0x5c>)
 801570c:	2296      	movs	r2, #150	; 0x96
 801570e:	4913      	ldr	r1, [pc, #76]	; (801575c <free_etharp_q+0x60>)
 8015710:	4813      	ldr	r0, [pc, #76]	; (8015760 <free_etharp_q+0x64>)
 8015712:	f002 fcf3 	bl	80180fc <iprintf>
  while (q) {
 8015716:	e017      	b.n	8015748 <free_etharp_q+0x4c>
    r = q;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	60fb      	str	r3, [r7, #12]
    q = q->next;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d105      	bne.n	8015736 <free_etharp_q+0x3a>
 801572a:	4b0b      	ldr	r3, [pc, #44]	; (8015758 <free_etharp_q+0x5c>)
 801572c:	229a      	movs	r2, #154	; 0x9a
 801572e:	490d      	ldr	r1, [pc, #52]	; (8015764 <free_etharp_q+0x68>)
 8015730:	480b      	ldr	r0, [pc, #44]	; (8015760 <free_etharp_q+0x64>)
 8015732:	f002 fce3 	bl	80180fc <iprintf>
    pbuf_free(r->p);
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	4618      	mov	r0, r3
 801573c:	f7f9 fd2c 	bl	800f198 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8015740:	68f9      	ldr	r1, [r7, #12]
 8015742:	200a      	movs	r0, #10
 8015744:	f7f8 fe62 	bl	800e40c <memp_free>
  while (q) {
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d1e4      	bne.n	8015718 <free_etharp_q+0x1c>
  }
}
 801574e:	bf00      	nop
 8015750:	bf00      	nop
 8015752:	3710      	adds	r7, #16
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	0801b738 	.word	0x0801b738
 801575c:	0801b770 	.word	0x0801b770
 8015760:	0801b77c 	.word	0x0801b77c
 8015764:	0801b7a4 	.word	0x0801b7a4

08015768 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015770:	4915      	ldr	r1, [pc, #84]	; (80157c8 <etharp_free_entry+0x60>)
 8015772:	687a      	ldr	r2, [r7, #4]
 8015774:	4613      	mov	r3, r2
 8015776:	005b      	lsls	r3, r3, #1
 8015778:	4413      	add	r3, r2
 801577a:	00db      	lsls	r3, r3, #3
 801577c:	440b      	add	r3, r1
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d013      	beq.n	80157ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015784:	4910      	ldr	r1, [pc, #64]	; (80157c8 <etharp_free_entry+0x60>)
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	4613      	mov	r3, r2
 801578a:	005b      	lsls	r3, r3, #1
 801578c:	4413      	add	r3, r2
 801578e:	00db      	lsls	r3, r3, #3
 8015790:	440b      	add	r3, r1
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4618      	mov	r0, r3
 8015796:	f7ff ffb1 	bl	80156fc <free_etharp_q>
    arp_table[i].q = NULL;
 801579a:	490b      	ldr	r1, [pc, #44]	; (80157c8 <etharp_free_entry+0x60>)
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	4613      	mov	r3, r2
 80157a0:	005b      	lsls	r3, r3, #1
 80157a2:	4413      	add	r3, r2
 80157a4:	00db      	lsls	r3, r3, #3
 80157a6:	440b      	add	r3, r1
 80157a8:	2200      	movs	r2, #0
 80157aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80157ac:	4906      	ldr	r1, [pc, #24]	; (80157c8 <etharp_free_entry+0x60>)
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	4613      	mov	r3, r2
 80157b2:	005b      	lsls	r3, r3, #1
 80157b4:	4413      	add	r3, r2
 80157b6:	00db      	lsls	r3, r3, #3
 80157b8:	440b      	add	r3, r1
 80157ba:	3314      	adds	r3, #20
 80157bc:	2200      	movs	r2, #0
 80157be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80157c0:	bf00      	nop
 80157c2:	3708      	adds	r7, #8
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	24021850 	.word	0x24021850

080157cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157d2:	2300      	movs	r3, #0
 80157d4:	607b      	str	r3, [r7, #4]
 80157d6:	e09a      	b.n	801590e <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 80157d8:	4951      	ldr	r1, [pc, #324]	; (8015920 <etharp_tmr+0x154>)
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	4613      	mov	r3, r2
 80157de:	005b      	lsls	r3, r3, #1
 80157e0:	4413      	add	r3, r2
 80157e2:	00db      	lsls	r3, r3, #3
 80157e4:	440b      	add	r3, r1
 80157e6:	3314      	adds	r3, #20
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80157ec:	78fb      	ldrb	r3, [r7, #3]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	f000 808a 	beq.w	8015908 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 80157f4:	78fb      	ldrb	r3, [r7, #3]
 80157f6:	2b05      	cmp	r3, #5
 80157f8:	f000 8086 	beq.w	8015908 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80157fc:	4948      	ldr	r1, [pc, #288]	; (8015920 <etharp_tmr+0x154>)
 80157fe:	687a      	ldr	r2, [r7, #4]
 8015800:	4613      	mov	r3, r2
 8015802:	005b      	lsls	r3, r3, #1
 8015804:	4413      	add	r3, r2
 8015806:	00db      	lsls	r3, r3, #3
 8015808:	440b      	add	r3, r1
 801580a:	3312      	adds	r3, #18
 801580c:	881b      	ldrh	r3, [r3, #0]
 801580e:	3301      	adds	r3, #1
 8015810:	b298      	uxth	r0, r3
 8015812:	4943      	ldr	r1, [pc, #268]	; (8015920 <etharp_tmr+0x154>)
 8015814:	687a      	ldr	r2, [r7, #4]
 8015816:	4613      	mov	r3, r2
 8015818:	005b      	lsls	r3, r3, #1
 801581a:	4413      	add	r3, r2
 801581c:	00db      	lsls	r3, r3, #3
 801581e:	440b      	add	r3, r1
 8015820:	3312      	adds	r3, #18
 8015822:	4602      	mov	r2, r0
 8015824:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015826:	493e      	ldr	r1, [pc, #248]	; (8015920 <etharp_tmr+0x154>)
 8015828:	687a      	ldr	r2, [r7, #4]
 801582a:	4613      	mov	r3, r2
 801582c:	005b      	lsls	r3, r3, #1
 801582e:	4413      	add	r3, r2
 8015830:	00db      	lsls	r3, r3, #3
 8015832:	440b      	add	r3, r1
 8015834:	3312      	adds	r3, #18
 8015836:	881b      	ldrh	r3, [r3, #0]
 8015838:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801583c:	d215      	bcs.n	801586a <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801583e:	4938      	ldr	r1, [pc, #224]	; (8015920 <etharp_tmr+0x154>)
 8015840:	687a      	ldr	r2, [r7, #4]
 8015842:	4613      	mov	r3, r2
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	4413      	add	r3, r2
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	440b      	add	r3, r1
 801584c:	3314      	adds	r3, #20
 801584e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015850:	2b01      	cmp	r3, #1
 8015852:	d10e      	bne.n	8015872 <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015854:	4932      	ldr	r1, [pc, #200]	; (8015920 <etharp_tmr+0x154>)
 8015856:	687a      	ldr	r2, [r7, #4]
 8015858:	4613      	mov	r3, r2
 801585a:	005b      	lsls	r3, r3, #1
 801585c:	4413      	add	r3, r2
 801585e:	00db      	lsls	r3, r3, #3
 8015860:	440b      	add	r3, r1
 8015862:	3312      	adds	r3, #18
 8015864:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015866:	2b04      	cmp	r3, #4
 8015868:	d903      	bls.n	8015872 <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f7ff ff7c 	bl	8015768 <etharp_free_entry>
 8015870:	e04a      	b.n	8015908 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015872:	492b      	ldr	r1, [pc, #172]	; (8015920 <etharp_tmr+0x154>)
 8015874:	687a      	ldr	r2, [r7, #4]
 8015876:	4613      	mov	r3, r2
 8015878:	005b      	lsls	r3, r3, #1
 801587a:	4413      	add	r3, r2
 801587c:	00db      	lsls	r3, r3, #3
 801587e:	440b      	add	r3, r1
 8015880:	3314      	adds	r3, #20
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	2b03      	cmp	r3, #3
 8015886:	d10a      	bne.n	801589e <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015888:	4925      	ldr	r1, [pc, #148]	; (8015920 <etharp_tmr+0x154>)
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	4613      	mov	r3, r2
 801588e:	005b      	lsls	r3, r3, #1
 8015890:	4413      	add	r3, r2
 8015892:	00db      	lsls	r3, r3, #3
 8015894:	440b      	add	r3, r1
 8015896:	3314      	adds	r3, #20
 8015898:	2204      	movs	r2, #4
 801589a:	701a      	strb	r2, [r3, #0]
 801589c:	e034      	b.n	8015908 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801589e:	4920      	ldr	r1, [pc, #128]	; (8015920 <etharp_tmr+0x154>)
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	4613      	mov	r3, r2
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	4413      	add	r3, r2
 80158a8:	00db      	lsls	r3, r3, #3
 80158aa:	440b      	add	r3, r1
 80158ac:	3314      	adds	r3, #20
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b04      	cmp	r3, #4
 80158b2:	d10a      	bne.n	80158ca <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80158b4:	491a      	ldr	r1, [pc, #104]	; (8015920 <etharp_tmr+0x154>)
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	4613      	mov	r3, r2
 80158ba:	005b      	lsls	r3, r3, #1
 80158bc:	4413      	add	r3, r2
 80158be:	00db      	lsls	r3, r3, #3
 80158c0:	440b      	add	r3, r1
 80158c2:	3314      	adds	r3, #20
 80158c4:	2202      	movs	r2, #2
 80158c6:	701a      	strb	r2, [r3, #0]
 80158c8:	e01e      	b.n	8015908 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80158ca:	4915      	ldr	r1, [pc, #84]	; (8015920 <etharp_tmr+0x154>)
 80158cc:	687a      	ldr	r2, [r7, #4]
 80158ce:	4613      	mov	r3, r2
 80158d0:	005b      	lsls	r3, r3, #1
 80158d2:	4413      	add	r3, r2
 80158d4:	00db      	lsls	r3, r3, #3
 80158d6:	440b      	add	r3, r1
 80158d8:	3314      	adds	r3, #20
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	2b01      	cmp	r3, #1
 80158de:	d113      	bne.n	8015908 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80158e0:	490f      	ldr	r1, [pc, #60]	; (8015920 <etharp_tmr+0x154>)
 80158e2:	687a      	ldr	r2, [r7, #4]
 80158e4:	4613      	mov	r3, r2
 80158e6:	005b      	lsls	r3, r3, #1
 80158e8:	4413      	add	r3, r2
 80158ea:	00db      	lsls	r3, r3, #3
 80158ec:	440b      	add	r3, r1
 80158ee:	3308      	adds	r3, #8
 80158f0:	6818      	ldr	r0, [r3, #0]
 80158f2:	687a      	ldr	r2, [r7, #4]
 80158f4:	4613      	mov	r3, r2
 80158f6:	005b      	lsls	r3, r3, #1
 80158f8:	4413      	add	r3, r2
 80158fa:	00db      	lsls	r3, r3, #3
 80158fc:	4a08      	ldr	r2, [pc, #32]	; (8015920 <etharp_tmr+0x154>)
 80158fe:	4413      	add	r3, r2
 8015900:	3304      	adds	r3, #4
 8015902:	4619      	mov	r1, r3
 8015904:	f000 fee4 	bl	80166d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	3301      	adds	r3, #1
 801590c:	607b      	str	r3, [r7, #4]
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b09      	cmp	r3, #9
 8015912:	f77f af61 	ble.w	80157d8 <etharp_tmr+0xc>
      }
    }
  }
}
 8015916:	bf00      	nop
 8015918:	bf00      	nop
 801591a:	3708      	adds	r7, #8
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}
 8015920:	24021850 	.word	0x24021850

08015924 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b08a      	sub	sp, #40	; 0x28
 8015928:	af00      	add	r7, sp, #0
 801592a:	60f8      	str	r0, [r7, #12]
 801592c:	460b      	mov	r3, r1
 801592e:	607a      	str	r2, [r7, #4]
 8015930:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015932:	230a      	movs	r3, #10
 8015934:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015936:	230a      	movs	r3, #10
 8015938:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801593a:	230a      	movs	r3, #10
 801593c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801593e:	2300      	movs	r3, #0
 8015940:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015942:	230a      	movs	r3, #10
 8015944:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015946:	2300      	movs	r3, #0
 8015948:	83bb      	strh	r3, [r7, #28]
 801594a:	2300      	movs	r3, #0
 801594c:	837b      	strh	r3, [r7, #26]
 801594e:	2300      	movs	r3, #0
 8015950:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015952:	2300      	movs	r3, #0
 8015954:	843b      	strh	r3, [r7, #32]
 8015956:	e0b1      	b.n	8015abc <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8015958:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801595c:	49a7      	ldr	r1, [pc, #668]	; (8015bfc <etharp_find_entry+0x2d8>)
 801595e:	4613      	mov	r3, r2
 8015960:	005b      	lsls	r3, r3, #1
 8015962:	4413      	add	r3, r2
 8015964:	00db      	lsls	r3, r3, #3
 8015966:	440b      	add	r3, r1
 8015968:	3314      	adds	r3, #20
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801596e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015972:	2b0a      	cmp	r3, #10
 8015974:	d105      	bne.n	8015982 <etharp_find_entry+0x5e>
 8015976:	7dfb      	ldrb	r3, [r7, #23]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d102      	bne.n	8015982 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801597c:	8c3b      	ldrh	r3, [r7, #32]
 801597e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015980:	e098      	b.n	8015ab4 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015982:	7dfb      	ldrb	r3, [r7, #23]
 8015984:	2b00      	cmp	r3, #0
 8015986:	f000 8095 	beq.w	8015ab4 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801598a:	7dfb      	ldrb	r3, [r7, #23]
 801598c:	2b01      	cmp	r3, #1
 801598e:	d009      	beq.n	80159a4 <etharp_find_entry+0x80>
 8015990:	7dfb      	ldrb	r3, [r7, #23]
 8015992:	2b01      	cmp	r3, #1
 8015994:	d806      	bhi.n	80159a4 <etharp_find_entry+0x80>
 8015996:	4b9a      	ldr	r3, [pc, #616]	; (8015c00 <etharp_find_entry+0x2dc>)
 8015998:	f240 1223 	movw	r2, #291	; 0x123
 801599c:	4999      	ldr	r1, [pc, #612]	; (8015c04 <etharp_find_entry+0x2e0>)
 801599e:	489a      	ldr	r0, [pc, #616]	; (8015c08 <etharp_find_entry+0x2e4>)
 80159a0:	f002 fbac 	bl	80180fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d020      	beq.n	80159ec <etharp_find_entry+0xc8>
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	6819      	ldr	r1, [r3, #0]
 80159ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159b2:	4892      	ldr	r0, [pc, #584]	; (8015bfc <etharp_find_entry+0x2d8>)
 80159b4:	4613      	mov	r3, r2
 80159b6:	005b      	lsls	r3, r3, #1
 80159b8:	4413      	add	r3, r2
 80159ba:	00db      	lsls	r3, r3, #3
 80159bc:	4403      	add	r3, r0
 80159be:	3304      	adds	r3, #4
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	4299      	cmp	r1, r3
 80159c4:	d112      	bne.n	80159ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d00c      	beq.n	80159e6 <etharp_find_entry+0xc2>
 80159cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159d0:	498a      	ldr	r1, [pc, #552]	; (8015bfc <etharp_find_entry+0x2d8>)
 80159d2:	4613      	mov	r3, r2
 80159d4:	005b      	lsls	r3, r3, #1
 80159d6:	4413      	add	r3, r2
 80159d8:	00db      	lsls	r3, r3, #3
 80159da:	440b      	add	r3, r1
 80159dc:	3308      	adds	r3, #8
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d102      	bne.n	80159ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80159e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159ea:	e103      	b.n	8015bf4 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80159ec:	7dfb      	ldrb	r3, [r7, #23]
 80159ee:	2b01      	cmp	r3, #1
 80159f0:	d140      	bne.n	8015a74 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80159f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159f6:	4981      	ldr	r1, [pc, #516]	; (8015bfc <etharp_find_entry+0x2d8>)
 80159f8:	4613      	mov	r3, r2
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	4413      	add	r3, r2
 80159fe:	00db      	lsls	r3, r3, #3
 8015a00:	440b      	add	r3, r1
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d01a      	beq.n	8015a3e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a0c:	497b      	ldr	r1, [pc, #492]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015a0e:	4613      	mov	r3, r2
 8015a10:	005b      	lsls	r3, r3, #1
 8015a12:	4413      	add	r3, r2
 8015a14:	00db      	lsls	r3, r3, #3
 8015a16:	440b      	add	r3, r1
 8015a18:	3312      	adds	r3, #18
 8015a1a:	881b      	ldrh	r3, [r3, #0]
 8015a1c:	8bba      	ldrh	r2, [r7, #28]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d848      	bhi.n	8015ab4 <etharp_find_entry+0x190>
            old_queue = i;
 8015a22:	8c3b      	ldrh	r3, [r7, #32]
 8015a24:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015a26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a2a:	4974      	ldr	r1, [pc, #464]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015a2c:	4613      	mov	r3, r2
 8015a2e:	005b      	lsls	r3, r3, #1
 8015a30:	4413      	add	r3, r2
 8015a32:	00db      	lsls	r3, r3, #3
 8015a34:	440b      	add	r3, r1
 8015a36:	3312      	adds	r3, #18
 8015a38:	881b      	ldrh	r3, [r3, #0]
 8015a3a:	83bb      	strh	r3, [r7, #28]
 8015a3c:	e03a      	b.n	8015ab4 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015a3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a42:	496e      	ldr	r1, [pc, #440]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015a44:	4613      	mov	r3, r2
 8015a46:	005b      	lsls	r3, r3, #1
 8015a48:	4413      	add	r3, r2
 8015a4a:	00db      	lsls	r3, r3, #3
 8015a4c:	440b      	add	r3, r1
 8015a4e:	3312      	adds	r3, #18
 8015a50:	881b      	ldrh	r3, [r3, #0]
 8015a52:	8b7a      	ldrh	r2, [r7, #26]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d82d      	bhi.n	8015ab4 <etharp_find_entry+0x190>
            old_pending = i;
 8015a58:	8c3b      	ldrh	r3, [r7, #32]
 8015a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015a5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a60:	4966      	ldr	r1, [pc, #408]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015a62:	4613      	mov	r3, r2
 8015a64:	005b      	lsls	r3, r3, #1
 8015a66:	4413      	add	r3, r2
 8015a68:	00db      	lsls	r3, r3, #3
 8015a6a:	440b      	add	r3, r1
 8015a6c:	3312      	adds	r3, #18
 8015a6e:	881b      	ldrh	r3, [r3, #0]
 8015a70:	837b      	strh	r3, [r7, #26]
 8015a72:	e01f      	b.n	8015ab4 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015a74:	7dfb      	ldrb	r3, [r7, #23]
 8015a76:	2b01      	cmp	r3, #1
 8015a78:	d91c      	bls.n	8015ab4 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8015a7a:	7dfb      	ldrb	r3, [r7, #23]
 8015a7c:	2b04      	cmp	r3, #4
 8015a7e:	d819      	bhi.n	8015ab4 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015a80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a84:	495d      	ldr	r1, [pc, #372]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015a86:	4613      	mov	r3, r2
 8015a88:	005b      	lsls	r3, r3, #1
 8015a8a:	4413      	add	r3, r2
 8015a8c:	00db      	lsls	r3, r3, #3
 8015a8e:	440b      	add	r3, r1
 8015a90:	3312      	adds	r3, #18
 8015a92:	881b      	ldrh	r3, [r3, #0]
 8015a94:	8b3a      	ldrh	r2, [r7, #24]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d80c      	bhi.n	8015ab4 <etharp_find_entry+0x190>
            old_stable = i;
 8015a9a:	8c3b      	ldrh	r3, [r7, #32]
 8015a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015aa2:	4956      	ldr	r1, [pc, #344]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	005b      	lsls	r3, r3, #1
 8015aa8:	4413      	add	r3, r2
 8015aaa:	00db      	lsls	r3, r3, #3
 8015aac:	440b      	add	r3, r1
 8015aae:	3312      	adds	r3, #18
 8015ab0:	881b      	ldrh	r3, [r3, #0]
 8015ab2:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ab4:	8c3b      	ldrh	r3, [r7, #32]
 8015ab6:	3301      	adds	r3, #1
 8015ab8:	b29b      	uxth	r3, r3
 8015aba:	843b      	strh	r3, [r7, #32]
 8015abc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ac0:	2b09      	cmp	r3, #9
 8015ac2:	f77f af49 	ble.w	8015958 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015ac6:	7afb      	ldrb	r3, [r7, #11]
 8015ac8:	f003 0302 	and.w	r3, r3, #2
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d108      	bne.n	8015ae2 <etharp_find_entry+0x1be>
 8015ad0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015ad4:	2b0a      	cmp	r3, #10
 8015ad6:	d107      	bne.n	8015ae8 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015ad8:	7afb      	ldrb	r3, [r7, #11]
 8015ada:	f003 0301 	and.w	r3, r3, #1
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d102      	bne.n	8015ae8 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ae6:	e085      	b.n	8015bf4 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015ae8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015aec:	2b09      	cmp	r3, #9
 8015aee:	dc02      	bgt.n	8015af6 <etharp_find_entry+0x1d2>
    i = empty;
 8015af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015af2:	843b      	strh	r3, [r7, #32]
 8015af4:	e039      	b.n	8015b6a <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015af6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015afa:	2b09      	cmp	r3, #9
 8015afc:	dc14      	bgt.n	8015b28 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 8015afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b00:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b06:	493d      	ldr	r1, [pc, #244]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	440b      	add	r3, r1
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d018      	beq.n	8015b4a <etharp_find_entry+0x226>
 8015b18:	4b39      	ldr	r3, [pc, #228]	; (8015c00 <etharp_find_entry+0x2dc>)
 8015b1a:	f240 126d 	movw	r2, #365	; 0x16d
 8015b1e:	493b      	ldr	r1, [pc, #236]	; (8015c0c <etharp_find_entry+0x2e8>)
 8015b20:	4839      	ldr	r0, [pc, #228]	; (8015c08 <etharp_find_entry+0x2e4>)
 8015b22:	f002 faeb 	bl	80180fc <iprintf>
 8015b26:	e010      	b.n	8015b4a <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015b28:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015b2c:	2b09      	cmp	r3, #9
 8015b2e:	dc02      	bgt.n	8015b36 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 8015b30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015b32:	843b      	strh	r3, [r7, #32]
 8015b34:	e009      	b.n	8015b4a <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015b36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015b3a:	2b09      	cmp	r3, #9
 8015b3c:	dc02      	bgt.n	8015b44 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015b3e:	8bfb      	ldrh	r3, [r7, #30]
 8015b40:	843b      	strh	r3, [r7, #32]
 8015b42:	e002      	b.n	8015b4a <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015b44:	f04f 33ff 	mov.w	r3, #4294967295
 8015b48:	e054      	b.n	8015bf4 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015b4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b4e:	2b09      	cmp	r3, #9
 8015b50:	dd06      	ble.n	8015b60 <etharp_find_entry+0x23c>
 8015b52:	4b2b      	ldr	r3, [pc, #172]	; (8015c00 <etharp_find_entry+0x2dc>)
 8015b54:	f240 127f 	movw	r2, #383	; 0x17f
 8015b58:	492d      	ldr	r1, [pc, #180]	; (8015c10 <etharp_find_entry+0x2ec>)
 8015b5a:	482b      	ldr	r0, [pc, #172]	; (8015c08 <etharp_find_entry+0x2e4>)
 8015b5c:	f002 face 	bl	80180fc <iprintf>
    etharp_free_entry(i);
 8015b60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7ff fdff 	bl	8015768 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015b6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b6e:	2b09      	cmp	r3, #9
 8015b70:	dd06      	ble.n	8015b80 <etharp_find_entry+0x25c>
 8015b72:	4b23      	ldr	r3, [pc, #140]	; (8015c00 <etharp_find_entry+0x2dc>)
 8015b74:	f240 1283 	movw	r2, #387	; 0x183
 8015b78:	4925      	ldr	r1, [pc, #148]	; (8015c10 <etharp_find_entry+0x2ec>)
 8015b7a:	4823      	ldr	r0, [pc, #140]	; (8015c08 <etharp_find_entry+0x2e4>)
 8015b7c:	f002 fabe 	bl	80180fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015b80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b84:	491d      	ldr	r1, [pc, #116]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015b86:	4613      	mov	r3, r2
 8015b88:	005b      	lsls	r3, r3, #1
 8015b8a:	4413      	add	r3, r2
 8015b8c:	00db      	lsls	r3, r3, #3
 8015b8e:	440b      	add	r3, r1
 8015b90:	3314      	adds	r3, #20
 8015b92:	781b      	ldrb	r3, [r3, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d006      	beq.n	8015ba6 <etharp_find_entry+0x282>
 8015b98:	4b19      	ldr	r3, [pc, #100]	; (8015c00 <etharp_find_entry+0x2dc>)
 8015b9a:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015b9e:	491d      	ldr	r1, [pc, #116]	; (8015c14 <etharp_find_entry+0x2f0>)
 8015ba0:	4819      	ldr	r0, [pc, #100]	; (8015c08 <etharp_find_entry+0x2e4>)
 8015ba2:	f002 faab 	bl	80180fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d00b      	beq.n	8015bc4 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	6819      	ldr	r1, [r3, #0]
 8015bb4:	4811      	ldr	r0, [pc, #68]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	005b      	lsls	r3, r3, #1
 8015bba:	4413      	add	r3, r2
 8015bbc:	00db      	lsls	r3, r3, #3
 8015bbe:	4403      	add	r3, r0
 8015bc0:	3304      	adds	r3, #4
 8015bc2:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015bc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bc8:	490c      	ldr	r1, [pc, #48]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015bca:	4613      	mov	r3, r2
 8015bcc:	005b      	lsls	r3, r3, #1
 8015bce:	4413      	add	r3, r2
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	440b      	add	r3, r1
 8015bd4:	3312      	adds	r3, #18
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015bda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bde:	4907      	ldr	r1, [pc, #28]	; (8015bfc <etharp_find_entry+0x2d8>)
 8015be0:	4613      	mov	r3, r2
 8015be2:	005b      	lsls	r3, r3, #1
 8015be4:	4413      	add	r3, r2
 8015be6:	00db      	lsls	r3, r3, #3
 8015be8:	440b      	add	r3, r1
 8015bea:	3308      	adds	r3, #8
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015bf0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3728      	adds	r7, #40	; 0x28
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	24021850 	.word	0x24021850
 8015c00:	0801b738 	.word	0x0801b738
 8015c04:	0801b7b4 	.word	0x0801b7b4
 8015c08:	0801b77c 	.word	0x0801b77c
 8015c0c:	0801b7f4 	.word	0x0801b7f4
 8015c10:	0801b80c 	.word	0x0801b80c
 8015c14:	0801b820 	.word	0x0801b820

08015c18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b08a      	sub	sp, #40	; 0x28
 8015c1c:	af02      	add	r7, sp, #8
 8015c1e:	60f8      	str	r0, [r7, #12]
 8015c20:	60b9      	str	r1, [r7, #8]
 8015c22:	607a      	str	r2, [r7, #4]
 8015c24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c2c:	2b06      	cmp	r3, #6
 8015c2e:	d006      	beq.n	8015c3e <etharp_update_arp_entry+0x26>
 8015c30:	4b5c      	ldr	r3, [pc, #368]	; (8015da4 <etharp_update_arp_entry+0x18c>)
 8015c32:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015c36:	495c      	ldr	r1, [pc, #368]	; (8015da8 <etharp_update_arp_entry+0x190>)
 8015c38:	485c      	ldr	r0, [pc, #368]	; (8015dac <etharp_update_arp_entry+0x194>)
 8015c3a:	f002 fa5f 	bl	80180fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d012      	beq.n	8015c6a <etharp_update_arp_entry+0x52>
 8015c44:	68bb      	ldr	r3, [r7, #8]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d00e      	beq.n	8015c6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	68f9      	ldr	r1, [r7, #12]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f001 f9a4 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8015c58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d105      	bne.n	8015c6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c66:	2be0      	cmp	r3, #224	; 0xe0
 8015c68:	d102      	bne.n	8015c70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015c6a:	f06f 030f 	mvn.w	r3, #15
 8015c6e:	e095      	b.n	8015d9c <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015c70:	78fb      	ldrb	r3, [r7, #3]
 8015c72:	68fa      	ldr	r2, [r7, #12]
 8015c74:	4619      	mov	r1, r3
 8015c76:	68b8      	ldr	r0, [r7, #8]
 8015c78:	f7ff fe54 	bl	8015924 <etharp_find_entry>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015c80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	da02      	bge.n	8015c8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015c88:	8bfb      	ldrh	r3, [r7, #30]
 8015c8a:	b25b      	sxtb	r3, r3
 8015c8c:	e086      	b.n	8015d9c <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8015c8e:	78fb      	ldrb	r3, [r7, #3]
 8015c90:	f003 0304 	and.w	r3, r3, #4
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d00b      	beq.n	8015cb0 <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8015c98:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015c9c:	4944      	ldr	r1, [pc, #272]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015c9e:	4613      	mov	r3, r2
 8015ca0:	005b      	lsls	r3, r3, #1
 8015ca2:	4413      	add	r3, r2
 8015ca4:	00db      	lsls	r3, r3, #3
 8015ca6:	440b      	add	r3, r1
 8015ca8:	3314      	adds	r3, #20
 8015caa:	2205      	movs	r2, #5
 8015cac:	701a      	strb	r2, [r3, #0]
 8015cae:	e019      	b.n	8015ce4 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8015cb0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015cb4:	493e      	ldr	r1, [pc, #248]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	005b      	lsls	r3, r3, #1
 8015cba:	4413      	add	r3, r2
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	440b      	add	r3, r1
 8015cc0:	3314      	adds	r3, #20
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	2b05      	cmp	r3, #5
 8015cc6:	d102      	bne.n	8015cce <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8015cc8:	f06f 0305 	mvn.w	r3, #5
 8015ccc:	e066      	b.n	8015d9c <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015cce:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015cd2:	4937      	ldr	r1, [pc, #220]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015cd4:	4613      	mov	r3, r2
 8015cd6:	005b      	lsls	r3, r3, #1
 8015cd8:	4413      	add	r3, r2
 8015cda:	00db      	lsls	r3, r3, #3
 8015cdc:	440b      	add	r3, r1
 8015cde:	3314      	adds	r3, #20
 8015ce0:	2202      	movs	r2, #2
 8015ce2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015ce4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015ce8:	4931      	ldr	r1, [pc, #196]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015cea:	4613      	mov	r3, r2
 8015cec:	005b      	lsls	r3, r3, #1
 8015cee:	4413      	add	r3, r2
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	440b      	add	r3, r1
 8015cf4:	3308      	adds	r3, #8
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015cfa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015cfe:	4613      	mov	r3, r2
 8015d00:	005b      	lsls	r3, r3, #1
 8015d02:	4413      	add	r3, r2
 8015d04:	00db      	lsls	r3, r3, #3
 8015d06:	3308      	adds	r3, #8
 8015d08:	4a29      	ldr	r2, [pc, #164]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015d0a:	4413      	add	r3, r2
 8015d0c:	3304      	adds	r3, #4
 8015d0e:	2206      	movs	r2, #6
 8015d10:	6879      	ldr	r1, [r7, #4]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f002 f9dc 	bl	80180d0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015d18:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015d1c:	4924      	ldr	r1, [pc, #144]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015d1e:	4613      	mov	r3, r2
 8015d20:	005b      	lsls	r3, r3, #1
 8015d22:	4413      	add	r3, r2
 8015d24:	00db      	lsls	r3, r3, #3
 8015d26:	440b      	add	r3, r1
 8015d28:	3312      	adds	r3, #18
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 8015d2e:	e029      	b.n	8015d84 <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 8015d30:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015d34:	491e      	ldr	r1, [pc, #120]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015d36:	4613      	mov	r3, r2
 8015d38:	005b      	lsls	r3, r3, #1
 8015d3a:	4413      	add	r3, r2
 8015d3c:	00db      	lsls	r3, r3, #3
 8015d3e:	440b      	add	r3, r1
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 8015d44:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015d48:	69bb      	ldr	r3, [r7, #24]
 8015d4a:	6819      	ldr	r1, [r3, #0]
 8015d4c:	4818      	ldr	r0, [pc, #96]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015d4e:	4613      	mov	r3, r2
 8015d50:	005b      	lsls	r3, r3, #1
 8015d52:	4413      	add	r3, r2
 8015d54:	00db      	lsls	r3, r3, #3
 8015d56:	4403      	add	r3, r0
 8015d58:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 8015d60:	69b9      	ldr	r1, [r7, #24]
 8015d62:	200a      	movs	r0, #10
 8015d64:	f7f8 fb52 	bl	800e40c <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8015d6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015d72:	9300      	str	r3, [sp, #0]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	6979      	ldr	r1, [r7, #20]
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f002 f819 	bl	8017db0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015d7e:	6978      	ldr	r0, [r7, #20]
 8015d80:	f7f9 fa0a 	bl	800f198 <pbuf_free>
  while (arp_table[i].q != NULL) {
 8015d84:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8015d88:	4909      	ldr	r1, [pc, #36]	; (8015db0 <etharp_update_arp_entry+0x198>)
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	005b      	lsls	r3, r3, #1
 8015d8e:	4413      	add	r3, r2
 8015d90:	00db      	lsls	r3, r3, #3
 8015d92:	440b      	add	r3, r1
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d1ca      	bne.n	8015d30 <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 8015d9a:	2300      	movs	r3, #0
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3720      	adds	r7, #32
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	0801b738 	.word	0x0801b738
 8015da8:	0801b84c 	.word	0x0801b84c
 8015dac:	0801b77c 	.word	0x0801b77c
 8015db0:	24021850 	.word	0x24021850

08015db4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b084      	sub	sp, #16
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	60fb      	str	r3, [r7, #12]
 8015dc0:	e01e      	b.n	8015e00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015dc2:	4913      	ldr	r1, [pc, #76]	; (8015e10 <etharp_cleanup_netif+0x5c>)
 8015dc4:	68fa      	ldr	r2, [r7, #12]
 8015dc6:	4613      	mov	r3, r2
 8015dc8:	005b      	lsls	r3, r3, #1
 8015dca:	4413      	add	r3, r2
 8015dcc:	00db      	lsls	r3, r3, #3
 8015dce:	440b      	add	r3, r1
 8015dd0:	3314      	adds	r3, #20
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015dd6:	7afb      	ldrb	r3, [r7, #11]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00e      	beq.n	8015dfa <etharp_cleanup_netif+0x46>
 8015ddc:	490c      	ldr	r1, [pc, #48]	; (8015e10 <etharp_cleanup_netif+0x5c>)
 8015dde:	68fa      	ldr	r2, [r7, #12]
 8015de0:	4613      	mov	r3, r2
 8015de2:	005b      	lsls	r3, r3, #1
 8015de4:	4413      	add	r3, r2
 8015de6:	00db      	lsls	r3, r3, #3
 8015de8:	440b      	add	r3, r1
 8015dea:	3308      	adds	r3, #8
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	687a      	ldr	r2, [r7, #4]
 8015df0:	429a      	cmp	r2, r3
 8015df2:	d102      	bne.n	8015dfa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015df4:	68f8      	ldr	r0, [r7, #12]
 8015df6:	f7ff fcb7 	bl	8015768 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	3301      	adds	r3, #1
 8015dfe:	60fb      	str	r3, [r7, #12]
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2b09      	cmp	r3, #9
 8015e04:	dddd      	ble.n	8015dc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015e06:	bf00      	nop
 8015e08:	bf00      	nop
 8015e0a:	3710      	adds	r7, #16
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	24021850 	.word	0x24021850

08015e14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015e14:	b5b0      	push	{r4, r5, r7, lr}
 8015e16:	b08a      	sub	sp, #40	; 0x28
 8015e18:	af04      	add	r7, sp, #16
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d107      	bne.n	8015e34 <etharp_input+0x20>
 8015e24:	4b3d      	ldr	r3, [pc, #244]	; (8015f1c <etharp_input+0x108>)
 8015e26:	f240 228a 	movw	r2, #650	; 0x28a
 8015e2a:	493d      	ldr	r1, [pc, #244]	; (8015f20 <etharp_input+0x10c>)
 8015e2c:	483d      	ldr	r0, [pc, #244]	; (8015f24 <etharp_input+0x110>)
 8015e2e:	f002 f965 	bl	80180fc <iprintf>
 8015e32:	e06f      	b.n	8015f14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	685b      	ldr	r3, [r3, #4]
 8015e38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	881b      	ldrh	r3, [r3, #0]
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e44:	d10c      	bne.n	8015e60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015e4a:	2b06      	cmp	r3, #6
 8015e4c:	d108      	bne.n	8015e60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015e52:	2b04      	cmp	r3, #4
 8015e54:	d104      	bne.n	8015e60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	885b      	ldrh	r3, [r3, #2]
 8015e5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015e5c:	2b08      	cmp	r3, #8
 8015e5e:	d003      	beq.n	8015e68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f7f9 f999 	bl	800f198 <pbuf_free>
    return;
 8015e66:	e055      	b.n	8015f14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	330e      	adds	r3, #14
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	3318      	adds	r3, #24
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	3304      	adds	r3, #4
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d102      	bne.n	8015e88 <etharp_input+0x74>
    for_us = 0;
 8015e82:	2300      	movs	r3, #0
 8015e84:	75fb      	strb	r3, [r7, #23]
 8015e86:	e009      	b.n	8015e9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015e88:	68ba      	ldr	r2, [r7, #8]
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	3304      	adds	r3, #4
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	bf0c      	ite	eq
 8015e94:	2301      	moveq	r3, #1
 8015e96:	2300      	movne	r3, #0
 8015e98:	b2db      	uxtb	r3, r3
 8015e9a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	f103 0208 	add.w	r2, r3, #8
 8015ea2:	7dfb      	ldrb	r3, [r7, #23]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d001      	beq.n	8015eac <etharp_input+0x98>
 8015ea8:	2301      	movs	r3, #1
 8015eaa:	e000      	b.n	8015eae <etharp_input+0x9a>
 8015eac:	2302      	movs	r3, #2
 8015eae:	f107 010c 	add.w	r1, r7, #12
 8015eb2:	6838      	ldr	r0, [r7, #0]
 8015eb4:	f7ff feb0 	bl	8015c18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	88db      	ldrh	r3, [r3, #6]
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ec2:	d003      	beq.n	8015ecc <etharp_input+0xb8>
 8015ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ec8:	d01e      	beq.n	8015f08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015eca:	e020      	b.n	8015f0e <etharp_input+0xfa>
      if (for_us) {
 8015ecc:	7dfb      	ldrb	r3, [r7, #23]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d01c      	beq.n	8015f0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015ee8:	693a      	ldr	r2, [r7, #16]
 8015eea:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015eec:	2102      	movs	r1, #2
 8015eee:	9103      	str	r1, [sp, #12]
 8015ef0:	f107 010c 	add.w	r1, r7, #12
 8015ef4:	9102      	str	r1, [sp, #8]
 8015ef6:	9201      	str	r2, [sp, #4]
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	462b      	mov	r3, r5
 8015efc:	4622      	mov	r2, r4
 8015efe:	4601      	mov	r1, r0
 8015f00:	6838      	ldr	r0, [r7, #0]
 8015f02:	f000 fb37 	bl	8016574 <etharp_raw>
      break;
 8015f06:	e001      	b.n	8015f0c <etharp_input+0xf8>
      break;
 8015f08:	bf00      	nop
 8015f0a:	e000      	b.n	8015f0e <etharp_input+0xfa>
      break;
 8015f0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f7f9 f942 	bl	800f198 <pbuf_free>
}
 8015f14:	3718      	adds	r7, #24
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bdb0      	pop	{r4, r5, r7, pc}
 8015f1a:	bf00      	nop
 8015f1c:	0801b738 	.word	0x0801b738
 8015f20:	0801b8a4 	.word	0x0801b8a4
 8015f24:	0801b77c 	.word	0x0801b77c

08015f28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b086      	sub	sp, #24
 8015f2c:	af02      	add	r7, sp, #8
 8015f2e:	60f8      	str	r0, [r7, #12]
 8015f30:	60b9      	str	r1, [r7, #8]
 8015f32:	4613      	mov	r3, r2
 8015f34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015f36:	79fa      	ldrb	r2, [r7, #7]
 8015f38:	4944      	ldr	r1, [pc, #272]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015f3a:	4613      	mov	r3, r2
 8015f3c:	005b      	lsls	r3, r3, #1
 8015f3e:	4413      	add	r3, r2
 8015f40:	00db      	lsls	r3, r3, #3
 8015f42:	440b      	add	r3, r1
 8015f44:	3314      	adds	r3, #20
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d806      	bhi.n	8015f5a <etharp_output_to_arp_index+0x32>
 8015f4c:	4b40      	ldr	r3, [pc, #256]	; (8016050 <etharp_output_to_arp_index+0x128>)
 8015f4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015f52:	4940      	ldr	r1, [pc, #256]	; (8016054 <etharp_output_to_arp_index+0x12c>)
 8015f54:	4840      	ldr	r0, [pc, #256]	; (8016058 <etharp_output_to_arp_index+0x130>)
 8015f56:	f002 f8d1 	bl	80180fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015f5a:	79fa      	ldrb	r2, [r7, #7]
 8015f5c:	493b      	ldr	r1, [pc, #236]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015f5e:	4613      	mov	r3, r2
 8015f60:	005b      	lsls	r3, r3, #1
 8015f62:	4413      	add	r3, r2
 8015f64:	00db      	lsls	r3, r3, #3
 8015f66:	440b      	add	r3, r1
 8015f68:	3314      	adds	r3, #20
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	2b02      	cmp	r3, #2
 8015f6e:	d153      	bne.n	8016018 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015f70:	79fa      	ldrb	r2, [r7, #7]
 8015f72:	4936      	ldr	r1, [pc, #216]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015f74:	4613      	mov	r3, r2
 8015f76:	005b      	lsls	r3, r3, #1
 8015f78:	4413      	add	r3, r2
 8015f7a:	00db      	lsls	r3, r3, #3
 8015f7c:	440b      	add	r3, r1
 8015f7e:	3312      	adds	r3, #18
 8015f80:	881b      	ldrh	r3, [r3, #0]
 8015f82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015f86:	d919      	bls.n	8015fbc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015f88:	79fa      	ldrb	r2, [r7, #7]
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	4413      	add	r3, r2
 8015f90:	00db      	lsls	r3, r3, #3
 8015f92:	4a2e      	ldr	r2, [pc, #184]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015f94:	4413      	add	r3, r2
 8015f96:	3304      	adds	r3, #4
 8015f98:	4619      	mov	r1, r3
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	f000 fb98 	bl	80166d0 <etharp_request>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d138      	bne.n	8016018 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015fa6:	79fa      	ldrb	r2, [r7, #7]
 8015fa8:	4928      	ldr	r1, [pc, #160]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015faa:	4613      	mov	r3, r2
 8015fac:	005b      	lsls	r3, r3, #1
 8015fae:	4413      	add	r3, r2
 8015fb0:	00db      	lsls	r3, r3, #3
 8015fb2:	440b      	add	r3, r1
 8015fb4:	3314      	adds	r3, #20
 8015fb6:	2203      	movs	r2, #3
 8015fb8:	701a      	strb	r2, [r3, #0]
 8015fba:	e02d      	b.n	8016018 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015fbc:	79fa      	ldrb	r2, [r7, #7]
 8015fbe:	4923      	ldr	r1, [pc, #140]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015fc0:	4613      	mov	r3, r2
 8015fc2:	005b      	lsls	r3, r3, #1
 8015fc4:	4413      	add	r3, r2
 8015fc6:	00db      	lsls	r3, r3, #3
 8015fc8:	440b      	add	r3, r1
 8015fca:	3312      	adds	r3, #18
 8015fcc:	881b      	ldrh	r3, [r3, #0]
 8015fce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015fd2:	d321      	bcc.n	8016018 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015fd4:	79fa      	ldrb	r2, [r7, #7]
 8015fd6:	4613      	mov	r3, r2
 8015fd8:	005b      	lsls	r3, r3, #1
 8015fda:	4413      	add	r3, r2
 8015fdc:	00db      	lsls	r3, r3, #3
 8015fde:	4a1b      	ldr	r2, [pc, #108]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015fe0:	4413      	add	r3, r2
 8015fe2:	1d19      	adds	r1, r3, #4
 8015fe4:	79fa      	ldrb	r2, [r7, #7]
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	005b      	lsls	r3, r3, #1
 8015fea:	4413      	add	r3, r2
 8015fec:	00db      	lsls	r3, r3, #3
 8015fee:	3308      	adds	r3, #8
 8015ff0:	4a16      	ldr	r2, [pc, #88]	; (801604c <etharp_output_to_arp_index+0x124>)
 8015ff2:	4413      	add	r3, r2
 8015ff4:	3304      	adds	r3, #4
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	68f8      	ldr	r0, [r7, #12]
 8015ffa:	f000 fb47 	bl	801668c <etharp_request_dst>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	d109      	bne.n	8016018 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016004:	79fa      	ldrb	r2, [r7, #7]
 8016006:	4911      	ldr	r1, [pc, #68]	; (801604c <etharp_output_to_arp_index+0x124>)
 8016008:	4613      	mov	r3, r2
 801600a:	005b      	lsls	r3, r3, #1
 801600c:	4413      	add	r3, r2
 801600e:	00db      	lsls	r3, r3, #3
 8016010:	440b      	add	r3, r1
 8016012:	3314      	adds	r3, #20
 8016014:	2203      	movs	r2, #3
 8016016:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 801601e:	79fa      	ldrb	r2, [r7, #7]
 8016020:	4613      	mov	r3, r2
 8016022:	005b      	lsls	r3, r3, #1
 8016024:	4413      	add	r3, r2
 8016026:	00db      	lsls	r3, r3, #3
 8016028:	3308      	adds	r3, #8
 801602a:	4a08      	ldr	r2, [pc, #32]	; (801604c <etharp_output_to_arp_index+0x124>)
 801602c:	4413      	add	r3, r2
 801602e:	3304      	adds	r3, #4
 8016030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016034:	9200      	str	r2, [sp, #0]
 8016036:	460a      	mov	r2, r1
 8016038:	68b9      	ldr	r1, [r7, #8]
 801603a:	68f8      	ldr	r0, [r7, #12]
 801603c:	f001 feb8 	bl	8017db0 <ethernet_output>
 8016040:	4603      	mov	r3, r0
}
 8016042:	4618      	mov	r0, r3
 8016044:	3710      	adds	r7, #16
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}
 801604a:	bf00      	nop
 801604c:	24021850 	.word	0x24021850
 8016050:	0801b738 	.word	0x0801b738
 8016054:	0801b8c4 	.word	0x0801b8c4
 8016058:	0801b77c 	.word	0x0801b77c

0801605c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b08a      	sub	sp, #40	; 0x28
 8016060:	af02      	add	r7, sp, #8
 8016062:	60f8      	str	r0, [r7, #12]
 8016064:	60b9      	str	r1, [r7, #8]
 8016066:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d106      	bne.n	8016080 <etharp_output+0x24>
 8016072:	4b73      	ldr	r3, [pc, #460]	; (8016240 <etharp_output+0x1e4>)
 8016074:	f240 321e 	movw	r2, #798	; 0x31e
 8016078:	4972      	ldr	r1, [pc, #456]	; (8016244 <etharp_output+0x1e8>)
 801607a:	4873      	ldr	r0, [pc, #460]	; (8016248 <etharp_output+0x1ec>)
 801607c:	f002 f83e 	bl	80180fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d106      	bne.n	8016094 <etharp_output+0x38>
 8016086:	4b6e      	ldr	r3, [pc, #440]	; (8016240 <etharp_output+0x1e4>)
 8016088:	f240 321f 	movw	r2, #799	; 0x31f
 801608c:	496f      	ldr	r1, [pc, #444]	; (801624c <etharp_output+0x1f0>)
 801608e:	486e      	ldr	r0, [pc, #440]	; (8016248 <etharp_output+0x1ec>)
 8016090:	f002 f834 	bl	80180fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d106      	bne.n	80160a8 <etharp_output+0x4c>
 801609a:	4b69      	ldr	r3, [pc, #420]	; (8016240 <etharp_output+0x1e4>)
 801609c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80160a0:	496b      	ldr	r1, [pc, #428]	; (8016250 <etharp_output+0x1f4>)
 80160a2:	4869      	ldr	r0, [pc, #420]	; (8016248 <etharp_output+0x1ec>)
 80160a4:	f002 f82a 	bl	80180fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	68f9      	ldr	r1, [r7, #12]
 80160ae:	4618      	mov	r0, r3
 80160b0:	f000 ff76 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 80160b4:	4603      	mov	r3, r0
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d002      	beq.n	80160c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80160ba:	4b66      	ldr	r3, [pc, #408]	; (8016254 <etharp_output+0x1f8>)
 80160bc:	61fb      	str	r3, [r7, #28]
 80160be:	e0af      	b.n	8016220 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160c8:	2be0      	cmp	r3, #224	; 0xe0
 80160ca:	d118      	bne.n	80160fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80160cc:	2301      	movs	r3, #1
 80160ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80160d0:	2300      	movs	r3, #0
 80160d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80160d4:	235e      	movs	r3, #94	; 0x5e
 80160d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	3301      	adds	r3, #1
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	3302      	adds	r3, #2
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	3303      	adds	r3, #3
 80160f2:	781b      	ldrb	r3, [r3, #0]
 80160f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80160f6:	f107 0310 	add.w	r3, r7, #16
 80160fa:	61fb      	str	r3, [r7, #28]
 80160fc:	e090      	b.n	8016220 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	3304      	adds	r3, #4
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	405a      	eors	r2, r3
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	3308      	adds	r3, #8
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	4013      	ands	r3, r2
 8016112:	2b00      	cmp	r3, #0
 8016114:	d012      	beq.n	801613c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801611c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016120:	4293      	cmp	r3, r2
 8016122:	d00b      	beq.n	801613c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	330c      	adds	r3, #12
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d003      	beq.n	8016136 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	330c      	adds	r3, #12
 8016132:	61bb      	str	r3, [r7, #24]
 8016134:	e002      	b.n	801613c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016136:	f06f 0303 	mvn.w	r3, #3
 801613a:	e07d      	b.n	8016238 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801613c:	4b46      	ldr	r3, [pc, #280]	; (8016258 <etharp_output+0x1fc>)
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	4619      	mov	r1, r3
 8016142:	4a46      	ldr	r2, [pc, #280]	; (801625c <etharp_output+0x200>)
 8016144:	460b      	mov	r3, r1
 8016146:	005b      	lsls	r3, r3, #1
 8016148:	440b      	add	r3, r1
 801614a:	00db      	lsls	r3, r3, #3
 801614c:	4413      	add	r3, r2
 801614e:	3314      	adds	r3, #20
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	2b01      	cmp	r3, #1
 8016154:	d925      	bls.n	80161a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016156:	4b40      	ldr	r3, [pc, #256]	; (8016258 <etharp_output+0x1fc>)
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	4619      	mov	r1, r3
 801615c:	4a3f      	ldr	r2, [pc, #252]	; (801625c <etharp_output+0x200>)
 801615e:	460b      	mov	r3, r1
 8016160:	005b      	lsls	r3, r3, #1
 8016162:	440b      	add	r3, r1
 8016164:	00db      	lsls	r3, r3, #3
 8016166:	4413      	add	r3, r2
 8016168:	3308      	adds	r3, #8
 801616a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801616c:	68fa      	ldr	r2, [r7, #12]
 801616e:	429a      	cmp	r2, r3
 8016170:	d117      	bne.n	80161a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016172:	69bb      	ldr	r3, [r7, #24]
 8016174:	681a      	ldr	r2, [r3, #0]
 8016176:	4b38      	ldr	r3, [pc, #224]	; (8016258 <etharp_output+0x1fc>)
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	4618      	mov	r0, r3
 801617c:	4937      	ldr	r1, [pc, #220]	; (801625c <etharp_output+0x200>)
 801617e:	4603      	mov	r3, r0
 8016180:	005b      	lsls	r3, r3, #1
 8016182:	4403      	add	r3, r0
 8016184:	00db      	lsls	r3, r3, #3
 8016186:	440b      	add	r3, r1
 8016188:	3304      	adds	r3, #4
 801618a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801618c:	429a      	cmp	r2, r3
 801618e:	d108      	bne.n	80161a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016190:	4b31      	ldr	r3, [pc, #196]	; (8016258 <etharp_output+0x1fc>)
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	461a      	mov	r2, r3
 8016196:	68b9      	ldr	r1, [r7, #8]
 8016198:	68f8      	ldr	r0, [r7, #12]
 801619a:	f7ff fec5 	bl	8015f28 <etharp_output_to_arp_index>
 801619e:	4603      	mov	r3, r0
 80161a0:	e04a      	b.n	8016238 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80161a2:	2300      	movs	r3, #0
 80161a4:	75fb      	strb	r3, [r7, #23]
 80161a6:	e031      	b.n	801620c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80161a8:	7dfa      	ldrb	r2, [r7, #23]
 80161aa:	492c      	ldr	r1, [pc, #176]	; (801625c <etharp_output+0x200>)
 80161ac:	4613      	mov	r3, r2
 80161ae:	005b      	lsls	r3, r3, #1
 80161b0:	4413      	add	r3, r2
 80161b2:	00db      	lsls	r3, r3, #3
 80161b4:	440b      	add	r3, r1
 80161b6:	3314      	adds	r3, #20
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d923      	bls.n	8016206 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80161be:	7dfa      	ldrb	r2, [r7, #23]
 80161c0:	4926      	ldr	r1, [pc, #152]	; (801625c <etharp_output+0x200>)
 80161c2:	4613      	mov	r3, r2
 80161c4:	005b      	lsls	r3, r3, #1
 80161c6:	4413      	add	r3, r2
 80161c8:	00db      	lsls	r3, r3, #3
 80161ca:	440b      	add	r3, r1
 80161cc:	3308      	adds	r3, #8
 80161ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80161d0:	68fa      	ldr	r2, [r7, #12]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d117      	bne.n	8016206 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	6819      	ldr	r1, [r3, #0]
 80161da:	7dfa      	ldrb	r2, [r7, #23]
 80161dc:	481f      	ldr	r0, [pc, #124]	; (801625c <etharp_output+0x200>)
 80161de:	4613      	mov	r3, r2
 80161e0:	005b      	lsls	r3, r3, #1
 80161e2:	4413      	add	r3, r2
 80161e4:	00db      	lsls	r3, r3, #3
 80161e6:	4403      	add	r3, r0
 80161e8:	3304      	adds	r3, #4
 80161ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80161ec:	4299      	cmp	r1, r3
 80161ee:	d10a      	bne.n	8016206 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80161f0:	4a19      	ldr	r2, [pc, #100]	; (8016258 <etharp_output+0x1fc>)
 80161f2:	7dfb      	ldrb	r3, [r7, #23]
 80161f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80161f6:	7dfb      	ldrb	r3, [r7, #23]
 80161f8:	461a      	mov	r2, r3
 80161fa:	68b9      	ldr	r1, [r7, #8]
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	f7ff fe93 	bl	8015f28 <etharp_output_to_arp_index>
 8016202:	4603      	mov	r3, r0
 8016204:	e018      	b.n	8016238 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016206:	7dfb      	ldrb	r3, [r7, #23]
 8016208:	3301      	adds	r3, #1
 801620a:	75fb      	strb	r3, [r7, #23]
 801620c:	7dfb      	ldrb	r3, [r7, #23]
 801620e:	2b09      	cmp	r3, #9
 8016210:	d9ca      	bls.n	80161a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016212:	68ba      	ldr	r2, [r7, #8]
 8016214:	69b9      	ldr	r1, [r7, #24]
 8016216:	68f8      	ldr	r0, [r7, #12]
 8016218:	f000 f822 	bl	8016260 <etharp_query>
 801621c:	4603      	mov	r3, r0
 801621e:	e00b      	b.n	8016238 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8016226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	68b9      	ldr	r1, [r7, #8]
 8016230:	68f8      	ldr	r0, [r7, #12]
 8016232:	f001 fdbd 	bl	8017db0 <ethernet_output>
 8016236:	4603      	mov	r3, r0
}
 8016238:	4618      	mov	r0, r3
 801623a:	3720      	adds	r7, #32
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}
 8016240:	0801b738 	.word	0x0801b738
 8016244:	0801b8a4 	.word	0x0801b8a4
 8016248:	0801b77c 	.word	0x0801b77c
 801624c:	0801b770 	.word	0x0801b770
 8016250:	0801b894 	.word	0x0801b894
 8016254:	0801bf78 	.word	0x0801bf78
 8016258:	24021940 	.word	0x24021940
 801625c:	24021850 	.word	0x24021850

08016260 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b090      	sub	sp, #64	; 0x40
 8016264:	af02      	add	r7, sp, #8
 8016266:	60f8      	str	r0, [r7, #12]
 8016268:	60b9      	str	r1, [r7, #8]
 801626a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	332e      	adds	r3, #46	; 0x2e
 8016270:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8016272:	23ff      	movs	r3, #255	; 0xff
 8016274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 8016278:	2300      	movs	r3, #0
 801627a:	633b      	str	r3, [r7, #48]	; 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	68f9      	ldr	r1, [r7, #12]
 8016282:	4618      	mov	r0, r3
 8016284:	f000 fe8c 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8016288:	4603      	mov	r3, r0
 801628a:	2b00      	cmp	r3, #0
 801628c:	d10c      	bne.n	80162a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016296:	2be0      	cmp	r3, #224	; 0xe0
 8016298:	d006      	beq.n	80162a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d003      	beq.n	80162a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d102      	bne.n	80162ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80162a8:	f06f 030f 	mvn.w	r3, #15
 80162ac:	e14e      	b.n	801654c <etharp_query+0x2ec>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80162ae:	68fa      	ldr	r2, [r7, #12]
 80162b0:	2101      	movs	r1, #1
 80162b2:	68b8      	ldr	r0, [r7, #8]
 80162b4:	f7ff fb36 	bl	8015924 <etharp_find_entry>
 80162b8:	4603      	mov	r3, r0
 80162ba:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 80162bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	da02      	bge.n	80162ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80162c4:	8b7b      	ldrh	r3, [r7, #26]
 80162c6:	b25b      	sxtb	r3, r3
 80162c8:	e140      	b.n	801654c <etharp_query+0x2ec>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80162ca:	8b7b      	ldrh	r3, [r7, #26]
 80162cc:	2b7e      	cmp	r3, #126	; 0x7e
 80162ce:	d906      	bls.n	80162de <etharp_query+0x7e>
 80162d0:	4ba0      	ldr	r3, [pc, #640]	; (8016554 <etharp_query+0x2f4>)
 80162d2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80162d6:	49a0      	ldr	r1, [pc, #640]	; (8016558 <etharp_query+0x2f8>)
 80162d8:	48a0      	ldr	r0, [pc, #640]	; (801655c <etharp_query+0x2fc>)
 80162da:	f001 ff0f 	bl	80180fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80162de:	8b7b      	ldrh	r3, [r7, #26]
 80162e0:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80162e2:	7e7a      	ldrb	r2, [r7, #25]
 80162e4:	499e      	ldr	r1, [pc, #632]	; (8016560 <etharp_query+0x300>)
 80162e6:	4613      	mov	r3, r2
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	4413      	add	r3, r2
 80162ec:	00db      	lsls	r3, r3, #3
 80162ee:	440b      	add	r3, r1
 80162f0:	3314      	adds	r3, #20
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d115      	bne.n	8016324 <etharp_query+0xc4>
    is_new_entry = 1;
 80162f8:	2301      	movs	r3, #1
 80162fa:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 80162fc:	7e7a      	ldrb	r2, [r7, #25]
 80162fe:	4998      	ldr	r1, [pc, #608]	; (8016560 <etharp_query+0x300>)
 8016300:	4613      	mov	r3, r2
 8016302:	005b      	lsls	r3, r3, #1
 8016304:	4413      	add	r3, r2
 8016306:	00db      	lsls	r3, r3, #3
 8016308:	440b      	add	r3, r1
 801630a:	3314      	adds	r3, #20
 801630c:	2201      	movs	r2, #1
 801630e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016310:	7e7a      	ldrb	r2, [r7, #25]
 8016312:	4993      	ldr	r1, [pc, #588]	; (8016560 <etharp_query+0x300>)
 8016314:	4613      	mov	r3, r2
 8016316:	005b      	lsls	r3, r3, #1
 8016318:	4413      	add	r3, r2
 801631a:	00db      	lsls	r3, r3, #3
 801631c:	440b      	add	r3, r1
 801631e:	3308      	adds	r3, #8
 8016320:	68fa      	ldr	r2, [r7, #12]
 8016322:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016324:	7e7a      	ldrb	r2, [r7, #25]
 8016326:	498e      	ldr	r1, [pc, #568]	; (8016560 <etharp_query+0x300>)
 8016328:	4613      	mov	r3, r2
 801632a:	005b      	lsls	r3, r3, #1
 801632c:	4413      	add	r3, r2
 801632e:	00db      	lsls	r3, r3, #3
 8016330:	440b      	add	r3, r1
 8016332:	3314      	adds	r3, #20
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	2b01      	cmp	r3, #1
 8016338:	d011      	beq.n	801635e <etharp_query+0xfe>
 801633a:	7e7a      	ldrb	r2, [r7, #25]
 801633c:	4988      	ldr	r1, [pc, #544]	; (8016560 <etharp_query+0x300>)
 801633e:	4613      	mov	r3, r2
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	4413      	add	r3, r2
 8016344:	00db      	lsls	r3, r3, #3
 8016346:	440b      	add	r3, r1
 8016348:	3314      	adds	r3, #20
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d806      	bhi.n	801635e <etharp_query+0xfe>
 8016350:	4b80      	ldr	r3, [pc, #512]	; (8016554 <etharp_query+0x2f4>)
 8016352:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016356:	4983      	ldr	r1, [pc, #524]	; (8016564 <etharp_query+0x304>)
 8016358:	4880      	ldr	r0, [pc, #512]	; (801655c <etharp_query+0x2fc>)
 801635a:	f001 fecf 	bl	80180fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016360:	2b00      	cmp	r3, #0
 8016362:	d102      	bne.n	801636a <etharp_query+0x10a>
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d10c      	bne.n	8016384 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801636a:	68b9      	ldr	r1, [r7, #8]
 801636c:	68f8      	ldr	r0, [r7, #12]
 801636e:	f000 f9af 	bl	80166d0 <etharp_request>
 8016372:	4603      	mov	r3, r0
 8016374:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d102      	bne.n	8016384 <etharp_query+0x124>
      return result;
 801637e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8016382:	e0e3      	b.n	801654c <etharp_query+0x2ec>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d106      	bne.n	8016398 <etharp_query+0x138>
 801638a:	4b72      	ldr	r3, [pc, #456]	; (8016554 <etharp_query+0x2f4>)
 801638c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016390:	4975      	ldr	r1, [pc, #468]	; (8016568 <etharp_query+0x308>)
 8016392:	4872      	ldr	r0, [pc, #456]	; (801655c <etharp_query+0x2fc>)
 8016394:	f001 feb2 	bl	80180fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016398:	7e7a      	ldrb	r2, [r7, #25]
 801639a:	4971      	ldr	r1, [pc, #452]	; (8016560 <etharp_query+0x300>)
 801639c:	4613      	mov	r3, r2
 801639e:	005b      	lsls	r3, r3, #1
 80163a0:	4413      	add	r3, r2
 80163a2:	00db      	lsls	r3, r3, #3
 80163a4:	440b      	add	r3, r1
 80163a6:	3314      	adds	r3, #20
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	2b01      	cmp	r3, #1
 80163ac:	d917      	bls.n	80163de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80163ae:	4a6f      	ldr	r2, [pc, #444]	; (801656c <etharp_query+0x30c>)
 80163b0:	7e7b      	ldrb	r3, [r7, #25]
 80163b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80163b4:	7e7a      	ldrb	r2, [r7, #25]
 80163b6:	4613      	mov	r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	4413      	add	r3, r2
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	3308      	adds	r3, #8
 80163c0:	4a67      	ldr	r2, [pc, #412]	; (8016560 <etharp_query+0x300>)
 80163c2:	4413      	add	r3, r2
 80163c4:	3304      	adds	r3, #4
 80163c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80163ca:	9200      	str	r2, [sp, #0]
 80163cc:	69fa      	ldr	r2, [r7, #28]
 80163ce:	6879      	ldr	r1, [r7, #4]
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f001 fced 	bl	8017db0 <ethernet_output>
 80163d6:	4603      	mov	r3, r0
 80163d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80163dc:	e0b4      	b.n	8016548 <etharp_query+0x2e8>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80163de:	7e7a      	ldrb	r2, [r7, #25]
 80163e0:	495f      	ldr	r1, [pc, #380]	; (8016560 <etharp_query+0x300>)
 80163e2:	4613      	mov	r3, r2
 80163e4:	005b      	lsls	r3, r3, #1
 80163e6:	4413      	add	r3, r2
 80163e8:	00db      	lsls	r3, r3, #3
 80163ea:	440b      	add	r3, r1
 80163ec:	3314      	adds	r3, #20
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	2b01      	cmp	r3, #1
 80163f2:	f040 80a9 	bne.w	8016548 <etharp_query+0x2e8>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80163f6:	2300      	movs	r3, #0
 80163f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 80163fe:	e01c      	b.n	801643a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016402:	895a      	ldrh	r2, [r3, #10]
 8016404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016406:	891b      	ldrh	r3, [r3, #8]
 8016408:	429a      	cmp	r2, r3
 801640a:	d10a      	bne.n	8016422 <etharp_query+0x1c2>
 801640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d006      	beq.n	8016422 <etharp_query+0x1c2>
 8016414:	4b4f      	ldr	r3, [pc, #316]	; (8016554 <etharp_query+0x2f4>)
 8016416:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801641a:	4955      	ldr	r1, [pc, #340]	; (8016570 <etharp_query+0x310>)
 801641c:	484f      	ldr	r0, [pc, #316]	; (801655c <etharp_query+0x2fc>)
 801641e:	f001 fe6d 	bl	80180fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016424:	7b1b      	ldrb	r3, [r3, #12]
 8016426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801642a:	2b00      	cmp	r3, #0
 801642c:	d002      	beq.n	8016434 <etharp_query+0x1d4>
        copy_needed = 1;
 801642e:	2301      	movs	r3, #1
 8016430:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8016432:	e005      	b.n	8016440 <etharp_query+0x1e0>
      }
      p = p->next;
 8016434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 801643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643c:	2b00      	cmp	r3, #0
 801643e:	d1df      	bne.n	8016400 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8016440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016442:	2b00      	cmp	r3, #0
 8016444:	d007      	beq.n	8016456 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016446:	687a      	ldr	r2, [r7, #4]
 8016448:	f44f 7120 	mov.w	r1, #640	; 0x280
 801644c:	200e      	movs	r0, #14
 801644e:	f7f9 f91b 	bl	800f688 <pbuf_clone>
 8016452:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016454:	e004      	b.n	8016460 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 801645a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801645c:	f7f8 ff42 	bl	800f2e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016462:	2b00      	cmp	r3, #0
 8016464:	d06d      	beq.n	8016542 <etharp_query+0x2e2>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8016466:	200a      	movs	r0, #10
 8016468:	f7f7 ff5a 	bl	800e320 <memp_malloc>
 801646c:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d05f      	beq.n	8016534 <etharp_query+0x2d4>
        unsigned int qlen = 0;
 8016474:	2300      	movs	r3, #0
 8016476:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	2200      	movs	r2, #0
 801647c:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016482:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8016484:	7e7a      	ldrb	r2, [r7, #25]
 8016486:	4936      	ldr	r1, [pc, #216]	; (8016560 <etharp_query+0x300>)
 8016488:	4613      	mov	r3, r2
 801648a:	005b      	lsls	r3, r3, #1
 801648c:	4413      	add	r3, r2
 801648e:	00db      	lsls	r3, r3, #3
 8016490:	440b      	add	r3, r1
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d01a      	beq.n	80164ce <etharp_query+0x26e>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8016498:	7e7a      	ldrb	r2, [r7, #25]
 801649a:	4931      	ldr	r1, [pc, #196]	; (8016560 <etharp_query+0x300>)
 801649c:	4613      	mov	r3, r2
 801649e:	005b      	lsls	r3, r3, #1
 80164a0:	4413      	add	r3, r2
 80164a2:	00db      	lsls	r3, r3, #3
 80164a4:	440b      	add	r3, r1
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	623b      	str	r3, [r7, #32]
          qlen++;
 80164aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ac:	3301      	adds	r3, #1
 80164ae:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 80164b0:	e005      	b.n	80164be <etharp_query+0x25e>
            r = r->next;
 80164b2:	6a3b      	ldr	r3, [r7, #32]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	623b      	str	r3, [r7, #32]
            qlen++;
 80164b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ba:	3301      	adds	r3, #1
 80164bc:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 80164be:	6a3b      	ldr	r3, [r7, #32]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d1f5      	bne.n	80164b2 <etharp_query+0x252>
          }
          r->next = new_entry;
 80164c6:	6a3b      	ldr	r3, [r7, #32]
 80164c8:	697a      	ldr	r2, [r7, #20]
 80164ca:	601a      	str	r2, [r3, #0]
 80164cc:	e008      	b.n	80164e0 <etharp_query+0x280>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 80164ce:	7e7a      	ldrb	r2, [r7, #25]
 80164d0:	4923      	ldr	r1, [pc, #140]	; (8016560 <etharp_query+0x300>)
 80164d2:	4613      	mov	r3, r2
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	00db      	lsls	r3, r3, #3
 80164da:	440b      	add	r3, r1
 80164dc:	697a      	ldr	r2, [r7, #20]
 80164de:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 80164e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e2:	2b02      	cmp	r3, #2
 80164e4:	d922      	bls.n	801652c <etharp_query+0x2cc>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 80164e6:	7e7a      	ldrb	r2, [r7, #25]
 80164e8:	491d      	ldr	r1, [pc, #116]	; (8016560 <etharp_query+0x300>)
 80164ea:	4613      	mov	r3, r2
 80164ec:	005b      	lsls	r3, r3, #1
 80164ee:	4413      	add	r3, r2
 80164f0:	00db      	lsls	r3, r3, #3
 80164f2:	440b      	add	r3, r1
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 80164f8:	7e7a      	ldrb	r2, [r7, #25]
 80164fa:	4919      	ldr	r1, [pc, #100]	; (8016560 <etharp_query+0x300>)
 80164fc:	4613      	mov	r3, r2
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	4413      	add	r3, r2
 8016502:	00db      	lsls	r3, r3, #3
 8016504:	440b      	add	r3, r1
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	7e7a      	ldrb	r2, [r7, #25]
 801650a:	6819      	ldr	r1, [r3, #0]
 801650c:	4814      	ldr	r0, [pc, #80]	; (8016560 <etharp_query+0x300>)
 801650e:	4613      	mov	r3, r2
 8016510:	005b      	lsls	r3, r3, #1
 8016512:	4413      	add	r3, r2
 8016514:	00db      	lsls	r3, r3, #3
 8016516:	4403      	add	r3, r0
 8016518:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	4618      	mov	r0, r3
 8016520:	f7f8 fe3a 	bl	800f198 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8016524:	6939      	ldr	r1, [r7, #16]
 8016526:	200a      	movs	r0, #10
 8016528:	f7f7 ff70 	bl	800e40c <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
 801652c:	2300      	movs	r3, #0
 801652e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016532:	e009      	b.n	8016548 <etharp_query+0x2e8>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8016534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016536:	f7f8 fe2f 	bl	800f198 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 801653a:	23ff      	movs	r3, #255	; 0xff
 801653c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016540:	e002      	b.n	8016548 <etharp_query+0x2e8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016542:	23ff      	movs	r3, #255	; 0xff
 8016544:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 8016548:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801654c:	4618      	mov	r0, r3
 801654e:	3738      	adds	r7, #56	; 0x38
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}
 8016554:	0801b738 	.word	0x0801b738
 8016558:	0801b8f4 	.word	0x0801b8f4
 801655c:	0801b77c 	.word	0x0801b77c
 8016560:	24021850 	.word	0x24021850
 8016564:	0801b904 	.word	0x0801b904
 8016568:	0801b770 	.word	0x0801b770
 801656c:	24021940 	.word	0x24021940
 8016570:	0801b92c 	.word	0x0801b92c

08016574 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b08a      	sub	sp, #40	; 0x28
 8016578:	af02      	add	r7, sp, #8
 801657a:	60f8      	str	r0, [r7, #12]
 801657c:	60b9      	str	r1, [r7, #8]
 801657e:	607a      	str	r2, [r7, #4]
 8016580:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016582:	2300      	movs	r3, #0
 8016584:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d106      	bne.n	801659a <etharp_raw+0x26>
 801658c:	4b3a      	ldr	r3, [pc, #232]	; (8016678 <etharp_raw+0x104>)
 801658e:	f240 4257 	movw	r2, #1111	; 0x457
 8016592:	493a      	ldr	r1, [pc, #232]	; (801667c <etharp_raw+0x108>)
 8016594:	483a      	ldr	r0, [pc, #232]	; (8016680 <etharp_raw+0x10c>)
 8016596:	f001 fdb1 	bl	80180fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801659a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801659e:	211c      	movs	r1, #28
 80165a0:	200e      	movs	r0, #14
 80165a2:	f7f8 fb15 	bl	800ebd0 <pbuf_alloc>
 80165a6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80165a8:	69bb      	ldr	r3, [r7, #24]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d102      	bne.n	80165b4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80165ae:	f04f 33ff 	mov.w	r3, #4294967295
 80165b2:	e05d      	b.n	8016670 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80165b4:	69bb      	ldr	r3, [r7, #24]
 80165b6:	895b      	ldrh	r3, [r3, #10]
 80165b8:	2b1b      	cmp	r3, #27
 80165ba:	d806      	bhi.n	80165ca <etharp_raw+0x56>
 80165bc:	4b2e      	ldr	r3, [pc, #184]	; (8016678 <etharp_raw+0x104>)
 80165be:	f240 4262 	movw	r2, #1122	; 0x462
 80165c2:	4930      	ldr	r1, [pc, #192]	; (8016684 <etharp_raw+0x110>)
 80165c4:	482e      	ldr	r0, [pc, #184]	; (8016680 <etharp_raw+0x10c>)
 80165c6:	f001 fd99 	bl	80180fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	685b      	ldr	r3, [r3, #4]
 80165ce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80165d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7f7 f914 	bl	800d800 <lwip_htons>
 80165d8:	4603      	mov	r3, r0
 80165da:	461a      	mov	r2, r3
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80165e6:	2b06      	cmp	r3, #6
 80165e8:	d006      	beq.n	80165f8 <etharp_raw+0x84>
 80165ea:	4b23      	ldr	r3, [pc, #140]	; (8016678 <etharp_raw+0x104>)
 80165ec:	f240 4269 	movw	r2, #1129	; 0x469
 80165f0:	4925      	ldr	r1, [pc, #148]	; (8016688 <etharp_raw+0x114>)
 80165f2:	4823      	ldr	r0, [pc, #140]	; (8016680 <etharp_raw+0x10c>)
 80165f4:	f001 fd82 	bl	80180fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80165f8:	697b      	ldr	r3, [r7, #20]
 80165fa:	3308      	adds	r3, #8
 80165fc:	2206      	movs	r2, #6
 80165fe:	6839      	ldr	r1, [r7, #0]
 8016600:	4618      	mov	r0, r3
 8016602:	f001 fd65 	bl	80180d0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	3312      	adds	r3, #18
 801660a:	2206      	movs	r2, #6
 801660c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801660e:	4618      	mov	r0, r3
 8016610:	f001 fd5e 	bl	80180d0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	330e      	adds	r3, #14
 8016618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801661a:	6812      	ldr	r2, [r2, #0]
 801661c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	3318      	adds	r3, #24
 8016622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016624:	6812      	ldr	r2, [r2, #0]
 8016626:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	2200      	movs	r2, #0
 801662c:	701a      	strb	r2, [r3, #0]
 801662e:	2200      	movs	r2, #0
 8016630:	f042 0201 	orr.w	r2, r2, #1
 8016634:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016636:	697b      	ldr	r3, [r7, #20]
 8016638:	2200      	movs	r2, #0
 801663a:	f042 0208 	orr.w	r2, r2, #8
 801663e:	709a      	strb	r2, [r3, #2]
 8016640:	2200      	movs	r2, #0
 8016642:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	2206      	movs	r2, #6
 8016648:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801664a:	697b      	ldr	r3, [r7, #20]
 801664c:	2204      	movs	r2, #4
 801664e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016650:	f640 0306 	movw	r3, #2054	; 0x806
 8016654:	9300      	str	r3, [sp, #0]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	68ba      	ldr	r2, [r7, #8]
 801665a:	69b9      	ldr	r1, [r7, #24]
 801665c:	68f8      	ldr	r0, [r7, #12]
 801665e:	f001 fba7 	bl	8017db0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016662:	69b8      	ldr	r0, [r7, #24]
 8016664:	f7f8 fd98 	bl	800f198 <pbuf_free>
  p = NULL;
 8016668:	2300      	movs	r3, #0
 801666a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801666c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016670:	4618      	mov	r0, r3
 8016672:	3720      	adds	r7, #32
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	0801b738 	.word	0x0801b738
 801667c:	0801b8a4 	.word	0x0801b8a4
 8016680:	0801b77c 	.word	0x0801b77c
 8016684:	0801b948 	.word	0x0801b948
 8016688:	0801b97c 	.word	0x0801b97c

0801668c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b088      	sub	sp, #32
 8016690:	af04      	add	r7, sp, #16
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80166a8:	2201      	movs	r2, #1
 80166aa:	9203      	str	r2, [sp, #12]
 80166ac:	68ba      	ldr	r2, [r7, #8]
 80166ae:	9202      	str	r2, [sp, #8]
 80166b0:	4a06      	ldr	r2, [pc, #24]	; (80166cc <etharp_request_dst+0x40>)
 80166b2:	9201      	str	r2, [sp, #4]
 80166b4:	9300      	str	r3, [sp, #0]
 80166b6:	4603      	mov	r3, r0
 80166b8:	687a      	ldr	r2, [r7, #4]
 80166ba:	68f8      	ldr	r0, [r7, #12]
 80166bc:	f7ff ff5a 	bl	8016574 <etharp_raw>
 80166c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3710      	adds	r7, #16
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
 80166ca:	bf00      	nop
 80166cc:	0801bf80 	.word	0x0801bf80

080166d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80166da:	4a05      	ldr	r2, [pc, #20]	; (80166f0 <etharp_request+0x20>)
 80166dc:	6839      	ldr	r1, [r7, #0]
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f7ff ffd4 	bl	801668c <etharp_request_dst>
 80166e4:	4603      	mov	r3, r0
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3708      	adds	r7, #8
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	0801bf78 	.word	0x0801bf78

080166f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b08e      	sub	sp, #56	; 0x38
 80166f8:	af04      	add	r7, sp, #16
 80166fa:	6078      	str	r0, [r7, #4]
 80166fc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80166fe:	4b86      	ldr	r3, [pc, #536]	; (8016918 <icmp_input+0x224>)
 8016700:	689b      	ldr	r3, [r3, #8]
 8016702:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8016704:	6a3b      	ldr	r3, [r7, #32]
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	f003 030f 	and.w	r3, r3, #15
 801670c:	b2db      	uxtb	r3, r3
 801670e:	009b      	lsls	r3, r3, #2
 8016710:	b2db      	uxtb	r3, r3
 8016712:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8016714:	8bfb      	ldrh	r3, [r7, #30]
 8016716:	2b13      	cmp	r3, #19
 8016718:	f240 80ea 	bls.w	80168f0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	895b      	ldrh	r3, [r3, #10]
 8016720:	2b03      	cmp	r3, #3
 8016722:	f240 80e7 	bls.w	80168f4 <icmp_input+0x200>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	685b      	ldr	r3, [r3, #4]
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801672e:	7f7b      	ldrb	r3, [r7, #29]
 8016730:	2b00      	cmp	r3, #0
 8016732:	f000 80d6 	beq.w	80168e2 <icmp_input+0x1ee>
 8016736:	2b08      	cmp	r3, #8
 8016738:	f040 80d6 	bne.w	80168e8 <icmp_input+0x1f4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801673c:	4b77      	ldr	r3, [pc, #476]	; (801691c <icmp_input+0x228>)
 801673e:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016740:	4b75      	ldr	r3, [pc, #468]	; (8016918 <icmp_input+0x224>)
 8016742:	695b      	ldr	r3, [r3, #20]
 8016744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016748:	2be0      	cmp	r3, #224	; 0xe0
 801674a:	d102      	bne.n	8016752 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801674c:	683b      	ldr	r3, [r7, #0]
 801674e:	3304      	adds	r3, #4
 8016750:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016752:	4b71      	ldr	r3, [pc, #452]	; (8016918 <icmp_input+0x224>)
 8016754:	695b      	ldr	r3, [r3, #20]
 8016756:	4a70      	ldr	r2, [pc, #448]	; (8016918 <icmp_input+0x224>)
 8016758:	6812      	ldr	r2, [r2, #0]
 801675a:	4611      	mov	r1, r2
 801675c:	4618      	mov	r0, r3
 801675e:	f000 fc1f 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8016762:	4603      	mov	r3, r0
 8016764:	2b00      	cmp	r3, #0
 8016766:	d002      	beq.n	801676e <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	3304      	adds	r3, #4
 801676c:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	891b      	ldrh	r3, [r3, #8]
 8016772:	2b07      	cmp	r3, #7
 8016774:	f240 80c0 	bls.w	80168f8 <icmp_input+0x204>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f7f7 f8de 	bl	800d93a <inet_chksum_pbuf>
 801677e:	4603      	mov	r3, r0
 8016780:	2b00      	cmp	r3, #0
 8016782:	d003      	beq.n	801678c <icmp_input+0x98>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	f7f8 fd07 	bl	800f198 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801678a:	e0c1      	b.n	8016910 <icmp_input+0x21c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801678c:	8bfb      	ldrh	r3, [r7, #30]
 801678e:	330e      	adds	r3, #14
 8016790:	4619      	mov	r1, r3
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f7f8 fc6a 	bl	800f06c <pbuf_add_header>
 8016798:	4603      	mov	r3, r0
 801679a:	2b00      	cmp	r3, #0
 801679c:	d04b      	beq.n	8016836 <icmp_input+0x142>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	891a      	ldrh	r2, [r3, #8]
 80167a2:	8bfb      	ldrh	r3, [r7, #30]
 80167a4:	4413      	add	r3, r2
 80167a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	891b      	ldrh	r3, [r3, #8]
 80167ac:	8b7a      	ldrh	r2, [r7, #26]
 80167ae:	429a      	cmp	r2, r3
 80167b0:	f0c0 80a7 	bcc.w	8016902 <icmp_input+0x20e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80167b4:	8b7b      	ldrh	r3, [r7, #26]
 80167b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167ba:	4619      	mov	r1, r3
 80167bc:	200e      	movs	r0, #14
 80167be:	f7f8 fa07 	bl	800ebd0 <pbuf_alloc>
 80167c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	f000 809d 	beq.w	8016906 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	895b      	ldrh	r3, [r3, #10]
 80167d0:	461a      	mov	r2, r3
 80167d2:	8bfb      	ldrh	r3, [r7, #30]
 80167d4:	3308      	adds	r3, #8
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d203      	bcs.n	80167e2 <icmp_input+0xee>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80167da:	6978      	ldr	r0, [r7, #20]
 80167dc:	f7f8 fcdc 	bl	800f198 <pbuf_free>
          goto icmperr;
 80167e0:	e092      	b.n	8016908 <icmp_input+0x214>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	8bfa      	ldrh	r2, [r7, #30]
 80167e8:	6a39      	ldr	r1, [r7, #32]
 80167ea:	4618      	mov	r0, r3
 80167ec:	f001 fc70 	bl	80180d0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80167f0:	8bfb      	ldrh	r3, [r7, #30]
 80167f2:	4619      	mov	r1, r3
 80167f4:	6978      	ldr	r0, [r7, #20]
 80167f6:	f7f8 fc49 	bl	800f08c <pbuf_remove_header>
 80167fa:	4603      	mov	r3, r0
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d009      	beq.n	8016814 <icmp_input+0x120>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016800:	4b47      	ldr	r3, [pc, #284]	; (8016920 <icmp_input+0x22c>)
 8016802:	22b6      	movs	r2, #182	; 0xb6
 8016804:	4947      	ldr	r1, [pc, #284]	; (8016924 <icmp_input+0x230>)
 8016806:	4848      	ldr	r0, [pc, #288]	; (8016928 <icmp_input+0x234>)
 8016808:	f001 fc78 	bl	80180fc <iprintf>
          pbuf_free(r);
 801680c:	6978      	ldr	r0, [r7, #20]
 801680e:	f7f8 fcc3 	bl	800f198 <pbuf_free>
          goto icmperr;
 8016812:	e079      	b.n	8016908 <icmp_input+0x214>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016814:	6879      	ldr	r1, [r7, #4]
 8016816:	6978      	ldr	r0, [r7, #20]
 8016818:	f7f8 fdf2 	bl	800f400 <pbuf_copy>
 801681c:	4603      	mov	r3, r0
 801681e:	2b00      	cmp	r3, #0
 8016820:	d003      	beq.n	801682a <icmp_input+0x136>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016822:	6978      	ldr	r0, [r7, #20]
 8016824:	f7f8 fcb8 	bl	800f198 <pbuf_free>
          goto icmperr;
 8016828:	e06e      	b.n	8016908 <icmp_input+0x214>
        }
        /* free the original p */
        pbuf_free(p);
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f7f8 fcb4 	bl	800f198 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	607b      	str	r3, [r7, #4]
 8016834:	e00f      	b.n	8016856 <icmp_input+0x162>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016836:	8bfb      	ldrh	r3, [r7, #30]
 8016838:	330e      	adds	r3, #14
 801683a:	4619      	mov	r1, r3
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f7f8 fc25 	bl	800f08c <pbuf_remove_header>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d006      	beq.n	8016856 <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016848:	4b35      	ldr	r3, [pc, #212]	; (8016920 <icmp_input+0x22c>)
 801684a:	22c7      	movs	r2, #199	; 0xc7
 801684c:	4937      	ldr	r1, [pc, #220]	; (801692c <icmp_input+0x238>)
 801684e:	4836      	ldr	r0, [pc, #216]	; (8016928 <icmp_input+0x234>)
 8016850:	f001 fc54 	bl	80180fc <iprintf>
          goto icmperr;
 8016854:	e058      	b.n	8016908 <icmp_input+0x214>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801685c:	8bfb      	ldrh	r3, [r7, #30]
 801685e:	4619      	mov	r1, r3
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f7f8 fc03 	bl	800f06c <pbuf_add_header>
 8016866:	4603      	mov	r3, r0
 8016868:	2b00      	cmp	r3, #0
 801686a:	d13c      	bne.n	80168e6 <icmp_input+0x1f2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801687a:	4b27      	ldr	r3, [pc, #156]	; (8016918 <icmp_input+0x224>)
 801687c:	691a      	ldr	r2, [r3, #16]
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	2200      	movs	r2, #0
 8016886:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016888:	693b      	ldr	r3, [r7, #16]
 801688a:	885b      	ldrh	r3, [r3, #2]
 801688c:	b29b      	uxth	r3, r3
 801688e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016892:	4293      	cmp	r3, r2
 8016894:	d907      	bls.n	80168a6 <icmp_input+0x1b2>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8016896:	693b      	ldr	r3, [r7, #16]
 8016898:	885b      	ldrh	r3, [r3, #2]
 801689a:	b29b      	uxth	r3, r3
 801689c:	3309      	adds	r3, #9
 801689e:	b29a      	uxth	r2, r3
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	805a      	strh	r2, [r3, #2]
 80168a4:	e006      	b.n	80168b4 <icmp_input+0x1c0>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	885b      	ldrh	r3, [r3, #2]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	3308      	adds	r3, #8
 80168ae:	b29a      	uxth	r2, r3
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	22ff      	movs	r2, #255	; 0xff
 80168b8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2200      	movs	r2, #0
 80168be:	729a      	strb	r2, [r3, #10]
 80168c0:	2200      	movs	r2, #0
 80168c2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	9302      	str	r3, [sp, #8]
 80168c8:	2301      	movs	r3, #1
 80168ca:	9301      	str	r3, [sp, #4]
 80168cc:	2300      	movs	r3, #0
 80168ce:	9300      	str	r3, [sp, #0]
 80168d0:	23ff      	movs	r3, #255	; 0xff
 80168d2:	2200      	movs	r2, #0
 80168d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f000 fa8a 	bl	8016df0 <ip4_output_if>
 80168dc:	4603      	mov	r3, r0
 80168de:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80168e0:	e001      	b.n	80168e6 <icmp_input+0x1f2>
      break;
 80168e2:	bf00      	nop
 80168e4:	e000      	b.n	80168e8 <icmp_input+0x1f4>
      break;
 80168e6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	f7f8 fc55 	bl	800f198 <pbuf_free>
  return;
 80168ee:	e00f      	b.n	8016910 <icmp_input+0x21c>
    goto lenerr;
 80168f0:	bf00      	nop
 80168f2:	e002      	b.n	80168fa <icmp_input+0x206>
    goto lenerr;
 80168f4:	bf00      	nop
 80168f6:	e000      	b.n	80168fa <icmp_input+0x206>
        goto lenerr;
 80168f8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7f8 fc4c 	bl	800f198 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016900:	e006      	b.n	8016910 <icmp_input+0x21c>
          goto icmperr;
 8016902:	bf00      	nop
 8016904:	e000      	b.n	8016908 <icmp_input+0x214>
          goto icmperr;
 8016906:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f7f8 fc45 	bl	800f198 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801690e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016910:	3728      	adds	r7, #40	; 0x28
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	24021c8c 	.word	0x24021c8c
 801691c:	24021ca0 	.word	0x24021ca0
 8016920:	0801b9c0 	.word	0x0801b9c0
 8016924:	0801b9f8 	.word	0x0801b9f8
 8016928:	0801ba30 	.word	0x0801ba30
 801692c:	0801ba58 	.word	0x0801ba58

08016930 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	460b      	mov	r3, r1
 801693a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801693c:	78fb      	ldrb	r3, [r7, #3]
 801693e:	461a      	mov	r2, r3
 8016940:	2103      	movs	r1, #3
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f000 f814 	bl	8016970 <icmp_send_response>
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	460b      	mov	r3, r1
 801695a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801695c:	78fb      	ldrb	r3, [r7, #3]
 801695e:	461a      	mov	r2, r3
 8016960:	210b      	movs	r1, #11
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f000 f804 	bl	8016970 <icmp_send_response>
}
 8016968:	bf00      	nop
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b08c      	sub	sp, #48	; 0x30
 8016974:	af04      	add	r7, sp, #16
 8016976:	6078      	str	r0, [r7, #4]
 8016978:	460b      	mov	r3, r1
 801697a:	70fb      	strb	r3, [r7, #3]
 801697c:	4613      	mov	r3, r2
 801697e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016980:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016984:	2124      	movs	r1, #36	; 0x24
 8016986:	2022      	movs	r0, #34	; 0x22
 8016988:	f7f8 f922 	bl	800ebd0 <pbuf_alloc>
 801698c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801698e:	69fb      	ldr	r3, [r7, #28]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d056      	beq.n	8016a42 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	895b      	ldrh	r3, [r3, #10]
 8016998:	2b23      	cmp	r3, #35	; 0x23
 801699a:	d806      	bhi.n	80169aa <icmp_send_response+0x3a>
 801699c:	4b2b      	ldr	r3, [pc, #172]	; (8016a4c <icmp_send_response+0xdc>)
 801699e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80169a2:	492b      	ldr	r1, [pc, #172]	; (8016a50 <icmp_send_response+0xe0>)
 80169a4:	482b      	ldr	r0, [pc, #172]	; (8016a54 <icmp_send_response+0xe4>)
 80169a6:	f001 fba9 	bl	80180fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	685b      	ldr	r3, [r3, #4]
 80169ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	78fa      	ldrb	r2, [r7, #3]
 80169ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	78ba      	ldrb	r2, [r7, #2]
 80169c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80169c2:	697b      	ldr	r3, [r7, #20]
 80169c4:	2200      	movs	r2, #0
 80169c6:	711a      	strb	r2, [r3, #4]
 80169c8:	2200      	movs	r2, #0
 80169ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80169cc:	697b      	ldr	r3, [r7, #20]
 80169ce:	2200      	movs	r2, #0
 80169d0:	719a      	strb	r2, [r3, #6]
 80169d2:	2200      	movs	r2, #0
 80169d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80169d6:	69fb      	ldr	r3, [r7, #28]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	f103 0008 	add.w	r0, r3, #8
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	221c      	movs	r2, #28
 80169e4:	4619      	mov	r1, r3
 80169e6:	f001 fb73 	bl	80180d0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80169ea:	69bb      	ldr	r3, [r7, #24]
 80169ec:	68db      	ldr	r3, [r3, #12]
 80169ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80169f0:	f107 030c 	add.w	r3, r7, #12
 80169f4:	4618      	mov	r0, r3
 80169f6:	f000 f82f 	bl	8016a58 <ip4_route>
 80169fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d01b      	beq.n	8016a3a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	2200      	movs	r2, #0
 8016a06:	709a      	strb	r2, [r3, #2]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8016a0c:	69fb      	ldr	r3, [r7, #28]
 8016a0e:	895b      	ldrh	r3, [r3, #10]
 8016a10:	4619      	mov	r1, r3
 8016a12:	6978      	ldr	r0, [r7, #20]
 8016a14:	f7f6 ff7f 	bl	800d916 <inet_chksum>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016a20:	f107 020c 	add.w	r2, r7, #12
 8016a24:	693b      	ldr	r3, [r7, #16]
 8016a26:	9302      	str	r3, [sp, #8]
 8016a28:	2301      	movs	r3, #1
 8016a2a:	9301      	str	r3, [sp, #4]
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	9300      	str	r3, [sp, #0]
 8016a30:	23ff      	movs	r3, #255	; 0xff
 8016a32:	2100      	movs	r1, #0
 8016a34:	69f8      	ldr	r0, [r7, #28]
 8016a36:	f000 f9db 	bl	8016df0 <ip4_output_if>
  }
  pbuf_free(q);
 8016a3a:	69f8      	ldr	r0, [r7, #28]
 8016a3c:	f7f8 fbac 	bl	800f198 <pbuf_free>
 8016a40:	e000      	b.n	8016a44 <icmp_send_response+0xd4>
    return;
 8016a42:	bf00      	nop
}
 8016a44:	3720      	adds	r7, #32
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	0801b9c0 	.word	0x0801b9c0
 8016a50:	0801ba8c 	.word	0x0801ba8c
 8016a54:	0801ba30 	.word	0x0801ba30

08016a58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a68:	2be0      	cmp	r3, #224	; 0xe0
 8016a6a:	d106      	bne.n	8016a7a <ip4_route+0x22>
 8016a6c:	4b36      	ldr	r3, [pc, #216]	; (8016b48 <ip4_route+0xf0>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d002      	beq.n	8016a7a <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8016a74:	4b34      	ldr	r3, [pc, #208]	; (8016b48 <ip4_route+0xf0>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	e060      	b.n	8016b3c <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016a7a:	4b34      	ldr	r3, [pc, #208]	; (8016b4c <ip4_route+0xf4>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	60fb      	str	r3, [r7, #12]
 8016a80:	e036      	b.n	8016af0 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016a88:	f003 0301 	and.w	r3, r3, #1
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d02b      	beq.n	8016aea <ip4_route+0x92>
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016a98:	089b      	lsrs	r3, r3, #2
 8016a9a:	f003 0301 	and.w	r3, r3, #1
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d022      	beq.n	8016aea <ip4_route+0x92>
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	3304      	adds	r3, #4
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d01d      	beq.n	8016aea <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681a      	ldr	r2, [r3, #0]
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	3304      	adds	r3, #4
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	405a      	eors	r2, r3
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	3308      	adds	r3, #8
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	4013      	ands	r3, r2
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d101      	bne.n	8016aca <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	e038      	b.n	8016b3c <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016ad0:	f003 0302 	and.w	r3, r3, #2
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d108      	bne.n	8016aea <ip4_route+0x92>
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681a      	ldr	r2, [r3, #0]
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	330c      	adds	r3, #12
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d101      	bne.n	8016aea <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	e028      	b.n	8016b3c <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	60fb      	str	r3, [r7, #12]
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d1c5      	bne.n	8016a82 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016af6:	4b16      	ldr	r3, [pc, #88]	; (8016b50 <ip4_route+0xf8>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d01a      	beq.n	8016b34 <ip4_route+0xdc>
 8016afe:	4b14      	ldr	r3, [pc, #80]	; (8016b50 <ip4_route+0xf8>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b06:	f003 0301 	and.w	r3, r3, #1
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d012      	beq.n	8016b34 <ip4_route+0xdc>
 8016b0e:	4b10      	ldr	r3, [pc, #64]	; (8016b50 <ip4_route+0xf8>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b16:	f003 0304 	and.w	r3, r3, #4
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d00a      	beq.n	8016b34 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b1e:	4b0c      	ldr	r3, [pc, #48]	; (8016b50 <ip4_route+0xf8>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	3304      	adds	r3, #4
 8016b24:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d004      	beq.n	8016b34 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	2b7f      	cmp	r3, #127	; 0x7f
 8016b32:	d101      	bne.n	8016b38 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016b34:	2300      	movs	r3, #0
 8016b36:	e001      	b.n	8016b3c <ip4_route+0xe4>
  }

  return netif_default;
 8016b38:	4b05      	ldr	r3, [pc, #20]	; (8016b50 <ip4_route+0xf8>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3714      	adds	r7, #20
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr
 8016b48:	24021944 	.word	0x24021944
 8016b4c:	24024e88 	.word	0x24024e88
 8016b50:	24024e8c 	.word	0x24024e8c

08016b54 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b62:	f003 0301 	and.w	r3, r3, #1
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d016      	beq.n	8016b9a <ip4_input_accept+0x46>
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	3304      	adds	r3, #4
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d011      	beq.n	8016b9a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b76:	4b0b      	ldr	r3, [pc, #44]	; (8016ba4 <ip4_input_accept+0x50>)
 8016b78:	695a      	ldr	r2, [r3, #20]
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	3304      	adds	r3, #4
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	429a      	cmp	r2, r3
 8016b82:	d008      	beq.n	8016b96 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016b84:	4b07      	ldr	r3, [pc, #28]	; (8016ba4 <ip4_input_accept+0x50>)
 8016b86:	695b      	ldr	r3, [r3, #20]
 8016b88:	6879      	ldr	r1, [r7, #4]
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f000 fa08 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8016b90:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d001      	beq.n	8016b9a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016b96:	2301      	movs	r3, #1
 8016b98:	e000      	b.n	8016b9c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016b9a:	2300      	movs	r3, #0
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}
 8016ba4:	24021c8c 	.word	0x24021c8c

08016ba8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b086      	sub	sp, #24
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
 8016bb0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016bb8:	697b      	ldr	r3, [r7, #20]
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	091b      	lsrs	r3, r3, #4
 8016bbe:	b2db      	uxtb	r3, r3
 8016bc0:	2b04      	cmp	r3, #4
 8016bc2:	d004      	beq.n	8016bce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f7f8 fae7 	bl	800f198 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	e107      	b.n	8016dde <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	f003 030f 	and.w	r3, r3, #15
 8016bd6:	b2db      	uxtb	r3, r3
 8016bd8:	009b      	lsls	r3, r3, #2
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016bde:	697b      	ldr	r3, [r7, #20]
 8016be0:	885b      	ldrh	r3, [r3, #2]
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7f6 fe0b 	bl	800d800 <lwip_htons>
 8016bea:	4603      	mov	r3, r0
 8016bec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	891b      	ldrh	r3, [r3, #8]
 8016bf2:	89ba      	ldrh	r2, [r7, #12]
 8016bf4:	429a      	cmp	r2, r3
 8016bf6:	d204      	bcs.n	8016c02 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016bf8:	89bb      	ldrh	r3, [r7, #12]
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f7f8 f945 	bl	800ee8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	895b      	ldrh	r3, [r3, #10]
 8016c06:	89fa      	ldrh	r2, [r7, #14]
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d807      	bhi.n	8016c1c <ip4_input+0x74>
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	891b      	ldrh	r3, [r3, #8]
 8016c10:	89ba      	ldrh	r2, [r7, #12]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d802      	bhi.n	8016c1c <ip4_input+0x74>
 8016c16:	89fb      	ldrh	r3, [r7, #14]
 8016c18:	2b13      	cmp	r3, #19
 8016c1a:	d804      	bhi.n	8016c26 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7f8 fabb 	bl	800f198 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016c22:	2300      	movs	r3, #0
 8016c24:	e0db      	b.n	8016dde <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	691b      	ldr	r3, [r3, #16]
 8016c2a:	4a6f      	ldr	r2, [pc, #444]	; (8016de8 <ip4_input+0x240>)
 8016c2c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	68db      	ldr	r3, [r3, #12]
 8016c32:	4a6d      	ldr	r2, [pc, #436]	; (8016de8 <ip4_input+0x240>)
 8016c34:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c36:	4b6c      	ldr	r3, [pc, #432]	; (8016de8 <ip4_input+0x240>)
 8016c38:	695b      	ldr	r3, [r3, #20]
 8016c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c3e:	2be0      	cmp	r3, #224	; 0xe0
 8016c40:	d112      	bne.n	8016c68 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c48:	f003 0301 	and.w	r3, r3, #1
 8016c4c:	b2db      	uxtb	r3, r3
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d007      	beq.n	8016c62 <ip4_input+0xba>
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	3304      	adds	r3, #4
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d002      	beq.n	8016c62 <ip4_input+0xba>
      netif = inp;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	613b      	str	r3, [r7, #16]
 8016c60:	e02a      	b.n	8016cb8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016c62:	2300      	movs	r3, #0
 8016c64:	613b      	str	r3, [r7, #16]
 8016c66:	e027      	b.n	8016cb8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016c68:	6838      	ldr	r0, [r7, #0]
 8016c6a:	f7ff ff73 	bl	8016b54 <ip4_input_accept>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d002      	beq.n	8016c7a <ip4_input+0xd2>
      netif = inp;
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	613b      	str	r3, [r7, #16]
 8016c78:	e01e      	b.n	8016cb8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016c7e:	4b5a      	ldr	r3, [pc, #360]	; (8016de8 <ip4_input+0x240>)
 8016c80:	695b      	ldr	r3, [r3, #20]
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	2b7f      	cmp	r3, #127	; 0x7f
 8016c86:	d017      	beq.n	8016cb8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016c88:	4b58      	ldr	r3, [pc, #352]	; (8016dec <ip4_input+0x244>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	613b      	str	r3, [r7, #16]
 8016c8e:	e00e      	b.n	8016cae <ip4_input+0x106>
          if (netif == inp) {
 8016c90:	693a      	ldr	r2, [r7, #16]
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d006      	beq.n	8016ca6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016c98:	6938      	ldr	r0, [r7, #16]
 8016c9a:	f7ff ff5b 	bl	8016b54 <ip4_input_accept>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d108      	bne.n	8016cb6 <ip4_input+0x10e>
 8016ca4:	e000      	b.n	8016ca8 <ip4_input+0x100>
            continue;
 8016ca6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	613b      	str	r3, [r7, #16]
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d1ed      	bne.n	8016c90 <ip4_input+0xe8>
 8016cb4:	e000      	b.n	8016cb8 <ip4_input+0x110>
            break;
 8016cb6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016cb8:	4b4b      	ldr	r3, [pc, #300]	; (8016de8 <ip4_input+0x240>)
 8016cba:	691b      	ldr	r3, [r3, #16]
 8016cbc:	6839      	ldr	r1, [r7, #0]
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f000 f96e 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d105      	bne.n	8016cd6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016cca:	4b47      	ldr	r3, [pc, #284]	; (8016de8 <ip4_input+0x240>)
 8016ccc:	691b      	ldr	r3, [r3, #16]
 8016cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016cd2:	2be0      	cmp	r3, #224	; 0xe0
 8016cd4:	d104      	bne.n	8016ce0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f7f8 fa5e 	bl	800f198 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	e07e      	b.n	8016dde <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016ce0:	693b      	ldr	r3, [r7, #16]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d104      	bne.n	8016cf0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016ce6:	6878      	ldr	r0, [r7, #4]
 8016ce8:	f7f8 fa56 	bl	800f198 <pbuf_free>
    return ERR_OK;
 8016cec:	2300      	movs	r3, #0
 8016cee:	e076      	b.n	8016dde <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	88db      	ldrh	r3, [r3, #6]
 8016cf4:	b29b      	uxth	r3, r3
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016cfc:	4013      	ands	r3, r2
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d00b      	beq.n	8016d1a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f000 fc92 	bl	801762c <ip4_reass>
 8016d08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d101      	bne.n	8016d14 <ip4_input+0x16c>
      return ERR_OK;
 8016d10:	2300      	movs	r3, #0
 8016d12:	e064      	b.n	8016dde <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016d1a:	4a33      	ldr	r2, [pc, #204]	; (8016de8 <ip4_input+0x240>)
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016d20:	4a31      	ldr	r2, [pc, #196]	; (8016de8 <ip4_input+0x240>)
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016d26:	4a30      	ldr	r2, [pc, #192]	; (8016de8 <ip4_input+0x240>)
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	f003 030f 	and.w	r3, r3, #15
 8016d34:	b2db      	uxtb	r3, r3
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	b2db      	uxtb	r3, r3
 8016d3a:	b29a      	uxth	r2, r3
 8016d3c:	4b2a      	ldr	r3, [pc, #168]	; (8016de8 <ip4_input+0x240>)
 8016d3e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016d40:	89fb      	ldrh	r3, [r7, #14]
 8016d42:	4619      	mov	r1, r3
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	f7f8 f9a1 	bl	800f08c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	7a5b      	ldrb	r3, [r3, #9]
 8016d4e:	2b11      	cmp	r3, #17
 8016d50:	d006      	beq.n	8016d60 <ip4_input+0x1b8>
 8016d52:	2b11      	cmp	r3, #17
 8016d54:	dc13      	bgt.n	8016d7e <ip4_input+0x1d6>
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d00c      	beq.n	8016d74 <ip4_input+0x1cc>
 8016d5a:	2b06      	cmp	r3, #6
 8016d5c:	d005      	beq.n	8016d6a <ip4_input+0x1c2>
 8016d5e:	e00e      	b.n	8016d7e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016d60:	6839      	ldr	r1, [r7, #0]
 8016d62:	6878      	ldr	r0, [r7, #4]
 8016d64:	f7fe f848 	bl	8014df8 <udp_input>
        break;
 8016d68:	e026      	b.n	8016db8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016d6a:	6839      	ldr	r1, [r7, #0]
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f7fa f861 	bl	8010e34 <tcp_input>
        break;
 8016d72:	e021      	b.n	8016db8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016d74:	6839      	ldr	r1, [r7, #0]
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f7ff fcbc 	bl	80166f4 <icmp_input>
        break;
 8016d7c:	e01c      	b.n	8016db8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d7e:	4b1a      	ldr	r3, [pc, #104]	; (8016de8 <ip4_input+0x240>)
 8016d80:	695b      	ldr	r3, [r3, #20]
 8016d82:	6939      	ldr	r1, [r7, #16]
 8016d84:	4618      	mov	r0, r3
 8016d86:	f000 f90b 	bl	8016fa0 <ip4_addr_isbroadcast_u32>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d10f      	bne.n	8016db0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d90:	4b15      	ldr	r3, [pc, #84]	; (8016de8 <ip4_input+0x240>)
 8016d92:	695b      	ldr	r3, [r3, #20]
 8016d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d98:	2be0      	cmp	r3, #224	; 0xe0
 8016d9a:	d009      	beq.n	8016db0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016d9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016da0:	4619      	mov	r1, r3
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f7f8 f9e5 	bl	800f172 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016da8:	2102      	movs	r1, #2
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f7ff fdc0 	bl	8016930 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f7f8 f9f1 	bl	800f198 <pbuf_free>
        break;
 8016db6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016db8:	4b0b      	ldr	r3, [pc, #44]	; (8016de8 <ip4_input+0x240>)
 8016dba:	2200      	movs	r2, #0
 8016dbc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016dbe:	4b0a      	ldr	r3, [pc, #40]	; (8016de8 <ip4_input+0x240>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016dc4:	4b08      	ldr	r3, [pc, #32]	; (8016de8 <ip4_input+0x240>)
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016dca:	4b07      	ldr	r3, [pc, #28]	; (8016de8 <ip4_input+0x240>)
 8016dcc:	2200      	movs	r2, #0
 8016dce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016dd0:	4b05      	ldr	r3, [pc, #20]	; (8016de8 <ip4_input+0x240>)
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016dd6:	4b04      	ldr	r3, [pc, #16]	; (8016de8 <ip4_input+0x240>)
 8016dd8:	2200      	movs	r2, #0
 8016dda:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016ddc:	2300      	movs	r3, #0
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3718      	adds	r7, #24
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
 8016de6:	bf00      	nop
 8016de8:	24021c8c 	.word	0x24021c8c
 8016dec:	24024e88 	.word	0x24024e88

08016df0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b08a      	sub	sp, #40	; 0x28
 8016df4:	af04      	add	r7, sp, #16
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	60b9      	str	r1, [r7, #8]
 8016dfa:	607a      	str	r2, [r7, #4]
 8016dfc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016dfe:	68bb      	ldr	r3, [r7, #8]
 8016e00:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d009      	beq.n	8016e1c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d003      	beq.n	8016e16 <ip4_output_if+0x26>
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d102      	bne.n	8016e1c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e18:	3304      	adds	r3, #4
 8016e1a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016e1c:	78fa      	ldrb	r2, [r7, #3]
 8016e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e20:	9302      	str	r3, [sp, #8]
 8016e22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016e26:	9301      	str	r3, [sp, #4]
 8016e28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016e2c:	9300      	str	r3, [sp, #0]
 8016e2e:	4613      	mov	r3, r2
 8016e30:	687a      	ldr	r2, [r7, #4]
 8016e32:	6979      	ldr	r1, [r7, #20]
 8016e34:	68f8      	ldr	r0, [r7, #12]
 8016e36:	f000 f805 	bl	8016e44 <ip4_output_if_src>
 8016e3a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3718      	adds	r7, #24
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b088      	sub	sp, #32
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	60f8      	str	r0, [r7, #12]
 8016e4c:	60b9      	str	r1, [r7, #8]
 8016e4e:	607a      	str	r2, [r7, #4]
 8016e50:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	7b9b      	ldrb	r3, [r3, #14]
 8016e56:	2b01      	cmp	r3, #1
 8016e58:	d006      	beq.n	8016e68 <ip4_output_if_src+0x24>
 8016e5a:	4b4b      	ldr	r3, [pc, #300]	; (8016f88 <ip4_output_if_src+0x144>)
 8016e5c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016e60:	494a      	ldr	r1, [pc, #296]	; (8016f8c <ip4_output_if_src+0x148>)
 8016e62:	484b      	ldr	r0, [pc, #300]	; (8016f90 <ip4_output_if_src+0x14c>)
 8016e64:	f001 f94a 	bl	80180fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d060      	beq.n	8016f30 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016e6e:	2314      	movs	r3, #20
 8016e70:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016e72:	2114      	movs	r1, #20
 8016e74:	68f8      	ldr	r0, [r7, #12]
 8016e76:	f7f8 f8f9 	bl	800f06c <pbuf_add_header>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d002      	beq.n	8016e86 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016e80:	f06f 0301 	mvn.w	r3, #1
 8016e84:	e07c      	b.n	8016f80 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	685b      	ldr	r3, [r3, #4]
 8016e8a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	895b      	ldrh	r3, [r3, #10]
 8016e90:	2b13      	cmp	r3, #19
 8016e92:	d806      	bhi.n	8016ea2 <ip4_output_if_src+0x5e>
 8016e94:	4b3c      	ldr	r3, [pc, #240]	; (8016f88 <ip4_output_if_src+0x144>)
 8016e96:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016e9a:	493e      	ldr	r1, [pc, #248]	; (8016f94 <ip4_output_if_src+0x150>)
 8016e9c:	483c      	ldr	r0, [pc, #240]	; (8016f90 <ip4_output_if_src+0x14c>)
 8016e9e:	f001 f92d 	bl	80180fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016ea2:	69fb      	ldr	r3, [r7, #28]
 8016ea4:	78fa      	ldrb	r2, [r7, #3]
 8016ea6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016ea8:	69fb      	ldr	r3, [r7, #28]
 8016eaa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016eae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	681a      	ldr	r2, [r3, #0]
 8016eb4:	69fb      	ldr	r3, [r7, #28]
 8016eb6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016eb8:	8b7b      	ldrh	r3, [r7, #26]
 8016eba:	089b      	lsrs	r3, r3, #2
 8016ebc:	b29b      	uxth	r3, r3
 8016ebe:	b2db      	uxtb	r3, r3
 8016ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ec4:	b2da      	uxtb	r2, r3
 8016ec6:	69fb      	ldr	r3, [r7, #28]
 8016ec8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016eca:	69fb      	ldr	r3, [r7, #28]
 8016ecc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016ed0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	891b      	ldrh	r3, [r3, #8]
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7f6 fc92 	bl	800d800 <lwip_htons>
 8016edc:	4603      	mov	r3, r0
 8016ede:	461a      	mov	r2, r3
 8016ee0:	69fb      	ldr	r3, [r7, #28]
 8016ee2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	719a      	strb	r2, [r3, #6]
 8016eea:	2200      	movs	r2, #0
 8016eec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016eee:	4b2a      	ldr	r3, [pc, #168]	; (8016f98 <ip4_output_if_src+0x154>)
 8016ef0:	881b      	ldrh	r3, [r3, #0]
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f7f6 fc84 	bl	800d800 <lwip_htons>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	461a      	mov	r2, r3
 8016efc:	69fb      	ldr	r3, [r7, #28]
 8016efe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016f00:	4b25      	ldr	r3, [pc, #148]	; (8016f98 <ip4_output_if_src+0x154>)
 8016f02:	881b      	ldrh	r3, [r3, #0]
 8016f04:	3301      	adds	r3, #1
 8016f06:	b29a      	uxth	r2, r3
 8016f08:	4b23      	ldr	r3, [pc, #140]	; (8016f98 <ip4_output_if_src+0x154>)
 8016f0a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d104      	bne.n	8016f1c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016f12:	4b22      	ldr	r3, [pc, #136]	; (8016f9c <ip4_output_if_src+0x158>)
 8016f14:	681a      	ldr	r2, [r3, #0]
 8016f16:	69fb      	ldr	r3, [r7, #28]
 8016f18:	60da      	str	r2, [r3, #12]
 8016f1a:	e003      	b.n	8016f24 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	681a      	ldr	r2, [r3, #0]
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	2200      	movs	r2, #0
 8016f28:	729a      	strb	r2, [r3, #10]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	72da      	strb	r2, [r3, #11]
 8016f2e:	e00f      	b.n	8016f50 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	895b      	ldrh	r3, [r3, #10]
 8016f34:	2b13      	cmp	r3, #19
 8016f36:	d802      	bhi.n	8016f3e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f38:	f06f 0301 	mvn.w	r3, #1
 8016f3c:	e020      	b.n	8016f80 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	685b      	ldr	r3, [r3, #4]
 8016f42:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016f44:	69fb      	ldr	r3, [r7, #28]
 8016f46:	691b      	ldr	r3, [r3, #16]
 8016f48:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016f4a:	f107 0314 	add.w	r3, r7, #20
 8016f4e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d00c      	beq.n	8016f72 <ip4_output_if_src+0x12e>
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	891a      	ldrh	r2, [r3, #8]
 8016f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d906      	bls.n	8016f72 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016f64:	687a      	ldr	r2, [r7, #4]
 8016f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016f68:	68f8      	ldr	r0, [r7, #12]
 8016f6a:	f000 fd4d 	bl	8017a08 <ip4_frag>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	e006      	b.n	8016f80 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f74:	695b      	ldr	r3, [r3, #20]
 8016f76:	687a      	ldr	r2, [r7, #4]
 8016f78:	68f9      	ldr	r1, [r7, #12]
 8016f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f7c:	4798      	blx	r3
 8016f7e:	4603      	mov	r3, r0
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	3720      	adds	r7, #32
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}
 8016f88:	0801bab8 	.word	0x0801bab8
 8016f8c:	0801baec 	.word	0x0801baec
 8016f90:	0801baf8 	.word	0x0801baf8
 8016f94:	0801bb20 	.word	0x0801bb20
 8016f98:	24021942 	.word	0x24021942
 8016f9c:	0801bf70 	.word	0x0801bf70

08016fa0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b085      	sub	sp, #20
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fb4:	d002      	beq.n	8016fbc <ip4_addr_isbroadcast_u32+0x1c>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d101      	bne.n	8016fc0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	e02a      	b.n	8017016 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016fc6:	f003 0302 	and.w	r3, r3, #2
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d101      	bne.n	8016fd2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	e021      	b.n	8017016 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	d101      	bne.n	8016fe2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	e019      	b.n	8017016 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016fe2:	68fa      	ldr	r2, [r7, #12]
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	3304      	adds	r3, #4
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	405a      	eors	r2, r3
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	3308      	adds	r3, #8
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	4013      	ands	r3, r2
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d10d      	bne.n	8017014 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	3308      	adds	r3, #8
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	43da      	mvns	r2, r3
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	3308      	adds	r3, #8
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801700c:	429a      	cmp	r2, r3
 801700e:	d101      	bne.n	8017014 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017010:	2301      	movs	r3, #1
 8017012:	e000      	b.n	8017016 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017014:	2300      	movs	r3, #0
  }
}
 8017016:	4618      	mov	r0, r3
 8017018:	3714      	adds	r7, #20
 801701a:	46bd      	mov	sp, r7
 801701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017020:	4770      	bx	lr
	...

08017024 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b084      	sub	sp, #16
 8017028:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801702a:	2300      	movs	r3, #0
 801702c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801702e:	4b12      	ldr	r3, [pc, #72]	; (8017078 <ip_reass_tmr+0x54>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017034:	e018      	b.n	8017068 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	7fdb      	ldrb	r3, [r3, #31]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d00b      	beq.n	8017056 <ip_reass_tmr+0x32>
      r->timer--;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	7fdb      	ldrb	r3, [r3, #31]
 8017042:	3b01      	subs	r3, #1
 8017044:	b2da      	uxtb	r2, r3
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	60fb      	str	r3, [r7, #12]
 8017054:	e008      	b.n	8017068 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017060:	68b9      	ldr	r1, [r7, #8]
 8017062:	6878      	ldr	r0, [r7, #4]
 8017064:	f000 f80a 	bl	801707c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d1e3      	bne.n	8017036 <ip_reass_tmr+0x12>
    }
  }
}
 801706e:	bf00      	nop
 8017070:	bf00      	nop
 8017072:	3710      	adds	r7, #16
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}
 8017078:	24021948 	.word	0x24021948

0801707c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b088      	sub	sp, #32
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017086:	2300      	movs	r3, #0
 8017088:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801708a:	683a      	ldr	r2, [r7, #0]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	429a      	cmp	r2, r3
 8017090:	d105      	bne.n	801709e <ip_reass_free_complete_datagram+0x22>
 8017092:	4b45      	ldr	r3, [pc, #276]	; (80171a8 <ip_reass_free_complete_datagram+0x12c>)
 8017094:	22ab      	movs	r2, #171	; 0xab
 8017096:	4945      	ldr	r1, [pc, #276]	; (80171ac <ip_reass_free_complete_datagram+0x130>)
 8017098:	4845      	ldr	r0, [pc, #276]	; (80171b0 <ip_reass_free_complete_datagram+0x134>)
 801709a:	f001 f82f 	bl	80180fc <iprintf>
  if (prev != NULL) {
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d00a      	beq.n	80170ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	687a      	ldr	r2, [r7, #4]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d005      	beq.n	80170ba <ip_reass_free_complete_datagram+0x3e>
 80170ae:	4b3e      	ldr	r3, [pc, #248]	; (80171a8 <ip_reass_free_complete_datagram+0x12c>)
 80170b0:	22ad      	movs	r2, #173	; 0xad
 80170b2:	4940      	ldr	r1, [pc, #256]	; (80171b4 <ip_reass_free_complete_datagram+0x138>)
 80170b4:	483e      	ldr	r0, [pc, #248]	; (80171b0 <ip_reass_free_complete_datagram+0x134>)
 80170b6:	f001 f821 	bl	80180fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	889b      	ldrh	r3, [r3, #4]
 80170c6:	b29b      	uxth	r3, r3
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d12a      	bne.n	8017122 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80170da:	69bb      	ldr	r3, [r7, #24]
 80170dc:	6858      	ldr	r0, [r3, #4]
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	3308      	adds	r3, #8
 80170e2:	2214      	movs	r2, #20
 80170e4:	4619      	mov	r1, r3
 80170e6:	f000 fff3 	bl	80180d0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80170ea:	2101      	movs	r1, #1
 80170ec:	69b8      	ldr	r0, [r7, #24]
 80170ee:	f7ff fc2f 	bl	8016950 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80170f2:	69b8      	ldr	r0, [r7, #24]
 80170f4:	f7f8 f8de 	bl	800f2b4 <pbuf_clen>
 80170f8:	4603      	mov	r3, r0
 80170fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80170fc:	8bfa      	ldrh	r2, [r7, #30]
 80170fe:	8a7b      	ldrh	r3, [r7, #18]
 8017100:	4413      	add	r3, r2
 8017102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017106:	db05      	blt.n	8017114 <ip_reass_free_complete_datagram+0x98>
 8017108:	4b27      	ldr	r3, [pc, #156]	; (80171a8 <ip_reass_free_complete_datagram+0x12c>)
 801710a:	22bc      	movs	r2, #188	; 0xbc
 801710c:	492a      	ldr	r1, [pc, #168]	; (80171b8 <ip_reass_free_complete_datagram+0x13c>)
 801710e:	4828      	ldr	r0, [pc, #160]	; (80171b0 <ip_reass_free_complete_datagram+0x134>)
 8017110:	f000 fff4 	bl	80180fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017114:	8bfa      	ldrh	r2, [r7, #30]
 8017116:	8a7b      	ldrh	r3, [r7, #18]
 8017118:	4413      	add	r3, r2
 801711a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801711c:	69b8      	ldr	r0, [r7, #24]
 801711e:	f7f8 f83b 	bl	800f198 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017128:	e01f      	b.n	801716a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801712a:	69bb      	ldr	r3, [r7, #24]
 801712c:	685b      	ldr	r3, [r3, #4]
 801712e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017130:	69bb      	ldr	r3, [r7, #24]
 8017132:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801713a:	68f8      	ldr	r0, [r7, #12]
 801713c:	f7f8 f8ba 	bl	800f2b4 <pbuf_clen>
 8017140:	4603      	mov	r3, r0
 8017142:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017144:	8bfa      	ldrh	r2, [r7, #30]
 8017146:	8a7b      	ldrh	r3, [r7, #18]
 8017148:	4413      	add	r3, r2
 801714a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801714e:	db05      	blt.n	801715c <ip_reass_free_complete_datagram+0xe0>
 8017150:	4b15      	ldr	r3, [pc, #84]	; (80171a8 <ip_reass_free_complete_datagram+0x12c>)
 8017152:	22cc      	movs	r2, #204	; 0xcc
 8017154:	4918      	ldr	r1, [pc, #96]	; (80171b8 <ip_reass_free_complete_datagram+0x13c>)
 8017156:	4816      	ldr	r0, [pc, #88]	; (80171b0 <ip_reass_free_complete_datagram+0x134>)
 8017158:	f000 ffd0 	bl	80180fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801715c:	8bfa      	ldrh	r2, [r7, #30]
 801715e:	8a7b      	ldrh	r3, [r7, #18]
 8017160:	4413      	add	r3, r2
 8017162:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017164:	68f8      	ldr	r0, [r7, #12]
 8017166:	f7f8 f817 	bl	800f198 <pbuf_free>
  while (p != NULL) {
 801716a:	69bb      	ldr	r3, [r7, #24]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d1dc      	bne.n	801712a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017170:	6839      	ldr	r1, [r7, #0]
 8017172:	6878      	ldr	r0, [r7, #4]
 8017174:	f000 f8c2 	bl	80172fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017178:	4b10      	ldr	r3, [pc, #64]	; (80171bc <ip_reass_free_complete_datagram+0x140>)
 801717a:	881b      	ldrh	r3, [r3, #0]
 801717c:	8bfa      	ldrh	r2, [r7, #30]
 801717e:	429a      	cmp	r2, r3
 8017180:	d905      	bls.n	801718e <ip_reass_free_complete_datagram+0x112>
 8017182:	4b09      	ldr	r3, [pc, #36]	; (80171a8 <ip_reass_free_complete_datagram+0x12c>)
 8017184:	22d2      	movs	r2, #210	; 0xd2
 8017186:	490e      	ldr	r1, [pc, #56]	; (80171c0 <ip_reass_free_complete_datagram+0x144>)
 8017188:	4809      	ldr	r0, [pc, #36]	; (80171b0 <ip_reass_free_complete_datagram+0x134>)
 801718a:	f000 ffb7 	bl	80180fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801718e:	4b0b      	ldr	r3, [pc, #44]	; (80171bc <ip_reass_free_complete_datagram+0x140>)
 8017190:	881a      	ldrh	r2, [r3, #0]
 8017192:	8bfb      	ldrh	r3, [r7, #30]
 8017194:	1ad3      	subs	r3, r2, r3
 8017196:	b29a      	uxth	r2, r3
 8017198:	4b08      	ldr	r3, [pc, #32]	; (80171bc <ip_reass_free_complete_datagram+0x140>)
 801719a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801719c:	8bfb      	ldrh	r3, [r7, #30]
}
 801719e:	4618      	mov	r0, r3
 80171a0:	3720      	adds	r7, #32
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd80      	pop	{r7, pc}
 80171a6:	bf00      	nop
 80171a8:	0801bb50 	.word	0x0801bb50
 80171ac:	0801bb8c 	.word	0x0801bb8c
 80171b0:	0801bb98 	.word	0x0801bb98
 80171b4:	0801bbc0 	.word	0x0801bbc0
 80171b8:	0801bbd4 	.word	0x0801bbd4
 80171bc:	2402194c 	.word	0x2402194c
 80171c0:	0801bbf4 	.word	0x0801bbf4

080171c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b08a      	sub	sp, #40	; 0x28
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
 80171cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80171ce:	2300      	movs	r3, #0
 80171d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80171d2:	2300      	movs	r3, #0
 80171d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80171d6:	2300      	movs	r3, #0
 80171d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80171da:	2300      	movs	r3, #0
 80171dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80171de:	2300      	movs	r3, #0
 80171e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80171e2:	4b28      	ldr	r3, [pc, #160]	; (8017284 <ip_reass_remove_oldest_datagram+0xc0>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80171e8:	e030      	b.n	801724c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80171ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ec:	695a      	ldr	r2, [r3, #20]
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	68db      	ldr	r3, [r3, #12]
 80171f2:	429a      	cmp	r2, r3
 80171f4:	d10c      	bne.n	8017210 <ip_reass_remove_oldest_datagram+0x4c>
 80171f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f8:	699a      	ldr	r2, [r3, #24]
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	691b      	ldr	r3, [r3, #16]
 80171fe:	429a      	cmp	r2, r3
 8017200:	d106      	bne.n	8017210 <ip_reass_remove_oldest_datagram+0x4c>
 8017202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017204:	899a      	ldrh	r2, [r3, #12]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	889b      	ldrh	r3, [r3, #4]
 801720a:	b29b      	uxth	r3, r3
 801720c:	429a      	cmp	r2, r3
 801720e:	d014      	beq.n	801723a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	3301      	adds	r3, #1
 8017214:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017216:	6a3b      	ldr	r3, [r7, #32]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d104      	bne.n	8017226 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017220:	69fb      	ldr	r3, [r7, #28]
 8017222:	61bb      	str	r3, [r7, #24]
 8017224:	e009      	b.n	801723a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	7fda      	ldrb	r2, [r3, #31]
 801722a:	6a3b      	ldr	r3, [r7, #32]
 801722c:	7fdb      	ldrb	r3, [r3, #31]
 801722e:	429a      	cmp	r2, r3
 8017230:	d803      	bhi.n	801723a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017234:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017236:	69fb      	ldr	r3, [r7, #28]
 8017238:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d001      	beq.n	8017246 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017244:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801724e:	2b00      	cmp	r3, #0
 8017250:	d1cb      	bne.n	80171ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017252:	6a3b      	ldr	r3, [r7, #32]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d008      	beq.n	801726a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017258:	69b9      	ldr	r1, [r7, #24]
 801725a:	6a38      	ldr	r0, [r7, #32]
 801725c:	f7ff ff0e 	bl	801707c <ip_reass_free_complete_datagram>
 8017260:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017262:	697a      	ldr	r2, [r7, #20]
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	4413      	add	r3, r2
 8017268:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801726a:	697a      	ldr	r2, [r7, #20]
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	429a      	cmp	r2, r3
 8017270:	da02      	bge.n	8017278 <ip_reass_remove_oldest_datagram+0xb4>
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	2b01      	cmp	r3, #1
 8017276:	dcac      	bgt.n	80171d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017278:	697b      	ldr	r3, [r7, #20]
}
 801727a:	4618      	mov	r0, r3
 801727c:	3728      	adds	r7, #40	; 0x28
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	24021948 	.word	0x24021948

08017288 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017292:	2004      	movs	r0, #4
 8017294:	f7f7 f844 	bl	800e320 <memp_malloc>
 8017298:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d110      	bne.n	80172c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80172a0:	6839      	ldr	r1, [r7, #0]
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f7ff ff8e 	bl	80171c4 <ip_reass_remove_oldest_datagram>
 80172a8:	4602      	mov	r2, r0
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	4293      	cmp	r3, r2
 80172ae:	dc03      	bgt.n	80172b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80172b0:	2004      	movs	r0, #4
 80172b2:	f7f7 f835 	bl	800e320 <memp_malloc>
 80172b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d101      	bne.n	80172c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80172be:	2300      	movs	r3, #0
 80172c0:	e016      	b.n	80172f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80172c2:	2220      	movs	r2, #32
 80172c4:	2100      	movs	r1, #0
 80172c6:	68f8      	ldr	r0, [r7, #12]
 80172c8:	f000 ff10 	bl	80180ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	220f      	movs	r2, #15
 80172d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80172d2:	4b09      	ldr	r3, [pc, #36]	; (80172f8 <ip_reass_enqueue_new_datagram+0x70>)
 80172d4:	681a      	ldr	r2, [r3, #0]
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80172da:	4a07      	ldr	r2, [pc, #28]	; (80172f8 <ip_reass_enqueue_new_datagram+0x70>)
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	3308      	adds	r3, #8
 80172e4:	2214      	movs	r2, #20
 80172e6:	6879      	ldr	r1, [r7, #4]
 80172e8:	4618      	mov	r0, r3
 80172ea:	f000 fef1 	bl	80180d0 <memcpy>
  return ipr;
 80172ee:	68fb      	ldr	r3, [r7, #12]
}
 80172f0:	4618      	mov	r0, r3
 80172f2:	3710      	adds	r7, #16
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}
 80172f8:	24021948 	.word	0x24021948

080172fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017306:	4b10      	ldr	r3, [pc, #64]	; (8017348 <ip_reass_dequeue_datagram+0x4c>)
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	687a      	ldr	r2, [r7, #4]
 801730c:	429a      	cmp	r2, r3
 801730e:	d104      	bne.n	801731a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	4a0c      	ldr	r2, [pc, #48]	; (8017348 <ip_reass_dequeue_datagram+0x4c>)
 8017316:	6013      	str	r3, [r2, #0]
 8017318:	e00d      	b.n	8017336 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d106      	bne.n	801732e <ip_reass_dequeue_datagram+0x32>
 8017320:	4b0a      	ldr	r3, [pc, #40]	; (801734c <ip_reass_dequeue_datagram+0x50>)
 8017322:	f240 1245 	movw	r2, #325	; 0x145
 8017326:	490a      	ldr	r1, [pc, #40]	; (8017350 <ip_reass_dequeue_datagram+0x54>)
 8017328:	480a      	ldr	r0, [pc, #40]	; (8017354 <ip_reass_dequeue_datagram+0x58>)
 801732a:	f000 fee7 	bl	80180fc <iprintf>
    prev->next = ipr->next;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017336:	6879      	ldr	r1, [r7, #4]
 8017338:	2004      	movs	r0, #4
 801733a:	f7f7 f867 	bl	800e40c <memp_free>
}
 801733e:	bf00      	nop
 8017340:	3708      	adds	r7, #8
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	24021948 	.word	0x24021948
 801734c:	0801bb50 	.word	0x0801bb50
 8017350:	0801bc18 	.word	0x0801bc18
 8017354:	0801bb98 	.word	0x0801bb98

08017358 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b08c      	sub	sp, #48	; 0x30
 801735c:	af00      	add	r7, sp, #0
 801735e:	60f8      	str	r0, [r7, #12]
 8017360:	60b9      	str	r1, [r7, #8]
 8017362:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017364:	2300      	movs	r3, #0
 8017366:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017368:	2301      	movs	r3, #1
 801736a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801736c:	68bb      	ldr	r3, [r7, #8]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017372:	69fb      	ldr	r3, [r7, #28]
 8017374:	885b      	ldrh	r3, [r3, #2]
 8017376:	b29b      	uxth	r3, r3
 8017378:	4618      	mov	r0, r3
 801737a:	f7f6 fa41 	bl	800d800 <lwip_htons>
 801737e:	4603      	mov	r3, r0
 8017380:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017382:	69fb      	ldr	r3, [r7, #28]
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	f003 030f 	and.w	r3, r3, #15
 801738a:	b2db      	uxtb	r3, r3
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017390:	7e7b      	ldrb	r3, [r7, #25]
 8017392:	b29b      	uxth	r3, r3
 8017394:	8b7a      	ldrh	r2, [r7, #26]
 8017396:	429a      	cmp	r2, r3
 8017398:	d202      	bcs.n	80173a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801739a:	f04f 33ff 	mov.w	r3, #4294967295
 801739e:	e135      	b.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80173a0:	7e7b      	ldrb	r3, [r7, #25]
 80173a2:	b29b      	uxth	r3, r3
 80173a4:	8b7a      	ldrh	r2, [r7, #26]
 80173a6:	1ad3      	subs	r3, r2, r3
 80173a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80173aa:	69fb      	ldr	r3, [r7, #28]
 80173ac:	88db      	ldrh	r3, [r3, #6]
 80173ae:	b29b      	uxth	r3, r3
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7f6 fa25 	bl	800d800 <lwip_htons>
 80173b6:	4603      	mov	r3, r0
 80173b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173bc:	b29b      	uxth	r3, r3
 80173be:	00db      	lsls	r3, r3, #3
 80173c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80173c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ca:	2200      	movs	r2, #0
 80173cc:	701a      	strb	r2, [r3, #0]
 80173ce:	2200      	movs	r2, #0
 80173d0:	705a      	strb	r2, [r3, #1]
 80173d2:	2200      	movs	r2, #0
 80173d4:	709a      	strb	r2, [r3, #2]
 80173d6:	2200      	movs	r2, #0
 80173d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80173da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173dc:	8afa      	ldrh	r2, [r7, #22]
 80173de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80173e0:	8afa      	ldrh	r2, [r7, #22]
 80173e2:	8b7b      	ldrh	r3, [r7, #26]
 80173e4:	4413      	add	r3, r2
 80173e6:	b29a      	uxth	r2, r3
 80173e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80173ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ee:	88db      	ldrh	r3, [r3, #6]
 80173f0:	b29b      	uxth	r3, r3
 80173f2:	8afa      	ldrh	r2, [r7, #22]
 80173f4:	429a      	cmp	r2, r3
 80173f6:	d902      	bls.n	80173fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173f8:	f04f 33ff 	mov.w	r3, #4294967295
 80173fc:	e106      	b.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	685b      	ldr	r3, [r3, #4]
 8017402:	627b      	str	r3, [r7, #36]	; 0x24
 8017404:	e068      	b.n	80174d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017408:	685b      	ldr	r3, [r3, #4]
 801740a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740e:	889b      	ldrh	r3, [r3, #4]
 8017410:	b29a      	uxth	r2, r3
 8017412:	693b      	ldr	r3, [r7, #16]
 8017414:	889b      	ldrh	r3, [r3, #4]
 8017416:	b29b      	uxth	r3, r3
 8017418:	429a      	cmp	r2, r3
 801741a:	d235      	bcs.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801741e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017420:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017424:	2b00      	cmp	r3, #0
 8017426:	d020      	beq.n	801746a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742a:	889b      	ldrh	r3, [r3, #4]
 801742c:	b29a      	uxth	r2, r3
 801742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017430:	88db      	ldrh	r3, [r3, #6]
 8017432:	b29b      	uxth	r3, r3
 8017434:	429a      	cmp	r2, r3
 8017436:	d307      	bcc.n	8017448 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743a:	88db      	ldrh	r3, [r3, #6]
 801743c:	b29a      	uxth	r2, r3
 801743e:	693b      	ldr	r3, [r7, #16]
 8017440:	889b      	ldrh	r3, [r3, #4]
 8017442:	b29b      	uxth	r3, r3
 8017444:	429a      	cmp	r2, r3
 8017446:	d902      	bls.n	801744e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017448:	f04f 33ff 	mov.w	r3, #4294967295
 801744c:	e0de      	b.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017450:	68ba      	ldr	r2, [r7, #8]
 8017452:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017456:	88db      	ldrh	r3, [r3, #6]
 8017458:	b29a      	uxth	r2, r3
 801745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745c:	889b      	ldrh	r3, [r3, #4]
 801745e:	b29b      	uxth	r3, r3
 8017460:	429a      	cmp	r2, r3
 8017462:	d03d      	beq.n	80174e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017464:	2300      	movs	r3, #0
 8017466:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017468:	e03a      	b.n	80174e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801746c:	88db      	ldrh	r3, [r3, #6]
 801746e:	b29a      	uxth	r2, r3
 8017470:	693b      	ldr	r3, [r7, #16]
 8017472:	889b      	ldrh	r3, [r3, #4]
 8017474:	b29b      	uxth	r3, r3
 8017476:	429a      	cmp	r2, r3
 8017478:	d902      	bls.n	8017480 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801747a:	f04f 33ff 	mov.w	r3, #4294967295
 801747e:	e0c5      	b.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	68ba      	ldr	r2, [r7, #8]
 8017484:	605a      	str	r2, [r3, #4]
      break;
 8017486:	e02b      	b.n	80174e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801748a:	889b      	ldrh	r3, [r3, #4]
 801748c:	b29a      	uxth	r2, r3
 801748e:	693b      	ldr	r3, [r7, #16]
 8017490:	889b      	ldrh	r3, [r3, #4]
 8017492:	b29b      	uxth	r3, r3
 8017494:	429a      	cmp	r2, r3
 8017496:	d102      	bne.n	801749e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017498:	f04f 33ff 	mov.w	r3, #4294967295
 801749c:	e0b6      	b.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a0:	889b      	ldrh	r3, [r3, #4]
 80174a2:	b29a      	uxth	r2, r3
 80174a4:	693b      	ldr	r3, [r7, #16]
 80174a6:	88db      	ldrh	r3, [r3, #6]
 80174a8:	b29b      	uxth	r3, r3
 80174aa:	429a      	cmp	r2, r3
 80174ac:	d202      	bcs.n	80174b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174ae:	f04f 33ff 	mov.w	r3, #4294967295
 80174b2:	e0ab      	b.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80174b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d009      	beq.n	80174ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80174ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174bc:	88db      	ldrh	r3, [r3, #6]
 80174be:	b29a      	uxth	r2, r3
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	889b      	ldrh	r3, [r3, #4]
 80174c4:	b29b      	uxth	r3, r3
 80174c6:	429a      	cmp	r2, r3
 80174c8:	d001      	beq.n	80174ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80174ca:	2300      	movs	r3, #0
 80174cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80174ce:	693b      	ldr	r3, [r7, #16]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80174d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d193      	bne.n	8017406 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80174de:	e000      	b.n	80174e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80174e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80174e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d12d      	bne.n	8017544 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80174e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d01c      	beq.n	8017528 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80174ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f0:	88db      	ldrh	r3, [r3, #6]
 80174f2:	b29a      	uxth	r2, r3
 80174f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f6:	889b      	ldrh	r3, [r3, #4]
 80174f8:	b29b      	uxth	r3, r3
 80174fa:	429a      	cmp	r2, r3
 80174fc:	d906      	bls.n	801750c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80174fe:	4b45      	ldr	r3, [pc, #276]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017500:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017504:	4944      	ldr	r1, [pc, #272]	; (8017618 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017506:	4845      	ldr	r0, [pc, #276]	; (801761c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017508:	f000 fdf8 	bl	80180fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801750e:	68ba      	ldr	r2, [r7, #8]
 8017510:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017514:	88db      	ldrh	r3, [r3, #6]
 8017516:	b29a      	uxth	r2, r3
 8017518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751a:	889b      	ldrh	r3, [r3, #4]
 801751c:	b29b      	uxth	r3, r3
 801751e:	429a      	cmp	r2, r3
 8017520:	d010      	beq.n	8017544 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017522:	2300      	movs	r3, #0
 8017524:	623b      	str	r3, [r7, #32]
 8017526:	e00d      	b.n	8017544 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	685b      	ldr	r3, [r3, #4]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d006      	beq.n	801753e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017530:	4b38      	ldr	r3, [pc, #224]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017532:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017536:	493a      	ldr	r1, [pc, #232]	; (8017620 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017538:	4838      	ldr	r0, [pc, #224]	; (801761c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801753a:	f000 fddf 	bl	80180fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	68ba      	ldr	r2, [r7, #8]
 8017542:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d105      	bne.n	8017556 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	7f9b      	ldrb	r3, [r3, #30]
 801754e:	f003 0301 	and.w	r3, r3, #1
 8017552:	2b00      	cmp	r3, #0
 8017554:	d059      	beq.n	801760a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017556:	6a3b      	ldr	r3, [r7, #32]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d04f      	beq.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d006      	beq.n	8017572 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	685b      	ldr	r3, [r3, #4]
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	889b      	ldrh	r3, [r3, #4]
 801756c:	b29b      	uxth	r3, r3
 801756e:	2b00      	cmp	r3, #0
 8017570:	d002      	beq.n	8017578 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017572:	2300      	movs	r3, #0
 8017574:	623b      	str	r3, [r7, #32]
 8017576:	e041      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801757a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017582:	e012      	b.n	80175aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017586:	685b      	ldr	r3, [r3, #4]
 8017588:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801758c:	88db      	ldrh	r3, [r3, #6]
 801758e:	b29a      	uxth	r2, r3
 8017590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017592:	889b      	ldrh	r3, [r3, #4]
 8017594:	b29b      	uxth	r3, r3
 8017596:	429a      	cmp	r2, r3
 8017598:	d002      	beq.n	80175a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801759a:	2300      	movs	r3, #0
 801759c:	623b      	str	r3, [r7, #32]
            break;
 801759e:	e007      	b.n	80175b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80175a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80175a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80175aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d1e9      	bne.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80175b0:	6a3b      	ldr	r3, [r7, #32]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d022      	beq.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d106      	bne.n	80175cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80175be:	4b15      	ldr	r3, [pc, #84]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175c0:	f240 12df 	movw	r2, #479	; 0x1df
 80175c4:	4917      	ldr	r1, [pc, #92]	; (8017624 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80175c6:	4815      	ldr	r0, [pc, #84]	; (801761c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175c8:	f000 fd98 	bl	80180fc <iprintf>
          LWIP_ASSERT("sanity check",
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	685b      	ldr	r3, [r3, #4]
 80175d0:	685b      	ldr	r3, [r3, #4]
 80175d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175d4:	429a      	cmp	r2, r3
 80175d6:	d106      	bne.n	80175e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80175d8:	4b0e      	ldr	r3, [pc, #56]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80175de:	4911      	ldr	r1, [pc, #68]	; (8017624 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80175e0:	480e      	ldr	r0, [pc, #56]	; (801761c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175e2:	f000 fd8b 	bl	80180fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80175e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d006      	beq.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80175ee:	4b09      	ldr	r3, [pc, #36]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80175f4:	490c      	ldr	r1, [pc, #48]	; (8017628 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80175f6:	4809      	ldr	r0, [pc, #36]	; (801761c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175f8:	f000 fd80 	bl	80180fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80175fc:	6a3b      	ldr	r3, [r7, #32]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	bf14      	ite	ne
 8017602:	2301      	movne	r3, #1
 8017604:	2300      	moveq	r3, #0
 8017606:	b2db      	uxtb	r3, r3
 8017608:	e000      	b.n	801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801760a:	2300      	movs	r3, #0
}
 801760c:	4618      	mov	r0, r3
 801760e:	3730      	adds	r7, #48	; 0x30
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}
 8017614:	0801bb50 	.word	0x0801bb50
 8017618:	0801bc34 	.word	0x0801bc34
 801761c:	0801bb98 	.word	0x0801bb98
 8017620:	0801bc54 	.word	0x0801bc54
 8017624:	0801bc8c 	.word	0x0801bc8c
 8017628:	0801bc9c 	.word	0x0801bc9c

0801762c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b08e      	sub	sp, #56	; 0x38
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	685b      	ldr	r3, [r3, #4]
 8017638:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	f003 030f 	and.w	r3, r3, #15
 8017642:	b2db      	uxtb	r3, r3
 8017644:	009b      	lsls	r3, r3, #2
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b14      	cmp	r3, #20
 801764a:	f040 8167 	bne.w	801791c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017650:	88db      	ldrh	r3, [r3, #6]
 8017652:	b29b      	uxth	r3, r3
 8017654:	4618      	mov	r0, r3
 8017656:	f7f6 f8d3 	bl	800d800 <lwip_htons>
 801765a:	4603      	mov	r3, r0
 801765c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017660:	b29b      	uxth	r3, r3
 8017662:	00db      	lsls	r3, r3, #3
 8017664:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017668:	885b      	ldrh	r3, [r3, #2]
 801766a:	b29b      	uxth	r3, r3
 801766c:	4618      	mov	r0, r3
 801766e:	f7f6 f8c7 	bl	800d800 <lwip_htons>
 8017672:	4603      	mov	r3, r0
 8017674:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017678:	781b      	ldrb	r3, [r3, #0]
 801767a:	f003 030f 	and.w	r3, r3, #15
 801767e:	b2db      	uxtb	r3, r3
 8017680:	009b      	lsls	r3, r3, #2
 8017682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017686:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801768a:	b29b      	uxth	r3, r3
 801768c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801768e:	429a      	cmp	r2, r3
 8017690:	f0c0 8146 	bcc.w	8017920 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017698:	b29b      	uxth	r3, r3
 801769a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801769c:	1ad3      	subs	r3, r2, r3
 801769e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7f7 fe07 	bl	800f2b4 <pbuf_clen>
 80176a6:	4603      	mov	r3, r0
 80176a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80176aa:	4b9f      	ldr	r3, [pc, #636]	; (8017928 <ip4_reass+0x2fc>)
 80176ac:	881b      	ldrh	r3, [r3, #0]
 80176ae:	461a      	mov	r2, r3
 80176b0:	8c3b      	ldrh	r3, [r7, #32]
 80176b2:	4413      	add	r3, r2
 80176b4:	2b0a      	cmp	r3, #10
 80176b6:	dd10      	ble.n	80176da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176b8:	8c3b      	ldrh	r3, [r7, #32]
 80176ba:	4619      	mov	r1, r3
 80176bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176be:	f7ff fd81 	bl	80171c4 <ip_reass_remove_oldest_datagram>
 80176c2:	4603      	mov	r3, r0
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f000 812d 	beq.w	8017924 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80176ca:	4b97      	ldr	r3, [pc, #604]	; (8017928 <ip4_reass+0x2fc>)
 80176cc:	881b      	ldrh	r3, [r3, #0]
 80176ce:	461a      	mov	r2, r3
 80176d0:	8c3b      	ldrh	r3, [r7, #32]
 80176d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176d4:	2b0a      	cmp	r3, #10
 80176d6:	f300 8125 	bgt.w	8017924 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176da:	4b94      	ldr	r3, [pc, #592]	; (801792c <ip4_reass+0x300>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	633b      	str	r3, [r7, #48]	; 0x30
 80176e0:	e015      	b.n	801770e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80176e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e4:	695a      	ldr	r2, [r3, #20]
 80176e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e8:	68db      	ldr	r3, [r3, #12]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d10c      	bne.n	8017708 <ip4_reass+0xdc>
 80176ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f0:	699a      	ldr	r2, [r3, #24]
 80176f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f4:	691b      	ldr	r3, [r3, #16]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d106      	bne.n	8017708 <ip4_reass+0xdc>
 80176fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fc:	899a      	ldrh	r2, [r3, #12]
 80176fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017700:	889b      	ldrh	r3, [r3, #4]
 8017702:	b29b      	uxth	r3, r3
 8017704:	429a      	cmp	r2, r3
 8017706:	d006      	beq.n	8017716 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	633b      	str	r3, [r7, #48]	; 0x30
 801770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017710:	2b00      	cmp	r3, #0
 8017712:	d1e6      	bne.n	80176e2 <ip4_reass+0xb6>
 8017714:	e000      	b.n	8017718 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017716:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801771a:	2b00      	cmp	r3, #0
 801771c:	d109      	bne.n	8017732 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801771e:	8c3b      	ldrh	r3, [r7, #32]
 8017720:	4619      	mov	r1, r3
 8017722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017724:	f7ff fdb0 	bl	8017288 <ip_reass_enqueue_new_datagram>
 8017728:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772c:	2b00      	cmp	r3, #0
 801772e:	d11c      	bne.n	801776a <ip4_reass+0x13e>
      goto nullreturn;
 8017730:	e109      	b.n	8017946 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017734:	88db      	ldrh	r3, [r3, #6]
 8017736:	b29b      	uxth	r3, r3
 8017738:	4618      	mov	r0, r3
 801773a:	f7f6 f861 	bl	800d800 <lwip_htons>
 801773e:	4603      	mov	r3, r0
 8017740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017744:	2b00      	cmp	r3, #0
 8017746:	d110      	bne.n	801776a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801774a:	89db      	ldrh	r3, [r3, #14]
 801774c:	4618      	mov	r0, r3
 801774e:	f7f6 f857 	bl	800d800 <lwip_htons>
 8017752:	4603      	mov	r3, r0
 8017754:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017758:	2b00      	cmp	r3, #0
 801775a:	d006      	beq.n	801776a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775e:	3308      	adds	r3, #8
 8017760:	2214      	movs	r2, #20
 8017762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017764:	4618      	mov	r0, r3
 8017766:	f000 fcb3 	bl	80180d0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776c:	88db      	ldrh	r3, [r3, #6]
 801776e:	b29b      	uxth	r3, r3
 8017770:	f003 0320 	and.w	r3, r3, #32
 8017774:	2b00      	cmp	r3, #0
 8017776:	bf0c      	ite	eq
 8017778:	2301      	moveq	r3, #1
 801777a:	2300      	movne	r3, #0
 801777c:	b2db      	uxtb	r3, r3
 801777e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017780:	69fb      	ldr	r3, [r7, #28]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d00e      	beq.n	80177a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017786:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801778a:	4413      	add	r3, r2
 801778c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801778e:	8b7a      	ldrh	r2, [r7, #26]
 8017790:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017792:	429a      	cmp	r2, r3
 8017794:	f0c0 80a0 	bcc.w	80178d8 <ip4_reass+0x2ac>
 8017798:	8b7b      	ldrh	r3, [r7, #26]
 801779a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801779e:	4293      	cmp	r3, r2
 80177a0:	f200 809a 	bhi.w	80178d8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80177a4:	69fa      	ldr	r2, [r7, #28]
 80177a6:	6879      	ldr	r1, [r7, #4]
 80177a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177aa:	f7ff fdd5 	bl	8017358 <ip_reass_chain_frag_into_datagram_and_validate>
 80177ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177b6:	f000 8091 	beq.w	80178dc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80177ba:	4b5b      	ldr	r3, [pc, #364]	; (8017928 <ip4_reass+0x2fc>)
 80177bc:	881a      	ldrh	r2, [r3, #0]
 80177be:	8c3b      	ldrh	r3, [r7, #32]
 80177c0:	4413      	add	r3, r2
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	4b58      	ldr	r3, [pc, #352]	; (8017928 <ip4_reass+0x2fc>)
 80177c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80177c8:	69fb      	ldr	r3, [r7, #28]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d00d      	beq.n	80177ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80177ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80177d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177d2:	4413      	add	r3, r2
 80177d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80177d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d8:	8a7a      	ldrh	r2, [r7, #18]
 80177da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80177dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177de:	7f9b      	ldrb	r3, [r3, #30]
 80177e0:	f043 0301 	orr.w	r3, r3, #1
 80177e4:	b2da      	uxtb	r2, r3
 80177e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80177ea:	697b      	ldr	r3, [r7, #20]
 80177ec:	2b01      	cmp	r3, #1
 80177ee:	d171      	bne.n	80178d4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80177f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f2:	8b9b      	ldrh	r3, [r3, #28]
 80177f4:	3314      	adds	r3, #20
 80177f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80177f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177fa:	685b      	ldr	r3, [r3, #4]
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017804:	685b      	ldr	r3, [r3, #4]
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801780c:	3308      	adds	r3, #8
 801780e:	2214      	movs	r2, #20
 8017810:	4619      	mov	r1, r3
 8017812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017814:	f000 fc5c 	bl	80180d0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017818:	8a3b      	ldrh	r3, [r7, #16]
 801781a:	4618      	mov	r0, r3
 801781c:	f7f5 fff0 	bl	800d800 <lwip_htons>
 8017820:	4603      	mov	r3, r0
 8017822:	461a      	mov	r2, r3
 8017824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017826:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801782a:	2200      	movs	r2, #0
 801782c:	719a      	strb	r2, [r3, #6]
 801782e:	2200      	movs	r2, #0
 8017830:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017834:	2200      	movs	r2, #0
 8017836:	729a      	strb	r2, [r3, #10]
 8017838:	2200      	movs	r2, #0
 801783a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801783e:	685b      	ldr	r3, [r3, #4]
 8017840:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017842:	e00d      	b.n	8017860 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017846:	685b      	ldr	r3, [r3, #4]
 8017848:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801784a:	2114      	movs	r1, #20
 801784c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801784e:	f7f7 fc1d 	bl	800f08c <pbuf_remove_header>
      pbuf_cat(p, r);
 8017852:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7f7 fd6d 	bl	800f334 <pbuf_cat>
      r = iprh->next_pbuf;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1ee      	bne.n	8017844 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017866:	4b31      	ldr	r3, [pc, #196]	; (801792c <ip4_reass+0x300>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801786c:	429a      	cmp	r2, r3
 801786e:	d102      	bne.n	8017876 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017870:	2300      	movs	r3, #0
 8017872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017874:	e010      	b.n	8017898 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017876:	4b2d      	ldr	r3, [pc, #180]	; (801792c <ip4_reass+0x300>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801787c:	e007      	b.n	801788e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017884:	429a      	cmp	r2, r3
 8017886:	d006      	beq.n	8017896 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017890:	2b00      	cmp	r3, #0
 8017892:	d1f4      	bne.n	801787e <ip4_reass+0x252>
 8017894:	e000      	b.n	8017898 <ip4_reass+0x26c>
          break;
 8017896:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801789a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801789c:	f7ff fd2e 	bl	80172fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f7f7 fd07 	bl	800f2b4 <pbuf_clen>
 80178a6:	4603      	mov	r3, r0
 80178a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80178aa:	4b1f      	ldr	r3, [pc, #124]	; (8017928 <ip4_reass+0x2fc>)
 80178ac:	881b      	ldrh	r3, [r3, #0]
 80178ae:	8c3a      	ldrh	r2, [r7, #32]
 80178b0:	429a      	cmp	r2, r3
 80178b2:	d906      	bls.n	80178c2 <ip4_reass+0x296>
 80178b4:	4b1e      	ldr	r3, [pc, #120]	; (8017930 <ip4_reass+0x304>)
 80178b6:	f240 229b 	movw	r2, #667	; 0x29b
 80178ba:	491e      	ldr	r1, [pc, #120]	; (8017934 <ip4_reass+0x308>)
 80178bc:	481e      	ldr	r0, [pc, #120]	; (8017938 <ip4_reass+0x30c>)
 80178be:	f000 fc1d 	bl	80180fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80178c2:	4b19      	ldr	r3, [pc, #100]	; (8017928 <ip4_reass+0x2fc>)
 80178c4:	881a      	ldrh	r2, [r3, #0]
 80178c6:	8c3b      	ldrh	r3, [r7, #32]
 80178c8:	1ad3      	subs	r3, r2, r3
 80178ca:	b29a      	uxth	r2, r3
 80178cc:	4b16      	ldr	r3, [pc, #88]	; (8017928 <ip4_reass+0x2fc>)
 80178ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	e03c      	b.n	801794e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80178d4:	2300      	movs	r3, #0
 80178d6:	e03a      	b.n	801794e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80178d8:	bf00      	nop
 80178da:	e000      	b.n	80178de <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80178dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80178de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d106      	bne.n	80178f2 <ip4_reass+0x2c6>
 80178e4:	4b12      	ldr	r3, [pc, #72]	; (8017930 <ip4_reass+0x304>)
 80178e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80178ea:	4914      	ldr	r1, [pc, #80]	; (801793c <ip4_reass+0x310>)
 80178ec:	4812      	ldr	r0, [pc, #72]	; (8017938 <ip4_reass+0x30c>)
 80178ee:	f000 fc05 	bl	80180fc <iprintf>
  if (ipr->p == NULL) {
 80178f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d124      	bne.n	8017944 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80178fa:	4b0c      	ldr	r3, [pc, #48]	; (801792c <ip4_reass+0x300>)
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017900:	429a      	cmp	r2, r3
 8017902:	d006      	beq.n	8017912 <ip4_reass+0x2e6>
 8017904:	4b0a      	ldr	r3, [pc, #40]	; (8017930 <ip4_reass+0x304>)
 8017906:	f240 22ab 	movw	r2, #683	; 0x2ab
 801790a:	490d      	ldr	r1, [pc, #52]	; (8017940 <ip4_reass+0x314>)
 801790c:	480a      	ldr	r0, [pc, #40]	; (8017938 <ip4_reass+0x30c>)
 801790e:	f000 fbf5 	bl	80180fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017912:	2100      	movs	r1, #0
 8017914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017916:	f7ff fcf1 	bl	80172fc <ip_reass_dequeue_datagram>
 801791a:	e014      	b.n	8017946 <ip4_reass+0x31a>
    goto nullreturn;
 801791c:	bf00      	nop
 801791e:	e012      	b.n	8017946 <ip4_reass+0x31a>
    goto nullreturn;
 8017920:	bf00      	nop
 8017922:	e010      	b.n	8017946 <ip4_reass+0x31a>
      goto nullreturn;
 8017924:	bf00      	nop
 8017926:	e00e      	b.n	8017946 <ip4_reass+0x31a>
 8017928:	2402194c 	.word	0x2402194c
 801792c:	24021948 	.word	0x24021948
 8017930:	0801bb50 	.word	0x0801bb50
 8017934:	0801bcc0 	.word	0x0801bcc0
 8017938:	0801bb98 	.word	0x0801bb98
 801793c:	0801bcdc 	.word	0x0801bcdc
 8017940:	0801bce8 	.word	0x0801bce8
  }

nullreturn:
 8017944:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f7f7 fc26 	bl	800f198 <pbuf_free>
  return NULL;
 801794c:	2300      	movs	r3, #0
}
 801794e:	4618      	mov	r0, r3
 8017950:	3738      	adds	r7, #56	; 0x38
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}
 8017956:	bf00      	nop

08017958 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801795c:	2005      	movs	r0, #5
 801795e:	f7f6 fcdf 	bl	800e320 <memp_malloc>
 8017962:	4603      	mov	r3, r0
}
 8017964:	4618      	mov	r0, r3
 8017966:	bd80      	pop	{r7, pc}

08017968 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b082      	sub	sp, #8
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d106      	bne.n	8017984 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017976:	4b07      	ldr	r3, [pc, #28]	; (8017994 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017978:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801797c:	4906      	ldr	r1, [pc, #24]	; (8017998 <ip_frag_free_pbuf_custom_ref+0x30>)
 801797e:	4807      	ldr	r0, [pc, #28]	; (801799c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017980:	f000 fbbc 	bl	80180fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017984:	6879      	ldr	r1, [r7, #4]
 8017986:	2005      	movs	r0, #5
 8017988:	f7f6 fd40 	bl	800e40c <memp_free>
}
 801798c:	bf00      	nop
 801798e:	3708      	adds	r7, #8
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}
 8017994:	0801bb50 	.word	0x0801bb50
 8017998:	0801bd08 	.word	0x0801bd08
 801799c:	0801bb98 	.word	0x0801bb98

080179a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b084      	sub	sp, #16
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d106      	bne.n	80179c0 <ipfrag_free_pbuf_custom+0x20>
 80179b2:	4b11      	ldr	r3, [pc, #68]	; (80179f8 <ipfrag_free_pbuf_custom+0x58>)
 80179b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80179b8:	4910      	ldr	r1, [pc, #64]	; (80179fc <ipfrag_free_pbuf_custom+0x5c>)
 80179ba:	4811      	ldr	r0, [pc, #68]	; (8017a00 <ipfrag_free_pbuf_custom+0x60>)
 80179bc:	f000 fb9e 	bl	80180fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80179c0:	68fa      	ldr	r2, [r7, #12]
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d006      	beq.n	80179d6 <ipfrag_free_pbuf_custom+0x36>
 80179c8:	4b0b      	ldr	r3, [pc, #44]	; (80179f8 <ipfrag_free_pbuf_custom+0x58>)
 80179ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80179ce:	490d      	ldr	r1, [pc, #52]	; (8017a04 <ipfrag_free_pbuf_custom+0x64>)
 80179d0:	480b      	ldr	r0, [pc, #44]	; (8017a00 <ipfrag_free_pbuf_custom+0x60>)
 80179d2:	f000 fb93 	bl	80180fc <iprintf>
  if (pcr->original != NULL) {
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	695b      	ldr	r3, [r3, #20]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d004      	beq.n	80179e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	695b      	ldr	r3, [r3, #20]
 80179e2:	4618      	mov	r0, r3
 80179e4:	f7f7 fbd8 	bl	800f198 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80179e8:	68f8      	ldr	r0, [r7, #12]
 80179ea:	f7ff ffbd 	bl	8017968 <ip_frag_free_pbuf_custom_ref>
}
 80179ee:	bf00      	nop
 80179f0:	3710      	adds	r7, #16
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}
 80179f6:	bf00      	nop
 80179f8:	0801bb50 	.word	0x0801bb50
 80179fc:	0801bd14 	.word	0x0801bd14
 8017a00:	0801bb98 	.word	0x0801bb98
 8017a04:	0801bd20 	.word	0x0801bd20

08017a08 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b094      	sub	sp, #80	; 0x50
 8017a0c:	af02      	add	r7, sp, #8
 8017a0e:	60f8      	str	r0, [r7, #12]
 8017a10:	60b9      	str	r1, [r7, #8]
 8017a12:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017a1a:	68bb      	ldr	r3, [r7, #8]
 8017a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017a1e:	3b14      	subs	r3, #20
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	da00      	bge.n	8017a26 <ip4_frag+0x1e>
 8017a24:	3307      	adds	r3, #7
 8017a26:	10db      	asrs	r3, r3, #3
 8017a28:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017a2a:	2314      	movs	r3, #20
 8017a2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a36:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	f003 030f 	and.w	r3, r3, #15
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	009b      	lsls	r3, r3, #2
 8017a44:	b2db      	uxtb	r3, r3
 8017a46:	2b14      	cmp	r3, #20
 8017a48:	d002      	beq.n	8017a50 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017a4a:	f06f 0305 	mvn.w	r3, #5
 8017a4e:	e110      	b.n	8017c72 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	895b      	ldrh	r3, [r3, #10]
 8017a54:	2b13      	cmp	r3, #19
 8017a56:	d809      	bhi.n	8017a6c <ip4_frag+0x64>
 8017a58:	4b88      	ldr	r3, [pc, #544]	; (8017c7c <ip4_frag+0x274>)
 8017a5a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017a5e:	4988      	ldr	r1, [pc, #544]	; (8017c80 <ip4_frag+0x278>)
 8017a60:	4888      	ldr	r0, [pc, #544]	; (8017c84 <ip4_frag+0x27c>)
 8017a62:	f000 fb4b 	bl	80180fc <iprintf>
 8017a66:	f06f 0305 	mvn.w	r3, #5
 8017a6a:	e102      	b.n	8017c72 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a6e:	88db      	ldrh	r3, [r3, #6]
 8017a70:	b29b      	uxth	r3, r3
 8017a72:	4618      	mov	r0, r3
 8017a74:	f7f5 fec4 	bl	800d800 <lwip_htons>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017a7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a8c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	891b      	ldrh	r3, [r3, #8]
 8017a92:	3b14      	subs	r3, #20
 8017a94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017a98:	e0e1      	b.n	8017c5e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017a9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a9c:	00db      	lsls	r3, r3, #3
 8017a9e:	b29b      	uxth	r3, r3
 8017aa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017aa4:	4293      	cmp	r3, r2
 8017aa6:	bf28      	it	cs
 8017aa8:	4613      	movcs	r3, r2
 8017aaa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017aac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017ab0:	2114      	movs	r1, #20
 8017ab2:	200e      	movs	r0, #14
 8017ab4:	f7f7 f88c 	bl	800ebd0 <pbuf_alloc>
 8017ab8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	f000 80d5 	beq.w	8017c6c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac4:	895b      	ldrh	r3, [r3, #10]
 8017ac6:	2b13      	cmp	r3, #19
 8017ac8:	d806      	bhi.n	8017ad8 <ip4_frag+0xd0>
 8017aca:	4b6c      	ldr	r3, [pc, #432]	; (8017c7c <ip4_frag+0x274>)
 8017acc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017ad0:	496d      	ldr	r1, [pc, #436]	; (8017c88 <ip4_frag+0x280>)
 8017ad2:	486c      	ldr	r0, [pc, #432]	; (8017c84 <ip4_frag+0x27c>)
 8017ad4:	f000 fb12 	bl	80180fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	2214      	movs	r2, #20
 8017ade:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f000 faf5 	bl	80180d0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae8:	685b      	ldr	r3, [r3, #4]
 8017aea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017aec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017aee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017af2:	e064      	b.n	8017bbe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	895a      	ldrh	r2, [r3, #10]
 8017af8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017afa:	1ad3      	subs	r3, r2, r3
 8017afc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	895b      	ldrh	r3, [r3, #10]
 8017b02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d906      	bls.n	8017b16 <ip4_frag+0x10e>
 8017b08:	4b5c      	ldr	r3, [pc, #368]	; (8017c7c <ip4_frag+0x274>)
 8017b0a:	f240 322d 	movw	r2, #813	; 0x32d
 8017b0e:	495f      	ldr	r1, [pc, #380]	; (8017c8c <ip4_frag+0x284>)
 8017b10:	485c      	ldr	r0, [pc, #368]	; (8017c84 <ip4_frag+0x27c>)
 8017b12:	f000 faf3 	bl	80180fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017b16:	8bfa      	ldrh	r2, [r7, #30]
 8017b18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	bf28      	it	cs
 8017b20:	4613      	movcs	r3, r2
 8017b22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017b26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d105      	bne.n	8017b3a <ip4_frag+0x132>
        poff = 0;
 8017b2e:	2300      	movs	r3, #0
 8017b30:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	60fb      	str	r3, [r7, #12]
        continue;
 8017b38:	e041      	b.n	8017bbe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017b3a:	f7ff ff0d 	bl	8017958 <ip_frag_alloc_pbuf_custom_ref>
 8017b3e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017b40:	69bb      	ldr	r3, [r7, #24]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d103      	bne.n	8017b4e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b48:	f7f7 fb26 	bl	800f198 <pbuf_free>
        goto memerr;
 8017b4c:	e08f      	b.n	8017c6e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017b4e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017b54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b56:	4413      	add	r3, r2
 8017b58:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017b5c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017b60:	9201      	str	r2, [sp, #4]
 8017b62:	9300      	str	r3, [sp, #0]
 8017b64:	4603      	mov	r3, r0
 8017b66:	2241      	movs	r2, #65	; 0x41
 8017b68:	2000      	movs	r0, #0
 8017b6a:	f7f7 f95b 	bl	800ee24 <pbuf_alloced_custom>
 8017b6e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d106      	bne.n	8017b84 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017b76:	69b8      	ldr	r0, [r7, #24]
 8017b78:	f7ff fef6 	bl	8017968 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b7e:	f7f7 fb0b 	bl	800f198 <pbuf_free>
        goto memerr;
 8017b82:	e074      	b.n	8017c6e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017b84:	68f8      	ldr	r0, [r7, #12]
 8017b86:	f7f7 fbad 	bl	800f2e4 <pbuf_ref>
      pcr->original = p;
 8017b8a:	69bb      	ldr	r3, [r7, #24]
 8017b8c:	68fa      	ldr	r2, [r7, #12]
 8017b8e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017b90:	69bb      	ldr	r3, [r7, #24]
 8017b92:	4a3f      	ldr	r2, [pc, #252]	; (8017c90 <ip4_frag+0x288>)
 8017b94:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017b96:	6979      	ldr	r1, [r7, #20]
 8017b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b9a:	f7f7 fbcb 	bl	800f334 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017b9e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017ba2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017ba6:	1ad3      	subs	r3, r2, r3
 8017ba8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017bac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d004      	beq.n	8017bbe <ip4_frag+0x1b6>
        poff = 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017bbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d196      	bne.n	8017af4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017bc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017bc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017bcc:	4413      	add	r3, r2
 8017bce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017bd0:	68bb      	ldr	r3, [r7, #8]
 8017bd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017bd4:	f1a3 0213 	sub.w	r2, r3, #19
 8017bd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	bfcc      	ite	gt
 8017be0:	2301      	movgt	r3, #1
 8017be2:	2300      	movle	r3, #0
 8017be4:	b2db      	uxtb	r3, r3
 8017be6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017be8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017bf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017bf2:	6a3b      	ldr	r3, [r7, #32]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d002      	beq.n	8017bfe <ip4_frag+0x1f6>
 8017bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d003      	beq.n	8017c06 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017bfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017c04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017c06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7f5 fdf9 	bl	800d800 <lwip_htons>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	461a      	mov	r2, r3
 8017c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c14:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017c16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c18:	3314      	adds	r3, #20
 8017c1a:	b29b      	uxth	r3, r3
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7f5 fdef 	bl	800d800 <lwip_htons>
 8017c22:	4603      	mov	r3, r0
 8017c24:	461a      	mov	r2, r3
 8017c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c28:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	729a      	strb	r2, [r3, #10]
 8017c30:	2200      	movs	r2, #0
 8017c32:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	695b      	ldr	r3, [r3, #20]
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c3c:	68b8      	ldr	r0, [r7, #8]
 8017c3e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c42:	f7f7 faa9 	bl	800f198 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017c46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c4c:	1ad3      	subs	r3, r2, r3
 8017c4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017c52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017c56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017c58:	4413      	add	r3, r2
 8017c5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017c5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	f47f af19 	bne.w	8017a9a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	e002      	b.n	8017c72 <ip4_frag+0x26a>
      goto memerr;
 8017c6c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3748      	adds	r7, #72	; 0x48
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	0801bb50 	.word	0x0801bb50
 8017c80:	0801bd2c 	.word	0x0801bd2c
 8017c84:	0801bb98 	.word	0x0801bb98
 8017c88:	0801bd48 	.word	0x0801bd48
 8017c8c:	0801bd68 	.word	0x0801bd68
 8017c90:	080179a1 	.word	0x080179a1

08017c94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b086      	sub	sp, #24
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
 8017c9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017c9e:	230e      	movs	r3, #14
 8017ca0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	895b      	ldrh	r3, [r3, #10]
 8017ca6:	2b0e      	cmp	r3, #14
 8017ca8:	d96e      	bls.n	8017d88 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	7bdb      	ldrb	r3, [r3, #15]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d106      	bne.n	8017cc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017cb8:	3301      	adds	r3, #1
 8017cba:	b2da      	uxtb	r2, r3
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	685b      	ldr	r3, [r3, #4]
 8017cc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017cc6:	693b      	ldr	r3, [r7, #16]
 8017cc8:	7b1a      	ldrb	r2, [r3, #12]
 8017cca:	7b5b      	ldrb	r3, [r3, #13]
 8017ccc:	021b      	lsls	r3, r3, #8
 8017cce:	4313      	orrs	r3, r2
 8017cd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	f003 0301 	and.w	r3, r3, #1
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d023      	beq.n	8017d26 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017cde:	693b      	ldr	r3, [r7, #16]
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	2b01      	cmp	r3, #1
 8017ce4:	d10f      	bne.n	8017d06 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017ce6:	693b      	ldr	r3, [r7, #16]
 8017ce8:	785b      	ldrb	r3, [r3, #1]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d11b      	bne.n	8017d26 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017cf2:	2b5e      	cmp	r3, #94	; 0x5e
 8017cf4:	d117      	bne.n	8017d26 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	7b5b      	ldrb	r3, [r3, #13]
 8017cfa:	f043 0310 	orr.w	r3, r3, #16
 8017cfe:	b2da      	uxtb	r2, r3
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	735a      	strb	r2, [r3, #13]
 8017d04:	e00f      	b.n	8017d26 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	2206      	movs	r2, #6
 8017d0a:	4928      	ldr	r1, [pc, #160]	; (8017dac <ethernet_input+0x118>)
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f000 f9d1 	bl	80180b4 <memcmp>
 8017d12:	4603      	mov	r3, r0
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d106      	bne.n	8017d26 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	7b5b      	ldrb	r3, [r3, #13]
 8017d1c:	f043 0308 	orr.w	r3, r3, #8
 8017d20:	b2da      	uxtb	r2, r3
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017d26:	89fb      	ldrh	r3, [r7, #14]
 8017d28:	2b08      	cmp	r3, #8
 8017d2a:	d003      	beq.n	8017d34 <ethernet_input+0xa0>
 8017d2c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017d30:	d014      	beq.n	8017d5c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017d32:	e032      	b.n	8017d9a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017d3a:	f003 0308 	and.w	r3, r3, #8
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d024      	beq.n	8017d8c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017d42:	8afb      	ldrh	r3, [r7, #22]
 8017d44:	4619      	mov	r1, r3
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	f7f7 f9a0 	bl	800f08c <pbuf_remove_header>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d11e      	bne.n	8017d90 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017d52:	6839      	ldr	r1, [r7, #0]
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7fe ff27 	bl	8016ba8 <ip4_input>
      break;
 8017d5a:	e013      	b.n	8017d84 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017d62:	f003 0308 	and.w	r3, r3, #8
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d014      	beq.n	8017d94 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017d6a:	8afb      	ldrh	r3, [r7, #22]
 8017d6c:	4619      	mov	r1, r3
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f7f7 f98c 	bl	800f08c <pbuf_remove_header>
 8017d74:	4603      	mov	r3, r0
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d10e      	bne.n	8017d98 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017d7a:	6839      	ldr	r1, [r7, #0]
 8017d7c:	6878      	ldr	r0, [r7, #4]
 8017d7e:	f7fe f849 	bl	8015e14 <etharp_input>
      break;
 8017d82:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017d84:	2300      	movs	r3, #0
 8017d86:	e00c      	b.n	8017da2 <ethernet_input+0x10e>
    goto free_and_return;
 8017d88:	bf00      	nop
 8017d8a:	e006      	b.n	8017d9a <ethernet_input+0x106>
        goto free_and_return;
 8017d8c:	bf00      	nop
 8017d8e:	e004      	b.n	8017d9a <ethernet_input+0x106>
        goto free_and_return;
 8017d90:	bf00      	nop
 8017d92:	e002      	b.n	8017d9a <ethernet_input+0x106>
        goto free_and_return;
 8017d94:	bf00      	nop
 8017d96:	e000      	b.n	8017d9a <ethernet_input+0x106>
        goto free_and_return;
 8017d98:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017d9a:	6878      	ldr	r0, [r7, #4]
 8017d9c:	f7f7 f9fc 	bl	800f198 <pbuf_free>
  return ERR_OK;
 8017da0:	2300      	movs	r3, #0
}
 8017da2:	4618      	mov	r0, r3
 8017da4:	3718      	adds	r7, #24
 8017da6:	46bd      	mov	sp, r7
 8017da8:	bd80      	pop	{r7, pc}
 8017daa:	bf00      	nop
 8017dac:	0801bf78 	.word	0x0801bf78

08017db0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b086      	sub	sp, #24
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	60f8      	str	r0, [r7, #12]
 8017db8:	60b9      	str	r1, [r7, #8]
 8017dba:	607a      	str	r2, [r7, #4]
 8017dbc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017dbe:	8c3b      	ldrh	r3, [r7, #32]
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7f5 fd1d 	bl	800d800 <lwip_htons>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017dca:	210e      	movs	r1, #14
 8017dcc:	68b8      	ldr	r0, [r7, #8]
 8017dce:	f7f7 f94d 	bl	800f06c <pbuf_add_header>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d125      	bne.n	8017e24 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017dde:	693b      	ldr	r3, [r7, #16]
 8017de0:	8afa      	ldrh	r2, [r7, #22]
 8017de2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	2206      	movs	r2, #6
 8017de8:	6839      	ldr	r1, [r7, #0]
 8017dea:	4618      	mov	r0, r3
 8017dec:	f000 f970 	bl	80180d0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017df0:	693b      	ldr	r3, [r7, #16]
 8017df2:	3306      	adds	r3, #6
 8017df4:	2206      	movs	r2, #6
 8017df6:	6879      	ldr	r1, [r7, #4]
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f000 f969 	bl	80180d0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017e04:	2b06      	cmp	r3, #6
 8017e06:	d006      	beq.n	8017e16 <ethernet_output+0x66>
 8017e08:	4b0a      	ldr	r3, [pc, #40]	; (8017e34 <ethernet_output+0x84>)
 8017e0a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017e0e:	490a      	ldr	r1, [pc, #40]	; (8017e38 <ethernet_output+0x88>)
 8017e10:	480a      	ldr	r0, [pc, #40]	; (8017e3c <ethernet_output+0x8c>)
 8017e12:	f000 f973 	bl	80180fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	699b      	ldr	r3, [r3, #24]
 8017e1a:	68b9      	ldr	r1, [r7, #8]
 8017e1c:	68f8      	ldr	r0, [r7, #12]
 8017e1e:	4798      	blx	r3
 8017e20:	4603      	mov	r3, r0
 8017e22:	e002      	b.n	8017e2a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017e24:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017e26:	f06f 0301 	mvn.w	r3, #1
}
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	3718      	adds	r7, #24
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	bd80      	pop	{r7, pc}
 8017e32:	bf00      	nop
 8017e34:	0801bd78 	.word	0x0801bd78
 8017e38:	0801bdb0 	.word	0x0801bdb0
 8017e3c:	0801bde4 	.word	0x0801bde4

08017e40 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b086      	sub	sp, #24
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	60bb      	str	r3, [r7, #8]
 8017e4e:	2304      	movs	r3, #4
 8017e50:	60fb      	str	r3, [r7, #12]
 8017e52:	2300      	movs	r3, #0
 8017e54:	613b      	str	r3, [r7, #16]
 8017e56:	2300      	movs	r3, #0
 8017e58:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017e5a:	f107 0308 	add.w	r3, r7, #8
 8017e5e:	2100      	movs	r1, #0
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7f2 f957 	bl	800a114 <osMessageCreate>
 8017e66:	4602      	mov	r2, r0
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d102      	bne.n	8017e7a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017e74:	f04f 33ff 	mov.w	r3, #4294967295
 8017e78:	e000      	b.n	8017e7c <sys_mbox_new+0x3c>

  return ERR_OK;
 8017e7a:	2300      	movs	r3, #0
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3718      	adds	r7, #24
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	6839      	ldr	r1, [r7, #0]
 8017e94:	2200      	movs	r2, #0
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7f2 f964 	bl	800a164 <osMessagePut>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d102      	bne.n	8017ea8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	73fb      	strb	r3, [r7, #15]
 8017ea6:	e001      	b.n	8017eac <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017ea8:	23ff      	movs	r3, #255	; 0xff
 8017eaa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	3710      	adds	r7, #16
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}

08017eb8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b08c      	sub	sp, #48	; 0x30
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	61f8      	str	r0, [r7, #28]
 8017ec0:	61b9      	str	r1, [r7, #24]
 8017ec2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017ec4:	f7f1 ff49 	bl	8009d5a <osKernelSysTick>
 8017ec8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017eca:	697b      	ldr	r3, [r7, #20]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d017      	beq.n	8017f00 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017ed0:	69fb      	ldr	r3, [r7, #28]
 8017ed2:	6819      	ldr	r1, [r3, #0]
 8017ed4:	f107 0320 	add.w	r3, r7, #32
 8017ed8:	697a      	ldr	r2, [r7, #20]
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7f2 f982 	bl	800a1e4 <osMessageGet>

    if(event.status == osEventMessage)
 8017ee0:	6a3b      	ldr	r3, [r7, #32]
 8017ee2:	2b10      	cmp	r3, #16
 8017ee4:	d109      	bne.n	8017efa <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee8:	461a      	mov	r2, r3
 8017eea:	69bb      	ldr	r3, [r7, #24]
 8017eec:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017eee:	f7f1 ff34 	bl	8009d5a <osKernelSysTick>
 8017ef2:	4602      	mov	r2, r0
 8017ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef6:	1ad3      	subs	r3, r2, r3
 8017ef8:	e019      	b.n	8017f2e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017efa:	f04f 33ff 	mov.w	r3, #4294967295
 8017efe:	e016      	b.n	8017f2e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017f00:	69fb      	ldr	r3, [r7, #28]
 8017f02:	6819      	ldr	r1, [r3, #0]
 8017f04:	463b      	mov	r3, r7
 8017f06:	f04f 32ff 	mov.w	r2, #4294967295
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7f2 f96a 	bl	800a1e4 <osMessageGet>
 8017f10:	f107 0320 	add.w	r3, r7, #32
 8017f14:	463a      	mov	r2, r7
 8017f16:	ca07      	ldmia	r2, {r0, r1, r2}
 8017f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1e:	461a      	mov	r2, r3
 8017f20:	69bb      	ldr	r3, [r7, #24]
 8017f22:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017f24:	f7f1 ff19 	bl	8009d5a <osKernelSysTick>
 8017f28:	4602      	mov	r2, r0
 8017f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f2c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	3730      	adds	r7, #48	; 0x30
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd80      	pop	{r7, pc}

08017f36 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017f36:	b480      	push	{r7}
 8017f38:	b083      	sub	sp, #12
 8017f3a:	af00      	add	r7, sp, #0
 8017f3c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d101      	bne.n	8017f4a <sys_mbox_valid+0x14>
    return 0;
 8017f46:	2300      	movs	r3, #0
 8017f48:	e000      	b.n	8017f4c <sys_mbox_valid+0x16>
  else
    return 1;
 8017f4a:	2301      	movs	r3, #1
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	370c      	adds	r7, #12
 8017f50:	46bd      	mov	sp, r7
 8017f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f56:	4770      	bx	lr

08017f58 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017f5c:	4803      	ldr	r0, [pc, #12]	; (8017f6c <sys_init+0x14>)
 8017f5e:	f7f1 ff78 	bl	8009e52 <osMutexCreate>
 8017f62:	4603      	mov	r3, r0
 8017f64:	4a02      	ldr	r2, [pc, #8]	; (8017f70 <sys_init+0x18>)
 8017f66:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017f68:	bf00      	nop
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	0801bf88 	.word	0x0801bf88
 8017f70:	24024eb8 	.word	0x24024eb8

08017f74 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b084      	sub	sp, #16
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	60bb      	str	r3, [r7, #8]
 8017f80:	2300      	movs	r3, #0
 8017f82:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017f84:	f107 0308 	add.w	r3, r7, #8
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7f1 ff62 	bl	8009e52 <osMutexCreate>
 8017f8e:	4602      	mov	r2, r0
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa0:	e000      	b.n	8017fa4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017fa2:	2300      	movs	r3, #0
}
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	3710      	adds	r7, #16
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}

08017fac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f7f1 ff61 	bl	8009e84 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017fc2:	bf00      	nop
 8017fc4:	3708      	adds	r7, #8
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	bd80      	pop	{r7, pc}

08017fca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017fca:	b580      	push	{r7, lr}
 8017fcc:	b082      	sub	sp, #8
 8017fce:	af00      	add	r7, sp, #0
 8017fd0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f7f1 ffa2 	bl	8009f20 <osMutexRelease>
}
 8017fdc:	bf00      	nop
 8017fde:	3708      	adds	r7, #8
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b08c      	sub	sp, #48	; 0x30
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	60b9      	str	r1, [r7, #8]
 8017fee:	607a      	str	r2, [r7, #4]
 8017ff0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017ff2:	f107 0314 	add.w	r3, r7, #20
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	601a      	str	r2, [r3, #0]
 8017ffa:	605a      	str	r2, [r3, #4]
 8017ffc:	609a      	str	r2, [r3, #8]
 8017ffe:	60da      	str	r2, [r3, #12]
 8018000:	611a      	str	r2, [r3, #16]
 8018002:	615a      	str	r2, [r3, #20]
 8018004:	619a      	str	r2, [r3, #24]
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	617b      	str	r3, [r7, #20]
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	61bb      	str	r3, [r7, #24]
 801800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018010:	b21b      	sxth	r3, r3
 8018012:	83bb      	strh	r3, [r7, #28]
 8018014:	683b      	ldr	r3, [r7, #0]
 8018016:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018018:	f107 0314 	add.w	r3, r7, #20
 801801c:	6879      	ldr	r1, [r7, #4]
 801801e:	4618      	mov	r0, r3
 8018020:	f7f1 feab 	bl	8009d7a <osThreadCreate>
 8018024:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018026:	4618      	mov	r0, r3
 8018028:	3730      	adds	r7, #48	; 0x30
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
	...

08018030 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018034:	4b04      	ldr	r3, [pc, #16]	; (8018048 <sys_arch_protect+0x18>)
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	f04f 31ff 	mov.w	r1, #4294967295
 801803c:	4618      	mov	r0, r3
 801803e:	f7f1 ff21 	bl	8009e84 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018042:	2301      	movs	r3, #1
}
 8018044:	4618      	mov	r0, r3
 8018046:	bd80      	pop	{r7, pc}
 8018048:	24024eb8 	.word	0x24024eb8

0801804c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018054:	4b04      	ldr	r3, [pc, #16]	; (8018068 <sys_arch_unprotect+0x1c>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	4618      	mov	r0, r3
 801805a:	f7f1 ff61 	bl	8009f20 <osMutexRelease>
}
 801805e:	bf00      	nop
 8018060:	3708      	adds	r7, #8
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}
 8018066:	bf00      	nop
 8018068:	24024eb8 	.word	0x24024eb8

0801806c <__libc_init_array>:
 801806c:	b570      	push	{r4, r5, r6, lr}
 801806e:	4d0d      	ldr	r5, [pc, #52]	; (80180a4 <__libc_init_array+0x38>)
 8018070:	4c0d      	ldr	r4, [pc, #52]	; (80180a8 <__libc_init_array+0x3c>)
 8018072:	1b64      	subs	r4, r4, r5
 8018074:	10a4      	asrs	r4, r4, #2
 8018076:	2600      	movs	r6, #0
 8018078:	42a6      	cmp	r6, r4
 801807a:	d109      	bne.n	8018090 <__libc_init_array+0x24>
 801807c:	4d0b      	ldr	r5, [pc, #44]	; (80180ac <__libc_init_array+0x40>)
 801807e:	4c0c      	ldr	r4, [pc, #48]	; (80180b0 <__libc_init_array+0x44>)
 8018080:	f000 ff92 	bl	8018fa8 <_init>
 8018084:	1b64      	subs	r4, r4, r5
 8018086:	10a4      	asrs	r4, r4, #2
 8018088:	2600      	movs	r6, #0
 801808a:	42a6      	cmp	r6, r4
 801808c:	d105      	bne.n	801809a <__libc_init_array+0x2e>
 801808e:	bd70      	pop	{r4, r5, r6, pc}
 8018090:	f855 3b04 	ldr.w	r3, [r5], #4
 8018094:	4798      	blx	r3
 8018096:	3601      	adds	r6, #1
 8018098:	e7ee      	b.n	8018078 <__libc_init_array+0xc>
 801809a:	f855 3b04 	ldr.w	r3, [r5], #4
 801809e:	4798      	blx	r3
 80180a0:	3601      	adds	r6, #1
 80180a2:	e7f2      	b.n	801808a <__libc_init_array+0x1e>
 80180a4:	0801c030 	.word	0x0801c030
 80180a8:	0801c030 	.word	0x0801c030
 80180ac:	0801c030 	.word	0x0801c030
 80180b0:	0801c034 	.word	0x0801c034

080180b4 <memcmp>:
 80180b4:	b530      	push	{r4, r5, lr}
 80180b6:	3901      	subs	r1, #1
 80180b8:	2400      	movs	r4, #0
 80180ba:	42a2      	cmp	r2, r4
 80180bc:	d101      	bne.n	80180c2 <memcmp+0xe>
 80180be:	2000      	movs	r0, #0
 80180c0:	e005      	b.n	80180ce <memcmp+0x1a>
 80180c2:	5d03      	ldrb	r3, [r0, r4]
 80180c4:	3401      	adds	r4, #1
 80180c6:	5d0d      	ldrb	r5, [r1, r4]
 80180c8:	42ab      	cmp	r3, r5
 80180ca:	d0f6      	beq.n	80180ba <memcmp+0x6>
 80180cc:	1b58      	subs	r0, r3, r5
 80180ce:	bd30      	pop	{r4, r5, pc}

080180d0 <memcpy>:
 80180d0:	440a      	add	r2, r1
 80180d2:	4291      	cmp	r1, r2
 80180d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80180d8:	d100      	bne.n	80180dc <memcpy+0xc>
 80180da:	4770      	bx	lr
 80180dc:	b510      	push	{r4, lr}
 80180de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80180e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80180e6:	4291      	cmp	r1, r2
 80180e8:	d1f9      	bne.n	80180de <memcpy+0xe>
 80180ea:	bd10      	pop	{r4, pc}

080180ec <memset>:
 80180ec:	4402      	add	r2, r0
 80180ee:	4603      	mov	r3, r0
 80180f0:	4293      	cmp	r3, r2
 80180f2:	d100      	bne.n	80180f6 <memset+0xa>
 80180f4:	4770      	bx	lr
 80180f6:	f803 1b01 	strb.w	r1, [r3], #1
 80180fa:	e7f9      	b.n	80180f0 <memset+0x4>

080180fc <iprintf>:
 80180fc:	b40f      	push	{r0, r1, r2, r3}
 80180fe:	4b0a      	ldr	r3, [pc, #40]	; (8018128 <iprintf+0x2c>)
 8018100:	b513      	push	{r0, r1, r4, lr}
 8018102:	681c      	ldr	r4, [r3, #0]
 8018104:	b124      	cbz	r4, 8018110 <iprintf+0x14>
 8018106:	69a3      	ldr	r3, [r4, #24]
 8018108:	b913      	cbnz	r3, 8018110 <iprintf+0x14>
 801810a:	4620      	mov	r0, r4
 801810c:	f000 f866 	bl	80181dc <__sinit>
 8018110:	ab05      	add	r3, sp, #20
 8018112:	9a04      	ldr	r2, [sp, #16]
 8018114:	68a1      	ldr	r1, [r4, #8]
 8018116:	9301      	str	r3, [sp, #4]
 8018118:	4620      	mov	r0, r4
 801811a:	f000 f983 	bl	8018424 <_vfiprintf_r>
 801811e:	b002      	add	sp, #8
 8018120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018124:	b004      	add	sp, #16
 8018126:	4770      	bx	lr
 8018128:	24000034 	.word	0x24000034

0801812c <std>:
 801812c:	2300      	movs	r3, #0
 801812e:	b510      	push	{r4, lr}
 8018130:	4604      	mov	r4, r0
 8018132:	e9c0 3300 	strd	r3, r3, [r0]
 8018136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801813a:	6083      	str	r3, [r0, #8]
 801813c:	8181      	strh	r1, [r0, #12]
 801813e:	6643      	str	r3, [r0, #100]	; 0x64
 8018140:	81c2      	strh	r2, [r0, #14]
 8018142:	6183      	str	r3, [r0, #24]
 8018144:	4619      	mov	r1, r3
 8018146:	2208      	movs	r2, #8
 8018148:	305c      	adds	r0, #92	; 0x5c
 801814a:	f7ff ffcf 	bl	80180ec <memset>
 801814e:	4b05      	ldr	r3, [pc, #20]	; (8018164 <std+0x38>)
 8018150:	6263      	str	r3, [r4, #36]	; 0x24
 8018152:	4b05      	ldr	r3, [pc, #20]	; (8018168 <std+0x3c>)
 8018154:	62a3      	str	r3, [r4, #40]	; 0x28
 8018156:	4b05      	ldr	r3, [pc, #20]	; (801816c <std+0x40>)
 8018158:	62e3      	str	r3, [r4, #44]	; 0x2c
 801815a:	4b05      	ldr	r3, [pc, #20]	; (8018170 <std+0x44>)
 801815c:	6224      	str	r4, [r4, #32]
 801815e:	6323      	str	r3, [r4, #48]	; 0x30
 8018160:	bd10      	pop	{r4, pc}
 8018162:	bf00      	nop
 8018164:	080189cd 	.word	0x080189cd
 8018168:	080189ef 	.word	0x080189ef
 801816c:	08018a27 	.word	0x08018a27
 8018170:	08018a4b 	.word	0x08018a4b

08018174 <_cleanup_r>:
 8018174:	4901      	ldr	r1, [pc, #4]	; (801817c <_cleanup_r+0x8>)
 8018176:	f000 b8af 	b.w	80182d8 <_fwalk_reent>
 801817a:	bf00      	nop
 801817c:	08018d25 	.word	0x08018d25

08018180 <__sfmoreglue>:
 8018180:	b570      	push	{r4, r5, r6, lr}
 8018182:	1e4a      	subs	r2, r1, #1
 8018184:	2568      	movs	r5, #104	; 0x68
 8018186:	4355      	muls	r5, r2
 8018188:	460e      	mov	r6, r1
 801818a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801818e:	f000 f8c5 	bl	801831c <_malloc_r>
 8018192:	4604      	mov	r4, r0
 8018194:	b140      	cbz	r0, 80181a8 <__sfmoreglue+0x28>
 8018196:	2100      	movs	r1, #0
 8018198:	e9c0 1600 	strd	r1, r6, [r0]
 801819c:	300c      	adds	r0, #12
 801819e:	60a0      	str	r0, [r4, #8]
 80181a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80181a4:	f7ff ffa2 	bl	80180ec <memset>
 80181a8:	4620      	mov	r0, r4
 80181aa:	bd70      	pop	{r4, r5, r6, pc}

080181ac <__sfp_lock_acquire>:
 80181ac:	4801      	ldr	r0, [pc, #4]	; (80181b4 <__sfp_lock_acquire+0x8>)
 80181ae:	f000 b8b3 	b.w	8018318 <__retarget_lock_acquire_recursive>
 80181b2:	bf00      	nop
 80181b4:	24024ec4 	.word	0x24024ec4

080181b8 <__sfp_lock_release>:
 80181b8:	4801      	ldr	r0, [pc, #4]	; (80181c0 <__sfp_lock_release+0x8>)
 80181ba:	f000 b8ae 	b.w	801831a <__retarget_lock_release_recursive>
 80181be:	bf00      	nop
 80181c0:	24024ec4 	.word	0x24024ec4

080181c4 <__sinit_lock_acquire>:
 80181c4:	4801      	ldr	r0, [pc, #4]	; (80181cc <__sinit_lock_acquire+0x8>)
 80181c6:	f000 b8a7 	b.w	8018318 <__retarget_lock_acquire_recursive>
 80181ca:	bf00      	nop
 80181cc:	24024ebf 	.word	0x24024ebf

080181d0 <__sinit_lock_release>:
 80181d0:	4801      	ldr	r0, [pc, #4]	; (80181d8 <__sinit_lock_release+0x8>)
 80181d2:	f000 b8a2 	b.w	801831a <__retarget_lock_release_recursive>
 80181d6:	bf00      	nop
 80181d8:	24024ebf 	.word	0x24024ebf

080181dc <__sinit>:
 80181dc:	b510      	push	{r4, lr}
 80181de:	4604      	mov	r4, r0
 80181e0:	f7ff fff0 	bl	80181c4 <__sinit_lock_acquire>
 80181e4:	69a3      	ldr	r3, [r4, #24]
 80181e6:	b11b      	cbz	r3, 80181f0 <__sinit+0x14>
 80181e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181ec:	f7ff bff0 	b.w	80181d0 <__sinit_lock_release>
 80181f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80181f4:	6523      	str	r3, [r4, #80]	; 0x50
 80181f6:	4b13      	ldr	r3, [pc, #76]	; (8018244 <__sinit+0x68>)
 80181f8:	4a13      	ldr	r2, [pc, #76]	; (8018248 <__sinit+0x6c>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80181fe:	42a3      	cmp	r3, r4
 8018200:	bf04      	itt	eq
 8018202:	2301      	moveq	r3, #1
 8018204:	61a3      	streq	r3, [r4, #24]
 8018206:	4620      	mov	r0, r4
 8018208:	f000 f820 	bl	801824c <__sfp>
 801820c:	6060      	str	r0, [r4, #4]
 801820e:	4620      	mov	r0, r4
 8018210:	f000 f81c 	bl	801824c <__sfp>
 8018214:	60a0      	str	r0, [r4, #8]
 8018216:	4620      	mov	r0, r4
 8018218:	f000 f818 	bl	801824c <__sfp>
 801821c:	2200      	movs	r2, #0
 801821e:	60e0      	str	r0, [r4, #12]
 8018220:	2104      	movs	r1, #4
 8018222:	6860      	ldr	r0, [r4, #4]
 8018224:	f7ff ff82 	bl	801812c <std>
 8018228:	68a0      	ldr	r0, [r4, #8]
 801822a:	2201      	movs	r2, #1
 801822c:	2109      	movs	r1, #9
 801822e:	f7ff ff7d 	bl	801812c <std>
 8018232:	68e0      	ldr	r0, [r4, #12]
 8018234:	2202      	movs	r2, #2
 8018236:	2112      	movs	r1, #18
 8018238:	f7ff ff78 	bl	801812c <std>
 801823c:	2301      	movs	r3, #1
 801823e:	61a3      	str	r3, [r4, #24]
 8018240:	e7d2      	b.n	80181e8 <__sinit+0xc>
 8018242:	bf00      	nop
 8018244:	0801bf90 	.word	0x0801bf90
 8018248:	08018175 	.word	0x08018175

0801824c <__sfp>:
 801824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801824e:	4607      	mov	r7, r0
 8018250:	f7ff ffac 	bl	80181ac <__sfp_lock_acquire>
 8018254:	4b1e      	ldr	r3, [pc, #120]	; (80182d0 <__sfp+0x84>)
 8018256:	681e      	ldr	r6, [r3, #0]
 8018258:	69b3      	ldr	r3, [r6, #24]
 801825a:	b913      	cbnz	r3, 8018262 <__sfp+0x16>
 801825c:	4630      	mov	r0, r6
 801825e:	f7ff ffbd 	bl	80181dc <__sinit>
 8018262:	3648      	adds	r6, #72	; 0x48
 8018264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018268:	3b01      	subs	r3, #1
 801826a:	d503      	bpl.n	8018274 <__sfp+0x28>
 801826c:	6833      	ldr	r3, [r6, #0]
 801826e:	b30b      	cbz	r3, 80182b4 <__sfp+0x68>
 8018270:	6836      	ldr	r6, [r6, #0]
 8018272:	e7f7      	b.n	8018264 <__sfp+0x18>
 8018274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018278:	b9d5      	cbnz	r5, 80182b0 <__sfp+0x64>
 801827a:	4b16      	ldr	r3, [pc, #88]	; (80182d4 <__sfp+0x88>)
 801827c:	60e3      	str	r3, [r4, #12]
 801827e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018282:	6665      	str	r5, [r4, #100]	; 0x64
 8018284:	f000 f847 	bl	8018316 <__retarget_lock_init_recursive>
 8018288:	f7ff ff96 	bl	80181b8 <__sfp_lock_release>
 801828c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018294:	6025      	str	r5, [r4, #0]
 8018296:	61a5      	str	r5, [r4, #24]
 8018298:	2208      	movs	r2, #8
 801829a:	4629      	mov	r1, r5
 801829c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80182a0:	f7ff ff24 	bl	80180ec <memset>
 80182a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80182a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80182ac:	4620      	mov	r0, r4
 80182ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182b0:	3468      	adds	r4, #104	; 0x68
 80182b2:	e7d9      	b.n	8018268 <__sfp+0x1c>
 80182b4:	2104      	movs	r1, #4
 80182b6:	4638      	mov	r0, r7
 80182b8:	f7ff ff62 	bl	8018180 <__sfmoreglue>
 80182bc:	4604      	mov	r4, r0
 80182be:	6030      	str	r0, [r6, #0]
 80182c0:	2800      	cmp	r0, #0
 80182c2:	d1d5      	bne.n	8018270 <__sfp+0x24>
 80182c4:	f7ff ff78 	bl	80181b8 <__sfp_lock_release>
 80182c8:	230c      	movs	r3, #12
 80182ca:	603b      	str	r3, [r7, #0]
 80182cc:	e7ee      	b.n	80182ac <__sfp+0x60>
 80182ce:	bf00      	nop
 80182d0:	0801bf90 	.word	0x0801bf90
 80182d4:	ffff0001 	.word	0xffff0001

080182d8 <_fwalk_reent>:
 80182d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182dc:	4606      	mov	r6, r0
 80182de:	4688      	mov	r8, r1
 80182e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80182e4:	2700      	movs	r7, #0
 80182e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80182ea:	f1b9 0901 	subs.w	r9, r9, #1
 80182ee:	d505      	bpl.n	80182fc <_fwalk_reent+0x24>
 80182f0:	6824      	ldr	r4, [r4, #0]
 80182f2:	2c00      	cmp	r4, #0
 80182f4:	d1f7      	bne.n	80182e6 <_fwalk_reent+0xe>
 80182f6:	4638      	mov	r0, r7
 80182f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182fc:	89ab      	ldrh	r3, [r5, #12]
 80182fe:	2b01      	cmp	r3, #1
 8018300:	d907      	bls.n	8018312 <_fwalk_reent+0x3a>
 8018302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018306:	3301      	adds	r3, #1
 8018308:	d003      	beq.n	8018312 <_fwalk_reent+0x3a>
 801830a:	4629      	mov	r1, r5
 801830c:	4630      	mov	r0, r6
 801830e:	47c0      	blx	r8
 8018310:	4307      	orrs	r7, r0
 8018312:	3568      	adds	r5, #104	; 0x68
 8018314:	e7e9      	b.n	80182ea <_fwalk_reent+0x12>

08018316 <__retarget_lock_init_recursive>:
 8018316:	4770      	bx	lr

08018318 <__retarget_lock_acquire_recursive>:
 8018318:	4770      	bx	lr

0801831a <__retarget_lock_release_recursive>:
 801831a:	4770      	bx	lr

0801831c <_malloc_r>:
 801831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801831e:	1ccd      	adds	r5, r1, #3
 8018320:	f025 0503 	bic.w	r5, r5, #3
 8018324:	3508      	adds	r5, #8
 8018326:	2d0c      	cmp	r5, #12
 8018328:	bf38      	it	cc
 801832a:	250c      	movcc	r5, #12
 801832c:	2d00      	cmp	r5, #0
 801832e:	4606      	mov	r6, r0
 8018330:	db01      	blt.n	8018336 <_malloc_r+0x1a>
 8018332:	42a9      	cmp	r1, r5
 8018334:	d903      	bls.n	801833e <_malloc_r+0x22>
 8018336:	230c      	movs	r3, #12
 8018338:	6033      	str	r3, [r6, #0]
 801833a:	2000      	movs	r0, #0
 801833c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801833e:	f000 fda3 	bl	8018e88 <__malloc_lock>
 8018342:	4921      	ldr	r1, [pc, #132]	; (80183c8 <_malloc_r+0xac>)
 8018344:	680a      	ldr	r2, [r1, #0]
 8018346:	4614      	mov	r4, r2
 8018348:	b99c      	cbnz	r4, 8018372 <_malloc_r+0x56>
 801834a:	4f20      	ldr	r7, [pc, #128]	; (80183cc <_malloc_r+0xb0>)
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	b923      	cbnz	r3, 801835a <_malloc_r+0x3e>
 8018350:	4621      	mov	r1, r4
 8018352:	4630      	mov	r0, r6
 8018354:	f000 fb2a 	bl	80189ac <_sbrk_r>
 8018358:	6038      	str	r0, [r7, #0]
 801835a:	4629      	mov	r1, r5
 801835c:	4630      	mov	r0, r6
 801835e:	f000 fb25 	bl	80189ac <_sbrk_r>
 8018362:	1c43      	adds	r3, r0, #1
 8018364:	d123      	bne.n	80183ae <_malloc_r+0x92>
 8018366:	230c      	movs	r3, #12
 8018368:	6033      	str	r3, [r6, #0]
 801836a:	4630      	mov	r0, r6
 801836c:	f000 fd92 	bl	8018e94 <__malloc_unlock>
 8018370:	e7e3      	b.n	801833a <_malloc_r+0x1e>
 8018372:	6823      	ldr	r3, [r4, #0]
 8018374:	1b5b      	subs	r3, r3, r5
 8018376:	d417      	bmi.n	80183a8 <_malloc_r+0x8c>
 8018378:	2b0b      	cmp	r3, #11
 801837a:	d903      	bls.n	8018384 <_malloc_r+0x68>
 801837c:	6023      	str	r3, [r4, #0]
 801837e:	441c      	add	r4, r3
 8018380:	6025      	str	r5, [r4, #0]
 8018382:	e004      	b.n	801838e <_malloc_r+0x72>
 8018384:	6863      	ldr	r3, [r4, #4]
 8018386:	42a2      	cmp	r2, r4
 8018388:	bf0c      	ite	eq
 801838a:	600b      	streq	r3, [r1, #0]
 801838c:	6053      	strne	r3, [r2, #4]
 801838e:	4630      	mov	r0, r6
 8018390:	f000 fd80 	bl	8018e94 <__malloc_unlock>
 8018394:	f104 000b 	add.w	r0, r4, #11
 8018398:	1d23      	adds	r3, r4, #4
 801839a:	f020 0007 	bic.w	r0, r0, #7
 801839e:	1ac2      	subs	r2, r0, r3
 80183a0:	d0cc      	beq.n	801833c <_malloc_r+0x20>
 80183a2:	1a1b      	subs	r3, r3, r0
 80183a4:	50a3      	str	r3, [r4, r2]
 80183a6:	e7c9      	b.n	801833c <_malloc_r+0x20>
 80183a8:	4622      	mov	r2, r4
 80183aa:	6864      	ldr	r4, [r4, #4]
 80183ac:	e7cc      	b.n	8018348 <_malloc_r+0x2c>
 80183ae:	1cc4      	adds	r4, r0, #3
 80183b0:	f024 0403 	bic.w	r4, r4, #3
 80183b4:	42a0      	cmp	r0, r4
 80183b6:	d0e3      	beq.n	8018380 <_malloc_r+0x64>
 80183b8:	1a21      	subs	r1, r4, r0
 80183ba:	4630      	mov	r0, r6
 80183bc:	f000 faf6 	bl	80189ac <_sbrk_r>
 80183c0:	3001      	adds	r0, #1
 80183c2:	d1dd      	bne.n	8018380 <_malloc_r+0x64>
 80183c4:	e7cf      	b.n	8018366 <_malloc_r+0x4a>
 80183c6:	bf00      	nop
 80183c8:	24021950 	.word	0x24021950
 80183cc:	24021954 	.word	0x24021954

080183d0 <__sfputc_r>:
 80183d0:	6893      	ldr	r3, [r2, #8]
 80183d2:	3b01      	subs	r3, #1
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	b410      	push	{r4}
 80183d8:	6093      	str	r3, [r2, #8]
 80183da:	da08      	bge.n	80183ee <__sfputc_r+0x1e>
 80183dc:	6994      	ldr	r4, [r2, #24]
 80183de:	42a3      	cmp	r3, r4
 80183e0:	db01      	blt.n	80183e6 <__sfputc_r+0x16>
 80183e2:	290a      	cmp	r1, #10
 80183e4:	d103      	bne.n	80183ee <__sfputc_r+0x1e>
 80183e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183ea:	f000 bb33 	b.w	8018a54 <__swbuf_r>
 80183ee:	6813      	ldr	r3, [r2, #0]
 80183f0:	1c58      	adds	r0, r3, #1
 80183f2:	6010      	str	r0, [r2, #0]
 80183f4:	7019      	strb	r1, [r3, #0]
 80183f6:	4608      	mov	r0, r1
 80183f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183fc:	4770      	bx	lr

080183fe <__sfputs_r>:
 80183fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018400:	4606      	mov	r6, r0
 8018402:	460f      	mov	r7, r1
 8018404:	4614      	mov	r4, r2
 8018406:	18d5      	adds	r5, r2, r3
 8018408:	42ac      	cmp	r4, r5
 801840a:	d101      	bne.n	8018410 <__sfputs_r+0x12>
 801840c:	2000      	movs	r0, #0
 801840e:	e007      	b.n	8018420 <__sfputs_r+0x22>
 8018410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018414:	463a      	mov	r2, r7
 8018416:	4630      	mov	r0, r6
 8018418:	f7ff ffda 	bl	80183d0 <__sfputc_r>
 801841c:	1c43      	adds	r3, r0, #1
 801841e:	d1f3      	bne.n	8018408 <__sfputs_r+0xa>
 8018420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018424 <_vfiprintf_r>:
 8018424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018428:	460d      	mov	r5, r1
 801842a:	b09d      	sub	sp, #116	; 0x74
 801842c:	4614      	mov	r4, r2
 801842e:	4698      	mov	r8, r3
 8018430:	4606      	mov	r6, r0
 8018432:	b118      	cbz	r0, 801843c <_vfiprintf_r+0x18>
 8018434:	6983      	ldr	r3, [r0, #24]
 8018436:	b90b      	cbnz	r3, 801843c <_vfiprintf_r+0x18>
 8018438:	f7ff fed0 	bl	80181dc <__sinit>
 801843c:	4b89      	ldr	r3, [pc, #548]	; (8018664 <_vfiprintf_r+0x240>)
 801843e:	429d      	cmp	r5, r3
 8018440:	d11b      	bne.n	801847a <_vfiprintf_r+0x56>
 8018442:	6875      	ldr	r5, [r6, #4]
 8018444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018446:	07d9      	lsls	r1, r3, #31
 8018448:	d405      	bmi.n	8018456 <_vfiprintf_r+0x32>
 801844a:	89ab      	ldrh	r3, [r5, #12]
 801844c:	059a      	lsls	r2, r3, #22
 801844e:	d402      	bmi.n	8018456 <_vfiprintf_r+0x32>
 8018450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018452:	f7ff ff61 	bl	8018318 <__retarget_lock_acquire_recursive>
 8018456:	89ab      	ldrh	r3, [r5, #12]
 8018458:	071b      	lsls	r3, r3, #28
 801845a:	d501      	bpl.n	8018460 <_vfiprintf_r+0x3c>
 801845c:	692b      	ldr	r3, [r5, #16]
 801845e:	b9eb      	cbnz	r3, 801849c <_vfiprintf_r+0x78>
 8018460:	4629      	mov	r1, r5
 8018462:	4630      	mov	r0, r6
 8018464:	f000 fb5a 	bl	8018b1c <__swsetup_r>
 8018468:	b1c0      	cbz	r0, 801849c <_vfiprintf_r+0x78>
 801846a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801846c:	07dc      	lsls	r4, r3, #31
 801846e:	d50e      	bpl.n	801848e <_vfiprintf_r+0x6a>
 8018470:	f04f 30ff 	mov.w	r0, #4294967295
 8018474:	b01d      	add	sp, #116	; 0x74
 8018476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847a:	4b7b      	ldr	r3, [pc, #492]	; (8018668 <_vfiprintf_r+0x244>)
 801847c:	429d      	cmp	r5, r3
 801847e:	d101      	bne.n	8018484 <_vfiprintf_r+0x60>
 8018480:	68b5      	ldr	r5, [r6, #8]
 8018482:	e7df      	b.n	8018444 <_vfiprintf_r+0x20>
 8018484:	4b79      	ldr	r3, [pc, #484]	; (801866c <_vfiprintf_r+0x248>)
 8018486:	429d      	cmp	r5, r3
 8018488:	bf08      	it	eq
 801848a:	68f5      	ldreq	r5, [r6, #12]
 801848c:	e7da      	b.n	8018444 <_vfiprintf_r+0x20>
 801848e:	89ab      	ldrh	r3, [r5, #12]
 8018490:	0598      	lsls	r0, r3, #22
 8018492:	d4ed      	bmi.n	8018470 <_vfiprintf_r+0x4c>
 8018494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018496:	f7ff ff40 	bl	801831a <__retarget_lock_release_recursive>
 801849a:	e7e9      	b.n	8018470 <_vfiprintf_r+0x4c>
 801849c:	2300      	movs	r3, #0
 801849e:	9309      	str	r3, [sp, #36]	; 0x24
 80184a0:	2320      	movs	r3, #32
 80184a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80184a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80184aa:	2330      	movs	r3, #48	; 0x30
 80184ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018670 <_vfiprintf_r+0x24c>
 80184b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80184b4:	f04f 0901 	mov.w	r9, #1
 80184b8:	4623      	mov	r3, r4
 80184ba:	469a      	mov	sl, r3
 80184bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184c0:	b10a      	cbz	r2, 80184c6 <_vfiprintf_r+0xa2>
 80184c2:	2a25      	cmp	r2, #37	; 0x25
 80184c4:	d1f9      	bne.n	80184ba <_vfiprintf_r+0x96>
 80184c6:	ebba 0b04 	subs.w	fp, sl, r4
 80184ca:	d00b      	beq.n	80184e4 <_vfiprintf_r+0xc0>
 80184cc:	465b      	mov	r3, fp
 80184ce:	4622      	mov	r2, r4
 80184d0:	4629      	mov	r1, r5
 80184d2:	4630      	mov	r0, r6
 80184d4:	f7ff ff93 	bl	80183fe <__sfputs_r>
 80184d8:	3001      	adds	r0, #1
 80184da:	f000 80aa 	beq.w	8018632 <_vfiprintf_r+0x20e>
 80184de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184e0:	445a      	add	r2, fp
 80184e2:	9209      	str	r2, [sp, #36]	; 0x24
 80184e4:	f89a 3000 	ldrb.w	r3, [sl]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	f000 80a2 	beq.w	8018632 <_vfiprintf_r+0x20e>
 80184ee:	2300      	movs	r3, #0
 80184f0:	f04f 32ff 	mov.w	r2, #4294967295
 80184f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184f8:	f10a 0a01 	add.w	sl, sl, #1
 80184fc:	9304      	str	r3, [sp, #16]
 80184fe:	9307      	str	r3, [sp, #28]
 8018500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018504:	931a      	str	r3, [sp, #104]	; 0x68
 8018506:	4654      	mov	r4, sl
 8018508:	2205      	movs	r2, #5
 801850a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801850e:	4858      	ldr	r0, [pc, #352]	; (8018670 <_vfiprintf_r+0x24c>)
 8018510:	f7e7 feee 	bl	80002f0 <memchr>
 8018514:	9a04      	ldr	r2, [sp, #16]
 8018516:	b9d8      	cbnz	r0, 8018550 <_vfiprintf_r+0x12c>
 8018518:	06d1      	lsls	r1, r2, #27
 801851a:	bf44      	itt	mi
 801851c:	2320      	movmi	r3, #32
 801851e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018522:	0713      	lsls	r3, r2, #28
 8018524:	bf44      	itt	mi
 8018526:	232b      	movmi	r3, #43	; 0x2b
 8018528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801852c:	f89a 3000 	ldrb.w	r3, [sl]
 8018530:	2b2a      	cmp	r3, #42	; 0x2a
 8018532:	d015      	beq.n	8018560 <_vfiprintf_r+0x13c>
 8018534:	9a07      	ldr	r2, [sp, #28]
 8018536:	4654      	mov	r4, sl
 8018538:	2000      	movs	r0, #0
 801853a:	f04f 0c0a 	mov.w	ip, #10
 801853e:	4621      	mov	r1, r4
 8018540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018544:	3b30      	subs	r3, #48	; 0x30
 8018546:	2b09      	cmp	r3, #9
 8018548:	d94e      	bls.n	80185e8 <_vfiprintf_r+0x1c4>
 801854a:	b1b0      	cbz	r0, 801857a <_vfiprintf_r+0x156>
 801854c:	9207      	str	r2, [sp, #28]
 801854e:	e014      	b.n	801857a <_vfiprintf_r+0x156>
 8018550:	eba0 0308 	sub.w	r3, r0, r8
 8018554:	fa09 f303 	lsl.w	r3, r9, r3
 8018558:	4313      	orrs	r3, r2
 801855a:	9304      	str	r3, [sp, #16]
 801855c:	46a2      	mov	sl, r4
 801855e:	e7d2      	b.n	8018506 <_vfiprintf_r+0xe2>
 8018560:	9b03      	ldr	r3, [sp, #12]
 8018562:	1d19      	adds	r1, r3, #4
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	9103      	str	r1, [sp, #12]
 8018568:	2b00      	cmp	r3, #0
 801856a:	bfbb      	ittet	lt
 801856c:	425b      	neglt	r3, r3
 801856e:	f042 0202 	orrlt.w	r2, r2, #2
 8018572:	9307      	strge	r3, [sp, #28]
 8018574:	9307      	strlt	r3, [sp, #28]
 8018576:	bfb8      	it	lt
 8018578:	9204      	strlt	r2, [sp, #16]
 801857a:	7823      	ldrb	r3, [r4, #0]
 801857c:	2b2e      	cmp	r3, #46	; 0x2e
 801857e:	d10c      	bne.n	801859a <_vfiprintf_r+0x176>
 8018580:	7863      	ldrb	r3, [r4, #1]
 8018582:	2b2a      	cmp	r3, #42	; 0x2a
 8018584:	d135      	bne.n	80185f2 <_vfiprintf_r+0x1ce>
 8018586:	9b03      	ldr	r3, [sp, #12]
 8018588:	1d1a      	adds	r2, r3, #4
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	9203      	str	r2, [sp, #12]
 801858e:	2b00      	cmp	r3, #0
 8018590:	bfb8      	it	lt
 8018592:	f04f 33ff 	movlt.w	r3, #4294967295
 8018596:	3402      	adds	r4, #2
 8018598:	9305      	str	r3, [sp, #20]
 801859a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018680 <_vfiprintf_r+0x25c>
 801859e:	7821      	ldrb	r1, [r4, #0]
 80185a0:	2203      	movs	r2, #3
 80185a2:	4650      	mov	r0, sl
 80185a4:	f7e7 fea4 	bl	80002f0 <memchr>
 80185a8:	b140      	cbz	r0, 80185bc <_vfiprintf_r+0x198>
 80185aa:	2340      	movs	r3, #64	; 0x40
 80185ac:	eba0 000a 	sub.w	r0, r0, sl
 80185b0:	fa03 f000 	lsl.w	r0, r3, r0
 80185b4:	9b04      	ldr	r3, [sp, #16]
 80185b6:	4303      	orrs	r3, r0
 80185b8:	3401      	adds	r4, #1
 80185ba:	9304      	str	r3, [sp, #16]
 80185bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185c0:	482c      	ldr	r0, [pc, #176]	; (8018674 <_vfiprintf_r+0x250>)
 80185c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80185c6:	2206      	movs	r2, #6
 80185c8:	f7e7 fe92 	bl	80002f0 <memchr>
 80185cc:	2800      	cmp	r0, #0
 80185ce:	d03f      	beq.n	8018650 <_vfiprintf_r+0x22c>
 80185d0:	4b29      	ldr	r3, [pc, #164]	; (8018678 <_vfiprintf_r+0x254>)
 80185d2:	bb1b      	cbnz	r3, 801861c <_vfiprintf_r+0x1f8>
 80185d4:	9b03      	ldr	r3, [sp, #12]
 80185d6:	3307      	adds	r3, #7
 80185d8:	f023 0307 	bic.w	r3, r3, #7
 80185dc:	3308      	adds	r3, #8
 80185de:	9303      	str	r3, [sp, #12]
 80185e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185e2:	443b      	add	r3, r7
 80185e4:	9309      	str	r3, [sp, #36]	; 0x24
 80185e6:	e767      	b.n	80184b8 <_vfiprintf_r+0x94>
 80185e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80185ec:	460c      	mov	r4, r1
 80185ee:	2001      	movs	r0, #1
 80185f0:	e7a5      	b.n	801853e <_vfiprintf_r+0x11a>
 80185f2:	2300      	movs	r3, #0
 80185f4:	3401      	adds	r4, #1
 80185f6:	9305      	str	r3, [sp, #20]
 80185f8:	4619      	mov	r1, r3
 80185fa:	f04f 0c0a 	mov.w	ip, #10
 80185fe:	4620      	mov	r0, r4
 8018600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018604:	3a30      	subs	r2, #48	; 0x30
 8018606:	2a09      	cmp	r2, #9
 8018608:	d903      	bls.n	8018612 <_vfiprintf_r+0x1ee>
 801860a:	2b00      	cmp	r3, #0
 801860c:	d0c5      	beq.n	801859a <_vfiprintf_r+0x176>
 801860e:	9105      	str	r1, [sp, #20]
 8018610:	e7c3      	b.n	801859a <_vfiprintf_r+0x176>
 8018612:	fb0c 2101 	mla	r1, ip, r1, r2
 8018616:	4604      	mov	r4, r0
 8018618:	2301      	movs	r3, #1
 801861a:	e7f0      	b.n	80185fe <_vfiprintf_r+0x1da>
 801861c:	ab03      	add	r3, sp, #12
 801861e:	9300      	str	r3, [sp, #0]
 8018620:	462a      	mov	r2, r5
 8018622:	4b16      	ldr	r3, [pc, #88]	; (801867c <_vfiprintf_r+0x258>)
 8018624:	a904      	add	r1, sp, #16
 8018626:	4630      	mov	r0, r6
 8018628:	f3af 8000 	nop.w
 801862c:	4607      	mov	r7, r0
 801862e:	1c78      	adds	r0, r7, #1
 8018630:	d1d6      	bne.n	80185e0 <_vfiprintf_r+0x1bc>
 8018632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018634:	07d9      	lsls	r1, r3, #31
 8018636:	d405      	bmi.n	8018644 <_vfiprintf_r+0x220>
 8018638:	89ab      	ldrh	r3, [r5, #12]
 801863a:	059a      	lsls	r2, r3, #22
 801863c:	d402      	bmi.n	8018644 <_vfiprintf_r+0x220>
 801863e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018640:	f7ff fe6b 	bl	801831a <__retarget_lock_release_recursive>
 8018644:	89ab      	ldrh	r3, [r5, #12]
 8018646:	065b      	lsls	r3, r3, #25
 8018648:	f53f af12 	bmi.w	8018470 <_vfiprintf_r+0x4c>
 801864c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801864e:	e711      	b.n	8018474 <_vfiprintf_r+0x50>
 8018650:	ab03      	add	r3, sp, #12
 8018652:	9300      	str	r3, [sp, #0]
 8018654:	462a      	mov	r2, r5
 8018656:	4b09      	ldr	r3, [pc, #36]	; (801867c <_vfiprintf_r+0x258>)
 8018658:	a904      	add	r1, sp, #16
 801865a:	4630      	mov	r0, r6
 801865c:	f000 f880 	bl	8018760 <_printf_i>
 8018660:	e7e4      	b.n	801862c <_vfiprintf_r+0x208>
 8018662:	bf00      	nop
 8018664:	0801bfb4 	.word	0x0801bfb4
 8018668:	0801bfd4 	.word	0x0801bfd4
 801866c:	0801bf94 	.word	0x0801bf94
 8018670:	0801bff4 	.word	0x0801bff4
 8018674:	0801bffe 	.word	0x0801bffe
 8018678:	00000000 	.word	0x00000000
 801867c:	080183ff 	.word	0x080183ff
 8018680:	0801bffa 	.word	0x0801bffa

08018684 <_printf_common>:
 8018684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018688:	4616      	mov	r6, r2
 801868a:	4699      	mov	r9, r3
 801868c:	688a      	ldr	r2, [r1, #8]
 801868e:	690b      	ldr	r3, [r1, #16]
 8018690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018694:	4293      	cmp	r3, r2
 8018696:	bfb8      	it	lt
 8018698:	4613      	movlt	r3, r2
 801869a:	6033      	str	r3, [r6, #0]
 801869c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80186a0:	4607      	mov	r7, r0
 80186a2:	460c      	mov	r4, r1
 80186a4:	b10a      	cbz	r2, 80186aa <_printf_common+0x26>
 80186a6:	3301      	adds	r3, #1
 80186a8:	6033      	str	r3, [r6, #0]
 80186aa:	6823      	ldr	r3, [r4, #0]
 80186ac:	0699      	lsls	r1, r3, #26
 80186ae:	bf42      	ittt	mi
 80186b0:	6833      	ldrmi	r3, [r6, #0]
 80186b2:	3302      	addmi	r3, #2
 80186b4:	6033      	strmi	r3, [r6, #0]
 80186b6:	6825      	ldr	r5, [r4, #0]
 80186b8:	f015 0506 	ands.w	r5, r5, #6
 80186bc:	d106      	bne.n	80186cc <_printf_common+0x48>
 80186be:	f104 0a19 	add.w	sl, r4, #25
 80186c2:	68e3      	ldr	r3, [r4, #12]
 80186c4:	6832      	ldr	r2, [r6, #0]
 80186c6:	1a9b      	subs	r3, r3, r2
 80186c8:	42ab      	cmp	r3, r5
 80186ca:	dc26      	bgt.n	801871a <_printf_common+0x96>
 80186cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80186d0:	1e13      	subs	r3, r2, #0
 80186d2:	6822      	ldr	r2, [r4, #0]
 80186d4:	bf18      	it	ne
 80186d6:	2301      	movne	r3, #1
 80186d8:	0692      	lsls	r2, r2, #26
 80186da:	d42b      	bmi.n	8018734 <_printf_common+0xb0>
 80186dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80186e0:	4649      	mov	r1, r9
 80186e2:	4638      	mov	r0, r7
 80186e4:	47c0      	blx	r8
 80186e6:	3001      	adds	r0, #1
 80186e8:	d01e      	beq.n	8018728 <_printf_common+0xa4>
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	68e5      	ldr	r5, [r4, #12]
 80186ee:	6832      	ldr	r2, [r6, #0]
 80186f0:	f003 0306 	and.w	r3, r3, #6
 80186f4:	2b04      	cmp	r3, #4
 80186f6:	bf08      	it	eq
 80186f8:	1aad      	subeq	r5, r5, r2
 80186fa:	68a3      	ldr	r3, [r4, #8]
 80186fc:	6922      	ldr	r2, [r4, #16]
 80186fe:	bf0c      	ite	eq
 8018700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018704:	2500      	movne	r5, #0
 8018706:	4293      	cmp	r3, r2
 8018708:	bfc4      	itt	gt
 801870a:	1a9b      	subgt	r3, r3, r2
 801870c:	18ed      	addgt	r5, r5, r3
 801870e:	2600      	movs	r6, #0
 8018710:	341a      	adds	r4, #26
 8018712:	42b5      	cmp	r5, r6
 8018714:	d11a      	bne.n	801874c <_printf_common+0xc8>
 8018716:	2000      	movs	r0, #0
 8018718:	e008      	b.n	801872c <_printf_common+0xa8>
 801871a:	2301      	movs	r3, #1
 801871c:	4652      	mov	r2, sl
 801871e:	4649      	mov	r1, r9
 8018720:	4638      	mov	r0, r7
 8018722:	47c0      	blx	r8
 8018724:	3001      	adds	r0, #1
 8018726:	d103      	bne.n	8018730 <_printf_common+0xac>
 8018728:	f04f 30ff 	mov.w	r0, #4294967295
 801872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018730:	3501      	adds	r5, #1
 8018732:	e7c6      	b.n	80186c2 <_printf_common+0x3e>
 8018734:	18e1      	adds	r1, r4, r3
 8018736:	1c5a      	adds	r2, r3, #1
 8018738:	2030      	movs	r0, #48	; 0x30
 801873a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801873e:	4422      	add	r2, r4
 8018740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018748:	3302      	adds	r3, #2
 801874a:	e7c7      	b.n	80186dc <_printf_common+0x58>
 801874c:	2301      	movs	r3, #1
 801874e:	4622      	mov	r2, r4
 8018750:	4649      	mov	r1, r9
 8018752:	4638      	mov	r0, r7
 8018754:	47c0      	blx	r8
 8018756:	3001      	adds	r0, #1
 8018758:	d0e6      	beq.n	8018728 <_printf_common+0xa4>
 801875a:	3601      	adds	r6, #1
 801875c:	e7d9      	b.n	8018712 <_printf_common+0x8e>
	...

08018760 <_printf_i>:
 8018760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018764:	460c      	mov	r4, r1
 8018766:	4691      	mov	r9, r2
 8018768:	7e27      	ldrb	r7, [r4, #24]
 801876a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801876c:	2f78      	cmp	r7, #120	; 0x78
 801876e:	4680      	mov	r8, r0
 8018770:	469a      	mov	sl, r3
 8018772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018776:	d807      	bhi.n	8018788 <_printf_i+0x28>
 8018778:	2f62      	cmp	r7, #98	; 0x62
 801877a:	d80a      	bhi.n	8018792 <_printf_i+0x32>
 801877c:	2f00      	cmp	r7, #0
 801877e:	f000 80d8 	beq.w	8018932 <_printf_i+0x1d2>
 8018782:	2f58      	cmp	r7, #88	; 0x58
 8018784:	f000 80a3 	beq.w	80188ce <_printf_i+0x16e>
 8018788:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801878c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018790:	e03a      	b.n	8018808 <_printf_i+0xa8>
 8018792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018796:	2b15      	cmp	r3, #21
 8018798:	d8f6      	bhi.n	8018788 <_printf_i+0x28>
 801879a:	a001      	add	r0, pc, #4	; (adr r0, 80187a0 <_printf_i+0x40>)
 801879c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80187a0:	080187f9 	.word	0x080187f9
 80187a4:	0801880d 	.word	0x0801880d
 80187a8:	08018789 	.word	0x08018789
 80187ac:	08018789 	.word	0x08018789
 80187b0:	08018789 	.word	0x08018789
 80187b4:	08018789 	.word	0x08018789
 80187b8:	0801880d 	.word	0x0801880d
 80187bc:	08018789 	.word	0x08018789
 80187c0:	08018789 	.word	0x08018789
 80187c4:	08018789 	.word	0x08018789
 80187c8:	08018789 	.word	0x08018789
 80187cc:	08018919 	.word	0x08018919
 80187d0:	0801883d 	.word	0x0801883d
 80187d4:	080188fb 	.word	0x080188fb
 80187d8:	08018789 	.word	0x08018789
 80187dc:	08018789 	.word	0x08018789
 80187e0:	0801893b 	.word	0x0801893b
 80187e4:	08018789 	.word	0x08018789
 80187e8:	0801883d 	.word	0x0801883d
 80187ec:	08018789 	.word	0x08018789
 80187f0:	08018789 	.word	0x08018789
 80187f4:	08018903 	.word	0x08018903
 80187f8:	680b      	ldr	r3, [r1, #0]
 80187fa:	1d1a      	adds	r2, r3, #4
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	600a      	str	r2, [r1, #0]
 8018800:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018808:	2301      	movs	r3, #1
 801880a:	e0a3      	b.n	8018954 <_printf_i+0x1f4>
 801880c:	6825      	ldr	r5, [r4, #0]
 801880e:	6808      	ldr	r0, [r1, #0]
 8018810:	062e      	lsls	r6, r5, #24
 8018812:	f100 0304 	add.w	r3, r0, #4
 8018816:	d50a      	bpl.n	801882e <_printf_i+0xce>
 8018818:	6805      	ldr	r5, [r0, #0]
 801881a:	600b      	str	r3, [r1, #0]
 801881c:	2d00      	cmp	r5, #0
 801881e:	da03      	bge.n	8018828 <_printf_i+0xc8>
 8018820:	232d      	movs	r3, #45	; 0x2d
 8018822:	426d      	negs	r5, r5
 8018824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018828:	485e      	ldr	r0, [pc, #376]	; (80189a4 <_printf_i+0x244>)
 801882a:	230a      	movs	r3, #10
 801882c:	e019      	b.n	8018862 <_printf_i+0x102>
 801882e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018832:	6805      	ldr	r5, [r0, #0]
 8018834:	600b      	str	r3, [r1, #0]
 8018836:	bf18      	it	ne
 8018838:	b22d      	sxthne	r5, r5
 801883a:	e7ef      	b.n	801881c <_printf_i+0xbc>
 801883c:	680b      	ldr	r3, [r1, #0]
 801883e:	6825      	ldr	r5, [r4, #0]
 8018840:	1d18      	adds	r0, r3, #4
 8018842:	6008      	str	r0, [r1, #0]
 8018844:	0628      	lsls	r0, r5, #24
 8018846:	d501      	bpl.n	801884c <_printf_i+0xec>
 8018848:	681d      	ldr	r5, [r3, #0]
 801884a:	e002      	b.n	8018852 <_printf_i+0xf2>
 801884c:	0669      	lsls	r1, r5, #25
 801884e:	d5fb      	bpl.n	8018848 <_printf_i+0xe8>
 8018850:	881d      	ldrh	r5, [r3, #0]
 8018852:	4854      	ldr	r0, [pc, #336]	; (80189a4 <_printf_i+0x244>)
 8018854:	2f6f      	cmp	r7, #111	; 0x6f
 8018856:	bf0c      	ite	eq
 8018858:	2308      	moveq	r3, #8
 801885a:	230a      	movne	r3, #10
 801885c:	2100      	movs	r1, #0
 801885e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018862:	6866      	ldr	r6, [r4, #4]
 8018864:	60a6      	str	r6, [r4, #8]
 8018866:	2e00      	cmp	r6, #0
 8018868:	bfa2      	ittt	ge
 801886a:	6821      	ldrge	r1, [r4, #0]
 801886c:	f021 0104 	bicge.w	r1, r1, #4
 8018870:	6021      	strge	r1, [r4, #0]
 8018872:	b90d      	cbnz	r5, 8018878 <_printf_i+0x118>
 8018874:	2e00      	cmp	r6, #0
 8018876:	d04d      	beq.n	8018914 <_printf_i+0x1b4>
 8018878:	4616      	mov	r6, r2
 801887a:	fbb5 f1f3 	udiv	r1, r5, r3
 801887e:	fb03 5711 	mls	r7, r3, r1, r5
 8018882:	5dc7      	ldrb	r7, [r0, r7]
 8018884:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018888:	462f      	mov	r7, r5
 801888a:	42bb      	cmp	r3, r7
 801888c:	460d      	mov	r5, r1
 801888e:	d9f4      	bls.n	801887a <_printf_i+0x11a>
 8018890:	2b08      	cmp	r3, #8
 8018892:	d10b      	bne.n	80188ac <_printf_i+0x14c>
 8018894:	6823      	ldr	r3, [r4, #0]
 8018896:	07df      	lsls	r7, r3, #31
 8018898:	d508      	bpl.n	80188ac <_printf_i+0x14c>
 801889a:	6923      	ldr	r3, [r4, #16]
 801889c:	6861      	ldr	r1, [r4, #4]
 801889e:	4299      	cmp	r1, r3
 80188a0:	bfde      	ittt	le
 80188a2:	2330      	movle	r3, #48	; 0x30
 80188a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80188a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80188ac:	1b92      	subs	r2, r2, r6
 80188ae:	6122      	str	r2, [r4, #16]
 80188b0:	f8cd a000 	str.w	sl, [sp]
 80188b4:	464b      	mov	r3, r9
 80188b6:	aa03      	add	r2, sp, #12
 80188b8:	4621      	mov	r1, r4
 80188ba:	4640      	mov	r0, r8
 80188bc:	f7ff fee2 	bl	8018684 <_printf_common>
 80188c0:	3001      	adds	r0, #1
 80188c2:	d14c      	bne.n	801895e <_printf_i+0x1fe>
 80188c4:	f04f 30ff 	mov.w	r0, #4294967295
 80188c8:	b004      	add	sp, #16
 80188ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188ce:	4835      	ldr	r0, [pc, #212]	; (80189a4 <_printf_i+0x244>)
 80188d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80188d4:	6823      	ldr	r3, [r4, #0]
 80188d6:	680e      	ldr	r6, [r1, #0]
 80188d8:	061f      	lsls	r7, r3, #24
 80188da:	f856 5b04 	ldr.w	r5, [r6], #4
 80188de:	600e      	str	r6, [r1, #0]
 80188e0:	d514      	bpl.n	801890c <_printf_i+0x1ac>
 80188e2:	07d9      	lsls	r1, r3, #31
 80188e4:	bf44      	itt	mi
 80188e6:	f043 0320 	orrmi.w	r3, r3, #32
 80188ea:	6023      	strmi	r3, [r4, #0]
 80188ec:	b91d      	cbnz	r5, 80188f6 <_printf_i+0x196>
 80188ee:	6823      	ldr	r3, [r4, #0]
 80188f0:	f023 0320 	bic.w	r3, r3, #32
 80188f4:	6023      	str	r3, [r4, #0]
 80188f6:	2310      	movs	r3, #16
 80188f8:	e7b0      	b.n	801885c <_printf_i+0xfc>
 80188fa:	6823      	ldr	r3, [r4, #0]
 80188fc:	f043 0320 	orr.w	r3, r3, #32
 8018900:	6023      	str	r3, [r4, #0]
 8018902:	2378      	movs	r3, #120	; 0x78
 8018904:	4828      	ldr	r0, [pc, #160]	; (80189a8 <_printf_i+0x248>)
 8018906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801890a:	e7e3      	b.n	80188d4 <_printf_i+0x174>
 801890c:	065e      	lsls	r6, r3, #25
 801890e:	bf48      	it	mi
 8018910:	b2ad      	uxthmi	r5, r5
 8018912:	e7e6      	b.n	80188e2 <_printf_i+0x182>
 8018914:	4616      	mov	r6, r2
 8018916:	e7bb      	b.n	8018890 <_printf_i+0x130>
 8018918:	680b      	ldr	r3, [r1, #0]
 801891a:	6826      	ldr	r6, [r4, #0]
 801891c:	6960      	ldr	r0, [r4, #20]
 801891e:	1d1d      	adds	r5, r3, #4
 8018920:	600d      	str	r5, [r1, #0]
 8018922:	0635      	lsls	r5, r6, #24
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	d501      	bpl.n	801892c <_printf_i+0x1cc>
 8018928:	6018      	str	r0, [r3, #0]
 801892a:	e002      	b.n	8018932 <_printf_i+0x1d2>
 801892c:	0671      	lsls	r1, r6, #25
 801892e:	d5fb      	bpl.n	8018928 <_printf_i+0x1c8>
 8018930:	8018      	strh	r0, [r3, #0]
 8018932:	2300      	movs	r3, #0
 8018934:	6123      	str	r3, [r4, #16]
 8018936:	4616      	mov	r6, r2
 8018938:	e7ba      	b.n	80188b0 <_printf_i+0x150>
 801893a:	680b      	ldr	r3, [r1, #0]
 801893c:	1d1a      	adds	r2, r3, #4
 801893e:	600a      	str	r2, [r1, #0]
 8018940:	681e      	ldr	r6, [r3, #0]
 8018942:	6862      	ldr	r2, [r4, #4]
 8018944:	2100      	movs	r1, #0
 8018946:	4630      	mov	r0, r6
 8018948:	f7e7 fcd2 	bl	80002f0 <memchr>
 801894c:	b108      	cbz	r0, 8018952 <_printf_i+0x1f2>
 801894e:	1b80      	subs	r0, r0, r6
 8018950:	6060      	str	r0, [r4, #4]
 8018952:	6863      	ldr	r3, [r4, #4]
 8018954:	6123      	str	r3, [r4, #16]
 8018956:	2300      	movs	r3, #0
 8018958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801895c:	e7a8      	b.n	80188b0 <_printf_i+0x150>
 801895e:	6923      	ldr	r3, [r4, #16]
 8018960:	4632      	mov	r2, r6
 8018962:	4649      	mov	r1, r9
 8018964:	4640      	mov	r0, r8
 8018966:	47d0      	blx	sl
 8018968:	3001      	adds	r0, #1
 801896a:	d0ab      	beq.n	80188c4 <_printf_i+0x164>
 801896c:	6823      	ldr	r3, [r4, #0]
 801896e:	079b      	lsls	r3, r3, #30
 8018970:	d413      	bmi.n	801899a <_printf_i+0x23a>
 8018972:	68e0      	ldr	r0, [r4, #12]
 8018974:	9b03      	ldr	r3, [sp, #12]
 8018976:	4298      	cmp	r0, r3
 8018978:	bfb8      	it	lt
 801897a:	4618      	movlt	r0, r3
 801897c:	e7a4      	b.n	80188c8 <_printf_i+0x168>
 801897e:	2301      	movs	r3, #1
 8018980:	4632      	mov	r2, r6
 8018982:	4649      	mov	r1, r9
 8018984:	4640      	mov	r0, r8
 8018986:	47d0      	blx	sl
 8018988:	3001      	adds	r0, #1
 801898a:	d09b      	beq.n	80188c4 <_printf_i+0x164>
 801898c:	3501      	adds	r5, #1
 801898e:	68e3      	ldr	r3, [r4, #12]
 8018990:	9903      	ldr	r1, [sp, #12]
 8018992:	1a5b      	subs	r3, r3, r1
 8018994:	42ab      	cmp	r3, r5
 8018996:	dcf2      	bgt.n	801897e <_printf_i+0x21e>
 8018998:	e7eb      	b.n	8018972 <_printf_i+0x212>
 801899a:	2500      	movs	r5, #0
 801899c:	f104 0619 	add.w	r6, r4, #25
 80189a0:	e7f5      	b.n	801898e <_printf_i+0x22e>
 80189a2:	bf00      	nop
 80189a4:	0801c005 	.word	0x0801c005
 80189a8:	0801c016 	.word	0x0801c016

080189ac <_sbrk_r>:
 80189ac:	b538      	push	{r3, r4, r5, lr}
 80189ae:	4d06      	ldr	r5, [pc, #24]	; (80189c8 <_sbrk_r+0x1c>)
 80189b0:	2300      	movs	r3, #0
 80189b2:	4604      	mov	r4, r0
 80189b4:	4608      	mov	r0, r1
 80189b6:	602b      	str	r3, [r5, #0]
 80189b8:	f7e8 fa9a 	bl	8000ef0 <_sbrk>
 80189bc:	1c43      	adds	r3, r0, #1
 80189be:	d102      	bne.n	80189c6 <_sbrk_r+0x1a>
 80189c0:	682b      	ldr	r3, [r5, #0]
 80189c2:	b103      	cbz	r3, 80189c6 <_sbrk_r+0x1a>
 80189c4:	6023      	str	r3, [r4, #0]
 80189c6:	bd38      	pop	{r3, r4, r5, pc}
 80189c8:	24024eb4 	.word	0x24024eb4

080189cc <__sread>:
 80189cc:	b510      	push	{r4, lr}
 80189ce:	460c      	mov	r4, r1
 80189d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189d4:	f000 fab4 	bl	8018f40 <_read_r>
 80189d8:	2800      	cmp	r0, #0
 80189da:	bfab      	itete	ge
 80189dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80189de:	89a3      	ldrhlt	r3, [r4, #12]
 80189e0:	181b      	addge	r3, r3, r0
 80189e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80189e6:	bfac      	ite	ge
 80189e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80189ea:	81a3      	strhlt	r3, [r4, #12]
 80189ec:	bd10      	pop	{r4, pc}

080189ee <__swrite>:
 80189ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189f2:	461f      	mov	r7, r3
 80189f4:	898b      	ldrh	r3, [r1, #12]
 80189f6:	05db      	lsls	r3, r3, #23
 80189f8:	4605      	mov	r5, r0
 80189fa:	460c      	mov	r4, r1
 80189fc:	4616      	mov	r6, r2
 80189fe:	d505      	bpl.n	8018a0c <__swrite+0x1e>
 8018a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a04:	2302      	movs	r3, #2
 8018a06:	2200      	movs	r2, #0
 8018a08:	f000 f9c8 	bl	8018d9c <_lseek_r>
 8018a0c:	89a3      	ldrh	r3, [r4, #12]
 8018a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018a16:	81a3      	strh	r3, [r4, #12]
 8018a18:	4632      	mov	r2, r6
 8018a1a:	463b      	mov	r3, r7
 8018a1c:	4628      	mov	r0, r5
 8018a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a22:	f000 b869 	b.w	8018af8 <_write_r>

08018a26 <__sseek>:
 8018a26:	b510      	push	{r4, lr}
 8018a28:	460c      	mov	r4, r1
 8018a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a2e:	f000 f9b5 	bl	8018d9c <_lseek_r>
 8018a32:	1c43      	adds	r3, r0, #1
 8018a34:	89a3      	ldrh	r3, [r4, #12]
 8018a36:	bf15      	itete	ne
 8018a38:	6560      	strne	r0, [r4, #84]	; 0x54
 8018a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018a42:	81a3      	strheq	r3, [r4, #12]
 8018a44:	bf18      	it	ne
 8018a46:	81a3      	strhne	r3, [r4, #12]
 8018a48:	bd10      	pop	{r4, pc}

08018a4a <__sclose>:
 8018a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a4e:	f000 b8d3 	b.w	8018bf8 <_close_r>
	...

08018a54 <__swbuf_r>:
 8018a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a56:	460e      	mov	r6, r1
 8018a58:	4614      	mov	r4, r2
 8018a5a:	4605      	mov	r5, r0
 8018a5c:	b118      	cbz	r0, 8018a66 <__swbuf_r+0x12>
 8018a5e:	6983      	ldr	r3, [r0, #24]
 8018a60:	b90b      	cbnz	r3, 8018a66 <__swbuf_r+0x12>
 8018a62:	f7ff fbbb 	bl	80181dc <__sinit>
 8018a66:	4b21      	ldr	r3, [pc, #132]	; (8018aec <__swbuf_r+0x98>)
 8018a68:	429c      	cmp	r4, r3
 8018a6a:	d12b      	bne.n	8018ac4 <__swbuf_r+0x70>
 8018a6c:	686c      	ldr	r4, [r5, #4]
 8018a6e:	69a3      	ldr	r3, [r4, #24]
 8018a70:	60a3      	str	r3, [r4, #8]
 8018a72:	89a3      	ldrh	r3, [r4, #12]
 8018a74:	071a      	lsls	r2, r3, #28
 8018a76:	d52f      	bpl.n	8018ad8 <__swbuf_r+0x84>
 8018a78:	6923      	ldr	r3, [r4, #16]
 8018a7a:	b36b      	cbz	r3, 8018ad8 <__swbuf_r+0x84>
 8018a7c:	6923      	ldr	r3, [r4, #16]
 8018a7e:	6820      	ldr	r0, [r4, #0]
 8018a80:	1ac0      	subs	r0, r0, r3
 8018a82:	6963      	ldr	r3, [r4, #20]
 8018a84:	b2f6      	uxtb	r6, r6
 8018a86:	4283      	cmp	r3, r0
 8018a88:	4637      	mov	r7, r6
 8018a8a:	dc04      	bgt.n	8018a96 <__swbuf_r+0x42>
 8018a8c:	4621      	mov	r1, r4
 8018a8e:	4628      	mov	r0, r5
 8018a90:	f000 f948 	bl	8018d24 <_fflush_r>
 8018a94:	bb30      	cbnz	r0, 8018ae4 <__swbuf_r+0x90>
 8018a96:	68a3      	ldr	r3, [r4, #8]
 8018a98:	3b01      	subs	r3, #1
 8018a9a:	60a3      	str	r3, [r4, #8]
 8018a9c:	6823      	ldr	r3, [r4, #0]
 8018a9e:	1c5a      	adds	r2, r3, #1
 8018aa0:	6022      	str	r2, [r4, #0]
 8018aa2:	701e      	strb	r6, [r3, #0]
 8018aa4:	6963      	ldr	r3, [r4, #20]
 8018aa6:	3001      	adds	r0, #1
 8018aa8:	4283      	cmp	r3, r0
 8018aaa:	d004      	beq.n	8018ab6 <__swbuf_r+0x62>
 8018aac:	89a3      	ldrh	r3, [r4, #12]
 8018aae:	07db      	lsls	r3, r3, #31
 8018ab0:	d506      	bpl.n	8018ac0 <__swbuf_r+0x6c>
 8018ab2:	2e0a      	cmp	r6, #10
 8018ab4:	d104      	bne.n	8018ac0 <__swbuf_r+0x6c>
 8018ab6:	4621      	mov	r1, r4
 8018ab8:	4628      	mov	r0, r5
 8018aba:	f000 f933 	bl	8018d24 <_fflush_r>
 8018abe:	b988      	cbnz	r0, 8018ae4 <__swbuf_r+0x90>
 8018ac0:	4638      	mov	r0, r7
 8018ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ac4:	4b0a      	ldr	r3, [pc, #40]	; (8018af0 <__swbuf_r+0x9c>)
 8018ac6:	429c      	cmp	r4, r3
 8018ac8:	d101      	bne.n	8018ace <__swbuf_r+0x7a>
 8018aca:	68ac      	ldr	r4, [r5, #8]
 8018acc:	e7cf      	b.n	8018a6e <__swbuf_r+0x1a>
 8018ace:	4b09      	ldr	r3, [pc, #36]	; (8018af4 <__swbuf_r+0xa0>)
 8018ad0:	429c      	cmp	r4, r3
 8018ad2:	bf08      	it	eq
 8018ad4:	68ec      	ldreq	r4, [r5, #12]
 8018ad6:	e7ca      	b.n	8018a6e <__swbuf_r+0x1a>
 8018ad8:	4621      	mov	r1, r4
 8018ada:	4628      	mov	r0, r5
 8018adc:	f000 f81e 	bl	8018b1c <__swsetup_r>
 8018ae0:	2800      	cmp	r0, #0
 8018ae2:	d0cb      	beq.n	8018a7c <__swbuf_r+0x28>
 8018ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8018ae8:	e7ea      	b.n	8018ac0 <__swbuf_r+0x6c>
 8018aea:	bf00      	nop
 8018aec:	0801bfb4 	.word	0x0801bfb4
 8018af0:	0801bfd4 	.word	0x0801bfd4
 8018af4:	0801bf94 	.word	0x0801bf94

08018af8 <_write_r>:
 8018af8:	b538      	push	{r3, r4, r5, lr}
 8018afa:	4d07      	ldr	r5, [pc, #28]	; (8018b18 <_write_r+0x20>)
 8018afc:	4604      	mov	r4, r0
 8018afe:	4608      	mov	r0, r1
 8018b00:	4611      	mov	r1, r2
 8018b02:	2200      	movs	r2, #0
 8018b04:	602a      	str	r2, [r5, #0]
 8018b06:	461a      	mov	r2, r3
 8018b08:	f7e8 f9a1 	bl	8000e4e <_write>
 8018b0c:	1c43      	adds	r3, r0, #1
 8018b0e:	d102      	bne.n	8018b16 <_write_r+0x1e>
 8018b10:	682b      	ldr	r3, [r5, #0]
 8018b12:	b103      	cbz	r3, 8018b16 <_write_r+0x1e>
 8018b14:	6023      	str	r3, [r4, #0]
 8018b16:	bd38      	pop	{r3, r4, r5, pc}
 8018b18:	24024eb4 	.word	0x24024eb4

08018b1c <__swsetup_r>:
 8018b1c:	4b32      	ldr	r3, [pc, #200]	; (8018be8 <__swsetup_r+0xcc>)
 8018b1e:	b570      	push	{r4, r5, r6, lr}
 8018b20:	681d      	ldr	r5, [r3, #0]
 8018b22:	4606      	mov	r6, r0
 8018b24:	460c      	mov	r4, r1
 8018b26:	b125      	cbz	r5, 8018b32 <__swsetup_r+0x16>
 8018b28:	69ab      	ldr	r3, [r5, #24]
 8018b2a:	b913      	cbnz	r3, 8018b32 <__swsetup_r+0x16>
 8018b2c:	4628      	mov	r0, r5
 8018b2e:	f7ff fb55 	bl	80181dc <__sinit>
 8018b32:	4b2e      	ldr	r3, [pc, #184]	; (8018bec <__swsetup_r+0xd0>)
 8018b34:	429c      	cmp	r4, r3
 8018b36:	d10f      	bne.n	8018b58 <__swsetup_r+0x3c>
 8018b38:	686c      	ldr	r4, [r5, #4]
 8018b3a:	89a3      	ldrh	r3, [r4, #12]
 8018b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b40:	0719      	lsls	r1, r3, #28
 8018b42:	d42c      	bmi.n	8018b9e <__swsetup_r+0x82>
 8018b44:	06dd      	lsls	r5, r3, #27
 8018b46:	d411      	bmi.n	8018b6c <__swsetup_r+0x50>
 8018b48:	2309      	movs	r3, #9
 8018b4a:	6033      	str	r3, [r6, #0]
 8018b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018b50:	81a3      	strh	r3, [r4, #12]
 8018b52:	f04f 30ff 	mov.w	r0, #4294967295
 8018b56:	e03e      	b.n	8018bd6 <__swsetup_r+0xba>
 8018b58:	4b25      	ldr	r3, [pc, #148]	; (8018bf0 <__swsetup_r+0xd4>)
 8018b5a:	429c      	cmp	r4, r3
 8018b5c:	d101      	bne.n	8018b62 <__swsetup_r+0x46>
 8018b5e:	68ac      	ldr	r4, [r5, #8]
 8018b60:	e7eb      	b.n	8018b3a <__swsetup_r+0x1e>
 8018b62:	4b24      	ldr	r3, [pc, #144]	; (8018bf4 <__swsetup_r+0xd8>)
 8018b64:	429c      	cmp	r4, r3
 8018b66:	bf08      	it	eq
 8018b68:	68ec      	ldreq	r4, [r5, #12]
 8018b6a:	e7e6      	b.n	8018b3a <__swsetup_r+0x1e>
 8018b6c:	0758      	lsls	r0, r3, #29
 8018b6e:	d512      	bpl.n	8018b96 <__swsetup_r+0x7a>
 8018b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b72:	b141      	cbz	r1, 8018b86 <__swsetup_r+0x6a>
 8018b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b78:	4299      	cmp	r1, r3
 8018b7a:	d002      	beq.n	8018b82 <__swsetup_r+0x66>
 8018b7c:	4630      	mov	r0, r6
 8018b7e:	f000 f98f 	bl	8018ea0 <_free_r>
 8018b82:	2300      	movs	r3, #0
 8018b84:	6363      	str	r3, [r4, #52]	; 0x34
 8018b86:	89a3      	ldrh	r3, [r4, #12]
 8018b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018b8c:	81a3      	strh	r3, [r4, #12]
 8018b8e:	2300      	movs	r3, #0
 8018b90:	6063      	str	r3, [r4, #4]
 8018b92:	6923      	ldr	r3, [r4, #16]
 8018b94:	6023      	str	r3, [r4, #0]
 8018b96:	89a3      	ldrh	r3, [r4, #12]
 8018b98:	f043 0308 	orr.w	r3, r3, #8
 8018b9c:	81a3      	strh	r3, [r4, #12]
 8018b9e:	6923      	ldr	r3, [r4, #16]
 8018ba0:	b94b      	cbnz	r3, 8018bb6 <__swsetup_r+0x9a>
 8018ba2:	89a3      	ldrh	r3, [r4, #12]
 8018ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018bac:	d003      	beq.n	8018bb6 <__swsetup_r+0x9a>
 8018bae:	4621      	mov	r1, r4
 8018bb0:	4630      	mov	r0, r6
 8018bb2:	f000 f929 	bl	8018e08 <__smakebuf_r>
 8018bb6:	89a0      	ldrh	r0, [r4, #12]
 8018bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018bbc:	f010 0301 	ands.w	r3, r0, #1
 8018bc0:	d00a      	beq.n	8018bd8 <__swsetup_r+0xbc>
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	60a3      	str	r3, [r4, #8]
 8018bc6:	6963      	ldr	r3, [r4, #20]
 8018bc8:	425b      	negs	r3, r3
 8018bca:	61a3      	str	r3, [r4, #24]
 8018bcc:	6923      	ldr	r3, [r4, #16]
 8018bce:	b943      	cbnz	r3, 8018be2 <__swsetup_r+0xc6>
 8018bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018bd4:	d1ba      	bne.n	8018b4c <__swsetup_r+0x30>
 8018bd6:	bd70      	pop	{r4, r5, r6, pc}
 8018bd8:	0781      	lsls	r1, r0, #30
 8018bda:	bf58      	it	pl
 8018bdc:	6963      	ldrpl	r3, [r4, #20]
 8018bde:	60a3      	str	r3, [r4, #8]
 8018be0:	e7f4      	b.n	8018bcc <__swsetup_r+0xb0>
 8018be2:	2000      	movs	r0, #0
 8018be4:	e7f7      	b.n	8018bd6 <__swsetup_r+0xba>
 8018be6:	bf00      	nop
 8018be8:	24000034 	.word	0x24000034
 8018bec:	0801bfb4 	.word	0x0801bfb4
 8018bf0:	0801bfd4 	.word	0x0801bfd4
 8018bf4:	0801bf94 	.word	0x0801bf94

08018bf8 <_close_r>:
 8018bf8:	b538      	push	{r3, r4, r5, lr}
 8018bfa:	4d06      	ldr	r5, [pc, #24]	; (8018c14 <_close_r+0x1c>)
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	4604      	mov	r4, r0
 8018c00:	4608      	mov	r0, r1
 8018c02:	602b      	str	r3, [r5, #0]
 8018c04:	f7e8 f93f 	bl	8000e86 <_close>
 8018c08:	1c43      	adds	r3, r0, #1
 8018c0a:	d102      	bne.n	8018c12 <_close_r+0x1a>
 8018c0c:	682b      	ldr	r3, [r5, #0]
 8018c0e:	b103      	cbz	r3, 8018c12 <_close_r+0x1a>
 8018c10:	6023      	str	r3, [r4, #0]
 8018c12:	bd38      	pop	{r3, r4, r5, pc}
 8018c14:	24024eb4 	.word	0x24024eb4

08018c18 <__sflush_r>:
 8018c18:	898a      	ldrh	r2, [r1, #12]
 8018c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c1e:	4605      	mov	r5, r0
 8018c20:	0710      	lsls	r0, r2, #28
 8018c22:	460c      	mov	r4, r1
 8018c24:	d458      	bmi.n	8018cd8 <__sflush_r+0xc0>
 8018c26:	684b      	ldr	r3, [r1, #4]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	dc05      	bgt.n	8018c38 <__sflush_r+0x20>
 8018c2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	dc02      	bgt.n	8018c38 <__sflush_r+0x20>
 8018c32:	2000      	movs	r0, #0
 8018c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c3a:	2e00      	cmp	r6, #0
 8018c3c:	d0f9      	beq.n	8018c32 <__sflush_r+0x1a>
 8018c3e:	2300      	movs	r3, #0
 8018c40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018c44:	682f      	ldr	r7, [r5, #0]
 8018c46:	602b      	str	r3, [r5, #0]
 8018c48:	d032      	beq.n	8018cb0 <__sflush_r+0x98>
 8018c4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018c4c:	89a3      	ldrh	r3, [r4, #12]
 8018c4e:	075a      	lsls	r2, r3, #29
 8018c50:	d505      	bpl.n	8018c5e <__sflush_r+0x46>
 8018c52:	6863      	ldr	r3, [r4, #4]
 8018c54:	1ac0      	subs	r0, r0, r3
 8018c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c58:	b10b      	cbz	r3, 8018c5e <__sflush_r+0x46>
 8018c5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c5c:	1ac0      	subs	r0, r0, r3
 8018c5e:	2300      	movs	r3, #0
 8018c60:	4602      	mov	r2, r0
 8018c62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c64:	6a21      	ldr	r1, [r4, #32]
 8018c66:	4628      	mov	r0, r5
 8018c68:	47b0      	blx	r6
 8018c6a:	1c43      	adds	r3, r0, #1
 8018c6c:	89a3      	ldrh	r3, [r4, #12]
 8018c6e:	d106      	bne.n	8018c7e <__sflush_r+0x66>
 8018c70:	6829      	ldr	r1, [r5, #0]
 8018c72:	291d      	cmp	r1, #29
 8018c74:	d82c      	bhi.n	8018cd0 <__sflush_r+0xb8>
 8018c76:	4a2a      	ldr	r2, [pc, #168]	; (8018d20 <__sflush_r+0x108>)
 8018c78:	40ca      	lsrs	r2, r1
 8018c7a:	07d6      	lsls	r6, r2, #31
 8018c7c:	d528      	bpl.n	8018cd0 <__sflush_r+0xb8>
 8018c7e:	2200      	movs	r2, #0
 8018c80:	6062      	str	r2, [r4, #4]
 8018c82:	04d9      	lsls	r1, r3, #19
 8018c84:	6922      	ldr	r2, [r4, #16]
 8018c86:	6022      	str	r2, [r4, #0]
 8018c88:	d504      	bpl.n	8018c94 <__sflush_r+0x7c>
 8018c8a:	1c42      	adds	r2, r0, #1
 8018c8c:	d101      	bne.n	8018c92 <__sflush_r+0x7a>
 8018c8e:	682b      	ldr	r3, [r5, #0]
 8018c90:	b903      	cbnz	r3, 8018c94 <__sflush_r+0x7c>
 8018c92:	6560      	str	r0, [r4, #84]	; 0x54
 8018c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c96:	602f      	str	r7, [r5, #0]
 8018c98:	2900      	cmp	r1, #0
 8018c9a:	d0ca      	beq.n	8018c32 <__sflush_r+0x1a>
 8018c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ca0:	4299      	cmp	r1, r3
 8018ca2:	d002      	beq.n	8018caa <__sflush_r+0x92>
 8018ca4:	4628      	mov	r0, r5
 8018ca6:	f000 f8fb 	bl	8018ea0 <_free_r>
 8018caa:	2000      	movs	r0, #0
 8018cac:	6360      	str	r0, [r4, #52]	; 0x34
 8018cae:	e7c1      	b.n	8018c34 <__sflush_r+0x1c>
 8018cb0:	6a21      	ldr	r1, [r4, #32]
 8018cb2:	2301      	movs	r3, #1
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	47b0      	blx	r6
 8018cb8:	1c41      	adds	r1, r0, #1
 8018cba:	d1c7      	bne.n	8018c4c <__sflush_r+0x34>
 8018cbc:	682b      	ldr	r3, [r5, #0]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d0c4      	beq.n	8018c4c <__sflush_r+0x34>
 8018cc2:	2b1d      	cmp	r3, #29
 8018cc4:	d001      	beq.n	8018cca <__sflush_r+0xb2>
 8018cc6:	2b16      	cmp	r3, #22
 8018cc8:	d101      	bne.n	8018cce <__sflush_r+0xb6>
 8018cca:	602f      	str	r7, [r5, #0]
 8018ccc:	e7b1      	b.n	8018c32 <__sflush_r+0x1a>
 8018cce:	89a3      	ldrh	r3, [r4, #12]
 8018cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cd4:	81a3      	strh	r3, [r4, #12]
 8018cd6:	e7ad      	b.n	8018c34 <__sflush_r+0x1c>
 8018cd8:	690f      	ldr	r7, [r1, #16]
 8018cda:	2f00      	cmp	r7, #0
 8018cdc:	d0a9      	beq.n	8018c32 <__sflush_r+0x1a>
 8018cde:	0793      	lsls	r3, r2, #30
 8018ce0:	680e      	ldr	r6, [r1, #0]
 8018ce2:	bf08      	it	eq
 8018ce4:	694b      	ldreq	r3, [r1, #20]
 8018ce6:	600f      	str	r7, [r1, #0]
 8018ce8:	bf18      	it	ne
 8018cea:	2300      	movne	r3, #0
 8018cec:	eba6 0807 	sub.w	r8, r6, r7
 8018cf0:	608b      	str	r3, [r1, #8]
 8018cf2:	f1b8 0f00 	cmp.w	r8, #0
 8018cf6:	dd9c      	ble.n	8018c32 <__sflush_r+0x1a>
 8018cf8:	6a21      	ldr	r1, [r4, #32]
 8018cfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018cfc:	4643      	mov	r3, r8
 8018cfe:	463a      	mov	r2, r7
 8018d00:	4628      	mov	r0, r5
 8018d02:	47b0      	blx	r6
 8018d04:	2800      	cmp	r0, #0
 8018d06:	dc06      	bgt.n	8018d16 <__sflush_r+0xfe>
 8018d08:	89a3      	ldrh	r3, [r4, #12]
 8018d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d0e:	81a3      	strh	r3, [r4, #12]
 8018d10:	f04f 30ff 	mov.w	r0, #4294967295
 8018d14:	e78e      	b.n	8018c34 <__sflush_r+0x1c>
 8018d16:	4407      	add	r7, r0
 8018d18:	eba8 0800 	sub.w	r8, r8, r0
 8018d1c:	e7e9      	b.n	8018cf2 <__sflush_r+0xda>
 8018d1e:	bf00      	nop
 8018d20:	20400001 	.word	0x20400001

08018d24 <_fflush_r>:
 8018d24:	b538      	push	{r3, r4, r5, lr}
 8018d26:	690b      	ldr	r3, [r1, #16]
 8018d28:	4605      	mov	r5, r0
 8018d2a:	460c      	mov	r4, r1
 8018d2c:	b913      	cbnz	r3, 8018d34 <_fflush_r+0x10>
 8018d2e:	2500      	movs	r5, #0
 8018d30:	4628      	mov	r0, r5
 8018d32:	bd38      	pop	{r3, r4, r5, pc}
 8018d34:	b118      	cbz	r0, 8018d3e <_fflush_r+0x1a>
 8018d36:	6983      	ldr	r3, [r0, #24]
 8018d38:	b90b      	cbnz	r3, 8018d3e <_fflush_r+0x1a>
 8018d3a:	f7ff fa4f 	bl	80181dc <__sinit>
 8018d3e:	4b14      	ldr	r3, [pc, #80]	; (8018d90 <_fflush_r+0x6c>)
 8018d40:	429c      	cmp	r4, r3
 8018d42:	d11b      	bne.n	8018d7c <_fflush_r+0x58>
 8018d44:	686c      	ldr	r4, [r5, #4]
 8018d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d0ef      	beq.n	8018d2e <_fflush_r+0xa>
 8018d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018d50:	07d0      	lsls	r0, r2, #31
 8018d52:	d404      	bmi.n	8018d5e <_fflush_r+0x3a>
 8018d54:	0599      	lsls	r1, r3, #22
 8018d56:	d402      	bmi.n	8018d5e <_fflush_r+0x3a>
 8018d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d5a:	f7ff fadd 	bl	8018318 <__retarget_lock_acquire_recursive>
 8018d5e:	4628      	mov	r0, r5
 8018d60:	4621      	mov	r1, r4
 8018d62:	f7ff ff59 	bl	8018c18 <__sflush_r>
 8018d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d68:	07da      	lsls	r2, r3, #31
 8018d6a:	4605      	mov	r5, r0
 8018d6c:	d4e0      	bmi.n	8018d30 <_fflush_r+0xc>
 8018d6e:	89a3      	ldrh	r3, [r4, #12]
 8018d70:	059b      	lsls	r3, r3, #22
 8018d72:	d4dd      	bmi.n	8018d30 <_fflush_r+0xc>
 8018d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d76:	f7ff fad0 	bl	801831a <__retarget_lock_release_recursive>
 8018d7a:	e7d9      	b.n	8018d30 <_fflush_r+0xc>
 8018d7c:	4b05      	ldr	r3, [pc, #20]	; (8018d94 <_fflush_r+0x70>)
 8018d7e:	429c      	cmp	r4, r3
 8018d80:	d101      	bne.n	8018d86 <_fflush_r+0x62>
 8018d82:	68ac      	ldr	r4, [r5, #8]
 8018d84:	e7df      	b.n	8018d46 <_fflush_r+0x22>
 8018d86:	4b04      	ldr	r3, [pc, #16]	; (8018d98 <_fflush_r+0x74>)
 8018d88:	429c      	cmp	r4, r3
 8018d8a:	bf08      	it	eq
 8018d8c:	68ec      	ldreq	r4, [r5, #12]
 8018d8e:	e7da      	b.n	8018d46 <_fflush_r+0x22>
 8018d90:	0801bfb4 	.word	0x0801bfb4
 8018d94:	0801bfd4 	.word	0x0801bfd4
 8018d98:	0801bf94 	.word	0x0801bf94

08018d9c <_lseek_r>:
 8018d9c:	b538      	push	{r3, r4, r5, lr}
 8018d9e:	4d07      	ldr	r5, [pc, #28]	; (8018dbc <_lseek_r+0x20>)
 8018da0:	4604      	mov	r4, r0
 8018da2:	4608      	mov	r0, r1
 8018da4:	4611      	mov	r1, r2
 8018da6:	2200      	movs	r2, #0
 8018da8:	602a      	str	r2, [r5, #0]
 8018daa:	461a      	mov	r2, r3
 8018dac:	f7e8 f892 	bl	8000ed4 <_lseek>
 8018db0:	1c43      	adds	r3, r0, #1
 8018db2:	d102      	bne.n	8018dba <_lseek_r+0x1e>
 8018db4:	682b      	ldr	r3, [r5, #0]
 8018db6:	b103      	cbz	r3, 8018dba <_lseek_r+0x1e>
 8018db8:	6023      	str	r3, [r4, #0]
 8018dba:	bd38      	pop	{r3, r4, r5, pc}
 8018dbc:	24024eb4 	.word	0x24024eb4

08018dc0 <__swhatbuf_r>:
 8018dc0:	b570      	push	{r4, r5, r6, lr}
 8018dc2:	460e      	mov	r6, r1
 8018dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dc8:	2900      	cmp	r1, #0
 8018dca:	b096      	sub	sp, #88	; 0x58
 8018dcc:	4614      	mov	r4, r2
 8018dce:	461d      	mov	r5, r3
 8018dd0:	da07      	bge.n	8018de2 <__swhatbuf_r+0x22>
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	602b      	str	r3, [r5, #0]
 8018dd6:	89b3      	ldrh	r3, [r6, #12]
 8018dd8:	061a      	lsls	r2, r3, #24
 8018dda:	d410      	bmi.n	8018dfe <__swhatbuf_r+0x3e>
 8018ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018de0:	e00e      	b.n	8018e00 <__swhatbuf_r+0x40>
 8018de2:	466a      	mov	r2, sp
 8018de4:	f000 f8be 	bl	8018f64 <_fstat_r>
 8018de8:	2800      	cmp	r0, #0
 8018dea:	dbf2      	blt.n	8018dd2 <__swhatbuf_r+0x12>
 8018dec:	9a01      	ldr	r2, [sp, #4]
 8018dee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018df2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018df6:	425a      	negs	r2, r3
 8018df8:	415a      	adcs	r2, r3
 8018dfa:	602a      	str	r2, [r5, #0]
 8018dfc:	e7ee      	b.n	8018ddc <__swhatbuf_r+0x1c>
 8018dfe:	2340      	movs	r3, #64	; 0x40
 8018e00:	2000      	movs	r0, #0
 8018e02:	6023      	str	r3, [r4, #0]
 8018e04:	b016      	add	sp, #88	; 0x58
 8018e06:	bd70      	pop	{r4, r5, r6, pc}

08018e08 <__smakebuf_r>:
 8018e08:	898b      	ldrh	r3, [r1, #12]
 8018e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018e0c:	079d      	lsls	r5, r3, #30
 8018e0e:	4606      	mov	r6, r0
 8018e10:	460c      	mov	r4, r1
 8018e12:	d507      	bpl.n	8018e24 <__smakebuf_r+0x1c>
 8018e14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018e18:	6023      	str	r3, [r4, #0]
 8018e1a:	6123      	str	r3, [r4, #16]
 8018e1c:	2301      	movs	r3, #1
 8018e1e:	6163      	str	r3, [r4, #20]
 8018e20:	b002      	add	sp, #8
 8018e22:	bd70      	pop	{r4, r5, r6, pc}
 8018e24:	ab01      	add	r3, sp, #4
 8018e26:	466a      	mov	r2, sp
 8018e28:	f7ff ffca 	bl	8018dc0 <__swhatbuf_r>
 8018e2c:	9900      	ldr	r1, [sp, #0]
 8018e2e:	4605      	mov	r5, r0
 8018e30:	4630      	mov	r0, r6
 8018e32:	f7ff fa73 	bl	801831c <_malloc_r>
 8018e36:	b948      	cbnz	r0, 8018e4c <__smakebuf_r+0x44>
 8018e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e3c:	059a      	lsls	r2, r3, #22
 8018e3e:	d4ef      	bmi.n	8018e20 <__smakebuf_r+0x18>
 8018e40:	f023 0303 	bic.w	r3, r3, #3
 8018e44:	f043 0302 	orr.w	r3, r3, #2
 8018e48:	81a3      	strh	r3, [r4, #12]
 8018e4a:	e7e3      	b.n	8018e14 <__smakebuf_r+0xc>
 8018e4c:	4b0d      	ldr	r3, [pc, #52]	; (8018e84 <__smakebuf_r+0x7c>)
 8018e4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018e50:	89a3      	ldrh	r3, [r4, #12]
 8018e52:	6020      	str	r0, [r4, #0]
 8018e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e58:	81a3      	strh	r3, [r4, #12]
 8018e5a:	9b00      	ldr	r3, [sp, #0]
 8018e5c:	6163      	str	r3, [r4, #20]
 8018e5e:	9b01      	ldr	r3, [sp, #4]
 8018e60:	6120      	str	r0, [r4, #16]
 8018e62:	b15b      	cbz	r3, 8018e7c <__smakebuf_r+0x74>
 8018e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e68:	4630      	mov	r0, r6
 8018e6a:	f000 f88d 	bl	8018f88 <_isatty_r>
 8018e6e:	b128      	cbz	r0, 8018e7c <__smakebuf_r+0x74>
 8018e70:	89a3      	ldrh	r3, [r4, #12]
 8018e72:	f023 0303 	bic.w	r3, r3, #3
 8018e76:	f043 0301 	orr.w	r3, r3, #1
 8018e7a:	81a3      	strh	r3, [r4, #12]
 8018e7c:	89a0      	ldrh	r0, [r4, #12]
 8018e7e:	4305      	orrs	r5, r0
 8018e80:	81a5      	strh	r5, [r4, #12]
 8018e82:	e7cd      	b.n	8018e20 <__smakebuf_r+0x18>
 8018e84:	08018175 	.word	0x08018175

08018e88 <__malloc_lock>:
 8018e88:	4801      	ldr	r0, [pc, #4]	; (8018e90 <__malloc_lock+0x8>)
 8018e8a:	f7ff ba45 	b.w	8018318 <__retarget_lock_acquire_recursive>
 8018e8e:	bf00      	nop
 8018e90:	24024ec0 	.word	0x24024ec0

08018e94 <__malloc_unlock>:
 8018e94:	4801      	ldr	r0, [pc, #4]	; (8018e9c <__malloc_unlock+0x8>)
 8018e96:	f7ff ba40 	b.w	801831a <__retarget_lock_release_recursive>
 8018e9a:	bf00      	nop
 8018e9c:	24024ec0 	.word	0x24024ec0

08018ea0 <_free_r>:
 8018ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ea2:	2900      	cmp	r1, #0
 8018ea4:	d048      	beq.n	8018f38 <_free_r+0x98>
 8018ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018eaa:	9001      	str	r0, [sp, #4]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	f1a1 0404 	sub.w	r4, r1, #4
 8018eb2:	bfb8      	it	lt
 8018eb4:	18e4      	addlt	r4, r4, r3
 8018eb6:	f7ff ffe7 	bl	8018e88 <__malloc_lock>
 8018eba:	4a20      	ldr	r2, [pc, #128]	; (8018f3c <_free_r+0x9c>)
 8018ebc:	9801      	ldr	r0, [sp, #4]
 8018ebe:	6813      	ldr	r3, [r2, #0]
 8018ec0:	4615      	mov	r5, r2
 8018ec2:	b933      	cbnz	r3, 8018ed2 <_free_r+0x32>
 8018ec4:	6063      	str	r3, [r4, #4]
 8018ec6:	6014      	str	r4, [r2, #0]
 8018ec8:	b003      	add	sp, #12
 8018eca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ece:	f7ff bfe1 	b.w	8018e94 <__malloc_unlock>
 8018ed2:	42a3      	cmp	r3, r4
 8018ed4:	d90b      	bls.n	8018eee <_free_r+0x4e>
 8018ed6:	6821      	ldr	r1, [r4, #0]
 8018ed8:	1862      	adds	r2, r4, r1
 8018eda:	4293      	cmp	r3, r2
 8018edc:	bf04      	itt	eq
 8018ede:	681a      	ldreq	r2, [r3, #0]
 8018ee0:	685b      	ldreq	r3, [r3, #4]
 8018ee2:	6063      	str	r3, [r4, #4]
 8018ee4:	bf04      	itt	eq
 8018ee6:	1852      	addeq	r2, r2, r1
 8018ee8:	6022      	streq	r2, [r4, #0]
 8018eea:	602c      	str	r4, [r5, #0]
 8018eec:	e7ec      	b.n	8018ec8 <_free_r+0x28>
 8018eee:	461a      	mov	r2, r3
 8018ef0:	685b      	ldr	r3, [r3, #4]
 8018ef2:	b10b      	cbz	r3, 8018ef8 <_free_r+0x58>
 8018ef4:	42a3      	cmp	r3, r4
 8018ef6:	d9fa      	bls.n	8018eee <_free_r+0x4e>
 8018ef8:	6811      	ldr	r1, [r2, #0]
 8018efa:	1855      	adds	r5, r2, r1
 8018efc:	42a5      	cmp	r5, r4
 8018efe:	d10b      	bne.n	8018f18 <_free_r+0x78>
 8018f00:	6824      	ldr	r4, [r4, #0]
 8018f02:	4421      	add	r1, r4
 8018f04:	1854      	adds	r4, r2, r1
 8018f06:	42a3      	cmp	r3, r4
 8018f08:	6011      	str	r1, [r2, #0]
 8018f0a:	d1dd      	bne.n	8018ec8 <_free_r+0x28>
 8018f0c:	681c      	ldr	r4, [r3, #0]
 8018f0e:	685b      	ldr	r3, [r3, #4]
 8018f10:	6053      	str	r3, [r2, #4]
 8018f12:	4421      	add	r1, r4
 8018f14:	6011      	str	r1, [r2, #0]
 8018f16:	e7d7      	b.n	8018ec8 <_free_r+0x28>
 8018f18:	d902      	bls.n	8018f20 <_free_r+0x80>
 8018f1a:	230c      	movs	r3, #12
 8018f1c:	6003      	str	r3, [r0, #0]
 8018f1e:	e7d3      	b.n	8018ec8 <_free_r+0x28>
 8018f20:	6825      	ldr	r5, [r4, #0]
 8018f22:	1961      	adds	r1, r4, r5
 8018f24:	428b      	cmp	r3, r1
 8018f26:	bf04      	itt	eq
 8018f28:	6819      	ldreq	r1, [r3, #0]
 8018f2a:	685b      	ldreq	r3, [r3, #4]
 8018f2c:	6063      	str	r3, [r4, #4]
 8018f2e:	bf04      	itt	eq
 8018f30:	1949      	addeq	r1, r1, r5
 8018f32:	6021      	streq	r1, [r4, #0]
 8018f34:	6054      	str	r4, [r2, #4]
 8018f36:	e7c7      	b.n	8018ec8 <_free_r+0x28>
 8018f38:	b003      	add	sp, #12
 8018f3a:	bd30      	pop	{r4, r5, pc}
 8018f3c:	24021950 	.word	0x24021950

08018f40 <_read_r>:
 8018f40:	b538      	push	{r3, r4, r5, lr}
 8018f42:	4d07      	ldr	r5, [pc, #28]	; (8018f60 <_read_r+0x20>)
 8018f44:	4604      	mov	r4, r0
 8018f46:	4608      	mov	r0, r1
 8018f48:	4611      	mov	r1, r2
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	602a      	str	r2, [r5, #0]
 8018f4e:	461a      	mov	r2, r3
 8018f50:	f7e7 ff60 	bl	8000e14 <_read>
 8018f54:	1c43      	adds	r3, r0, #1
 8018f56:	d102      	bne.n	8018f5e <_read_r+0x1e>
 8018f58:	682b      	ldr	r3, [r5, #0]
 8018f5a:	b103      	cbz	r3, 8018f5e <_read_r+0x1e>
 8018f5c:	6023      	str	r3, [r4, #0]
 8018f5e:	bd38      	pop	{r3, r4, r5, pc}
 8018f60:	24024eb4 	.word	0x24024eb4

08018f64 <_fstat_r>:
 8018f64:	b538      	push	{r3, r4, r5, lr}
 8018f66:	4d07      	ldr	r5, [pc, #28]	; (8018f84 <_fstat_r+0x20>)
 8018f68:	2300      	movs	r3, #0
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	4608      	mov	r0, r1
 8018f6e:	4611      	mov	r1, r2
 8018f70:	602b      	str	r3, [r5, #0]
 8018f72:	f7e7 ff94 	bl	8000e9e <_fstat>
 8018f76:	1c43      	adds	r3, r0, #1
 8018f78:	d102      	bne.n	8018f80 <_fstat_r+0x1c>
 8018f7a:	682b      	ldr	r3, [r5, #0]
 8018f7c:	b103      	cbz	r3, 8018f80 <_fstat_r+0x1c>
 8018f7e:	6023      	str	r3, [r4, #0]
 8018f80:	bd38      	pop	{r3, r4, r5, pc}
 8018f82:	bf00      	nop
 8018f84:	24024eb4 	.word	0x24024eb4

08018f88 <_isatty_r>:
 8018f88:	b538      	push	{r3, r4, r5, lr}
 8018f8a:	4d06      	ldr	r5, [pc, #24]	; (8018fa4 <_isatty_r+0x1c>)
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	4604      	mov	r4, r0
 8018f90:	4608      	mov	r0, r1
 8018f92:	602b      	str	r3, [r5, #0]
 8018f94:	f7e7 ff93 	bl	8000ebe <_isatty>
 8018f98:	1c43      	adds	r3, r0, #1
 8018f9a:	d102      	bne.n	8018fa2 <_isatty_r+0x1a>
 8018f9c:	682b      	ldr	r3, [r5, #0]
 8018f9e:	b103      	cbz	r3, 8018fa2 <_isatty_r+0x1a>
 8018fa0:	6023      	str	r3, [r4, #0]
 8018fa2:	bd38      	pop	{r3, r4, r5, pc}
 8018fa4:	24024eb4 	.word	0x24024eb4

08018fa8 <_init>:
 8018fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018faa:	bf00      	nop
 8018fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fae:	bc08      	pop	{r3}
 8018fb0:	469e      	mov	lr, r3
 8018fb2:	4770      	bx	lr

08018fb4 <_fini>:
 8018fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fb6:	bf00      	nop
 8018fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fba:	bc08      	pop	{r3}
 8018fbc:	469e      	mov	lr, r3
 8018fbe:	4770      	bx	lr
